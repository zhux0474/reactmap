
Reactmap:
src folder:
- components folder:
    1. Smoker.js
        const Smoker:connect to SmokerMap.js
    3. context.js

    use: createContext function from React to create a new Context. 
    A Context has a Provider component and a Consumer component.
      Context.Provider:
        The Provider component accepts a value prop to be passed to consuming components that are descendants of this Provider. 
        One Provider can be connected to many consumers. 
        Providers can be nested to override values deeper within the tree.
        All consumers that are descendants of a Provider will re-render whenever the Providerâ€™s value prop changes. 
       
       The Provider is a component that sets the data and then wraps some child components. 
       Any wrapped child components will have access to data from the Provider with the useContext Hook.

      Context.Consumer:
        Requires a function as a child. 
        The function receives the current context value and returns a React node. 
        The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree.
        If there is no Provider for this context above, the value argument will be equal to the defaultValue that was passed to createContext().


    2. SmokerMap.js
        To define a React component class, need to extend React.Component
        subclass render()

        constructor: 
            is called before component is mounted
            handle inital setup of defaulting properties of the object map
            access DOM element in a component and returns a mutable ref object 
            assign inital state here (this.state =...)
            only place where you should assign this.state directly
            in all other method, need to use this.setState()

        componentDidMount():
            is invoked right after a comonent is mounted(inserted into the tree).
            (a place to instantiate network request if need to load data from a remote endpoint)
            if call setState() immediately here, will trigger an extrac rendering (render()will be called twice in this case too)

                -basemap: osm
                -vector style (style that could be added to vector layer)
                -total smoker(vector source,will be added to vector layer): geojson layer from GeoServer
                -vector layer   1 source: totalsmoker,
                                2 style: vectorstyle
                -lungdata: wms tile layer from GeoServer

                



        componentDidUpdate()
            is invoked right after updating occurs
            (also a good place to do network reuqests as long as compare the current props to previous prop,network request may not be necessary if the props have not changed)
            example:
            componentDidUpdate(prevProps) {
            // Typical usage (don't forget to compare props):
                if (this.props.userID !== prevProps.userID) {
             this.fetchData(this.props.userID);
                }
                }
        
        render(): 
            required in a class component, return the same results each time, does not modify componenet state, does not directly interact with browser
            keep it pure

    3. SmokerMap.css
    4. App.css
    5. App.js
        function App: connect to Smoker.js



