/**
 * Helper class for the OpenLayers map.
 *
 * @class
 */
export class MapUtil {
    /**
     * Returns all interactions by the given name of a map.
     *
     * @param {ol.Map} map The map to use for lookup.
     * @param {string} name The name of the interaction to look for.
     * @return {ol.interaction[]} The list of result interactions.
     */
    static getInteractionsByName(map: ol.Map, name: string): ol.interaction[];
    /**
     * Returns all interactions of the given class of the passed map.
     *
     * @param {ol.Map} map The map to use for lookup.
     * @param {ol.interaction} clazz The class of the interaction to look for.
     * @return {ol.interaction[]} The list of result interactions.
     */
    static getInteractionsByClass(map: ol.Map, clazz: ol.interaction): ol.interaction[];
    /**
     * Calculates the appropriate map resolution for a given scale in the given
     * units.
     *
     * See: https://gis.stackexchange.com/questions/158435/
     * how-to-get-current-scale-in-openlayers-3
     *
     * @method
     * @param {number} scale The input scale to calculate the appropriate
     *                       resolution for.
     * @param {string} units The units to use for calculation (m or degrees).
     * @return {number} The calculated resolution.
     */
    static getResolutionForScale(scale: number, units: string): number;
    /**
     * Returns the appropriate scale for the given resolution and units.
     *
     * @method
     * @param {number} resolution The resolutions to calculate the scale for.
     * @param {string} units The units the resolution is based on, typically
     *                       either 'm' or 'degrees'.
     * @return {number} The appropriate scale.
     */
    static getScaleForResolution(resolution: number, units: string): number;
    /**
     * Returns all layers of a collection. Even the hidden ones.
     *
     * @param {ol.Map|ol.layer.Group} collection The collection to get the layers
     *                                           from. This can be an ol.layer.Group
     *                                           or an ol.Map.
     * @param {Function} [filter] A filter function that receives the layer.
     *                            If it returns true it will be included in the
     *                            returned layers.
     * @return {Array} An array of all Layers.
     */
    static getAllLayers(collection: ol.Map | ol.layer.Group, filter?: Function): any[];
    /**
     * Get a layer by its key (ol_uid).
     *
     * @param {ol.Map} map The map to use for lookup.
     * @param {string} ol_uid The ol_uid of a layer.
     * @return {ol.layer.Layer} The layer.
     */
    static getLayerByOlUid: (map: ol.Map, ol_uid: string) => ol.layer.Layer;
    /**
     * Returns the layer from the provided map by the given name.
     *
     * @param {ol.Map} map The map to use for lookup.
     * @param {string} name The name to get the layer by.
     * @return {ol.Layer} The result layer or undefined if the layer could not
     *                    be found.
     */
    static getLayerByName(map: ol.Map, name: string): ol.Layer;
    /**
     * Returns the layer from the provided map by the given name
     * (parameter LAYERS).
     *
     * @param {ol.Map} map The map to use for lookup.
     * @param {string} name The name to get the layer by.
     * @return {ol.Layer} The result layer or undefined if the layer could not
     *                    be found.
     */
    static getLayerByNameParam(map: ol.Map, name: string): ol.Layer;
    /**
     * Returns the layer from the provided map by the given feature.
     *
     * @param {ol.Map} map The map to use for lookup.
     * @param {ol.Feature} feature The feature to get the layer by.
     * @param {Array} namespaces list of supported GeoServer namespaces.
     * @return {ol.Layer} The result layer or undefined if the layer could not
     *                    be found.
     */
    static getLayerByFeature(map: ol.Map, feature: ol.Feature, namespaces: any[]): ol.Layer;
    /**
     * Returns all layers of the specified layer group recursively.
     *
     * @param {ol.Map} map The map to use for lookup.
     * @param {ol.Layer.Group} layerGroup The group to flatten.
     * @return {Array} The (flattened) layers from the group
     */
    static getLayersByGroup(map: ol.Map, layerGroup: ol.Layer.Group): any[];
    /**
     * Returns the list of layers matching the given pair of properties.
     *
     * @param {ol.Map} map The map to use for lookup.
     * @param {string} key The property key.
     * @param {Object} value The property value.
     *
     * @return {ol.layer.Base[]} The array of matching layers.
     */
    static getLayersByProperty(map: ol.Map, key: string, value: any): ol.layer.Base[];
    /**
     * Get information about the LayerPosition in the tree.
     *
     * @param {ol.layer.Layer} layer The layer to get the information.
     * @param {ol.layer.Group|ol.Map} [groupLayerOrMap] The groupLayer or map
     *                                                  containing the layer.
     * @return {Object} An object with these keys:
     *    {ol.layer.Group} groupLayer The groupLayer containing the layer.
     *    {Integer} position The position of the layer in the collection.
     */
    static getLayerPositionInfo(layer: ol.layer.Layer, groupLayerOrMap?: ol.layer.Group | ol.Map): any;
    /**
     * Get the getlegendGraphic url of a layer. Designed for geoserver.
     * Currently supported Sources:
     *  - ol.source.TileWms (with url configured)
     *  - ol.source.ImageWms (with url configured)
     *
     * @param {ol.layer.Layer} layer The layer that you want to have a legendUrlfor.
     * @return {string|undefined} The getLegendGraphicUrl.
     */
    static getLegendGraphicUrl(layer: ol.layer.Layer, extraParams: any): string | undefined;
    /**
     * Checks whether the resolution of the passed map's view lies inside of the
     * min- and max-resolution of the passed layer, e.g. whether the layer should
     * be displayed at the current map view resolution.
     *
     * @param {ol.layer.Layer} layer The layer to check.
     * @param {ol.Map} map The map to get the view resolution for comparison
     *     from.
     * @return {boolean} Whether the resolution of the passed map's view lies
     *     inside of the min- and max-resolution of the passed layer, e.g. whether
     *     the layer should be displayed at the current map view resolution. Will
     *     be `false` when no `layer` or no `map` is passed or if the view of the
     *     map is falsy or does not have a resolution (yet).
     */
    static layerInResolutionRange(layer: ol.layer.Layer, map: ol.Map): boolean;
    /**
     * Rounds a scalenumber in dependency to its size.
     *
     * @param  {number} scale The exact scale
     * @return {number} The roundedScale
     */
    static roundScale(scale: number): number;
    /**
     * Returns the appropriate zoom level for the given scale and units.
  
     * @method
     * @param {number} scale Map scale to get the zoom for.
     * @param {Array} resolutions Resolutions array.
     * @param {string} units The units the resolutions are based on, typically
     *                       either 'm' or 'degrees'. Default is 'm'.
     *
     * @return {number} Determined zoom level for the given scale.
     */
    static getZoomForScale(scale: number, resolutions: any[], units?: string): number;
    /**
     * Fits the map's view to the extent of the passed features.
     *
     * @param {ol.Map} map The map to get the view from.
     * @param {ol.Feature[]} features The features to zoom to.
     */
    static zoomToFeatures(map: ol.Map, features: ol.Feature[]): void;
    /**
     * Checks if the given layer is visible for the given resolution.
     *
     * @param {ol.layer.Base} layer The layer.
     * @param {number} resolution The resolution of the map
     */
    static isInScaleRange(layer: ol.layer.Base, resolution: number): boolean;
}
export default MapUtil;
