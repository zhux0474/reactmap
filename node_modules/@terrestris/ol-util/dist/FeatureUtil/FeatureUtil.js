"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _isString = _interopRequireDefault(require("lodash/isString.js"));

var _isArray = _interopRequireDefault(require("lodash/isArray"));

var _StringUtil = _interopRequireDefault(require("@terrestris/base-util/dist/StringUtil/StringUtil"));

/**
 * Helper class for working with OpenLayers features.
 *
 * @class FeatureUtil
 */
var FeatureUtil = /*#__PURE__*/function () {
  function FeatureUtil() {
    (0, _classCallCheck2["default"])(this, FeatureUtil);
  }

  (0, _createClass2["default"])(FeatureUtil, null, [{
    key: "getFeatureTypeName",
    value:
    /**
     * Returns the featureType name out of a given feature. It assumes that
     * the feature has an ID in the following structure FEATURETYPE.FEATUREID.
     *
     * @param {ol.Feature} feature The feature to obtain the featureType
     *                             name from.
     * @return {string} The (unqualified) name of the featureType or undefined if
     *                  the name could not be picked.
     */
    function getFeatureTypeName(feature) {
      var featureId = feature.getId();
      var featureIdParts = featureId ? featureId.split('.') : featureId;
      return (0, _isArray["default"])(featureIdParts) ? featureIdParts[0] : undefined;
    }
    /**
     * Extracts the featureType name from given GetFeatureInfo URL.
     * This method is mostly useful for raster layers which features could have
     * no ID set.
     *
     * @param {string} url GetFeatureInfo URL possibly containing featureType name.
     * @param {boolean} qualified Whether the qualified featureType name should be
     *   returned or not. Default is true.
     *
     * @return {string} Obtained featureType name as string.
     */

  }, {
    key: "getFeatureTypeNameFromGetFeatureInfoUrl",
    value: function getFeatureTypeNameFromGetFeatureInfoUrl(url) {
      var qualified = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var regex = /query_layers=(.*?)(&|$)/i;
      var match = url.match(regex);
      var featureTypeName;

      if (match && match[1]) {
        featureTypeName = decodeURIComponent(match[1]);

        if (!qualified && featureTypeName.indexOf(':') > 0) {
          featureTypeName = featureTypeName.split(':')[1];
        }
      }

      return featureTypeName;
    }
    /**
     * Resolves the given template string with the given feature attributes, e.g.
     * the template "Size of area is {{AREA_SIZE}} km²" would be to resolved
     * to "Size of area is 1909 km²" (assuming the feature's attribute AREA_SIZE
     * really exists).
     *
     * @param {ol.Feature} feature The feature to get the attributes from.
     * @param {string} template The template string to resolve.
     * @param {string} [noValueFoundText] The text to apply, if the templated value
     *   could not be found, default is to 'n.v.'.
     * @param {Function} [valueAdjust] A method that will be called with each
     *   key/value match, we'll use what this function returns for the actual
     *   replacement. Optional, defaults to a function which will return the raw
     *   value it received. This can be used for last minute adjustments before
     *   replacing happens, e.g. to filter out falsy values or to do number
     *   formatting and such.
     * @param {boolean} leaveAsUrl If set to true, template won't be wrapped into
     *   <a>-tag and will be returned as URL. Default is false.
     * @return {string} The resolved template string.
     */

  }, {
    key: "resolveAttributeTemplate",
    value: function resolveAttributeTemplate(feature, template) {
      var noValueFoundText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'n.v.';
      var valueAdjust = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (key, val) {
        return val;
      };
      var leaveAsUrl = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var attributeTemplatePrefix = '\\{\\{';
      var attributeTemplateSuffix = '\\}\\}';
      var resolved = ''; // Find any character between two braces (including the braces in the result)

      var regExp = new RegExp(attributeTemplatePrefix + '(.*?)' + attributeTemplateSuffix, 'g');
      var regExpRes = (0, _isString["default"])(template) ? template.match(regExp) : null; // If we have a regex result, it means we found a placeholder in the
      // template and have to replace the placeholder with its appropriate value.

      if (regExpRes) {
        // Iterate over all regex match results and find the proper attribute
        // for the given placeholder, finally set the desired value to the hover.
        // field text
        regExpRes.forEach(function (res) {
          // We count every non matching candidate. If this count is equal to
          // the objects length, we assume that there is no match at all and
          // set the output value to the value of "noValueFoundText".
          var noMatchCnt = 0;

          for (var _i = 0, _Object$entries = Object.entries(feature.getProperties()); _i < _Object$entries.length; _i++) {
            var _Object$entries$_i = (0, _slicedToArray2["default"])(_Object$entries[_i], 2),
                key = _Object$entries$_i[0],
                value = _Object$entries$_i[1];

            // Remove the suffixes and find the matching attribute column.
            var attributeName = res.slice(2, res.length - 2);

            if (attributeName.toLowerCase() === key.toLowerCase()) {
              template = template.replace(res, valueAdjust(key, value));
              break;
            } else {
              noMatchCnt++;
            }
          } // No key match found for this feature (e.g. if key not
          // present or value is null).


          if (noMatchCnt === Object.keys(feature.getProperties()).length) {
            template = template.replace(res, noValueFoundText);
          }
        });
      }

      resolved = template; // Fallback if no feature attribute is found.

      if (!resolved) {
        resolved = feature.getId();
      }

      if (!leaveAsUrl) {
        // Replace any HTTP url with an <a> element.
        resolved = _StringUtil["default"].urlify(resolved); // Replace all newline breaks with a html <br> tag.

        resolved = resolved.replace(/\n/g, '<br>');
      }

      return resolved;
    }
  }]);
  return FeatureUtil;
}();

var _default = FeatureUtil;
exports["default"] = _default;