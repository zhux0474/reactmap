export default GeometryUtil;
/**
 * Helper class for the geospatial analysis. Makes use of
 * [Turf.js](http://turfjs.org/).
 *
 * @class GeometryUtil
 */
declare class GeometryUtil {
    /**
     * The prefix used to detect multi geometries.
     * @ignore
     */
    static MULTI_GEOM_PREFIX: string;
    /**
     * Splits an ol.feature with/or ol.geom.Polygon by an ol.feature with/or ol.geom.LineString
     * into an array of instances of ol.feature with/or ol.geom.Polygon.
     * If the target polygon (first param) is of type ol.Feature it will return an
     * array with ol.Feature. If the target polygon (first param) is of type
     * ol.geom.Geometry it will return an array with ol.geom.Geometry.
     *
     * @param {ol.Feature | ol.geom.Polygon} polygon The polygon geometry to split.
     * @param {ol.Feature | ol.geom.LineString} line The line geometry to split the polygon
     *  geometry with.
     * @param {ol.ProjectionLike} projection The EPSG code of the input features.
     *  Default is to EPSG:3857.
     * @returns {ol.Feature[] | ol.geom.Polygon[]} An array of instances of ol.feature
     *  with/or ol.geom.Polygon
     */
    static splitByLine(polygon: ol.Feature | ol.geom.Polygon, line: ol.Feature | ol.geom.LineString, projection?: ol.ProjectionLike): ol.Feature[] | ol.geom.Polygon[];
    /**
     * Adds a buffer to a given geometry.
     *
     * If the target is of type ol.Feature it will return an ol.Feature.
     * If the target is of type ol.geom.Geometry it will return ol.geom.Geometry.
     *
     * @param {ol.geom.Geometry | ol.Feature} geometry The geometry.
     * @param {number} radius The buffer to add in meters.
     * @param {string} projection The projection of the input geometry as EPSG code.
     *  Default is to EPSG:3857.
     *
     * @returns {ol.geom.Geometry | ol.Feature} The geometry or feature with the added buffer.
     */
    static addBuffer(geometry: ol.geom.Geometry | ol.Feature, radius?: number, projection?: string): ol.geom.Geometry | ol.Feature;
    /**
     * Merges multiple geometries into one MultiGeometry.
     *
     * @param {ol.geom.Geometry[]} geometries An array of ol.geom.geometries;
     * @returns {ol.geom.MultiPoint|ol.geom.MultiPolygon|ol.geom.MultiLineString} A Multigeometry.
     */
    static mergeGeometries(geometries: ol.geom.Geometry[]): ol.geom.MultiPoint | ol.geom.MultiPolygon | ol.geom.MultiLineString;
    /**
     * Splits an array of geometries (and multi geometries) or a single MultiGeom
     * into an array of single geometries.
     *
     * Attention: ol.geom.Circle and ol.geom.LinearRing are not supported.
     *
     * @param {ol.geom.SimpleGeometry|ol.geom.SimpleGeometry[]} geometries An (array of) ol.geom.geometries;
     * @returns {ol.geom.Point[]|ol.geom.Polygon[]|ol.geom.LineString[]} An array of geometries.
     */
    static separateGeometries(geometries: ol.geom.SimpleGeometry | ol.geom.SimpleGeometry[]): ol.geom.Point[] | ol.geom.Polygon[] | ol.geom.LineString[];
    /**
     * Takes two or more polygons and returns a combined (Multi-)polygon.
     *
     * @param {ol.geom.Geometry[] | ol.Feature[]} polygons An array of ol.Feature
     *  or ol.geom.Geometry instances of type (Multi-)polygon.
     * @param {string} projection The projection of the input polygons as EPSG code.
     *  Default is to EPSG:3857.
     * @returns {ol.geom.Geometry | ol.Feature} A Feature or Geometry with the
     * combined area of the (Multi-)polygons.
     */
    static union(polygons: ol.geom.Geometry[] | ol.Feature[], projection?: string): ol.geom.Geometry | ol.Feature;
    /**
     * Finds the difference between two polygons by clipping the second polygon from the first.
     *
     * @param {ol.geom.Geometry | ol.Feature} polygon1 An ol.geom.Geometry or ol.Feature
     * @param {ol.geom.Geometry | ol.Feature} polygon2 An ol.geom.Geometry or ol.Feature
     * @param {string} projection The projection of the input polygons as EPSG code.
     *  Default is to EPSG:3857.
     *
     * @returns {ol.geom.Geometry | ol.Feature} A Feature or Geometry with the area
     *  of polygon1 excluding the area of polygon2. The type of the first polygon
     *  (geometry or feature) determines the return type.
     */
    static difference(polygon1: ol.geom.Geometry | ol.Feature, polygon2: ol.geom.Geometry | ol.Feature, projection?: string): ol.geom.Geometry | ol.Feature;
    /**
     * Takes two polygons and finds their intersection.
     *
     * If the polygons are of type ol.Feature it will return an ol.Feature.
     * If the polygons are of type ol.geom.Geometry it will return an ol.geom.Geometry.
     *
     * @param {ol.geom.Geometry | ol.Feature} polygon1 An ol.geom.Geometry or ol.Feature
     * @param {ol.geom.Geometry | ol.Feature} polygon2 An ol.geom.Geometry or ol.Feature
     * @param {string} projection The projection of the input polygons as EPSG code.
     *  Default is to EPSG:3857.
     *
     * @returns {ol.geom.Geometry | ol.Feature} A Feature or Geometry with the
     * shared area of the two polygons or null if the polygons don't intersect.
     */
    static intersection(polygon1: ol.geom.Geometry | ol.Feature, polygon2: ol.geom.Geometry | ol.Feature, projection?: string): ol.geom.Geometry | ol.Feature;
}
