/**
 * Default proj4 CRS definitions.
 */
export const defaultProj4CrsDefinitions: {
    'EPSG:25832': string;
    'EPSG:31466': string;
    'EPSG:31467': string;
};
/**
 * Default mappings for CRS identifiers (e.g. "urn:ogc:def:crs:EPSG::25832").
 */
export const defaultProj4CrsMappings: {
    'urn:ogc:def:crs:EPSG::3857': string;
    'urn:ogc:def:crs:EPSG::25832': string;
    'urn:ogc:def:crs:EPSG::31466': string;
    'urn:ogc:def:crs:EPSG::31467': string;
};
/**
 * Helper class for projection handling. Makes use of
 * [Proj4js](http://proj4js.org/).
 *
 * @class ProjectionUtil
 */
export class ProjectionUtil {
    /**
     * Registers custom CRS definitions to the application.
     *
     * @param {Object} customCrsDefs The custom `proj4` definition strings
     *   which should be registered additionally to default available CRS (s.
     *   `defaultProj4CrsDefinitions` above) as well.
     *   Further CRS definitions in proj4 format can be checked under
     *   http://epsg.io (e.g. http://epsg.io/3426.proj4).
     * @param {boolean} registerDefaults Whether the default CRS should be
     *   registered or not. Default is true.
     */
    static initProj4Definitions(customCrsDefs: any, registerDefaults?: boolean): void;
    /**
     * Registers custom CRS mappings to allow automatic CRS detection. Sometimes
     * FeatureCollections returned by the GeoServer may be associated with
     * CRS identifiers (e.g. "urn:ogc:def:crs:EPSG::25832") that aren't
     * supported by `proj4` and `OpenLayers` per default. Add appropriate
     * mappings to allow automatic CRS detection by `OpenLayers` here.
     *
     * @param {Object} customCrsMappings The custom CRS mappings which will be
     *   added additionally to the by default available (s. `defaultProj4CrsMappings`
     *   above).
     * @param {boolean} useDefaultMappings Whether the default CRS should be mapped
     *   as well or not. Default is true.
     */
    static initProj4DefinitionMappings(customCrsMappings: any, useDefaultMappings?: boolean): void;
    /**
     * Converts geographic coordinates given in DDD format like `DD.DDDD째` to
     * the degree, minutes, decimal seconds (DMS) format like
     * `DDD째 MM' SS.SSS"`.
     *
     * @param {number} value Value to be converted.
     *
     * @return {string} Converted value.
     */
    static toDms(value: number): string;
    /**
     * Converts geographic coordinates given in DDD format like `DD.DDDD째` to
     * the degree, decimal minutes (DMM) format like `DDD째 MM.MMMM`.
     *
     * @param {number} value Value to be converted.
     *
     * @return {string} Converted value.
     */
    static toDmm(value: number): string;
    /**
     * Adds leading zero to all values less than 10 and returns this new
     * zerofilled value as String. Values which are greater than 10 are not
     * affected.
     *
     * @param {number} value Value to be zerofilled.
     *
     * @return {string} converted value with leading zero if necessary.
     */
    static zerofill(value: number): string;
}
export default ProjectionUtil;
