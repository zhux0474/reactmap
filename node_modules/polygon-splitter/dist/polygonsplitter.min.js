!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).polygonsplitter=e()}(this,(function(){"use strict";function t(t){if(!t)throw new Error("geojson is required");switch(t.type){case"Feature":return e(t);case"FeatureCollection":return function(t){var n={type:"FeatureCollection"};return Object.keys(t).forEach((function(e){switch(e){case"type":case"features":return;default:n[e]=t[e]}})),n.features=t.features.map((function(t){return e(t)})),n}(t);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return r(t);default:throw new Error("unknown GeoJSON type")}}function e(t){var e={type:"Feature"};return Object.keys(t).forEach((function(n){switch(n){case"type":case"properties":case"geometry":return;default:e[n]=t[n]}})),e.properties=n(t.properties),e.geometry=r(t.geometry),e}function n(t){var e={};return t?(Object.keys(t).forEach((function(r){var i=t[r];"object"==typeof i?null===i?e[r]=null:Array.isArray(i)?e[r]=i.map((function(t){return t})):e[r]=n(i):e[r]=i})),e):e}function r(t){var e={type:t.type};return t.bbox&&(e.bbox=t.bbox),"GeometryCollection"===t.type?(e.geometries=t.geometries.map((function(t){return r(t)})),e):(e.coordinates=i(t.coordinates),e)}function i(t){var e=t;return"object"!=typeof e[0]?e.slice():e.map((function(t){return i(t)}))}function o(t){if(Array.isArray(t))return t;if("Feature"===t.type){if(null!==t.geometry)return t.geometry.coordinates}else if(t.coordinates)return t.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function s(t){for(var e,n,r=o(t),i=0,s=1;s<r.length;)e=n||r[0],i+=((n=r[s])[0]-e[0])*(n[1]+e[1]),s++;return i>0}function u(t,e){if("Feature"===t.type)e(t,0);else if("FeatureCollection"===t.type)for(var n=0;n<t.features.length&&!1!==e(t.features[n],n);n++);}function a(t,e){var n,r,i,o,s,u,a,c,p,l,f=0,h="FeatureCollection"===t.type,g="Feature"===t.type,v=h?t.features.length:1;for(n=0;n<v;n++){for(u=h?t.features[n].geometry:g?t.geometry:t,c=h?t.features[n].properties:g?t.properties:{},p=h?t.features[n].bbox:g?t.bbox:void 0,l=h?t.features[n].id:g?t.id:void 0,s=(a=!!u&&"GeometryCollection"===u.type)?u.geometries.length:1,i=0;i<s;i++)if(null!==(o=a?u.geometries[i]:u))switch(o.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===e(o,f,c,p,l))return!1;break;case"GeometryCollection":for(r=0;r<o.geometries.length;r++)if(!1===e(o.geometries[r],f,c,p,l))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===e(null,f,c,p,l))return!1;f++}}function c(e,n){if(!(r=n=n||{})||r.constructor!==Object)throw new Error("options is invalid");var r,i=n.reverse||!1,o=n.mutate||!1;if(!e)throw new Error("<geojson> is required");if("boolean"!=typeof i)throw new Error("<reverse> must be a boolean");if("boolean"!=typeof o)throw new Error("<mutate> must be a boolean");!1===o&&(e=t(e));var s=[];switch(e.type){case"GeometryCollection":return a(e,(function(t){p(t,i)})),e;case"FeatureCollection":return u(e,(function(t){u(p(t,i),(function(t){s.push(t)}))})),function(t,e){void 0===e&&(e={});var n={type:"FeatureCollection"};return e.id&&(n.id=e.id),e.bbox&&(n.bbox=e.bbox),n.features=t,n}(s)}return p(e,i)}function p(t,e){switch("Feature"===t.type?t.geometry.type:t.type){case"GeometryCollection":return a(t,(function(t){p(t,e)})),t;case"LineString":return l(o(t),e),t;case"Polygon":return f(o(t),e),t;case"MultiLineString":return o(t).forEach((function(t){l(t,e)})),t;case"MultiPolygon":return o(t).forEach((function(t){f(t,e)})),t;case"Point":case"MultiPoint":return t}}function l(t,e){s(t)===e&&t.reverse()}function f(t,e){s(t[0])!==e&&t[0].reverse();for(var n=1;n<t.length;n++)s(t[n])===e&&t[n].reverse()}var h=function(t,e,n,r){this.p1=t,this.p2=e,this.edgeType=n,this.originalIndex=r,this.interiorRing=!1,this.minX=Math.min(t.p[0],e.p[0]),this.minY=Math.min(t.p[1],e.p[1]),this.maxX=Math.max(t.p[0],e.p[0]),this.maxY=Math.max(t.p[1],e.p[1]),this.intersectionPoints=[],this.nextEdge=null},g=function(t){this.p=t};function v(t,e){return!(t.maxX<e[0])&&(!(t.minX>e[2])&&(!(t.maxY<e[1])&&!(t.minY>e[3])))}var y=function(t,e,n,r){this.p=t,this.polylineEdge=e,this.polygonEdge=n,this.isHeadingIn=r,this.distanceFromPolylineEdgeStart=m(this.polylineEdge.p1.p,this.p),this.distanceFromPolygonEdgeStart=m(this.polygonEdge.p1.p,this.p),this.polygonEdge.intersectionPoints.push(this),this.polylineEdge.intersectionPoints.push(this),this.visitCount=0};function m(t,e){var n=e[0]-t[0],r=e[1]-t[1];return n*=n,r*=r,Math.sqrt(n+r)}y.prototype.incrementVisitCount=function(){this.visitCount=this.visitCount+1};var d=134217729;function P(t,e,n,r,i){var o,s,u,a,c=e[0],p=r[0],l=0,f=0;p>c==p>-c?(o=c,c=e[++l]):(o=p,p=r[++f]);var h=0;if(l<t&&f<n)for(p>c==p>-c?(u=o-((s=c+o)-c),c=e[++l]):(u=o-((s=p+o)-p),p=r[++f]),o=s,0!==u&&(i[h++]=u);l<t&&f<n;)p>c==p>-c?(u=o-((s=o+c)-(a=s-o))+(c-a),c=e[++l]):(u=o-((s=o+p)-(a=s-o))+(p-a),p=r[++f]),o=s,0!==u&&(i[h++]=u);for(;l<t;)u=o-((s=o+c)-(a=s-o))+(c-a),c=e[++l],o=s,0!==u&&(i[h++]=u);for(;f<n;)u=o-((s=o+p)-(a=s-o))+(p-a),p=r[++f],o=s,0!==u&&(i[h++]=u);return 0===o&&0!==h||(i[h++]=o),h}function b(t){return new Float64Array(t)}var E=b(4),x=b(8),C=b(12),w=b(16),M=b(4);function F(t,e,n,r,i,o){var s=(e-o)*(n-i),u=(t-i)*(r-o),a=s-u;if(0===s||0===u||s>0!=u>0)return a;var c=Math.abs(s+u);return Math.abs(a)>=33306690738754716e-32*c?a:-function(t,e,n,r,i,o,s){var u,a,c,p,l,f,h,g,v,y,m,b,F,S,k,V,j,G,X=t-i,Y=n-i,L=e-o,O=r-o;l=(k=(g=X-(h=(f=d*X)-(f-X)))*(y=O-(v=(f=d*O)-(f-O)))-((S=X*O)-h*v-g*v-h*y))-(m=k-(j=(g=L-(h=(f=d*L)-(f-L)))*(y=Y-(v=(f=d*Y)-(f-Y)))-((V=L*Y)-h*v-g*v-h*y))),E[0]=k-(m+l)+(l-j),l=(F=S-((b=S+m)-(l=b-S))+(m-l))-(m=F-V),E[1]=F-(m+l)+(l-V),l=(G=b+m)-b,E[2]=b-(G-l)+(m-l),E[3]=G;var A=function(t,e){for(var n=e[0],r=1;r<t;r++)n+=e[r];return n}(4,E),I=22204460492503146e-32*s;if(A>=I||-A>=I)return A;if(u=t-(X+(l=t-X))+(l-i),c=n-(Y+(l=n-Y))+(l-i),a=e-(L+(l=e-L))+(l-o),p=r-(O+(l=r-O))+(l-o),0===u&&0===a&&0===c&&0===p)return A;if(I=11093356479670487e-47*s+33306690738754706e-32*Math.abs(A),(A+=X*p+O*u-(L*c+Y*a))>=I||-A>=I)return A;l=(k=(g=u-(h=(f=d*u)-(f-u)))*(y=O-(v=(f=d*O)-(f-O)))-((S=u*O)-h*v-g*v-h*y))-(m=k-(j=(g=a-(h=(f=d*a)-(f-a)))*(y=Y-(v=(f=d*Y)-(f-Y)))-((V=a*Y)-h*v-g*v-h*y))),M[0]=k-(m+l)+(l-j),l=(F=S-((b=S+m)-(l=b-S))+(m-l))-(m=F-V),M[1]=F-(m+l)+(l-V),l=(G=b+m)-b,M[2]=b-(G-l)+(m-l),M[3]=G;var T=P(4,E,4,M,x);l=(k=(g=X-(h=(f=d*X)-(f-X)))*(y=p-(v=(f=d*p)-(f-p)))-((S=X*p)-h*v-g*v-h*y))-(m=k-(j=(g=L-(h=(f=d*L)-(f-L)))*(y=c-(v=(f=d*c)-(f-c)))-((V=L*c)-h*v-g*v-h*y))),M[0]=k-(m+l)+(l-j),l=(F=S-((b=S+m)-(l=b-S))+(m-l))-(m=F-V),M[1]=F-(m+l)+(l-V),l=(G=b+m)-b,M[2]=b-(G-l)+(m-l),M[3]=G;var q=P(T,x,4,M,C);l=(k=(g=u-(h=(f=d*u)-(f-u)))*(y=p-(v=(f=d*p)-(f-p)))-((S=u*p)-h*v-g*v-h*y))-(m=k-(j=(g=a-(h=(f=d*a)-(f-a)))*(y=c-(v=(f=d*c)-(f-c)))-((V=a*c)-h*v-g*v-h*y))),M[0]=k-(m+l)+(l-j),l=(F=S-((b=S+m)-(l=b-S))+(m-l))-(m=F-V),M[1]=F-(m+l)+(l-V),l=(G=b+m)-b,M[2]=b-(G-l)+(m-l),M[3]=G;var B=P(q,C,4,M,w);return w[B-1]}(t,e,n,r,i,o,c)}function S(t,e){return t[0]*e[1]-t[1]*e[0]}function k(t,e){return t[0]*e[0]+t[1]*e[1]}function V(t,e,n){return[t[0]+e*n[0],t[1]+e*n[1]]}function j(t,e,n){var r=[t.p2.p[0]-t.p1.p[0],t.p2.p[1]-t.p1.p[1]],i=[e.p2.p[0]-e.p1.p[0],e.p2.p[1]-e.p1.p[1]],o=[e.p1.p[0]-t.p1.p[0],e.p1.p[1]-t.p1.p[1]],s=S(r,i),u=s*s,a=k(r,r);if(u>0){var c=S(o,i)/s;if(c<0||c>1)return null;var p=S(o,r)/s;return p<0||p>1?null:0===c||1===c?n?null:[V(t.p1.p,c,r)]:0===p||1===p?n?null:[V(e.p1.p,p,i)]:[V(t.p1.p,c,r)]}var l=k(o,o);if((u=(s=S(o,r))*s)>1e-9*a*l)return null;var f=k(r,o)/a,h=f+k(r,i)/a,g=Math.min(f,h),v=Math.max(f,h);return g<=1&&v>=0?1===g?n?null:[V(t.p1.p,g>0?g:0,r)]:0===v?n?null:[V(t.p1.p,v<1?v:1,r)]:n&&0===g&&1===v?null:[V(t.p1.p,g>0?g:0,r),V(t.p1.p,v<1?v:1,r)]:null}function G(t,e){var n=t.polygonEdge;if(n.intersectionPoints.length>1&&n.intersectionPoints[n.intersectionPoints.length-1]!==t){var r=X(t,n.intersectionPoints),i=n.intersectionPoints[r+1];return e.push(i.p),i.incrementVisitCount(),i}for(var o=!0;o;){if(e.push(n.p2.p),null===(n=n.nextEdge))return t;n.intersectionPoints.length>0&&(o=!1)}return n.intersectionPoints[0].incrementVisitCount(),e.push(n.intersectionPoints[0].p),n.intersectionPoints[0]}function X(t,e){for(var n=0;n<e.length;n++){if(e[n]===t)return n}return null}function Y(t,e){var n=t.polylineEdge;if(2===n.intersectionPoints.length){var r=n.intersectionPoints[n.intersectionPoints.length-1];if(r===t){var i=n.intersectionPoints[0];return e.push(i.p),i.incrementVisitCount(),i}return e.push(r.p),r.incrementVisitCount(),r}if(n.intersectionPoints.length>2&&n.intersectionPoints[0]!==t){var o=X(t,n.intersectionPoints),s=n.intersectionPoints[o-1];return e.push(s.p),s.incrementVisitCount(),s}for(var u=!0;u;){if(e.push(n.p1.p),void 0===(n=n.prevEdge).originalIndex)return t;n.intersectionPoints.length>0&&(u=!1)}if(void 0===n.originalIndex)return t;var a=n.intersectionPoints[n.intersectionPoints.length-1];return a.incrementVisitCount(),e.push(a.p),a}function L(t,e){var n=t.polylineEdge;if(2===n.intersectionPoints.length){var r=n.intersectionPoints[n.intersectionPoints.length-1];if(r===t){var i=n.intersectionPoints[0];return e.push(i.p),i.incrementVisitCount(),i}return e.push(r.p),r.incrementVisitCount(),r}if(n.intersectionPoints.length>2&&n.intersectionPoints[n.intersectionPoints.length-1]!==t){var o=X(t,n.intersectionPoints),s=n.intersectionPoints[o+1];return e.push(s.p),s.incrementVisitCount(),s}for(var u=!0;u;){if(e.push(n.p2.p),null===(n=n.nextEdge))return t;n.intersectionPoints.length>0&&(u=!1)}if(void 0===n)return t;var a=n.intersectionPoints[0];return a.incrementVisitCount(),e.push(a.p),a}return function(t,e){var n=[],r=[],i=[];if(function(t,e,n,r,i){for(var o="Feature"===e.type?e.geometry:e,s="LineString"===o.type?[o.coordinates]:o.coordinates,u=0,a=0;a<s.length;a++){for(var c=s[a].length-1,p=new g(s[a][0]),l=null,f={nextEdge:null},y=0;y<c;y++){l=new g(s[a][y+1]),p.nextPoint=l,l.prevPoint=p;var m=new h(p,l,"polyline",u);r.push(m),f.nextEdge=m,m.prevEdge=f,i[0]=Math.min(i[0],p.p[0]),i[1]=Math.min(i[1],p.p[1]),i[2]=Math.max(i[2],p.p[0]),i[3]=Math.max(i[3],p.p[1]),p=l,u+=1,f=m}i[0]=Math.min(i[0],s[a][c][0]),i[1]=Math.min(i[1],s[a][c][1]),i[2]=Math.max(i[2],s[a][c][0]),i[3]=Math.max(i[3],s[a][c][1])}for(var d="Feature"===t.type?t.geometry:t,P="Polygon"===d.type?[d.coordinates]:d.coordinates,b=P.length,E=0;E<b;E++)for(var x=P[E].length,C=0;C<x;C++){for(var w=P[E][C],M=w.length,F=new g(w[0]),S=F,k=void 0,V=null,j={nextEdge:null,prevEdge:null},G=null,X=1;X<M;X++)k=new g(w[X]),S.nextPoint=k,k.prevPoint=S,V=new h(S,k,"polygon",u),j.nextEdge=V,V.prevEdge=j,1===X&&(G=V),C>0&&(V.interiorRing=!0),V.intersectPolylineBbox=v(V,i),n.push(V),S=k,u+=1,j=V;V.nextEdge=G,G.prevEdge=V,k.nextPoint=F.nextPoint,F.prevPoint=k.prevPoint}}(c(t),e,r,i,[1/0,1/0,1/0,1/0]),function(t,e,n){var r,i,o,s=e.length,u=t.length;for(r=0;r<s;r++){var a=e[r];for(i=0;i<u;i++){var c=t[i];if(c.intersectPolylineBbox&&!(c.maxX<a.minX||c.minX>a.maxX||c.maxY<a.minY||c.minY>a.maxY)){var p=j(a,c);if(null!==p)for(o=0;o<p.length;o++){var l=F(c.p1.p[0],c.p1.p[1],c.p2.p[0],c.p2.p[1],a.p1.p[0],a.p1.p[1]),f=new y(p[o],a,c,l>0);n.push(f)}}}}e.forEach((function(t){t.intersectionPoints.sort((function(t,e){return t.distanceFromPolylineEdgeStart-e.distanceFromPolylineEdgeStart}))})),t.forEach((function(t){t.intersectionPoints.sort((function(t,e){return t.distanceFromPolygonEdgeStart-e.distanceFromPolygonEdgeStart}))}))}(r,i,n),0===n.length)return t;for(var o=[],s=null,u=0;u<i.length;u++){var a=i[u];if(a.intersectionPoints){s=a.intersectionPoints[0];break}}for(var p=s,l={visitCount:1};s!==l;){if(l.visitCount>=2){for(var f=!1,m=0;m<n.length;m++){var d=n[m];if(d.visitCount<2){p=d,f=!0;break}}if(!f)break}p.visitCount=p.visitCount+1;var P=[];o.push(P),P.push(p.p),p.visitCount=p.visitCount+1;var b=G(p,P);l=b;for(var E=b.isHeadingIn?L:Y;b!==p;)(b=E(b,P))!==p&&(b=G(b,P));if(l.visitCount>=2){for(var x=!1,C=0;C<n.length;C++){var w=n[C];if(w.visitCount<2){p=w,x=!0;break}}x&&(l=p)}p=l}return{type:"Feature",properties:{},geometry:{type:"MultiPolygon",coordinates:o.map((function(t){return[t]}))}}}}));
