[{"/Users/rongxuan/Desktop/git_react/src/index.js":"1","/Users/rongxuan/Desktop/git_react/src/App.js":"2","/Users/rongxuan/Desktop/git_react/src/reportWebVitals.js":"3","/Users/rongxuan/Desktop/git_react/src/components/Smoker.js":"4","/Users/rongxuan/Desktop/git_react/src/components/SmokerMap.js":"5","/Users/rongxuan/Desktop/git_react/src/tasks/LoadData.js":"6","/Users/rongxuan/Desktop/reactmap/reactmap/src/index.js":"7","/Users/rongxuan/Desktop/reactmap/reactmap/src/App.js":"8","/Users/rongxuan/Desktop/reactmap/reactmap/src/reportWebVitals.js":"9","/Users/rongxuan/Desktop/reactmap/reactmap/src/components/Smoker.js":"10","/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js":"11","/Users/rongxuan/Desktop/reactmap/reactmap/src/tasks/LoadData.js":"12","/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerLegend.js":"13","/Users/rongxuan/Desktop/reactmap/reactmap/src/components/metadata.js":"14","/Users/rongxuan/Desktop/reactmap/reactmap/src/components/dropdown.js":"15","/Users/rongxuan/Desktop/reactmap/reactmap/src/components/context.js":"16"},{"size":623,"mtime":1644279817896,"results":"17","hashOfConfig":"18"},{"size":187,"mtime":1644261534246,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1643663862952,"results":"20","hashOfConfig":"18"},{"size":803,"mtime":1644278284026,"results":"21","hashOfConfig":"18"},{"size":3164,"mtime":1645235140109,"results":"22","hashOfConfig":"18"},{"size":0,"mtime":1644263901718,"results":"23","hashOfConfig":"18"},{"size":804,"mtime":1649907413746,"results":"24","hashOfConfig":"25"},{"size":277,"mtime":1649731237836,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1643663862952,"results":"27","hashOfConfig":"25"},{"size":560,"mtime":1648668079119,"results":"28","hashOfConfig":"25"},{"size":8416,"mtime":1652398036558,"results":"29","hashOfConfig":"25"},{"size":0,"mtime":1644263901718,"results":"30","hashOfConfig":"25"},{"size":676,"mtime":1649100044155,"results":"31","hashOfConfig":"25"},{"size":1753,"mtime":1652306094570,"results":"32","hashOfConfig":"25"},{"size":2350,"mtime":1652398397479,"results":"33","hashOfConfig":"25"},{"size":1654,"mtime":1652398339262,"results":"34","hashOfConfig":"25"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"m37f37",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1edod3x",{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"65"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},"/Users/rongxuan/Desktop/git_react/src/index.js",[],[],"/Users/rongxuan/Desktop/git_react/src/App.js",[],[],["92","93"],"/Users/rongxuan/Desktop/git_react/src/reportWebVitals.js",[],[],"/Users/rongxuan/Desktop/git_react/src/components/Smoker.js",["94","95","96","97"],[],"import React, { useState, useEffect } from \"react\"\nimport SmokerMap from \"./SmokerMap\";\nimport LoadData from \"../tasks/LoadData\";\n\n\nconst Smoker = () =>{\n    const [counties, setCounties] = useState([]);\n    /*\n    const load = () =>{\n        console.log(\"load\");\n        const loadData = new LoadData();\n        loadData.load((counties)=> setCounties(counties));\n\n    };\n    \n    useEffect(load,[]);\n    \n    below is the code go inside the div below\n    {counties.length === 0 ?(\n                <Loading />):(\n                    <div>\n                        <SmokerMap counties = {counties} />\n                \n                        </div>\n                )}  */\n\n    return (\n        <div>\n            \n            <SmokerMap />\n            \n            </div>\n    );\n\n};\n\nexport default Smoker;","/Users/rongxuan/Desktop/git_react/src/components/SmokerMap.js",["98","99"],[],"import React from \"react\";\nimport { fromLonLat, get } from \"ol/proj\";\n//import \"./SmokerMap.css\";\nimport Map from \"ol/Map\";\n//import Feature from \"ol/Feature\";\nimport View from \"ol/View\";\n//import { Point, Style, Circle, Fill, Feature } from \"ol\";\nimport TileLayer from \"ol/layer/Tile\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport {Fill, Stroke, Style} from 'ol/style';\nimport cityboundary from \"./City_Boundary.geojson\";\n//import county from \"./County.json\";\n\n/*\nconst vectorlayer = \nnew VectorLayer({\n    source : new VectorSource({\n      url: './City_Boundary.geojson',\n      format: new GeoJSON(),\n      featureProjection:\"EPSG:4326\"\n    }),\n    style: new Style({\n      color: '#eeeeee',\n      ///style: getFill().setColor(color),\n\n    })\n})*/\n\n/*\nconst vectorlayer=new GeoJSON().readFeatures(geojsonObject, {\n  featureProjection:'EPSG:3857'\n});*/\n\nexport default class SmokerMap extends React.Component{\n  constructor(props){\n    super(props);\n    console.log(this.props);\n    this.mapRef=React.createRef();\n  }\n  componentDidMount(){\n    this.map=new Map({\n      target: \"mapContainer\",\n      \n      layers: [\n     \n\n        new TileLayer({\n          source: new OSM()\n        }),\n\n        new VectorLayer({\n          //background: '#1a2b39',\n          source : new VectorSource({\n            url: cityboundary,\n            format: new GeoJSON()\n            //crossOrigin: 'anonymous',\n            //featureProjection:\"EPSG:4326\"\n          }),\n          style: new Style({\n            fill: new Fill({\n              color: [255,0,0,255]}),//'#eeeeee' [255,0,0,255]\n            \n            ///style: getFill().setColor(color),\n      \n          }), \n          \n      })\n      \n      ],\n      \n      view :new View({\n        center:fromLonLat([-94.6859,46.7296]),\n        zoom: 7\n      })\n\n    });\n   \n  }\n  render() {\n    console.log(\"-> render App\");\n    return (\n      <div\n        id=\"mapContainer\"\n        ref={this.mapRef}\n        style={{ width: \"100%\", height: \"700px\" }}\n      >\n       \n      </div>\n    );\n  }\n\n\n}\n/*\nconst SmokerMap = ({ counties}) =>{\n    /*\n    const mapStyle={\n        fillColor: \"white\",\n        weight: 1,\n        color: \"black\",\n        fillOpacity: 1,\n    };\n    const onEachCountry = (country, layer) => {\n        layer.options.fillColor = country.properties.color;\n        const name = country.properties.ADMIN;\n        const confirmedText = country.properties.confirmedText;\n        layer.bindPopup(`${name} ${confirmedText}`);\n      };*/\n\n      /*return (\n        <Map style={{ height: \"90vh\" }} zoom={2} center={[-94.6859,46.7296]}>\n          <GeoJSON\n            style={mapStyle}\n            data={countries}\n            onEachFeature={onEachCountry}\n          />\n        </Map>\n      );\n\n      return (\n        <div className=\"map_div\">\n        <Map className=\"smoker_map\" view={{center:fromLonLat([-94.6859,46.7296]),zoom:6}}>\n          <Layers>\n            <layer.Tile></layer.Tile>\n            </Layers>\n    \n        </Map>\n        \n        </div>\n      );\n\n};\nexport default SmokerMap;\n*/\n","/Users/rongxuan/Desktop/git_react/src/tasks/LoadData.js",[],[],"/Users/rongxuan/Desktop/reactmap/reactmap/src/index.js",[],[],"/Users/rongxuan/Desktop/reactmap/reactmap/src/App.js",[],[],"/Users/rongxuan/Desktop/reactmap/reactmap/src/reportWebVitals.js",[],[],["100","101"],"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/Smoker.js",["102","103","104"],[],"import React, { useState, useEffect } from \"react\"\nimport SmokerMap from \"./SmokerMap\";\nimport \"./Smoker.css\";\nimport SmokerLegend from \"./SmokerLegend\";\nimport LoadData from \"../tasks/LoadData\";\nimport Dropdown from \"./dropdown.js\"\n\n\nconst Smoker = () =>{\n    return (\n        <div >\n            <div style={{height: '400px'}}>\n                <SmokerMap  />\n            </div>\n            <div style={{position: 'relative' }} >\n                <SmokerLegend/> \n                <Dropdown/> \n            </div>\n        </div>\n    );\n\n};\n\nexport default Smoker;","/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js",["105","106","107","108","109","110","111","112","113","114"],[],"import React, { useEffect } from \"react\";\nimport { fromLonLat, get } from \"ol/proj\";\n//import \"./SmokerMap.css\";\nimport Map from \"ol/Map\";\n//import Feature from \"ol/Feature\";\nimport View from \"ol/View\";\n//import { Point, Style, Circle, Fill, Feature } from \"ol\";\nimport TileLayer from \"ol/layer/Tile\";\n//import TileWMS from 'ol/source/TileWMS';\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport {Fill, Stroke, Style} from 'ol/style';\nimport {metadata} from './metadata.js';\nimport countyData from './countyline.geojson';\nimport Dropdown from './dropdown.js';\nimport Whitesmoker from '../data/whitesmoker.json';\nimport {Context} from \"./context\";\nimport { useContext } from \"react\";\nimport { set } from \"ol/transform\";\nimport Feature from 'ol/Feature';\n\n\n\nexport default class SmokerMap extends React.Component{\n\n  static contextType = Context;\n\n  context=this.context;\n\n  constructor(props){\n    super(props);\n    this.state = {\n\n      smokerSource : null,\n      smokerlayer: false,\n      stylefunction: null,\n      countyOutlineSource: null,\n      countyOutline: false,\n      countyReady: false,\n      smokerData: null\n\n  };\n   // console.log(this.props);\n  }\n\n  //global function（styledata） to style map\n  // will be called in componentDidMount and componentDidUpdate\n  //static geojsondata =metadata[1].geojson_url;\n\n  styledata(geoFeature){\n\n    let newStyle;\n    var metaValue = 1\n  \n    var value=geoFeature['values_']['brfss_smoker'];\n  \n\n    for (let i =0;i<metadata[metaValue]['break'].length;i++){\n      if(value>metadata[metaValue]['break'][i]){\n      newStyle = new Style({\n        fill: new Fill({\n          color: metadata[metaValue]['color'][i]\n        }),\n        stroke: new Stroke({\n          color:'black',\n          width:0.3\n        })\n      })\n    };\n  }\n    //console.log(newStyle)\n    //this iterates through every feature and assigns a style\n    //this.setState({ mapStyle: newStyle });\n    return newStyle;\n\n  }\n\n\n  styledata2(geoFeature){\n\n    let newStyle;\n    // console.log(geoFeature)\n    // Fixed this error\n    //var value=geoFeature.get('brfss_smoker');\n    var value=geoFeature['properties']['brfss_smoker'];\n\n    for (let i =1;i<Object.keys(metadata).length;i++){\n      if(value>metadata[3]['break'][i]){\n      newStyle = new Style({\n        fill: new Fill({\n          color: metadata[3]['color'][i]\n        }),\n        stroke: new Stroke({\n          color:'black',\n          width:0.3\n        })\n      })\n    };\n  }\n    //console.log(newStyle)\n    //this iterates through every feature and assigns a style\n    //this.setState({ mapStyle: newStyle });\n    return newStyle;\n\n  }\n  //a global function(getData) to get json data from url when called from componentDidUpdate\n  async getData(url,starturl) {\n    if ( url != starturl){\n      //console.log(starturl)\n      const response = await fetch(url);//new json value\n      const response2 = await fetch(starturl);//old geojson value\n\n      var jsondata=await response.json();\n      var geojsondata=await response2.json();\n      //compare and update the geojsondata\n\n      for (var i=0;i<jsondata.features.length;i++){\n        //New json value\n        var newgeoid=jsondata.features[i]['properties']['geo_id']\n        var newvalue=jsondata.features[i]['properties']['brfss_smoker']\n\n        for (var j=0;j<geojsondata.features.length;j++){\n          //Old json\n          var oldgeoid=geojsondata.features[j]['properties']['geo_id']\n          var oldvalue=geojsondata.features[j]['properties']['brfss_smoker']\n          if (newgeoid===oldgeoid)\n           {\n             //console.log(oldgeoid,newvalue, oldvalue)\n             geojsondata.features[j]['properties']['brfss_smoker']=newvalue\n              //var newfeature=geojsondata.features[j]['properties']['brfss_smoker']\n\n            }\n        }\n        //console.log(oldvalue,value)\n        //console.log(geojsondata.features[i]['properties']['brfss_smoker'])\n        //console.log(newfeature)\n      }\n\n      //console.log(\"Is this data altered before it leaves the function\")\n      //console.log(geojsondata)\n      // var newChoropleth=this.styledata(geojsondata);\n      // console.log(newChoropleth);\n\n      return geojsondata \n    }\n\n\n\n  }\n\n\n\n\n  componentDidMount(){\n\n    const context=this.context;\n    console.log(context);// get the current value in UsersContext through the hook\n    var basemap =new TileLayer({\n      source: new OSM()\n    })\n    var smokerSource = new VectorSource({\n      url: metadata[1].geojson_url, \n      format: new GeoJSON()\n    })\n\n    console.log(\"source is:\",context.state.dataurl)\n\n    var countyOutlineSource = new VectorSource({\n      url: countyData,\n      format: new GeoJSON()\n\n    })\n    var countyBorder = new Style({\n      stroke: new Stroke({\n          color: 'black',\n          width: 1\n      })\n  });\n    var countyOutline = new VectorLayer({\n      opacity: 1,\n      source: countyOutlineSource,\n      style: countyBorder\n    });\n\n    var initialStyle = this.styledata;\n    // console.log(\"What does this look like\")\n    console.log(this.styledata)\n    var smokerlayer = new VectorLayer({\n\n       source: smokerSource,\n       style: initialStyle\n    \n       })\n\n    var olmap=new Map({\n      layers: [basemap,countyOutline,smokerlayer],\n      target: \"mapContainer\",\n      view :new View({\n        center:fromLonLat([-94.6859,46.7296]),\n        zoom: 6\n      })\n    });\n\n    this.setState({\n      //set the initial state\n      olmap: olmap,\n      countyOutlineSource:countyOutlineSource,\n      countyOutline: countyOutline,\n      smokerlayer: smokerlayer,\n      smokerSource:smokerSource,\n      smokerStyle:initialStyle\n\n  })\n\n\n\n\n}\n\n\nasync componentDidUpdate(prevProps,prevState){\n  const context=this.context;\n  console.log(context)\n  console.log(\"update:\",context.state.attributeid)\n  console.log(\"update:\",context.state.dataurl)\n  var geojsondata=metadata[1].geojson_url;\n  \n\n  if ( prevState.smokerSource != null){\n    console.log(\"Component is updating\");\n    //console.log(this.state.smokerSource['url_']);\n\n    //console.dir(this.state.smokerlayer)\n    var updatedGeoJSON = await this.getData(context.state.dataurl,geojsondata);\n    //console.log(updatedGeoJSON)\n    this.state.smokerlayer.getSource().forEachFeature(function(feature) {\n    //console.log(feature)\n    //compare value from updated GeoJson with the value from this.state.smokerlayer \n    //and update this.state.smokerlayer if the geoid matches and values are not the same\n    var oldgeoid=feature['values_']['geo_id']\n    var oldvalue=feature['values_']['brfss_smoker']\n    //console.log(updatedGeoJSON.features.length)\n      for (var i=0;i<updatedGeoJSON.features.length;i++){\n        //New json value\n        var newgeoid=updatedGeoJSON.features[i]['properties']['geo_id']\n        var newvalue=updatedGeoJSON.features[i]['properties']['brfss_smoker']\n          //Old json\n\n          //console.log(oldgeoid,newvalue, oldvalue)\n          if (newgeoid===oldgeoid)\n           {\n             //console.log(oldgeoid,newvalue, oldvalue)\n             feature['values_']['brfss_smoker']=newvalue\n             let updatedStyle;\n\n\n             for (let i =1;i<Object.keys(metadata).length;i++){\n\n              if(feature>metadata[3]['break'][i]){\n                updatedStyle = new Style({\n                fill: new Fill({\n                  color: metadata[3]['color'][i]\n                }),\n                stroke: new Stroke({\n                  color:'black',\n                  width:0.3\n                  })\n                })\n              };\n\n            }\n              //var newfeature=geojsondata.features[j]['properties']['brfss_smoker']\n              feature.setStyle(updatedStyle)\n            }\n\n        //console.log(oldvalue,value)\n        //console.log(geojsondata.features[i]['properties']['brfss_smoker'])\n        //console.log(newfeature)\n      }\n    })\n\n            console.log(\"Done\")\n\n\n\n}}\n\n  render() {\n    //console.log(\"-> render App\");\n    //console.log(\"before return\",this.state)\n    return (\n      console.log(\"after return\",this.state),\n      //{context},\n      <Context.Consumer>\n\n        {(context)=>(\n\n          <p>{context.state.attribute}</p>\n        )}\n\n      </Context.Consumer>,\n\n      <div id=\"mapContainer\" style={{ width: \"100%\",height: \"500px\"}}></div>\n      //console.log(this.state)\n\n\n    );\n\n  }\n\n\n}\n",["115","116"],"/Users/rongxuan/Desktop/reactmap/reactmap/src/tasks/LoadData.js",[],[],"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerLegend.js",[],[],"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/metadata.js",[],[],["117","118"],"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/dropdown.js",[],[],"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/context.js",["119"],[],"import React, { useState } from \"react\";\nimport {metadata} from './metadata.js';\n\n\nexport const Context = React.createContext(\"Select an attribute\");\n\n//export const ccontext = React.createContext(\"Select a attribute\");\n\nexport const { Consumer } = Context;\n\n\n\n//this class will live a the top level of our application and \n//will store all data that we want to share with other components\n// need to add a value to <Context.Provider> tags\n\n\n\n\n \n\n  // Make the context object:\n  \n\n  // pass the value in provider and return\n  //return <Context.Provider value={usersContext}>{children}</Context.Provider>;\n\n\n\n\nexport class Provider extends React.Component{\n    state={\n        dataurl: metadata[1]['geojson_url'], //default to total smoker\n        attributeid:1,\n        \n    }\n\n    \n    render(){\n        \n        //within the value, set state to be \"this.state\"\n        // add function to handle the change when selection is made to dropdown menu\n\n        return(\n            console.log(this.state),\n            \n            //handleChange function sets the state to event.target.value \n            //which is the option from dropdown\n            <Context.Provider value ={{\n                state:this.state,\n                \n                //handleChange function sets the state to 'event.target.value' \n                //(the option selected from the dropdown).\n                handleChange: (event) => this.setState({\n                    dataurl: event.target.value,\n                    attributeid:event,\n                }),\n\n\n            }}>\n                \n                {this.props.children}\n            </Context.Provider>\n        )\n    }\n}",{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":1,"column":27,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},{"ruleId":"124","severity":1,"message":"128","line":3,"column":8,"nodeType":"126","messageId":"127","endLine":3,"endColumn":16},{"ruleId":"124","severity":1,"message":"129","line":7,"column":12,"nodeType":"126","messageId":"127","endLine":7,"endColumn":20},{"ruleId":"124","severity":1,"message":"130","line":7,"column":22,"nodeType":"126","messageId":"127","endLine":7,"endColumn":33},{"ruleId":"124","severity":1,"message":"131","line":2,"column":22,"nodeType":"126","messageId":"127","endLine":2,"endColumn":25},{"ruleId":"124","severity":1,"message":"132","line":13,"column":15,"nodeType":"126","messageId":"127","endLine":13,"endColumn":21},{"ruleId":"120","replacedBy":"133"},{"ruleId":"122","replacedBy":"134"},{"ruleId":"124","severity":1,"message":"135","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":25},{"ruleId":"124","severity":1,"message":"125","line":1,"column":27,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},{"ruleId":"124","severity":1,"message":"128","line":5,"column":8,"nodeType":"126","messageId":"127","endLine":5,"endColumn":16},{"ruleId":"124","severity":1,"message":"125","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"131","line":2,"column":22,"nodeType":"126","messageId":"127","endLine":2,"endColumn":25},{"ruleId":"124","severity":1,"message":"136","line":17,"column":8,"nodeType":"126","messageId":"127","endLine":17,"endColumn":16},{"ruleId":"124","severity":1,"message":"137","line":18,"column":8,"nodeType":"126","messageId":"127","endLine":18,"endColumn":19},{"ruleId":"124","severity":1,"message":"138","line":20,"column":10,"nodeType":"126","messageId":"127","endLine":20,"endColumn":20},{"ruleId":"124","severity":1,"message":"139","line":21,"column":10,"nodeType":"126","messageId":"127","endLine":21,"endColumn":13},{"ruleId":"124","severity":1,"message":"140","line":22,"column":8,"nodeType":"126","messageId":"127","endLine":22,"endColumn":15},{"ruleId":"141","severity":1,"message":"142","line":110,"column":14,"nodeType":"143","messageId":"144","endLine":110,"endColumn":16},{"ruleId":"124","severity":1,"message":"145","line":127,"column":15,"nodeType":"126","messageId":"127","endLine":127,"endColumn":23},{"ruleId":"124","severity":1,"message":"145","line":243,"column":9,"nodeType":"126","messageId":"127","endLine":243,"endColumn":17},{"ruleId":"120","replacedBy":"146"},{"ruleId":"122","replacedBy":"147"},{"ruleId":"120","replacedBy":"148"},{"ruleId":"122","replacedBy":"149"},{"ruleId":"124","severity":1,"message":"135","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":25},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'LoadData' is defined but never used.","'counties' is assigned a value but never used.","'setCounties' is assigned a value but never used.","'get' is defined but never used.","'Stroke' is defined but never used.",["150"],["151"],"'useState' is defined but never used.","'Dropdown' is defined but never used.","'Whitesmoker' is defined but never used.","'useContext' is defined but never used.","'set' is defined but never used.","'Feature' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'oldvalue' is assigned a value but never used.",["150"],["151"],["150"],["151"],"no-global-assign","no-unsafe-negation"]