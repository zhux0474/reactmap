[{"/Users/rongxuan/Desktop/git_react/src/index.js":"1","/Users/rongxuan/Desktop/git_react/src/App.js":"2","/Users/rongxuan/Desktop/git_react/src/reportWebVitals.js":"3","/Users/rongxuan/Desktop/git_react/src/components/Smoker.js":"4","/Users/rongxuan/Desktop/git_react/src/components/SmokerMap.js":"5","/Users/rongxuan/Desktop/git_react/src/tasks/LoadData.js":"6","/Users/rongxuan/Desktop/reactmap/reactmap/src/index.js":"7","/Users/rongxuan/Desktop/reactmap/reactmap/src/App.js":"8","/Users/rongxuan/Desktop/reactmap/reactmap/src/reportWebVitals.js":"9","/Users/rongxuan/Desktop/reactmap/reactmap/src/components/Smoker.js":"10","/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js":"11","/Users/rongxuan/Desktop/reactmap/reactmap/src/tasks/LoadData.js":"12","/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerLegend.js":"13","/Users/rongxuan/Desktop/reactmap/reactmap/src/components/metadata.js":"14","/Users/rongxuan/Desktop/reactmap/reactmap/src/components/dropdown.js":"15","/Users/rongxuan/Desktop/reactmap/reactmap/src/components/context.js":"16"},{"size":623,"mtime":1644279817896,"results":"17","hashOfConfig":"18"},{"size":187,"mtime":1644261534246,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1643663862952,"results":"20","hashOfConfig":"18"},{"size":803,"mtime":1644278284026,"results":"21","hashOfConfig":"18"},{"size":3164,"mtime":1645235140109,"results":"22","hashOfConfig":"18"},{"size":0,"mtime":1644263901718,"results":"23","hashOfConfig":"18"},{"size":804,"mtime":1649907413746,"results":"24","hashOfConfig":"25"},{"size":277,"mtime":1649731237836,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1643663862952,"results":"27","hashOfConfig":"25"},{"size":560,"mtime":1648668079119,"results":"28","hashOfConfig":"25"},{"size":7324,"mtime":1650480610323,"results":"29","hashOfConfig":"25"},{"size":0,"mtime":1644263901718,"results":"30","hashOfConfig":"25"},{"size":676,"mtime":1649100044155,"results":"31","hashOfConfig":"25"},{"size":1679,"mtime":1649191921388,"results":"32","hashOfConfig":"25"},{"size":2288,"mtime":1649907308984,"results":"33","hashOfConfig":"25"},{"size":1924,"mtime":1650476495480,"results":"34","hashOfConfig":"25"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"m37f37",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1edod3x",{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"65"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},"/Users/rongxuan/Desktop/git_react/src/index.js",[],[],"/Users/rongxuan/Desktop/git_react/src/App.js",[],[],["93","94"],"/Users/rongxuan/Desktop/git_react/src/reportWebVitals.js",[],[],"/Users/rongxuan/Desktop/git_react/src/components/Smoker.js",["95","96","97","98"],[],"import React, { useState, useEffect } from \"react\"\nimport SmokerMap from \"./SmokerMap\";\nimport LoadData from \"../tasks/LoadData\";\n\n\nconst Smoker = () =>{\n    const [counties, setCounties] = useState([]);\n    /*\n    const load = () =>{\n        console.log(\"load\");\n        const loadData = new LoadData();\n        loadData.load((counties)=> setCounties(counties));\n\n    };\n    \n    useEffect(load,[]);\n    \n    below is the code go inside the div below\n    {counties.length === 0 ?(\n                <Loading />):(\n                    <div>\n                        <SmokerMap counties = {counties} />\n                \n                        </div>\n                )}  */\n\n    return (\n        <div>\n            \n            <SmokerMap />\n            \n            </div>\n    );\n\n};\n\nexport default Smoker;","/Users/rongxuan/Desktop/git_react/src/components/SmokerMap.js",["99","100"],[],"import React from \"react\";\nimport { fromLonLat, get } from \"ol/proj\";\n//import \"./SmokerMap.css\";\nimport Map from \"ol/Map\";\n//import Feature from \"ol/Feature\";\nimport View from \"ol/View\";\n//import { Point, Style, Circle, Fill, Feature } from \"ol\";\nimport TileLayer from \"ol/layer/Tile\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport {Fill, Stroke, Style} from 'ol/style';\nimport cityboundary from \"./City_Boundary.geojson\";\n//import county from \"./County.json\";\n\n/*\nconst vectorlayer = \nnew VectorLayer({\n    source : new VectorSource({\n      url: './City_Boundary.geojson',\n      format: new GeoJSON(),\n      featureProjection:\"EPSG:4326\"\n    }),\n    style: new Style({\n      color: '#eeeeee',\n      ///style: getFill().setColor(color),\n\n    })\n})*/\n\n/*\nconst vectorlayer=new GeoJSON().readFeatures(geojsonObject, {\n  featureProjection:'EPSG:3857'\n});*/\n\nexport default class SmokerMap extends React.Component{\n  constructor(props){\n    super(props);\n    console.log(this.props);\n    this.mapRef=React.createRef();\n  }\n  componentDidMount(){\n    this.map=new Map({\n      target: \"mapContainer\",\n      \n      layers: [\n     \n\n        new TileLayer({\n          source: new OSM()\n        }),\n\n        new VectorLayer({\n          //background: '#1a2b39',\n          source : new VectorSource({\n            url: cityboundary,\n            format: new GeoJSON()\n            //crossOrigin: 'anonymous',\n            //featureProjection:\"EPSG:4326\"\n          }),\n          style: new Style({\n            fill: new Fill({\n              color: [255,0,0,255]}),//'#eeeeee' [255,0,0,255]\n            \n            ///style: getFill().setColor(color),\n      \n          }), \n          \n      })\n      \n      ],\n      \n      view :new View({\n        center:fromLonLat([-94.6859,46.7296]),\n        zoom: 7\n      })\n\n    });\n   \n  }\n  render() {\n    console.log(\"-> render App\");\n    return (\n      <div\n        id=\"mapContainer\"\n        ref={this.mapRef}\n        style={{ width: \"100%\", height: \"700px\" }}\n      >\n       \n      </div>\n    );\n  }\n\n\n}\n/*\nconst SmokerMap = ({ counties}) =>{\n    /*\n    const mapStyle={\n        fillColor: \"white\",\n        weight: 1,\n        color: \"black\",\n        fillOpacity: 1,\n    };\n    const onEachCountry = (country, layer) => {\n        layer.options.fillColor = country.properties.color;\n        const name = country.properties.ADMIN;\n        const confirmedText = country.properties.confirmedText;\n        layer.bindPopup(`${name} ${confirmedText}`);\n      };*/\n\n      /*return (\n        <Map style={{ height: \"90vh\" }} zoom={2} center={[-94.6859,46.7296]}>\n          <GeoJSON\n            style={mapStyle}\n            data={countries}\n            onEachFeature={onEachCountry}\n          />\n        </Map>\n      );\n\n      return (\n        <div className=\"map_div\">\n        <Map className=\"smoker_map\" view={{center:fromLonLat([-94.6859,46.7296]),zoom:6}}>\n          <Layers>\n            <layer.Tile></layer.Tile>\n            </Layers>\n    \n        </Map>\n        \n        </div>\n      );\n\n};\nexport default SmokerMap;\n*/\n","/Users/rongxuan/Desktop/git_react/src/tasks/LoadData.js",[],[],"/Users/rongxuan/Desktop/reactmap/reactmap/src/index.js",[],[],"/Users/rongxuan/Desktop/reactmap/reactmap/src/App.js",[],[],"/Users/rongxuan/Desktop/reactmap/reactmap/src/reportWebVitals.js",[],[],["101","102"],"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/Smoker.js",["103","104","105"],[],"import React, { useState, useEffect } from \"react\"\nimport SmokerMap from \"./SmokerMap\";\nimport \"./Smoker.css\";\nimport SmokerLegend from \"./SmokerLegend\";\nimport LoadData from \"../tasks/LoadData\";\nimport Dropdown from \"./dropdown.js\"\n\n\nconst Smoker = () =>{\n    return (\n        <div >\n            <div style={{height: '400px'}}>\n                <SmokerMap  />\n            </div>\n            <div style={{position: 'relative' }} >\n                <SmokerLegend/> \n                <Dropdown/> \n            </div>\n        </div>\n    );\n\n};\n\nexport default Smoker;","/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js",["106","107","108","109","110"],[],"import React, { useEffect } from \"react\";\nimport { fromLonLat, get } from \"ol/proj\";\n//import \"./SmokerMap.css\";\nimport Map from \"ol/Map\";\n//import Feature from \"ol/Feature\";\nimport View from \"ol/View\";\n//import { Point, Style, Circle, Fill, Feature } from \"ol\";\nimport TileLayer from \"ol/layer/Tile\";\n//import TileWMS from 'ol/source/TileWMS';\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport {Fill, Stroke, Style} from 'ol/style';\nimport {metadata} from './metadata.js';\nimport countyData from './countyline.geojson';\nimport Dropdown from './dropdown.js';\nimport Whitesmoker from '../data/whitesmoker.json';\nimport {Context} from \"./context\";\nimport { useContext } from \"react\";\n//import {ccontext} from \"./context\";\n\n\nexport default class SmokerMap extends React.Component{\n\n  static contextType = Context;\n  //context=this.context;\n  \n  \n  constructor(props){\n    super(props);\n    this.state = {\n     \n      smokerSource : null,\n      smokerlayer: false,\n      countyOutlineSource: null,\n      countyOutline: false,\n      countyReady: false\n      \n  };\n   // console.log(this.props);\n  }\n  \n  componentDidMount(){\n    //this.getJSON();\n    \n    //const [data,setdata]=useState(data);\n    const context=this.context;\n    console.log(context);\n    // get the current value in UsersContext through the hook\n    var basemap =new TileLayer({\n      source: new OSM()\n    })\n    var smokerSource = new VectorSource({\n      url: context.state.attribute,//metadata[1].geojson_url,\n      format: new GeoJSON()\n    })\n    console.log(\"source is:\",context.state.attribute)\n    \n   //pass context.state.attribute into some function to get new json\n   //store json as a variable \n/*\n   const getData=()=>{\n    fetch(context.state.attribute)\n      .then(function(response){\n        console.log(response)\n        return response.json();\n      })\n      .then(function(myJson) {\n        console.log(myJson);\n      });\n  }*/\n\n\n\n    var countyOutlineSource = new VectorSource({\n      url: countyData,\n      format: new GeoJSON()\n\n    })\n    var countyBorder = new Style({\n      stroke: new Stroke({\n          color: 'black',\n          width: 1\n      })\n  });\n    var countyOutline = new VectorLayer({\n      opacity: 1,\n      //visible: this.props.viewed === 'County',\n      source: countyOutlineSource,\n      style: countyBorder\n    })\n/*\n    async function getData(url) {\n      const response = await fetch(url);\n    \n      return response.json();\n    }\n    \n    const data = getData(context.state.attribute);\n    var obj;\n    //console.log( {data} )\n    function getjsondata() {\n      return fetch(context.state.attribute)\n      //.then((response) => response.json())\n      .then(res => res.json())\n      .then(data => obj = data)\n      .then(() => console.log(obj))\n    \n   }*/\n   \n    /*\n    const getjson=()=>{\n      fetch(context.state.attribute)\n      .then(function(response){\n        //console.log(response)\n        return response.json();\n      })\n      .then(function(myJson){\n        console.log(myJson);\n\n      });\n\n\n    }\n    */\n\n    //var jsondata= getData();\n    //console.log(jsondata);\n    var stylefunction = function(feature){\n      \n        var style;\n        //console.log(feature);\n        \n        //var value=feature.get('brfss_smoker');\n        //var geojson1={geoid:23,value:16},{geoid:50,value:25}\n        //var geojson2={geoid:27,value:55},{geoid:55,value:25},{geoid:63,value:16},{geoid:23,value:25},{geoid:99,value:16},{geoid:50,value:65}\n\n        //var county=feature.get('county');\n        //var value = feature.get('brfss_smoker');\n        var geoid=feature.get('geo_id');\n        for (var i=0; i<feature.length;i++){\n          var newgeoid=feature[i].values.geo_id;\n          //console.log(newgeoid);\n          if (newgeoid===geoid ){\n            var value= feature[i].values.brfss_smoker;\n           };\n        }\n       //console.log(\"geoid\",geoid);\n        //console.log(value);\n        //console.log(Object.keys(geoid));\n       // const newgeoid = Whitesmoker.map((id)=> {\n         // var white=Whitesmoker.get('geo_id');\n          //console.log(white);\n          /*\n          for sample\n          var geoid=feature.get('geo_id');\n        for (var i=0; i<Whitesmoker.features.length;i++){\n            var newgeoid=Whitesmoker.features[i].properties.geo_id;\n            //console.log(newgeoid);\n            if (newgeoid===geoid ){\n              var value= Whitesmoker.features[i].properties.brfss_smoker;\n             };\n          }*/\n        //console.log(value)\n        \n        \n        //var jsondata= getData();\n        //console.log(jsondata);\n        \n        //compare geoid with the next json\n        // mapping function or a for loop to find the matching value\n        // return value from geojson2 and assign to var value \n        \n        // assign color to each break from metadata.js\n        //console.log(county,value)\n        for (let i =0;i<metadata[1]['break'].length;i++){\n          if(value>metadata[1]['break'][i]){\n          style= new Style({\n            fill: new Fill({\n              color: metadata[1]['color'][i]\n            }),\n            stroke: new Stroke({\n              color:'black',\n              width:0.3\n            })\n          })\n        };\n      }\n\n        return style;\n\n    };\n\n    var smokerlayer = new VectorLayer({\n\n       source: smokerSource,\n       style: stylefunction,\n       //showLegend:true\n\n       })\n\n    var olmap=new Map({\n      layers: [basemap,countyOutline,smokerlayer],\n      target: \"mapContainer\",\n      view :new View({\n        center:fromLonLat([-94.6859,46.7296]),\n        zoom: 6\n      })\n\n\n\n    });\n\n    this.setState({\n      \n      olmap: olmap,\n      countyOutlineSource:countyOutlineSource,\n      countyOutline: countyOutline,\n      smokerlayer: smokerlayer,\n      smokerSource:smokerSource\n      \n  })\n\n  \n  \n\n}\ncomponentDidUpdate(){\n  const context=this.context;\n  console.log(\"update:\",context)\n  const getData=()=>{\n    fetch(context.state.attribute)\n      .then(function(response){\n        console.log(response)\n        return response.json();\n      })\n      .then(function(myJson) {\n        console.log(myJson);\n      });\n  }\n  var jsondata= getData();\n    console.log(jsondata);\n  \n}\n/*\n  componentDidUpdate(prevProps,prevState){\n    //console.log(this.props)\n    if (prevProps.api != this.props.api){\n      \n      //console.log(prevState.smokerSource)\n      const context=this.context;\n      console.log(\"update:\",context)\n      const getjson=()=>{\n        fetch(context.state.attribute)\n        .then(function(response){\n          //console.log(response)\n          return response.json();\n        })\n        .then(function(myJson){\n          //console.log(myJson);\n  \n        });\n  \n  \n      }\n    \n    }\n    \n      \n      \n  }*/\n    \n  \n  \n\n  \n\n  \n  render() {\n    //console.log(\"-> render App\");\n    //console.log(\"before return\",this.state)\n    return (\n      console.log(\"after return\",this.state),\n      //{context},\n      <Context.Consumer>\n\n        {(context)=>(\n\n          <p>{context.state.attribute}</p>\n        )}\n      \n      </Context.Consumer>,\n      \n      <div id=\"mapContainer\" style={{ width: \"100%\",height: \"500px\"}}></div>\n      //console.log(this.state)\n      \n\n    );\n    \n  }\n\n\n}","/Users/rongxuan/Desktop/reactmap/reactmap/src/tasks/LoadData.js",[],[],"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerLegend.js",[],[],"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/metadata.js",[],[],"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/dropdown.js",["111"],[],"import React, {useState} from 'react';\nimport {Context} from \"./context.js\"\nimport {metadata} from './metadata.js';\n\n\n\n\n\n\n/*\nfunction App() {\n  // Array of objects containing data\n  var attributes = []\n  for (var i =1; i<=Object.keys(metadata).length;i++) {\n    console.log(metadata[i]['attributename'])\n    //need put this info somewhere (inside the state)\n    attributes.push( { label: metadata[i]['attributename'], value: metadata[i]['geojson_url']}); \n  }\n  \n\n// Using state to keep track of selection\nvar [attribute, setAttribute] = useState(\"Select an attribute\")\nconsole.log(attribute)\n\n// Using this function to update the state \n// whenever a new option is selected from the dropdown\n// only if i could move it so smokermap could use it to update source link \nvar handleAttributeChange = (e) => {\n  setAttribute(e.target.value)\n  console.log(e.target.value)\n}\n\n  return (\n    \n    <Context.Consumer>\n      {(context)=>(\n    <div className=\"Dropdown\">\n    {attribute}\n    <br />\n   \n    <select onChange={context.handleChange}> \n      <option value=\" Select an attribute\"> -- Select an attribute -- </option>\n      {attributes.map((attribute) => <option value={attribute.value}> {attribute.label}</option>)}\n      console.log(attributes)\n    </select>\n    </div>\n    )}\n    </Context.Consumer>\n  );\n}\nexport default App;*/\n\nfunction Dropdown(){\n\n  var attributes = []\n  for (var i =1; i<=Object.keys(metadata).length;i++) {\n    console.log(metadata[i]['attributename'])\n    //need put this info somewhere (inside the state)\n    attributes.push( { label: metadata[i]['attributename'], value: metadata[i]['geojson_url']}); \n  }\n  \n\n// Using state to keep track of selection\n//console.log(attributes)\n\n  return(\n    //add an onChange event listener to the <select> tag and set the value to {context.handleChange}.\n    <Context.Consumer>\n      {(context)=>(\n      <div>\n      <p>Please Select an Attribute to Display</p>\n      <select onChange={context.handleChange}>\n        <option value=\" Select an attribute\"> -- Select an attribute -- </option>\n        {attributes.map((attribute) => <option value={attribute.value}> {attribute.label}</option>)}\n        console.log(attributes)\n      </select>\n    </div>\n      )}\n      \n    </Context.Consumer>\n\n  )\n\n\n\n}\nexport default Dropdown;",["112","113"],"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/context.js",["114"],[],"import React, { useState } from \"react\";\nimport {metadata} from './metadata.js';\n\n\nexport const Context = React.createContext(\"Select an attribute\");\n\n//export const ccontext = React.createContext(\"Select a attribute\");\n\nexport const { Consumer } = Context;\n\n\n\n//this class will live a the top level of our application and \n//will store all data that we want to share with other components\n// need to add a value to <Context.Provider> tags\n\n\n\n\n \n\n  // Make the context object:\n  \n\n  // pass the value in provider and return\n  //return <Context.Provider value={usersContext}>{children}</Context.Provider>;\n\n\n\n\nexport class Provider extends React.Component{\n    state={\n        attribute: metadata[1]['geojson_url'] //default to total smoker\n        \n    }\n\n    \n    render(){\n        \n        //within the value, set state to be \"this.state\"\n        // add function to handle the change when selection is made to dropdown menu\n\n        return(\n            console.log(this.state),\n            async function getData(url){\n                const response =await fetch(url);\n                return response.json()\n            },\n            \n            //handleChange function sets the state of season to event.target.value \n            //which is the option from dropdown\n            <Context.Provider value ={{\n                state:this.state,\n                \n                //handleChange function sets the state of 'season' to 'event.target.value' \n                //(the option selected from the dropdown).\n                handleChange: (event) => this.setState({\n                    attribute: event.target.value,\n                   \n                    //data: ()=>{const response = fetch(this.state.attribute)\n                    //return response.json()}\n\n\n                }),\n                \n\n            }}>\n                \n                {this.props.children}\n            </Context.Provider>\n        )\n    }\n}",["115","116"],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":1,"column":27,"nodeType":"123","messageId":"124","endLine":1,"endColumn":36},{"ruleId":"121","severity":1,"message":"125","line":3,"column":8,"nodeType":"123","messageId":"124","endLine":3,"endColumn":16},{"ruleId":"121","severity":1,"message":"126","line":7,"column":12,"nodeType":"123","messageId":"124","endLine":7,"endColumn":20},{"ruleId":"121","severity":1,"message":"127","line":7,"column":22,"nodeType":"123","messageId":"124","endLine":7,"endColumn":33},{"ruleId":"121","severity":1,"message":"128","line":2,"column":22,"nodeType":"123","messageId":"124","endLine":2,"endColumn":25},{"ruleId":"121","severity":1,"message":"129","line":13,"column":15,"nodeType":"123","messageId":"124","endLine":13,"endColumn":21},{"ruleId":"117","replacedBy":"130"},{"ruleId":"119","replacedBy":"131"},{"ruleId":"121","severity":1,"message":"132","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},{"ruleId":"121","severity":1,"message":"122","line":1,"column":27,"nodeType":"123","messageId":"124","endLine":1,"endColumn":36},{"ruleId":"121","severity":1,"message":"125","line":5,"column":8,"nodeType":"123","messageId":"124","endLine":5,"endColumn":16},{"ruleId":"121","severity":1,"message":"122","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":26},{"ruleId":"121","severity":1,"message":"128","line":2,"column":22,"nodeType":"123","messageId":"124","endLine":2,"endColumn":25},{"ruleId":"121","severity":1,"message":"133","line":17,"column":8,"nodeType":"123","messageId":"124","endLine":17,"endColumn":16},{"ruleId":"121","severity":1,"message":"134","line":18,"column":8,"nodeType":"123","messageId":"124","endLine":18,"endColumn":19},{"ruleId":"121","severity":1,"message":"135","line":20,"column":10,"nodeType":"123","messageId":"124","endLine":20,"endColumn":20},{"ruleId":"121","severity":1,"message":"132","line":1,"column":16,"nodeType":"123","messageId":"124","endLine":1,"endColumn":24},{"ruleId":"117","replacedBy":"136"},{"ruleId":"119","replacedBy":"137"},{"ruleId":"121","severity":1,"message":"132","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},{"ruleId":"117","replacedBy":"138"},{"ruleId":"119","replacedBy":"139"},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'LoadData' is defined but never used.","'counties' is assigned a value but never used.","'setCounties' is assigned a value but never used.","'get' is defined but never used.","'Stroke' is defined but never used.",["140"],["141"],"'useState' is defined but never used.","'Dropdown' is defined but never used.","'Whitesmoker' is defined but never used.","'useContext' is defined but never used.",["140"],["141"],["140"],["141"],"no-global-assign","no-unsafe-negation"]