{"ast":null,"code":"// @ag-grid-community/react v26.2.0\n\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@ag-grid-community/core\");\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar beansContext_1 = require(\"../beansContext\");\n\nvar jsComp_1 = require(\"../jsComp\");\n\nvar utils_1 = require(\"../utils\");\n\nvar GroupCellRenderer = function (props) {\n  var context = react_1.useContext(beansContext_1.BeansContext).context;\n  var eGui = react_1.useRef(null);\n  var eValueRef = react_1.useRef(null);\n  var eCheckboxRef = react_1.useRef(null);\n  var eExpandedRef = react_1.useRef(null);\n  var eContractedRef = react_1.useRef(null);\n\n  var _a = react_1.useState(),\n      innerCompDetails = _a[0],\n      setInnerCompDetails = _a[1];\n\n  var _b = react_1.useState(),\n      childCount = _b[0],\n      setChildCount = _b[1];\n\n  var _c = react_1.useState(),\n      value = _c[0],\n      setValue = _c[1];\n\n  var _d = react_1.useState(new utils_1.CssClasses()),\n      cssClasses = _d[0],\n      setCssClasses = _d[1];\n\n  var _e = react_1.useState(new utils_1.CssClasses()),\n      expandedCssClasses = _e[0],\n      setExpandedCssClasses = _e[1];\n\n  var _f = react_1.useState(new utils_1.CssClasses()),\n      contractedCssClasses = _f[0],\n      setContractedCssClasses = _f[1];\n\n  var _g = react_1.useState(new utils_1.CssClasses()),\n      checkboxCssClasses = _g[0],\n      setCheckboxCssClasses = _g[1];\n\n  react_1.useEffect(function () {\n    return jsComp_1.showJsComp(innerCompDetails, context, eValueRef.current);\n  }, [innerCompDetails]);\n  react_1.useEffect(function () {\n    var compProxy = {\n      setInnerRenderer: function (details, valueToDisplay) {\n        setInnerCompDetails(details);\n        setValue(valueToDisplay);\n      },\n      setChildCount: function (count) {\n        return setChildCount(count);\n      },\n      addOrRemoveCssClass: function (name, on) {\n        return setCssClasses(function (prev) {\n          return prev.setClass(name, on);\n        });\n      },\n      setContractedDisplayed: function (displayed) {\n        return setContractedCssClasses(function (prev) {\n          return prev.setClass('ag-hidden', !displayed);\n        });\n      },\n      setExpandedDisplayed: function (displayed) {\n        return setExpandedCssClasses(function (prev) {\n          return prev.setClass('ag-hidden', !displayed);\n        });\n      },\n      setCheckboxVisible: function (visible) {\n        setCheckboxCssClasses(function (prev) {\n          return prev.setClass('ag-invisible', !visible);\n        });\n      }\n    };\n    var ctrl = context.createBean(new core_1.GroupCellRendererCtrl());\n    ctrl.init(compProxy, eGui.current, eCheckboxRef.current, eExpandedRef.current, eContractedRef.current, GroupCellRenderer, props);\n    return function () {\n      context.destroyBean(ctrl);\n    };\n  }, []);\n  var className = react_1.useMemo(function () {\n    return \"ag-cell-wrapper \" + cssClasses.toString();\n  }, [cssClasses]);\n  var expandedClassName = react_1.useMemo(function () {\n    return \"ag-group-expanded \" + expandedCssClasses.toString();\n  }, [expandedCssClasses]);\n  var contractedClassName = react_1.useMemo(function () {\n    return \"ag-group-contracted \" + contractedCssClasses.toString();\n  }, [contractedCssClasses]);\n  var checkboxClassName = react_1.useMemo(function () {\n    return \"ag-group-checkbox \" + checkboxCssClasses.toString();\n  }, [checkboxCssClasses]);\n  var useFwRenderer = innerCompDetails && innerCompDetails.componentFromFramework;\n  var FwRenderer = useFwRenderer ? innerCompDetails.componentClass : undefined;\n  var useValue = innerCompDetails == null && value != null;\n  return react_1.default.createElement(\"span\", __assign({\n    className: className,\n    ref: eGui\n  }, !props.colDef ? {\n    role: 'gridcell'\n  } : {}), react_1.default.createElement(\"span\", {\n    className: expandedClassName,\n    ref: eExpandedRef\n  }), react_1.default.createElement(\"span\", {\n    className: contractedClassName,\n    ref: eContractedRef\n  }), react_1.default.createElement(\"span\", {\n    className: checkboxClassName,\n    ref: eCheckboxRef\n  }), react_1.default.createElement(\"span\", {\n    className: \"ag-group-value\",\n    ref: eValueRef\n  }, useValue && react_1.default.createElement(react_1.default.Fragment, null, value), useFwRenderer && react_1.default.createElement(FwRenderer, __assign({}, innerCompDetails.params))), react_1.default.createElement(\"span\", {\n    className: \"ag-group-child-count\"\n  }, childCount));\n};\n\nexports.default = react_1.memo(GroupCellRenderer);","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/react/lib/reactUi/cellRenderer/reactUi/cellRenderer/groupCellRenderer.tsx"],"names":[],"mappings":"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","sourcesContent":["import { GroupCellRendererCtrl, GroupCellRendererParams, IGroupCellRenderer, UserCompDetails } from \"@ag-grid-community/core\";\nimport React, { useContext, useEffect, useMemo, useRef, useState, memo } from 'react';\nimport { BeansContext } from \"../beansContext\";\nimport { showJsComp } from \"../jsComp\";\nimport { CssClasses } from \"../utils\";\n\nconst GroupCellRenderer = (props: GroupCellRendererParams) => {\n\n    const context = useContext(BeansContext).context!;\n\n    const eGui = useRef<HTMLElement>(null);\n    const eValueRef = useRef<HTMLElement>(null);\n    const eCheckboxRef = useRef<HTMLElement>(null);\n    const eExpandedRef = useRef<HTMLElement>(null);\n    const eContractedRef = useRef<HTMLElement>(null);\n\n    const [innerCompDetails, setInnerCompDetails] = useState<UserCompDetails>();\n    const [childCount, setChildCount] = useState<string>();\n    const [value, setValue] = useState<any>();\n    const [cssClasses, setCssClasses] = useState<CssClasses>(new CssClasses());\n    const [expandedCssClasses, setExpandedCssClasses] = useState<CssClasses>(new CssClasses());\n    const [contractedCssClasses, setContractedCssClasses] = useState<CssClasses>(new CssClasses());\n    const [checkboxCssClasses, setCheckboxCssClasses] = useState<CssClasses>(new CssClasses());\n\n    useEffect(() => {\n        return showJsComp(innerCompDetails, context, eValueRef.current!);\n    }, [innerCompDetails]);\n\n    useEffect( ()=> {\n\n        const compProxy: IGroupCellRenderer = {\n            setInnerRenderer: (details, valueToDisplay) => {\n                setInnerCompDetails(details);\n                setValue(valueToDisplay);\n            },\n            setChildCount: count => setChildCount(count),\n            addOrRemoveCssClass: (name, on) => setCssClasses(prev => prev.setClass(name, on)),\n            setContractedDisplayed: displayed => setContractedCssClasses(prev => prev.setClass('ag-hidden', !displayed)),\n            setExpandedDisplayed: displayed => setExpandedCssClasses(prev => prev.setClass('ag-hidden', !displayed)),\n            setCheckboxVisible: visible => {\n                setCheckboxCssClasses(prev => prev.setClass('ag-invisible', !visible))\n            }\n        };\n\n        const ctrl = context.createBean(new GroupCellRendererCtrl());\n        ctrl.init(compProxy, eGui.current!, eCheckboxRef.current!, eExpandedRef.current!, eContractedRef.current!, GroupCellRenderer, props);\n\n        return () => {\n            context.destroyBean(ctrl);\n        };\n    }, []);\n\n    const className = useMemo(() => `ag-cell-wrapper ${cssClasses.toString()}`, [cssClasses]);\n    const expandedClassName = useMemo(() => `ag-group-expanded ${expandedCssClasses.toString()}`, [expandedCssClasses]);\n    const contractedClassName = useMemo(() => `ag-group-contracted ${contractedCssClasses.toString()}`, [contractedCssClasses]);\n    const checkboxClassName = useMemo(() => `ag-group-checkbox ${checkboxCssClasses.toString()}`, [checkboxCssClasses]);\n\n    const useFwRenderer = innerCompDetails && innerCompDetails.componentFromFramework;\n    const FwRenderer = useFwRenderer ? innerCompDetails!.componentClass : undefined;\n    const useValue = innerCompDetails==null && value!=null;\n\n    return (\n        <span className={className} ref={eGui} {...(!props.colDef ? { role: 'gridcell' } : {})}>\n            <span className={expandedClassName} ref={eExpandedRef}></span>\n            <span className={contractedClassName} ref={eContractedRef}></span>\n            <span className={checkboxClassName} ref={eCheckboxRef}></span>\n            <span className=\"ag-group-value\" ref={eValueRef}>\n                { useValue && <>{value}</> }\n                { useFwRenderer && <FwRenderer {...innerCompDetails!.params}/> }\n            </span>\n            <span className=\"ag-group-child-count\">{childCount}</span>\n        </span>\n        );\n};\n\nexport default memo(GroupCellRenderer);"]},"metadata":{},"sourceType":"script"}