{"ast":null,"code":"// @ag-grid-community/react v26.2.0\n\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar utils_1 = require(\"../utils\");\n\nvar beansContext_1 = require(\"../beansContext\");\n\nvar agGridReactUi_1 = require(\"../agGridReactUi\");\n\nvar DetailCellRenderer = function (props, ref) {\n  var _a = react_1.useContext(beansContext_1.BeansContext),\n      ctrlsFactory = _a.ctrlsFactory,\n      context = _a.context,\n      gridOptionsWrapper = _a.gridOptionsWrapper,\n      resizeObserverService = _a.resizeObserverService,\n      clientSideRowModel = _a.clientSideRowModel,\n      serverSideRowModel = _a.serverSideRowModel;\n\n  var _b = react_1.useState(new utils_1.CssClasses()),\n      cssClasses = _b[0],\n      setCssClasses = _b[1];\n\n  var _c = react_1.useState(new utils_1.CssClasses()),\n      gridCssClasses = _c[0],\n      setGridCssClasses = _c[1];\n\n  var _d = react_1.useState(),\n      detailGridOptions = _d[0],\n      setDetailGridOptions = _d[1];\n\n  var _e = react_1.useState(),\n      detailRowData = _e[0],\n      setDetailRowData = _e[1];\n\n  var ctrlRef = react_1.useRef();\n  var eGuiRef = react_1.useRef(null);\n  var topClassName = react_1.useMemo(function () {\n    return cssClasses.toString() + ' ag-details-row';\n  }, [cssClasses]);\n  var gridClassName = react_1.useMemo(function () {\n    return gridCssClasses.toString() + ' ag-details-grid';\n  }, [gridCssClasses]);\n\n  if (ref) {\n    react_1.useImperativeHandle(ref, function () {\n      return {\n        refresh: function () {\n          return ctrlRef.current.refresh();\n        }\n      };\n    });\n  }\n\n  react_1.useEffect(function () {\n    if (props.template) {\n      console.warn('AG Grid: detailCellRendererParams.template is not supported by React UI - this only works with frameworks that work against String templates. To change the template, please provide your own React Detail Cell Renderer.');\n    }\n  }, []);\n  react_1.useEffect(function () {\n    var compProxy = {\n      addOrRemoveCssClass: function (name, on) {\n        return setCssClasses(function (prev) {\n          return prev.setClass(name, on);\n        });\n      },\n      addOrRemoveDetailGridCssClass: function (name, on) {\n        return setGridCssClasses(function (prev) {\n          return prev.setClass(name, on);\n        });\n      },\n      setDetailGrid: function (gridOptions) {\n        return setDetailGridOptions(gridOptions);\n      },\n      setRowData: function (rowData) {\n        return setDetailRowData(rowData);\n      }\n    };\n    var ctrl = ctrlsFactory.getInstance('detailCellRenderer');\n\n    if (!ctrl) {\n      return;\n    } // should never happen, means master/detail module not loaded\n\n\n    context.createBean(ctrl);\n    ctrl.init(compProxy, props);\n    ctrlRef.current = ctrl;\n    var resizeObserverDestroyFunc;\n\n    if (gridOptionsWrapper.isDetailRowAutoHeight()) {\n      var checkRowSizeFunc = function () {\n        var clientHeight = eGuiRef.current.clientHeight; // if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur\n        // as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means\n        // it's not possible for have 0 as auto-height, however this is an improbable use case, as even an\n        // empty detail grid would still have some styling around it giving at least a few pixels.\n\n        if (clientHeight != null && clientHeight > 0) {\n          // we do the update in a timeout, to make sure we are not calling from inside the grid\n          // doing another update\n          var updateRowHeightFunc = function () {\n            props.node.setRowHeight(clientHeight);\n\n            if (clientSideRowModel) {\n              clientSideRowModel.onRowHeightChanged();\n            } else if (serverSideRowModel) {\n              serverSideRowModel.onRowHeightChanged();\n            }\n          };\n\n          setTimeout(updateRowHeightFunc, 0);\n        }\n      };\n\n      resizeObserverDestroyFunc = resizeObserverService.observeResize(eGuiRef.current, checkRowSizeFunc);\n      checkRowSizeFunc();\n    }\n\n    return function () {\n      context.destroyBean(ctrl);\n    };\n  }, []);\n  var setGridApi = react_1.useCallback(function (api, columnApi) {\n    ctrlRef.current.registerDetailWithMaster(api, columnApi);\n  }, []);\n  return react_1.default.createElement(\"div\", {\n    className: topClassName,\n    ref: eGuiRef\n  }, detailGridOptions && react_1.default.createElement(agGridReactUi_1.AgGridReactUi, __assign({\n    className: gridClassName\n  }, detailGridOptions, {\n    rowData: detailRowData,\n    setGridApi: setGridApi\n  })));\n};\n\nexports.default = react_1.forwardRef(DetailCellRenderer);","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/react/lib/reactUi/cellRenderer/reactUi/cellRenderer/detailCellRenderer.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { memo, useState, useMemo, useRef, useEffect, useContext, useCallback, forwardRef, Ref, useImperativeHandle } from \"react\";\nimport { CssClasses } from \"../utils\";\nimport { IDetailCellRenderer, IDetailCellRendererCtrl, IDetailCellRendererParams, GridOptions, GridApi, ColumnApi } from \"@ag-grid-community/core\";\nimport { BeansContext } from \"../beansContext\";\nimport { AgGridReactUi } from \"../agGridReactUi\";\n\nconst DetailCellRenderer = (props: IDetailCellRendererParams, ref: any) => {\n\n    const {ctrlsFactory, context, gridOptionsWrapper, resizeObserverService, clientSideRowModel, serverSideRowModel} = useContext(BeansContext);\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(new CssClasses());\n    const [gridCssClasses, setGridCssClasses] = useState<CssClasses>(new CssClasses());\n    const [detailGridOptions, setDetailGridOptions] = useState<GridOptions>();\n    const [detailRowData, setDetailRowData] = useState<any[]>();\n\n    const ctrlRef = useRef<IDetailCellRendererCtrl>();\n    const eGuiRef = useRef<HTMLDivElement>(null);\n\n    const topClassName = useMemo( ()=> cssClasses.toString() + ' ag-details-row', [cssClasses]);\n    const gridClassName = useMemo( ()=> gridCssClasses.toString() + ' ag-details-grid', [gridCssClasses]);\n\n    if (ref) {\n        useImperativeHandle(ref, ()=> ({\n            refresh() {return ctrlRef.current!.refresh();}\n        }));    \n    }\n    \n    useEffect( ()=> {\n        if (props.template) {\n            console.warn('AG Grid: detailCellRendererParams.template is not supported by React UI - this only works with frameworks that work against String templates. To change the template, please provide your own React Detail Cell Renderer.');\n        }\n    }, []);\n\n    useEffect( ()=> {\n        const compProxy: IDetailCellRenderer = {\n            addOrRemoveCssClass: (name: string, on: boolean) => setCssClasses(prev => prev.setClass(name, on)),\n            addOrRemoveDetailGridCssClass: (name: string, on: boolean) => setGridCssClasses(prev => prev.setClass(name, on)),\n            setDetailGrid: gridOptions => setDetailGridOptions(gridOptions),\n            setRowData: rowData => setDetailRowData(rowData)\n        };\n\n        const ctrl = ctrlsFactory.getInstance('detailCellRenderer') as IDetailCellRendererCtrl;\n        if (!ctrl) { return; } // should never happen, means master/detail module not loaded\n        context.createBean(ctrl);\n\n        ctrl.init(compProxy, props);\n\n        ctrlRef.current = ctrl;\n\n\n\n        let resizeObserverDestroyFunc: ()=>void;\n\n        if (gridOptionsWrapper.isDetailRowAutoHeight()) {\n            const checkRowSizeFunc = () => {\n                const clientHeight = eGuiRef.current!.clientHeight;\n    \n                // if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur\n                // as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means\n                // it's not possible for have 0 as auto-height, however this is an improbable use case, as even an\n                // empty detail grid would still have some styling around it giving at least a few pixels.\n                if (clientHeight != null && clientHeight > 0) {\n                    // we do the update in a timeout, to make sure we are not calling from inside the grid\n                    // doing another update\n                    const updateRowHeightFunc = () => {\n                        props.node.setRowHeight(clientHeight);\n                        if (clientSideRowModel) {\n                            clientSideRowModel.onRowHeightChanged();\n                        } else if (serverSideRowModel) {\n                            serverSideRowModel.onRowHeightChanged();\n                        }\n                    };\n                    setTimeout(updateRowHeightFunc, 0);\n                }\n            };\n    \n            resizeObserverDestroyFunc = resizeObserverService.observeResize(eGuiRef.current!, checkRowSizeFunc);\n            checkRowSizeFunc();\n        }\n\n\n\n\n        \n        return () => {\n            context.destroyBean(ctrl);\n        };\n    }, []);\n\n    const setGridApi = useCallback( (api: GridApi, columnApi: ColumnApi) => {\n        ctrlRef.current!.registerDetailWithMaster(api, columnApi)\n    }, []);\n\n    return (\n        <div className={topClassName} ref={eGuiRef}>\n            { \n                detailGridOptions && \n                <AgGridReactUi className={gridClassName} {...detailGridOptions} rowData={detailRowData} setGridApi={ setGridApi }></AgGridReactUi> \n            }\n        </div>\n    );\n};\n\nexport default forwardRef(DetailCellRenderer);\n"]},"metadata":{},"sourceType":"script"}