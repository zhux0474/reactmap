{"ast":null,"code":"/**\n * @module ol/loadingstrategy\n */\nimport { fromUserExtent, fromUserResolution, toUserExtent } from './proj.js';\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\n\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\n\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\n\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj.js\").Projection} projection Projection.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution, projection) {\n      var z = tileGrid.getZForResolution(fromUserResolution(resolution, projection));\n      var tileRange = tileGrid.getTileRangeForExtentAndZ(fromUserExtent(extent, projection), z);\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n\n      var extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n\n      var tileCoord = [z, 0, 0];\n\n      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n          extents.push(toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection));\n        }\n      }\n\n      return extents;\n    }\n  );\n}","map":{"version":3,"sources":["/Users/rongxuan/Desktop/git_react/node_modules/ol/src/loadingstrategy.js"],"names":[],"mappings":"AAAA;;AAEG;AAEH,SAAQ,cAAR,EAAwB,kBAAxB,EAA4C,YAA5C,QAA+D,WAA/D;AAEA;;;;;;AAMG;;AACH,OAAM,SAAU,GAAV,CAAc,MAAd,EAAsB,UAAtB,EAAgC;AACpC,SAAO,CAAC,CAAC,CAAC,QAAF,EAAY,CAAC,QAAb,EAAuB,QAAvB,EAAiC,QAAjC,CAAD,CAAP;AACD;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,IAAV,CAAe,MAAf,EAAuB,UAAvB,EAAiC;AACrC,SAAO,CAAC,MAAD,CAAP;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,IAAV,CAAe,QAAf,EAAuB;AAC3B;AACE;;;;;AAKG;AACH,cAAU,MAAV,EAAkB,UAAlB,EAA8B,UAA9B,EAAwC;AACtC,UAAM,CAAC,GAAG,QAAQ,CAAC,iBAAT,CACR,kBAAkB,CAAC,UAAD,EAAa,UAAb,CADV,CAAV;AAGA,UAAM,SAAS,GAAG,QAAQ,CAAC,yBAAT,CAChB,cAAc,CAAC,MAAD,EAAS,UAAT,CADE,EAEhB,CAFgB,CAAlB;AAIA;;AACA,UAAM,OAAO,GAAG,EAAhB;AACA;;AACA,UAAM,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlB;;AACA,WACE,SAAS,CAAC,CAAD,CAAT,GAAe,SAAS,CAAC,IAD3B,EAEE,SAAS,CAAC,CAAD,CAAT,IAAgB,SAAS,CAAC,IAF5B,EAGE,EAAE,SAAS,CAAC,CAAD,CAHb,EAIE;AACA,aACE,SAAS,CAAC,CAAD,CAAT,GAAe,SAAS,CAAC,IAD3B,EAEE,SAAS,CAAC,CAAD,CAAT,IAAgB,SAAS,CAAC,IAF5B,EAGE,EAAE,SAAS,CAAC,CAAD,CAHb,EAIE;AACA,UAAA,OAAO,CAAC,IAAR,CACE,YAAY,CAAC,QAAQ,CAAC,kBAAT,CAA4B,SAA5B,CAAD,EAAyC,UAAzC,CADd;AAGD;AACF;;AACD,aAAO,OAAP;AACD;AAnCH;AAqCD","sourcesContent":["/**\n * @module ol/loadingstrategy\n */\n\nimport {fromUserExtent, fromUserResolution, toUserExtent} from './proj.js';\n\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj.js\").Projection} projection Projection.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution, projection) {\n      const z = tileGrid.getZForResolution(\n        fromUserResolution(resolution, projection)\n      );\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\n        fromUserExtent(extent, projection),\n        z\n      );\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n      const extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n      const tileCoord = [z, 0, 0];\n      for (\n        tileCoord[1] = tileRange.minX;\n        tileCoord[1] <= tileRange.maxX;\n        ++tileCoord[1]\n      ) {\n        for (\n          tileCoord[2] = tileRange.minY;\n          tileCoord[2] <= tileRange.maxY;\n          ++tileCoord[2]\n        ) {\n          extents.push(\n            toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection)\n          );\n        }\n      }\n      return extents;\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}