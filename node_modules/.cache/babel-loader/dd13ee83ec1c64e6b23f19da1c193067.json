{"ast":null,"code":"// @ag-grid-community/react v26.2.0\n\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@ag-grid-community/core\");\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar beansContext_1 = require(\"../beansContext\");\n\nvar headerCellComp_1 = __importDefault(require(\"./headerCellComp\"));\n\nvar headerGroupCellComp_1 = __importDefault(require(\"./headerGroupCellComp\"));\n\nvar headerFilterCellComp_1 = __importDefault(require(\"./headerFilterCellComp\"));\n\nvar HeaderRowComp = function (props) {\n  var gridOptionsWrapper = react_1.useContext(beansContext_1.BeansContext).gridOptionsWrapper;\n\n  var _a = react_1.useState(),\n      transform = _a[0],\n      setTransform = _a[1];\n\n  var _b = react_1.useState(),\n      height = _b[0],\n      setHeight = _b[1];\n\n  var _c = react_1.useState(),\n      top = _c[0],\n      setTop = _c[1];\n\n  var _d = react_1.useState(),\n      width = _d[0],\n      setWidth = _d[1];\n\n  var _e = react_1.useState(),\n      ariaRowIndex = _e[0],\n      setAriaRowIndex = _e[1];\n\n  var _f = react_1.useState([]),\n      cellCtrls = _f[0],\n      setCellCtrls = _f[1];\n\n  var eGui = react_1.useRef(null);\n  var ctrl = props.ctrl;\n  var typeColumn = ctrl.getType() === core_1.HeaderRowType.COLUMN;\n  var typeGroup = ctrl.getType() === core_1.HeaderRowType.COLUMN_GROUP;\n  var typeFilter = ctrl.getType() === core_1.HeaderRowType.FLOATING_FILTER;\n  var setCellCtrlsMaintainOrder = react_1.useCallback(function (prev, next) {\n    // if we are ensuring dom order, we set the ctrls into the dom in the same order they appear on screen\n    if (gridOptionsWrapper.isEnsureDomOrder()) {\n      return next;\n    } // if not maintaining order, we want to keep the dom elements we have and add new ones to the end,\n    // otherwise we will loose transition effects as elements are placed in different dom locations\n\n\n    var prevMap = core_1._.mapById(prev, function (c) {\n      return c.getInstanceId();\n    });\n\n    var nextMap = core_1._.mapById(next, function (c) {\n      return c.getInstanceId();\n    });\n\n    var oldCtrlsWeAreKeeping = prev.filter(function (c) {\n      return nextMap.has(c.getInstanceId());\n    });\n    var newCtrls = next.filter(function (c) {\n      return !prevMap.has(c.getInstanceId());\n    });\n    return __spreadArrays(oldCtrlsWeAreKeeping, newCtrls);\n  }, []);\n  react_1.useEffect(function () {\n    var compProxy = {\n      setTransform: function (transform) {\n        return setTransform(transform);\n      },\n      setHeight: function (height) {\n        return setHeight(height);\n      },\n      setTop: function (top) {\n        return setTop(top);\n      },\n      setHeaderCtrls: function (ctrls) {\n        return setCellCtrls(function (prev) {\n          return setCellCtrlsMaintainOrder(prev, ctrls);\n        });\n      },\n      setWidth: function (width) {\n        return setWidth(width);\n      },\n      setAriaRowIndex: function (rowIndex) {\n        return setAriaRowIndex(rowIndex);\n      }\n    };\n    ctrl.setComp(compProxy);\n  }, []);\n  var style = react_1.useMemo(function () {\n    return {\n      transform: transform,\n      height: height,\n      top: top,\n      width: width\n    };\n  }, [transform, height, top, width]);\n  var className = react_1.useMemo(function () {\n    var res = [\"ag-header-row\"];\n    typeColumn && res.push(\"ag-header-row-column\");\n    typeGroup && res.push(\"ag-header-row-column-group\");\n    typeFilter && res.push(\"ag-header-row-column-filter\");\n    return res.join(' ');\n  }, []);\n  var createCellJsx = react_1.useCallback(function (cellCtrl) {\n    switch (ctrl.getType()) {\n      case core_1.HeaderRowType.COLUMN_GROUP:\n        return react_1.default.createElement(headerGroupCellComp_1.default, {\n          ctrl: cellCtrl,\n          key: cellCtrl.getInstanceId()\n        });\n\n      case core_1.HeaderRowType.FLOATING_FILTER:\n        return react_1.default.createElement(headerFilterCellComp_1.default, {\n          ctrl: cellCtrl,\n          key: cellCtrl.getInstanceId()\n        });\n\n      default:\n        return react_1.default.createElement(headerCellComp_1.default, {\n          ctrl: cellCtrl,\n          key: cellCtrl.getInstanceId()\n        });\n    }\n  }, []); // below, we are not doing floating filters, not yet\n\n  return react_1.default.createElement(\"div\", {\n    ref: eGui,\n    className: className,\n    role: \"row\",\n    style: style,\n    \"aria-rowindex\": ariaRowIndex\n  }, cellCtrls.map(createCellJsx));\n};\n\nexports.default = react_1.memo(HeaderRowComp);","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/react/lib/reactUi/header/reactUi/header/headerRowComp.tsx"],"names":[],"mappings":"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","sourcesContent":["import { AbstractHeaderCellCtrl, HeaderGroupCellCtrl, HeaderCellCtrl, HeaderFilterCellCtrl, HeaderRowCtrl, HeaderRowType, IHeaderRowComp, _ } from '@ag-grid-community/core';\nimport React, { memo, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { BeansContext } from '../beansContext';\nimport HeaderCellComp from './headerCellComp';\nimport HeaderGroupCellComp from './headerGroupCellComp';\nimport HeaderFilterCellComp from './headerFilterCellComp';\n\nconst HeaderRowComp = (props: {ctrl: HeaderRowCtrl}) => {\n\n    const {gridOptionsWrapper} = useContext(BeansContext);\n\n    const [ transform, setTransform ] = useState<string>();\n    const [ height, setHeight ] = useState<string>();\n    const [ top, setTop ] = useState<string>();\n    const [ width, setWidth ] = useState<string>();\n    const [ ariaRowIndex, setAriaRowIndex ] = useState<number>();\n    const [ cellCtrls, setCellCtrls ] = useState<AbstractHeaderCellCtrl[]>([]);\n\n    const eGui = useRef<HTMLDivElement>(null);\n\n    const { ctrl } = props;\n\n    const typeColumn = ctrl.getType() === HeaderRowType.COLUMN;\n    const typeGroup = ctrl.getType() === HeaderRowType.COLUMN_GROUP;\n    const typeFilter = ctrl.getType() === HeaderRowType.FLOATING_FILTER;\n\n    const setCellCtrlsMaintainOrder = useCallback( (prev: AbstractHeaderCellCtrl[], next: AbstractHeaderCellCtrl[]) => {\n\n        // if we are ensuring dom order, we set the ctrls into the dom in the same order they appear on screen\n        if (gridOptionsWrapper.isEnsureDomOrder()) {\n            return next;\n        }\n\n        // if not maintaining order, we want to keep the dom elements we have and add new ones to the end,\n        // otherwise we will loose transition effects as elements are placed in different dom locations\n        const prevMap = _.mapById(prev, c => c.getInstanceId());\n        const nextMap = _.mapById(next, c => c.getInstanceId());\n\n        const oldCtrlsWeAreKeeping = prev.filter( c => nextMap.has(c.getInstanceId()) );\n        const newCtrls = next.filter( c => !prevMap.has(c.getInstanceId()) )\n\n        return [...oldCtrlsWeAreKeeping, ...newCtrls];\n    }, []);\n\n    useEffect(() => {\n\n        const compProxy: IHeaderRowComp = {\n            setTransform: transform => setTransform(transform),\n            setHeight: height => setHeight(height),\n            setTop: top => setTop(top),\n            setHeaderCtrls: ctrls => setCellCtrls(prev => setCellCtrlsMaintainOrder(prev, ctrls)),\n            setWidth: width => setWidth(width),\n            setAriaRowIndex: rowIndex => setAriaRowIndex(rowIndex)\n        };\n\n        ctrl.setComp(compProxy);\n\n    }, []);\n\n    const style = useMemo( ()=> ({\n        transform: transform,\n        height: height,\n        top: top,\n        width: width\n    }), [transform, height, top, width]);\n\n    const className = useMemo( ()=> {\n        const res: string[] = [`ag-header-row`];\n        \n        typeColumn && res.push(`ag-header-row-column`);\n        typeGroup && res.push(`ag-header-row-column-group`);\n        typeFilter && res.push(`ag-header-row-column-filter`);\n\n        return res.join(' ');\n    }, []);\n\n    const createCellJsx = useCallback( (cellCtrl: AbstractHeaderCellCtrl) => {\n        switch (ctrl.getType()) {\n            case HeaderRowType.COLUMN_GROUP :\n                return <HeaderGroupCellComp ctrl={cellCtrl as HeaderGroupCellCtrl} key={cellCtrl.getInstanceId()} />;\n\n            case HeaderRowType.FLOATING_FILTER :\n                return <HeaderFilterCellComp ctrl={cellCtrl as HeaderFilterCellCtrl} key={cellCtrl.getInstanceId()} />;\n                \n            default :\n                return <HeaderCellComp ctrl={cellCtrl as HeaderCellCtrl} key={cellCtrl.getInstanceId()} />;\n        }\n    }, []);\n\n    // below, we are not doing floating filters, not yet\n    return (\n        <div ref={eGui} className={className} role=\"row\" style={style} aria-rowindex={ariaRowIndex}>\n            { cellCtrls.map( createCellJsx ) }\n        </div>\n    );\n};\n\nexport default memo(HeaderRowComp);\n"]},"metadata":{},"sourceType":"script"}