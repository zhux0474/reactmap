{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { Events } from \"../events\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { getValueUsingField } from \"../utils/object\";\nimport { missing, exists } from \"../utils/generic\";\nimport { doOnce } from \"../utils/function\";\n\nvar ValueService =\n/** @class */\nfunction (_super) {\n  __extends(ValueService, _super);\n\n  function ValueService() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.initialised = false;\n    return _this;\n  }\n\n  ValueService.prototype.init = function () {\n    this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();\n    this.initialised = true;\n  };\n\n  ValueService.prototype.getValue = function (column, rowNode, forFilter, ignoreAggData) {\n    if (forFilter === void 0) {\n      forFilter = false;\n    }\n\n    if (ignoreAggData === void 0) {\n      ignoreAggData = false;\n    } // hack - the grid is getting refreshed before this bean gets initialised, race condition.\n    // really should have a way so they get initialised in the right order???\n\n\n    if (!this.initialised) {\n      this.init();\n    }\n\n    if (!rowNode) {\n      return;\n    } // pull these out to make code below easier to read\n\n\n    var colDef = column.getColDef();\n    var field = colDef.field;\n    var colId = column.getId();\n    var data = rowNode.data;\n    var result; // if there is a value getter, this gets precedence over a field\n\n    var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;\n    var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;\n\n    if (forFilter && colDef.filterValueGetter) {\n      result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);\n    } else if (this.gridOptionsWrapper.isTreeData() && aggDataExists) {\n      result = rowNode.aggData[colId];\n    } else if (this.gridOptionsWrapper.isTreeData() && colDef.valueGetter) {\n      result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n    } else if (this.gridOptionsWrapper.isTreeData() && field && data) {\n      result = getValueUsingField(data, field, column.isFieldContainsDots());\n    } else if (groupDataExists) {\n      result = rowNode.groupData[colId];\n    } else if (aggDataExists) {\n      result = rowNode.aggData[colId];\n    } else if (colDef.valueGetter) {\n      result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n    } else if (field && data) {\n      result = getValueUsingField(data, field, column.isFieldContainsDots());\n    } // the result could be an expression itself, if we are allowing cell values to be expressions\n\n\n    if (this.cellExpressions && typeof result === 'string' && result.indexOf('=') === 0) {\n      var cellValueGetter = result.substring(1);\n      result = this.executeValueGetter(cellValueGetter, data, column, rowNode);\n    }\n\n    if (result == null) {\n      var openedGroup = this.getOpenedGroup(rowNode, column);\n\n      if (openedGroup != null) {\n        return openedGroup;\n      }\n    }\n\n    return result;\n  };\n\n  ValueService.prototype.getOpenedGroup = function (rowNode, column) {\n    if (!this.gridOptionsWrapper.isShowOpenedGroup()) {\n      return;\n    }\n\n    var colDef = column.getColDef();\n\n    if (!colDef.showRowGroup) {\n      return;\n    }\n\n    var showRowGroup = column.getColDef().showRowGroup;\n    var pointer = rowNode.parent;\n\n    while (pointer != null) {\n      if (pointer.rowGroupColumn && (showRowGroup === true || showRowGroup === pointer.rowGroupColumn.getId())) {\n        return pointer.key;\n      }\n\n      pointer = pointer.parent;\n    }\n\n    return undefined;\n  };\n\n  ValueService.prototype.setValue = function (rowNode, colKey, newValue, eventSource) {\n    var column = this.columnModel.getPrimaryColumn(colKey);\n\n    if (!rowNode || !column) {\n      return;\n    } // this will only happen if user is trying to paste into a group row, which doesn't make sense\n    // the user should not be trying to paste into group rows\n\n\n    if (missing(rowNode.data)) {\n      rowNode.data = {};\n    } // for backwards compatibility we are also retrieving the newValueHandler as well as the valueSetter\n\n\n    var _a = column.getColDef(),\n        field = _a.field,\n        newValueHandler = _a.newValueHandler,\n        valueSetter = _a.valueSetter; // need either a field or a newValueHandler for this to work\n\n\n    if (missing(field) && missing(newValueHandler) && missing(valueSetter)) {\n      // we don't tell user about newValueHandler, as that is deprecated\n      console.warn(\"AG Grid: you need either field or valueSetter set on colDef for editing to work\");\n      return;\n    }\n\n    var params = {\n      node: rowNode,\n      data: rowNode.data,\n      oldValue: this.getValue(column, rowNode),\n      newValue: newValue,\n      colDef: column.getColDef(),\n      column: column,\n      api: this.gridOptionsWrapper.getApi(),\n      columnApi: this.gridOptionsWrapper.getColumnApi(),\n      context: this.gridOptionsWrapper.getContext()\n    };\n    params.newValue = newValue;\n    var valueWasDifferent;\n\n    if (newValueHandler && exists(newValueHandler)) {\n      valueWasDifferent = newValueHandler(params);\n    } else if (exists(valueSetter)) {\n      valueWasDifferent = this.expressionService.evaluate(valueSetter, params);\n    } else {\n      valueWasDifferent = this.setValueUsingField(rowNode.data, field, newValue, column.isFieldContainsDots());\n    } // in case user forgot to return something (possible if they are not using TypeScript\n    // and just forgot, or using an old newValueHandler we didn't always expect a return\n    // value here), we default the return value to true, so we always refresh.\n\n\n    if (valueWasDifferent === undefined) {\n      valueWasDifferent = true;\n    } // if no change to the value, then no need to do the updating, or notifying via events.\n    // otherwise the user could be tabbing around the grid, and cellValueChange would get called\n    // all the time.\n\n\n    if (!valueWasDifferent) {\n      return;\n    } // reset quick filter on this row\n\n\n    rowNode.resetQuickFilterAggregateText();\n    this.valueCache.onDataChanged();\n    params.newValue = this.getValue(column, rowNode);\n    var onCellValueChanged = column.getColDef().onCellValueChanged;\n\n    if (typeof onCellValueChanged === 'function') {\n      // to make callback async, do in a timeout\n      setTimeout(function () {\n        return onCellValueChanged(params);\n      }, 0);\n    }\n\n    var event = {\n      type: Events.EVENT_CELL_VALUE_CHANGED,\n      event: null,\n      rowIndex: rowNode.rowIndex,\n      rowPinned: rowNode.rowPinned,\n      column: params.column,\n      api: params.api,\n      columnApi: params.columnApi,\n      colDef: params.colDef,\n      context: params.context,\n      data: rowNode.data,\n      node: rowNode,\n      oldValue: params.oldValue,\n      newValue: params.newValue,\n      value: params.newValue,\n      source: eventSource\n    };\n    this.eventService.dispatchEvent(event);\n  };\n\n  ValueService.prototype.setValueUsingField = function (data, field, newValue, isFieldContainsDots) {\n    if (!field) {\n      return false;\n    } // if no '.', then it's not a deep value\n\n\n    var valuesAreSame = false;\n\n    if (!isFieldContainsDots) {\n      data[field] = newValue;\n    } else {\n      // otherwise it is a deep value, so need to dig for it\n      var fieldPieces = field.split('.');\n      var currentObject = data;\n\n      while (fieldPieces.length > 0 && currentObject) {\n        var fieldPiece = fieldPieces.shift();\n\n        if (fieldPieces.length === 0) {\n          currentObject[fieldPiece] = newValue;\n        } else {\n          currentObject = currentObject[fieldPiece];\n        }\n      }\n    }\n\n    return !valuesAreSame;\n  };\n\n  ValueService.prototype.executeFilterValueGetter = function (valueGetter, data, column, rowNode) {\n    var params = {\n      data: data,\n      node: rowNode,\n      column: column,\n      colDef: column.getColDef(),\n      api: this.gridOptionsWrapper.getApi(),\n      columnApi: this.gridOptionsWrapper.getColumnApi(),\n      context: this.gridOptionsWrapper.getContext(),\n      getValue: this.getValueCallback.bind(this, rowNode)\n    };\n    return this.expressionService.evaluate(valueGetter, params);\n  };\n\n  ValueService.prototype.executeValueGetter = function (valueGetter, data, column, rowNode) {\n    var colId = column.getId(); // if inside the same turn, just return back the value we got last time\n\n    var valueFromCache = this.valueCache.getValue(rowNode, colId);\n\n    if (valueFromCache !== undefined) {\n      return valueFromCache;\n    }\n\n    var params = {\n      data: data,\n      node: rowNode,\n      column: column,\n      colDef: column.getColDef(),\n      api: this.gridOptionsWrapper.getApi(),\n      columnApi: this.gridOptionsWrapper.getColumnApi(),\n      context: this.gridOptionsWrapper.getContext(),\n      getValue: this.getValueCallback.bind(this, rowNode)\n    };\n    var result = this.expressionService.evaluate(valueGetter, params); // if a turn is active, store the value in case the grid asks for it again\n\n    this.valueCache.setValue(rowNode, colId, result);\n    return result;\n  };\n\n  ValueService.prototype.getValueCallback = function (node, field) {\n    var otherColumn = this.columnModel.getPrimaryColumn(field);\n\n    if (otherColumn) {\n      return this.getValue(otherColumn, node);\n    }\n\n    return null;\n  }; // used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col\n\n\n  ValueService.prototype.getKeyForNode = function (col, rowNode) {\n    var value = this.getValue(col, rowNode);\n    var keyCreator = col.getColDef().keyCreator;\n    var result = value;\n\n    if (keyCreator) {\n      var keyParams = {\n        value: value,\n        colDef: col.getColDef(),\n        column: col,\n        node: rowNode,\n        data: rowNode.data,\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi(),\n        context: this.gridOptionsWrapper.getContext()\n      };\n      result = keyCreator(keyParams);\n    } // if already a string, or missing, just return it\n\n\n    if (typeof result === 'string' || result == null) {\n      return result;\n    }\n\n    result = String(result);\n\n    if (result === '[object Object]') {\n      doOnce(function () {\n        console.warn('AG Grid: a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se AG Grid docs) or b) to toString() on the object to return a key');\n      }, 'getKeyForNode - warn about [object,object]');\n    }\n\n    return result;\n  };\n\n  __decorate([Autowired('expressionService')], ValueService.prototype, \"expressionService\", void 0);\n\n  __decorate([Autowired('columnModel')], ValueService.prototype, \"columnModel\", void 0);\n\n  __decorate([Autowired('valueCache')], ValueService.prototype, \"valueCache\", void 0);\n\n  __decorate([PostConstruct], ValueService.prototype, \"init\", null);\n\n  ValueService = __decorate([Bean('valueService')], ValueService);\n  return ValueService;\n}(BeanStub);\n\nexport { ValueService };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/valueService/valueService.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Autowired","Bean","PostConstruct","Events","BeanStub","getValueUsingField","missing","exists","doOnce","ValueService","_super","_this","apply","initialised","init","cellExpressions","gridOptionsWrapper","isEnableCellExpressions","getValue","column","rowNode","forFilter","ignoreAggData","colDef","getColDef","field","colId","getId","data","result","groupDataExists","groupData","undefined","aggDataExists","aggData","filterValueGetter","executeFilterValueGetter","isTreeData","valueGetter","executeValueGetter","isFieldContainsDots","indexOf","cellValueGetter","substring","openedGroup","getOpenedGroup","isShowOpenedGroup","showRowGroup","pointer","parent","rowGroupColumn","setValue","colKey","newValue","eventSource","columnModel","getPrimaryColumn","_a","newValueHandler","valueSetter","console","warn","params","node","oldValue","api","getApi","columnApi","getColumnApi","context","getContext","valueWasDifferent","expressionService","evaluate","setValueUsingField","resetQuickFilterAggregateText","valueCache","onDataChanged","onCellValueChanged","setTimeout","event","type","EVENT_CELL_VALUE_CHANGED","rowIndex","rowPinned","value","source","eventService","dispatchEvent","valuesAreSame","fieldPieces","split","currentObject","fieldPiece","shift","getValueCallback","bind","valueFromCache","otherColumn","getKeyForNode","col","keyCreator","keyParams","String"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { Events } from \"../events\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { getValueUsingField } from \"../utils/object\";\nimport { missing, exists } from \"../utils/generic\";\nimport { doOnce } from \"../utils/function\";\nvar ValueService = /** @class */ (function (_super) {\n    __extends(ValueService, _super);\n    function ValueService() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.initialised = false;\n        return _this;\n    }\n    ValueService.prototype.init = function () {\n        this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();\n        this.initialised = true;\n    };\n    ValueService.prototype.getValue = function (column, rowNode, forFilter, ignoreAggData) {\n        if (forFilter === void 0) { forFilter = false; }\n        if (ignoreAggData === void 0) { ignoreAggData = false; }\n        // hack - the grid is getting refreshed before this bean gets initialised, race condition.\n        // really should have a way so they get initialised in the right order???\n        if (!this.initialised) {\n            this.init();\n        }\n        if (!rowNode) {\n            return;\n        }\n        // pull these out to make code below easier to read\n        var colDef = column.getColDef();\n        var field = colDef.field;\n        var colId = column.getId();\n        var data = rowNode.data;\n        var result;\n        // if there is a value getter, this gets precedence over a field\n        var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;\n        var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;\n        if (forFilter && colDef.filterValueGetter) {\n            result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);\n        }\n        else if (this.gridOptionsWrapper.isTreeData() && aggDataExists) {\n            result = rowNode.aggData[colId];\n        }\n        else if (this.gridOptionsWrapper.isTreeData() && colDef.valueGetter) {\n            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n        }\n        else if (this.gridOptionsWrapper.isTreeData() && (field && data)) {\n            result = getValueUsingField(data, field, column.isFieldContainsDots());\n        }\n        else if (groupDataExists) {\n            result = rowNode.groupData[colId];\n        }\n        else if (aggDataExists) {\n            result = rowNode.aggData[colId];\n        }\n        else if (colDef.valueGetter) {\n            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n        }\n        else if (field && data) {\n            result = getValueUsingField(data, field, column.isFieldContainsDots());\n        }\n        // the result could be an expression itself, if we are allowing cell values to be expressions\n        if (this.cellExpressions && (typeof result === 'string') && result.indexOf('=') === 0) {\n            var cellValueGetter = result.substring(1);\n            result = this.executeValueGetter(cellValueGetter, data, column, rowNode);\n        }\n        if (result == null) {\n            var openedGroup = this.getOpenedGroup(rowNode, column);\n            if (openedGroup != null) {\n                return openedGroup;\n            }\n        }\n        return result;\n    };\n    ValueService.prototype.getOpenedGroup = function (rowNode, column) {\n        if (!this.gridOptionsWrapper.isShowOpenedGroup()) {\n            return;\n        }\n        var colDef = column.getColDef();\n        if (!colDef.showRowGroup) {\n            return;\n        }\n        var showRowGroup = column.getColDef().showRowGroup;\n        var pointer = rowNode.parent;\n        while (pointer != null) {\n            if (pointer.rowGroupColumn && (showRowGroup === true || showRowGroup === pointer.rowGroupColumn.getId())) {\n                return pointer.key;\n            }\n            pointer = pointer.parent;\n        }\n        return undefined;\n    };\n    ValueService.prototype.setValue = function (rowNode, colKey, newValue, eventSource) {\n        var column = this.columnModel.getPrimaryColumn(colKey);\n        if (!rowNode || !column) {\n            return;\n        }\n        // this will only happen if user is trying to paste into a group row, which doesn't make sense\n        // the user should not be trying to paste into group rows\n        if (missing(rowNode.data)) {\n            rowNode.data = {};\n        }\n        // for backwards compatibility we are also retrieving the newValueHandler as well as the valueSetter\n        var _a = column.getColDef(), field = _a.field, newValueHandler = _a.newValueHandler, valueSetter = _a.valueSetter;\n        // need either a field or a newValueHandler for this to work\n        if (missing(field) && missing(newValueHandler) && missing(valueSetter)) {\n            // we don't tell user about newValueHandler, as that is deprecated\n            console.warn(\"AG Grid: you need either field or valueSetter set on colDef for editing to work\");\n            return;\n        }\n        var params = {\n            node: rowNode,\n            data: rowNode.data,\n            oldValue: this.getValue(column, rowNode),\n            newValue: newValue,\n            colDef: column.getColDef(),\n            column: column,\n            api: this.gridOptionsWrapper.getApi(),\n            columnApi: this.gridOptionsWrapper.getColumnApi(),\n            context: this.gridOptionsWrapper.getContext()\n        };\n        params.newValue = newValue;\n        var valueWasDifferent;\n        if (newValueHandler && exists(newValueHandler)) {\n            valueWasDifferent = newValueHandler(params);\n        }\n        else if (exists(valueSetter)) {\n            valueWasDifferent = this.expressionService.evaluate(valueSetter, params);\n        }\n        else {\n            valueWasDifferent = this.setValueUsingField(rowNode.data, field, newValue, column.isFieldContainsDots());\n        }\n        // in case user forgot to return something (possible if they are not using TypeScript\n        // and just forgot, or using an old newValueHandler we didn't always expect a return\n        // value here), we default the return value to true, so we always refresh.\n        if (valueWasDifferent === undefined) {\n            valueWasDifferent = true;\n        }\n        // if no change to the value, then no need to do the updating, or notifying via events.\n        // otherwise the user could be tabbing around the grid, and cellValueChange would get called\n        // all the time.\n        if (!valueWasDifferent) {\n            return;\n        }\n        // reset quick filter on this row\n        rowNode.resetQuickFilterAggregateText();\n        this.valueCache.onDataChanged();\n        params.newValue = this.getValue(column, rowNode);\n        var onCellValueChanged = column.getColDef().onCellValueChanged;\n        if (typeof onCellValueChanged === 'function') {\n            // to make callback async, do in a timeout\n            setTimeout(function () { return onCellValueChanged(params); }, 0);\n        }\n        var event = {\n            type: Events.EVENT_CELL_VALUE_CHANGED,\n            event: null,\n            rowIndex: rowNode.rowIndex,\n            rowPinned: rowNode.rowPinned,\n            column: params.column,\n            api: params.api,\n            columnApi: params.columnApi,\n            colDef: params.colDef,\n            context: params.context,\n            data: rowNode.data,\n            node: rowNode,\n            oldValue: params.oldValue,\n            newValue: params.newValue,\n            value: params.newValue,\n            source: eventSource\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    ValueService.prototype.setValueUsingField = function (data, field, newValue, isFieldContainsDots) {\n        if (!field) {\n            return false;\n        }\n        // if no '.', then it's not a deep value\n        var valuesAreSame = false;\n        if (!isFieldContainsDots) {\n            data[field] = newValue;\n        }\n        else {\n            // otherwise it is a deep value, so need to dig for it\n            var fieldPieces = field.split('.');\n            var currentObject = data;\n            while (fieldPieces.length > 0 && currentObject) {\n                var fieldPiece = fieldPieces.shift();\n                if (fieldPieces.length === 0) {\n                    currentObject[fieldPiece] = newValue;\n                }\n                else {\n                    currentObject = currentObject[fieldPiece];\n                }\n            }\n        }\n        return !valuesAreSame;\n    };\n    ValueService.prototype.executeFilterValueGetter = function (valueGetter, data, column, rowNode) {\n        var params = {\n            data: data,\n            node: rowNode,\n            column: column,\n            colDef: column.getColDef(),\n            api: this.gridOptionsWrapper.getApi(),\n            columnApi: this.gridOptionsWrapper.getColumnApi(),\n            context: this.gridOptionsWrapper.getContext(),\n            getValue: this.getValueCallback.bind(this, rowNode)\n        };\n        return this.expressionService.evaluate(valueGetter, params);\n    };\n    ValueService.prototype.executeValueGetter = function (valueGetter, data, column, rowNode) {\n        var colId = column.getId();\n        // if inside the same turn, just return back the value we got last time\n        var valueFromCache = this.valueCache.getValue(rowNode, colId);\n        if (valueFromCache !== undefined) {\n            return valueFromCache;\n        }\n        var params = {\n            data: data,\n            node: rowNode,\n            column: column,\n            colDef: column.getColDef(),\n            api: this.gridOptionsWrapper.getApi(),\n            columnApi: this.gridOptionsWrapper.getColumnApi(),\n            context: this.gridOptionsWrapper.getContext(),\n            getValue: this.getValueCallback.bind(this, rowNode)\n        };\n        var result = this.expressionService.evaluate(valueGetter, params);\n        // if a turn is active, store the value in case the grid asks for it again\n        this.valueCache.setValue(rowNode, colId, result);\n        return result;\n    };\n    ValueService.prototype.getValueCallback = function (node, field) {\n        var otherColumn = this.columnModel.getPrimaryColumn(field);\n        if (otherColumn) {\n            return this.getValue(otherColumn, node);\n        }\n        return null;\n    };\n    // used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col\n    ValueService.prototype.getKeyForNode = function (col, rowNode) {\n        var value = this.getValue(col, rowNode);\n        var keyCreator = col.getColDef().keyCreator;\n        var result = value;\n        if (keyCreator) {\n            var keyParams = {\n                value: value,\n                colDef: col.getColDef(),\n                column: col,\n                node: rowNode,\n                data: rowNode.data,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext()\n            };\n            result = keyCreator(keyParams);\n        }\n        // if already a string, or missing, just return it\n        if (typeof result === 'string' || result == null) {\n            return result;\n        }\n        result = String(result);\n        if (result === '[object Object]') {\n            doOnce(function () {\n                console.warn('AG Grid: a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se AG Grid docs) or b) to toString() on the object to return a key');\n            }, 'getKeyForNode - warn about [object,object]');\n        }\n        return result;\n    };\n    __decorate([\n        Autowired('expressionService')\n    ], ValueService.prototype, \"expressionService\", void 0);\n    __decorate([\n        Autowired('columnModel')\n    ], ValueService.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('valueCache')\n    ], ValueService.prototype, \"valueCache\", void 0);\n    __decorate([\n        PostConstruct\n    ], ValueService.prototype, \"init\", null);\n    ValueService = __decorate([\n        Bean('valueService')\n    ], ValueService);\n    return ValueService;\n}(BeanStub));\nexport { ValueService };\n"]},"metadata":{},"sourceType":"module"}