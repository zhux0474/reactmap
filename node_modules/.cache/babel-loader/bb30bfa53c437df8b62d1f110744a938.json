{"ast":null,"code":"var _jsxFileName = \"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/dropdown.js\";\nimport React, { useState } from 'react';\nimport { Context } from \"./context.js\";\nimport { metadata } from './metadata.js';\n/*\nfunction App() {\n  // Array of objects containing data\n  var attributes = []\n  for (var i =1; i<=Object.keys(metadata).length;i++) {\n    console.log(metadata[i]['attributename'])\n    //need put this info somewhere (inside the state)\n    attributes.push( { label: metadata[i]['attributename'], value: metadata[i]['geojson_url']}); \n  }\n  \n\n// Using state to keep track of selection\nvar [attribute, setAttribute] = useState(\"Select an attribute\")\nconsole.log(attribute)\n\n// Using this function to update the state \n// whenever a new option is selected from the dropdown\n// only if i could move it so smokermap could use it to update source link \nvar handleAttributeChange = (e) => {\n  setAttribute(e.target.value)\n  console.log(e.target.value)\n}\n\n  return (\n    \n    <Context.Consumer>\n      {(context)=>(\n    <div className=\"Dropdown\">\n    {attribute}\n    <br />\n   \n    <select onChange={context.handleChange}> \n      <option value=\" Select an attribute\"> -- Select an attribute -- </option>\n      \n      {attributes.map((attribute) => <option value={attribute.value}> {attribute.label}</option>)}\n      console.log(attributes)\n    </select>\n    </div>\n    )}\n    </Context.Consumer>\n  );\n}\n\nexport default App;*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dropdown() {\n  return (\n    /*#__PURE__*/\n    //add an onChange event listener to the <select> tag and set the value to {context.handleChange}.\n    _jsxDEV(Context.Consumer, {\n      children: context => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: context.handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"metadata[1]['geojson_url']\",\n            children: \" metadata[1]['attributename']\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"metadata[2]['geojson_url']\",\n            children: \"metadata[2]['attributename']\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"metadata[3]['geojson_url']\",\n            children: \"metadata[3]['attributename']\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"metadata[4]['geojson_url']\",\n            children: \"metadata[4]['attributename']\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_c = Dropdown;\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/src/components/dropdown.js"],"names":["React","useState","Context","metadata","Dropdown","context","handleChange"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,OAAR,QAAsB,cAAtB;AACA,SAAQC,QAAR,QAAuB,eAAvB;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAOA,SAASC,QAAT,GAAmB;AACjB;AAAA;AACE;AACA,YAAC,OAAD,CAAS,QAAT;AAAA,gBAGIC,OAAD,iBACD;AAAA,gCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAQ,UAAA,QAAQ,EAAEA,OAAO,CAACC,YAA1B;AAAA,kCACE;AAAQ,YAAA,KAAK,EAAG,4BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAQ,YAAA,KAAK,EAAG,4BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAQ,YAAA,KAAK,EAAG,4BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAQ,YAAA,KAAK,EAAG,4BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA;AAFF;AAuBD;;KAxBQF,Q;AAyBT,eAAeA,QAAf","sourcesContent":["import React, {useState} from 'react';\nimport {Context} from \"./context.js\"\nimport {metadata} from './metadata.js';\n\n\n\n\n\n\n/*\nfunction App() {\n  // Array of objects containing data\n  var attributes = []\n  for (var i =1; i<=Object.keys(metadata).length;i++) {\n    console.log(metadata[i]['attributename'])\n    //need put this info somewhere (inside the state)\n    attributes.push( { label: metadata[i]['attributename'], value: metadata[i]['geojson_url']}); \n  }\n  \n\n// Using state to keep track of selection\nvar [attribute, setAttribute] = useState(\"Select an attribute\")\nconsole.log(attribute)\n\n// Using this function to update the state \n// whenever a new option is selected from the dropdown\n// only if i could move it so smokermap could use it to update source link \nvar handleAttributeChange = (e) => {\n  setAttribute(e.target.value)\n  console.log(e.target.value)\n}\n\n  return (\n    \n    <Context.Consumer>\n      {(context)=>(\n    <div className=\"Dropdown\">\n    {attribute}\n    <br />\n   \n    <select onChange={context.handleChange}> \n      <option value=\" Select an attribute\"> -- Select an attribute -- </option>\n      \n      {attributes.map((attribute) => <option value={attribute.value}> {attribute.label}</option>)}\n      console.log(attributes)\n    </select>\n    </div>\n    )}\n    </Context.Consumer>\n  );\n}\n\nexport default App;*/\n\n\n\n\n\n\nfunction Dropdown(){\n  return(\n    //add an onChange event listener to the <select> tag and set the value to {context.handleChange}.\n    <Context.Consumer>\n\n  \n      {(context)=>(\n      <div>\n      <p>Please Select</p>\n      <select onChange={context.handleChange}>\n        <option value = \"metadata[1]['geojson_url']\"> metadata[1]['attributename']</option>\n        <option value = \"metadata[2]['geojson_url']\">metadata[2]['attributename']</option>\n        <option value = \"metadata[3]['geojson_url']\">metadata[3]['attributename']</option>\n        <option value = \"metadata[4]['geojson_url']\">metadata[4]['attributename']</option>\n      </select>\n    </div>\n      )}\n      \n    </Context.Consumer>\n\n  )\n\n\n\n}\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}