{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean } from \"../context/context\";\nimport { _ } from \"../utils\";\nimport { Constants } from \"../constants/constants\"; // this logic is used by both SSRM and CSRM\n\nvar RowNodeSorter =\n/** @class */\nfunction () {\n  function RowNodeSorter() {}\n\n  RowNodeSorter.prototype.doFullSort = function (rowNodes, sortOptions) {\n    var mapper = function (rowNode, pos) {\n      return {\n        currentPos: pos,\n        rowNode: rowNode\n      };\n    };\n\n    var sortedRowNodes = rowNodes.map(mapper);\n    sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));\n    return sortedRowNodes.map(function (item) {\n      return item.rowNode;\n    });\n  };\n\n  RowNodeSorter.prototype.compareRowNodes = function (sortOptions, sortedNodeA, sortedNodeB) {\n    var nodeA = sortedNodeA.rowNode;\n    var nodeB = sortedNodeB.rowNode; // Iterate columns, return the first that doesn't match\n\n    for (var i = 0, len = sortOptions.length; i < len; i++) {\n      var sortOption = sortOptions[i];\n      var isInverted = sortOption.sort === Constants.SORT_DESC;\n      var valueA = this.getValue(nodeA, sortOption.column);\n      var valueB = this.getValue(nodeB, sortOption.column);\n      var comparatorResult = void 0;\n      var providedComparator = this.getComparator(sortOption, nodeA);\n\n      if (providedComparator) {\n        //if comparator provided, use it\n        comparatorResult = providedComparator(valueA, valueB, nodeA, nodeB, isInverted);\n      } else {\n        //otherwise do our own comparison\n        comparatorResult = _.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());\n      } // user provided comparators can return 'NaN' if they don't correctly handle 'undefined' values, this\n      // typically occurs when the comparator is used on a group row\n\n\n      var validResult = !isNaN(comparatorResult);\n\n      if (validResult && comparatorResult !== 0) {\n        return sortOption.sort === Constants.SORT_ASC ? comparatorResult : comparatorResult * -1;\n      }\n    } // All matched, we make is so that the original sort order is kept:\n\n\n    return sortedNodeA.currentPos - sortedNodeB.currentPos;\n  };\n\n  RowNodeSorter.prototype.getComparator = function (sortOption, rowNode) {\n    var column = sortOption.column; // comparator on col get preference over everything else\n\n    var comparatorOnCol = column.getColDef().comparator;\n\n    if (comparatorOnCol != null) {\n      return comparatorOnCol;\n    } // if no comparator on col, see if we are showing a group, and if we are, get comparator from row group col\n\n\n    if (rowNode.rowGroupColumn) {\n      return rowNode.rowGroupColumn.getColDef().comparator;\n    }\n\n    if (!column.getColDef().showRowGroup) {\n      return;\n    } // if a 'field' is supplied on the autoGroupColumnDef we need to use the associated column comparator\n\n\n    var groupLeafField = !rowNode.group && column.getColDef().field;\n\n    if (!groupLeafField) {\n      return;\n    }\n\n    var primaryColumn = this.columnModel.getPrimaryColumn(groupLeafField);\n\n    if (!primaryColumn) {\n      return;\n    }\n\n    return primaryColumn.getColDef().comparator;\n  };\n\n  RowNodeSorter.prototype.getValue = function (nodeA, column) {\n    return this.valueService.getValue(column, nodeA, false, false);\n  };\n\n  __decorate([Autowired('gridOptionsWrapper')], RowNodeSorter.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('valueService')], RowNodeSorter.prototype, \"valueService\", void 0);\n\n  __decorate([Autowired('columnModel')], RowNodeSorter.prototype, \"columnModel\", void 0);\n\n  RowNodeSorter = __decorate([Bean('rowNodeSorter')], RowNodeSorter);\n  return RowNodeSorter;\n}();\n\nexport { RowNodeSorter };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/rowNodes/rowNodeSorter.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","Autowired","Bean","_","Constants","RowNodeSorter","prototype","doFullSort","rowNodes","sortOptions","mapper","rowNode","pos","currentPos","sortedRowNodes","map","sort","compareRowNodes","bind","item","sortedNodeA","sortedNodeB","nodeA","nodeB","len","sortOption","isInverted","SORT_DESC","valueA","getValue","column","valueB","comparatorResult","providedComparator","getComparator","defaultComparator","gridOptionsWrapper","isAccentedSort","validResult","isNaN","SORT_ASC","comparatorOnCol","getColDef","comparator","rowGroupColumn","showRowGroup","groupLeafField","group","field","primaryColumn","columnModel","getPrimaryColumn","valueService"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"../context/context\";\nimport { _ } from \"../utils\";\nimport { Constants } from \"../constants/constants\";\n// this logic is used by both SSRM and CSRM\nvar RowNodeSorter = /** @class */ (function () {\n    function RowNodeSorter() {\n    }\n    RowNodeSorter.prototype.doFullSort = function (rowNodes, sortOptions) {\n        var mapper = function (rowNode, pos) { return ({ currentPos: pos, rowNode: rowNode }); };\n        var sortedRowNodes = rowNodes.map(mapper);\n        sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));\n        return sortedRowNodes.map(function (item) { return item.rowNode; });\n    };\n    RowNodeSorter.prototype.compareRowNodes = function (sortOptions, sortedNodeA, sortedNodeB) {\n        var nodeA = sortedNodeA.rowNode;\n        var nodeB = sortedNodeB.rowNode;\n        // Iterate columns, return the first that doesn't match\n        for (var i = 0, len = sortOptions.length; i < len; i++) {\n            var sortOption = sortOptions[i];\n            var isInverted = sortOption.sort === Constants.SORT_DESC;\n            var valueA = this.getValue(nodeA, sortOption.column);\n            var valueB = this.getValue(nodeB, sortOption.column);\n            var comparatorResult = void 0;\n            var providedComparator = this.getComparator(sortOption, nodeA);\n            if (providedComparator) {\n                //if comparator provided, use it\n                comparatorResult = providedComparator(valueA, valueB, nodeA, nodeB, isInverted);\n            }\n            else {\n                //otherwise do our own comparison\n                comparatorResult = _.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());\n            }\n            // user provided comparators can return 'NaN' if they don't correctly handle 'undefined' values, this\n            // typically occurs when the comparator is used on a group row\n            var validResult = !isNaN(comparatorResult);\n            if (validResult && comparatorResult !== 0) {\n                return sortOption.sort === Constants.SORT_ASC ? comparatorResult : comparatorResult * -1;\n            }\n        }\n        // All matched, we make is so that the original sort order is kept:\n        return sortedNodeA.currentPos - sortedNodeB.currentPos;\n    };\n    RowNodeSorter.prototype.getComparator = function (sortOption, rowNode) {\n        var column = sortOption.column;\n        // comparator on col get preference over everything else\n        var comparatorOnCol = column.getColDef().comparator;\n        if (comparatorOnCol != null) {\n            return comparatorOnCol;\n        }\n        // if no comparator on col, see if we are showing a group, and if we are, get comparator from row group col\n        if (rowNode.rowGroupColumn) {\n            return rowNode.rowGroupColumn.getColDef().comparator;\n        }\n        if (!column.getColDef().showRowGroup) {\n            return;\n        }\n        // if a 'field' is supplied on the autoGroupColumnDef we need to use the associated column comparator\n        var groupLeafField = !rowNode.group && column.getColDef().field;\n        if (!groupLeafField) {\n            return;\n        }\n        var primaryColumn = this.columnModel.getPrimaryColumn(groupLeafField);\n        if (!primaryColumn) {\n            return;\n        }\n        return primaryColumn.getColDef().comparator;\n    };\n    RowNodeSorter.prototype.getValue = function (nodeA, column) {\n        return this.valueService.getValue(column, nodeA, false, false);\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], RowNodeSorter.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], RowNodeSorter.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('columnModel')\n    ], RowNodeSorter.prototype, \"columnModel\", void 0);\n    RowNodeSorter = __decorate([\n        Bean('rowNodeSorter')\n    ], RowNodeSorter);\n    return RowNodeSorter;\n}());\nexport { RowNodeSorter };\n"]},"metadata":{},"sourceType":"module"}