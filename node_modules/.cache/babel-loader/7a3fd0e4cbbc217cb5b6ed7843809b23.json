{"ast":null,"code":"/**\n * @module ol/source/ImageWMS\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { DEFAULT_WMS_VERSION } from './common.js';\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport WMSServerType from './WMSServerType.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { ceil, floor, round } from '../math.js';\nimport { compareVersions } from '../string.js';\nimport { containsExtent, getCenter, getForViewAndSize, getHeight, getWidth } from '../extent.js';\nimport { get as getProjection, transform } from '../proj.js';\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\n\nvar DECIMALS = 4;\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\n\nvar GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./WMSServerType.js\").default|string} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} url WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\n\nvar ImageWMS =\n/** @class */\nfunction (_super) {\n  __extends(ImageWMS, _super);\n  /**\n   * @param {Options} [opt_options] ImageWMS options.\n   */\n\n\n  function ImageWMS(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      interpolate: interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    }) || this;\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    _this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n\n    _this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    _this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.v13_ = true;\n\n    _this.updateV13_();\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n\n\n    _this.serverType_ =\n    /** @type {import(\"./WMSServerType.js\").default|undefined} */\n    options.serverType;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n\n    _this.image_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.imageSize_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n    return _this;\n  }\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getFeatureInfoUrl = function (coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n\n    var projectionObj = getProjection(projection);\n    var sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    var extent = getForViewAndSize(coordinate, resolution, 0, GETFEATUREINFO_IMAGE_SIZE);\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    assign(baseParams, this.params_, params);\n    var x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\n    var y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(extent, GETFEATUREINFO_IMAGE_SIZE, 1, sourceProjectionObj || projectionObj, baseParams);\n  };\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getLegendUrl = function (resolution, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png'\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      var layers = this.params_.LAYERS;\n      var isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n\n      if (!isSingleLayer) {\n        return undefined;\n      }\n\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      var mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;\n      var pixelSize = 0.00028;\n      baseParams['SCALE'] = resolution * mpu / pixelSize;\n    }\n\n    assign(baseParams, params);\n    return appendParams(\n    /** @type {string} */\n    this.url_, baseParams);\n  };\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n\n\n  ImageWMS.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    var imageResolution = resolution / pixelRatio;\n    var center = getCenter(extent);\n    var viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n    var viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n    var viewExtent = getForViewAndSize(center, imageResolution, 0, [viewWidth, viewHeight]);\n    var requestWidth = ceil(this.ratio_ * getWidth(extent) / imageResolution, DECIMALS);\n    var requestHeight = ceil(this.ratio_ * getHeight(extent) / imageResolution, DECIMALS);\n    var requestExtent = getForViewAndSize(center, imageResolution, 0, [requestWidth, requestHeight]);\n    var image = this.image_;\n\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), viewExtent)) {\n      return image;\n    }\n\n    var params = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    assign(params, this.params_);\n    this.imageSize_[0] = round(getWidth(requestExtent) / imageResolution, DECIMALS);\n    this.imageSize_[1] = round(getHeight(requestExtent) / imageResolution, DECIMALS);\n    var url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio, projection, params);\n    this.image_ = new ImageWrapper(requestExtent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);\n    this.renderedRevision_ = this.getRevision();\n    this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    return this.image_;\n  };\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getImageLoadFunction = function () {\n    return this.imageLoadFunction_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n\n\n  ImageWMS.prototype.getRequestUrl_ = function (extent, size, pixelRatio, projection, params) {\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          var dpi = 90 * pixelRatio + 0.5 | 0;\n\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n\n          break;\n\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n\n        default:\n          assert(false, 8); // Unknown `serverType` configured\n\n          break;\n      }\n    }\n\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n    var axisOrientation = projection.getAxisOrientation();\n    var bbox;\n\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n\n    params['BBOX'] = bbox.join(',');\n    return appendParams(\n    /** @type {string} */\n    this.url_, params);\n  };\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getUrl = function () {\n    return this.url_;\n  };\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n\n\n  ImageWMS.prototype.setImageLoadFunction = function (imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n\n\n  ImageWMS.prototype.setUrl = function (url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  ImageWMS.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  };\n  /**\n   * @private\n   */\n\n\n  ImageWMS.prototype.updateV13_ = function () {\n    var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  };\n\n  return ImageWMS;\n}(ImageSource);\n\nexport default ImageWMS;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/ol/src/source/ImageWMS.js"],"names":[],"mappings":"AAAA;;AAEG;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,SAAQ,mBAAR,QAAkC,aAAlC;AAEA,OAAO,SAAP,MAAsB,wBAAtB;AACA,OAAO,WAAP,IAAqB,wBAArB,QAAoD,YAApD;AACA,OAAO,YAAP,MAAyB,aAAzB;AACA,OAAO,aAAP,MAA0B,oBAA1B;AACA,SAAQ,YAAR,QAA2B,WAA3B;AACA,SAAQ,MAAR,QAAqB,eAArB;AACA,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,yBAAR,QAAwC,cAAxC;AACA,SAAQ,IAAR,EAAc,KAAd,EAAqB,KAArB,QAAiC,YAAjC;AACA,SAAQ,eAAR,QAA8B,cAA9B;AACA,SACE,cADF,EAEE,SAFF,EAGE,iBAHF,EAIE,SAJF,EAKE,QALF,QAMO,cANP;AAOA,SAAQ,GAAG,IAAI,aAAf,EAA8B,SAA9B,QAA8C,YAA9C;AAEA;;;AAGG;;AACH,IAAM,QAAQ,GAAG,CAAjB;AAEA;;;AAGG;;AACH,IAAM,yBAAyB,GAAG,CAAC,GAAD,EAAM,GAAN,CAAlC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBG;;AAEH;;;;;;AAMG;;AACH,IAAA,QAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuB,EAAA,SAAA,CAAA,QAAA,EAAA,MAAA,CAAA;AACrB;;AAEG;;;AACH,WAAA,QAAA,CAAY,WAAZ,EAAuB;AAAvB,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,OAAO,GAAG,WAAW,GAAG,WAAH,GAAiB,EAA5C;AAEA,QAAI,WAAW,GACb,OAAO,CAAC,cAAR,KAA2B,SAA3B,GAAuC,OAAO,CAAC,cAA/C,GAAgE,IADlE;;AAEA,QAAI,OAAO,CAAC,WAAR,KAAwB,SAA5B,EAAuC;AACrC,MAAA,WAAW,GAAG,OAAO,CAAC,WAAtB;AACD;;AAED,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM;AACJ,MAAA,YAAY,EAAE,OAAO,CAAC,YADlB;AAEJ,MAAA,WAAW,EAAE,WAFT;AAGJ,MAAA,UAAU,EAAE,OAAO,CAAC,UAHhB;AAIJ,MAAA,WAAW,EAAE,OAAO,CAAC;AAJjB,KAAN,KAKE,IALF;AAOA;;;AAGG;;AACH,IAAA,KAAI,CAAC,YAAL,GACE,OAAO,CAAC,WAAR,KAAwB,SAAxB,GAAoC,OAAO,CAAC,WAA5C,GAA0D,IAD5D;AAGA;;;AAGG;;AACH,IAAA,KAAI,CAAC,IAAL,GAAY,OAAO,CAAC,GAApB;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,kBAAL,GACE,OAAO,CAAC,iBAAR,KAA8B,SAA9B,GACI,OAAO,CAAC,iBADZ,GAEI,wBAHN;AAKA;;;AAGG;;AACH,IAAA,KAAI,CAAC,OAAL,GAAe,OAAO,CAAC,MAAR,IAAkB,EAAjC;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,IAAL,GAAY,IAAZ;;AACA,IAAA,KAAI,CAAC,UAAL;AAEA;;;AAGG;;;AACH,IAAA,KAAI,CAAC,WAAL;AACE;AACE,IAAA,OAAO,CAAC,UAFZ;AAKA;;;AAGG;;AACH,IAAA,KAAI,CAAC,MAAL,GAAc,OAAO,CAAC,KAAR,KAAkB,SAAlB,GAA8B,OAAO,CAAC,KAAtC,GAA8C,IAA5D;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,MAAL,GAAc,IAAd;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,UAAL,GAAkB,CAAC,CAAD,EAAI,CAAJ,CAAlB;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,iBAAL,GAAyB,CAAzB;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,MAAL,GAAc,OAAO,CAAC,KAAR,KAAkB,SAAlB,GAA8B,OAAO,CAAC,KAAtC,GAA8C,GAA5D;;AACD;AAED;;;;;;;;;;;;;AAaG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,UAAlB,EAA8B,UAA9B,EAA0C,UAA1C,EAAsD,MAAtD,EAA4D;AAC1D,QAAI,KAAK,IAAL,KAAc,SAAlB,EAA6B;AAC3B,aAAO,SAAP;AACD;;AACD,QAAM,aAAa,GAAG,aAAa,CAAC,UAAD,CAAnC;AACA,QAAM,mBAAmB,GAAG,KAAK,aAAL,EAA5B;;AAEA,QAAI,mBAAmB,IAAI,mBAAmB,KAAK,aAAnD,EAAkE;AAChE,MAAA,UAAU,GAAG,yBAAyB,CACpC,mBADoC,EAEpC,aAFoC,EAGpC,UAHoC,EAIpC,UAJoC,CAAtC;AAMA,MAAA,UAAU,GAAG,SAAS,CAAC,UAAD,EAAa,aAAb,EAA4B,mBAA5B,CAAtB;AACD;;AAED,QAAM,MAAM,GAAG,iBAAiB,CAC9B,UAD8B,EAE9B,UAF8B,EAG9B,CAH8B,EAI9B,yBAJ8B,CAAhC;AAOA,QAAM,UAAU,GAAG;AACjB,iBAAW,KADM;AAEjB,iBAAW,mBAFM;AAGjB,iBAAW,gBAHM;AAIjB,gBAAU,WAJO;AAKjB,qBAAe,IALE;AAMjB,sBAAgB,KAAK,OAAL,CAAa,QAAb;AANC,KAAnB;AAQA,IAAA,MAAM,CAAC,UAAD,EAAa,KAAK,OAAlB,EAA2B,MAA3B,CAAN;AAEA,QAAM,CAAC,GAAG,KAAK,CAAC,CAAC,UAAU,CAAC,CAAD,CAAV,GAAgB,MAAM,CAAC,CAAD,CAAvB,IAA8B,UAA/B,EAA2C,QAA3C,CAAf;AACA,QAAM,CAAC,GAAG,KAAK,CAAC,CAAC,MAAM,CAAC,CAAD,CAAN,GAAY,UAAU,CAAC,CAAD,CAAvB,IAA8B,UAA/B,EAA2C,QAA3C,CAAf;AACA,IAAA,UAAU,CAAC,KAAK,IAAL,GAAY,GAAZ,GAAkB,GAAnB,CAAV,GAAoC,CAApC;AACA,IAAA,UAAU,CAAC,KAAK,IAAL,GAAY,GAAZ,GAAkB,GAAnB,CAAV,GAAoC,CAApC;AAEA,WAAO,KAAK,cAAL,CACL,MADK,EAEL,yBAFK,EAGL,CAHK,EAIL,mBAAmB,IAAI,aAJlB,EAKL,UALK,CAAP;AAOD,GA9CD;AAgDA;;;;;;;;;;;;;AAaG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,UAAb,EAAyB,MAAzB,EAA+B;AAC7B,QAAI,KAAK,IAAL,KAAc,SAAlB,EAA6B;AAC3B,aAAO,SAAP;AACD;;AAED,QAAM,UAAU,GAAG;AACjB,iBAAW,KADM;AAEjB,iBAAW,mBAFM;AAGjB,iBAAW,kBAHM;AAIjB,gBAAU;AAJO,KAAnB;;AAOA,QAAI,MAAM,KAAK,SAAX,IAAwB,MAAM,CAAC,OAAD,CAAN,KAAoB,SAAhD,EAA2D;AACzD,UAAM,MAAM,GAAG,KAAK,OAAL,CAAa,MAA5B;AACA,UAAM,aAAa,GAAG,CAAC,KAAK,CAAC,OAAN,CAAc,MAAd,CAAD,IAA0B,MAAM,CAAC,MAAP,KAAkB,CAAlE;;AACA,UAAI,CAAC,aAAL,EAAoB;AAClB,eAAO,SAAP;AACD;;AACD,MAAA,UAAU,CAAC,OAAD,CAAV,GAAsB,MAAtB;AACD;;AAED,QAAI,UAAU,KAAK,SAAnB,EAA8B;AAC5B,UAAM,GAAG,GAAG,KAAK,aAAL,KACR,KAAK,aAAL,GAAqB,gBAArB,EADQ,GAER,CAFJ;AAGA,UAAM,SAAS,GAAG,OAAlB;AACA,MAAA,UAAU,CAAC,OAAD,CAAV,GAAuB,UAAU,GAAG,GAAd,GAAqB,SAA3C;AACD;;AAED,IAAA,MAAM,CAAC,UAAD,EAAa,MAAb,CAAN;AAEA,WAAO,YAAY;AAAC;AAAuB,SAAK,IAA7B,EAAoC,UAApC,CAAnB;AACD,GAhCD;AAkCA;;;;;AAKG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,WAAO,KAAK,OAAZ;AACD,GAFD;AAIA;;;;;;AAMG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,MAAjB,EAAyB,UAAzB,EAAqC,UAArC,EAAiD,UAAjD,EAA2D;AACzD,QAAI,KAAK,IAAL,KAAc,SAAlB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAED,IAAA,UAAU,GAAG,KAAK,qBAAL,CAA2B,UAA3B,CAAb;;AAEA,QAAI,UAAU,IAAI,CAAd,KAAoB,CAAC,KAAK,MAAN,IAAgB,KAAK,WAAL,KAAqB,SAAzD,CAAJ,EAAyE;AACvE,MAAA,UAAU,GAAG,CAAb;AACD;;AAED,QAAM,eAAe,GAAG,UAAU,GAAG,UAArC;AAEA,QAAM,MAAM,GAAG,SAAS,CAAC,MAAD,CAAxB;AACA,QAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAD,CAAR,GAAmB,eAApB,EAAqC,QAArC,CAAtB;AACA,QAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,MAAD,CAAT,GAAoB,eAArB,EAAsC,QAAtC,CAAvB;AACA,QAAM,UAAU,GAAG,iBAAiB,CAAC,MAAD,EAAS,eAAT,EAA0B,CAA1B,EAA6B,CAC/D,SAD+D,EAE/D,UAF+D,CAA7B,CAApC;AAIA,QAAM,YAAY,GAAG,IAAI,CACtB,KAAK,MAAL,GAAc,QAAQ,CAAC,MAAD,CAAvB,GAAmC,eADZ,EAEvB,QAFuB,CAAzB;AAIA,QAAM,aAAa,GAAG,IAAI,CACvB,KAAK,MAAL,GAAc,SAAS,CAAC,MAAD,CAAxB,GAAoC,eADZ,EAExB,QAFwB,CAA1B;AAIA,QAAM,aAAa,GAAG,iBAAiB,CAAC,MAAD,EAAS,eAAT,EAA0B,CAA1B,EAA6B,CAClE,YADkE,EAElE,aAFkE,CAA7B,CAAvC;AAKA,QAAM,KAAK,GAAG,KAAK,MAAnB;;AACA,QACE,KAAK,IACL,KAAK,iBAAL,IAA0B,KAAK,WAAL,EAD1B,IAEA,KAAK,CAAC,aAAN,MAAyB,UAFzB,IAGA,KAAK,CAAC,aAAN,MAAyB,UAHzB,IAIA,cAAc,CAAC,KAAK,CAAC,SAAN,EAAD,EAAoB,UAApB,CALhB,EAME;AACA,aAAO,KAAP;AACD;;AAED,QAAM,MAAM,GAAG;AACb,iBAAW,KADE;AAEb,iBAAW,mBAFE;AAGb,iBAAW,QAHE;AAIb,gBAAU,WAJG;AAKb,qBAAe;AALF,KAAf;AAOA,IAAA,MAAM,CAAC,MAAD,EAAS,KAAK,OAAd,CAAN;AAEA,SAAK,UAAL,CAAgB,CAAhB,IAAqB,KAAK,CACxB,QAAQ,CAAC,aAAD,CAAR,GAA0B,eADF,EAExB,QAFwB,CAA1B;AAIA,SAAK,UAAL,CAAgB,CAAhB,IAAqB,KAAK,CACxB,SAAS,CAAC,aAAD,CAAT,GAA2B,eADH,EAExB,QAFwB,CAA1B;AAKA,QAAM,GAAG,GAAG,KAAK,cAAL,CACV,aADU,EAEV,KAAK,UAFK,EAGV,UAHU,EAIV,UAJU,EAKV,MALU,CAAZ;AAQA,SAAK,MAAL,GAAc,IAAI,YAAJ,CACZ,aADY,EAEZ,UAFY,EAGZ,UAHY,EAIZ,GAJY,EAKZ,KAAK,YALO,EAMZ,KAAK,kBANO,CAAd;AASA,SAAK,iBAAL,GAAyB,KAAK,WAAL,EAAzB;AAEA,SAAK,MAAL,CAAY,gBAAZ,CACE,SAAS,CAAC,MADZ,EAEE,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAFF;AAKA,WAAO,KAAK,MAAZ;AACD,GAvFD;AAyFA;;;;AAIG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,YAAA;AACE,WAAO,KAAK,kBAAZ;AACD,GAFD;AAIA;;;;;;;;AAQG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,MAAf,EAAuB,IAAvB,EAA6B,UAA7B,EAAyC,UAAzC,EAAqD,MAArD,EAA2D;AACzD,IAAA,MAAM,CAAC,KAAK,IAAL,KAAc,SAAf,EAA0B,CAA1B,CAAN,CADyD,CACrB;;AAEpC,IAAA,MAAM,CAAC,KAAK,IAAL,GAAY,KAAZ,GAAoB,KAArB,CAAN,GAAoC,UAAU,CAAC,OAAX,EAApC;;AAEA,QAAI,EAAE,YAAY,KAAK,OAAnB,CAAJ,EAAiC;AAC/B,MAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,EAAnB;AACD;;AAED,QAAI,UAAU,IAAI,CAAlB,EAAqB;AACnB,cAAQ,KAAK,WAAb;AACE,aAAK,aAAa,CAAC,SAAnB;AACE,cAAM,GAAG,GAAI,KAAK,UAAL,GAAkB,GAAnB,GAA0B,CAAtC;;AACA,cAAI,oBAAoB,MAAxB,EAAgC;AAC9B,YAAA,MAAM,CAAC,gBAAD,CAAN,IAA4B,UAAU,GAAtC;AACD,WAFD,MAEO;AACL,YAAA,MAAM,CAAC,gBAAD,CAAN,GAA2B,SAAS,GAApC;AACD;;AACD;;AACF,aAAK,aAAa,CAAC,SAAnB;AACE,UAAA,MAAM,CAAC,gBAAD,CAAN,GAA2B,KAAK,UAAhC;AACA;;AACF,aAAK,aAAa,CAAC,eAAnB;AACA,aAAK,aAAa,CAAC,IAAnB;AACE,UAAA,MAAM,CAAC,KAAD,CAAN,GAAgB,KAAK,UAArB;AACA;;AACF;AACE,UAAA,MAAM,CAAC,KAAD,EAAQ,CAAR,CAAN,CADF,CACoB;;AAClB;AAlBJ;AAoBD;;AAED,IAAA,MAAM,CAAC,OAAD,CAAN,GAAkB,IAAI,CAAC,CAAD,CAAtB;AACA,IAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,IAAI,CAAC,CAAD,CAAvB;AAEA,QAAM,eAAe,GAAG,UAAU,CAAC,kBAAX,EAAxB;AACA,QAAI,IAAJ;;AACA,QAAI,KAAK,IAAL,IAAa,eAAe,CAAC,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B,KAAgC,IAAjD,EAAuD;AACrD,MAAA,IAAI,GAAG,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,MAAM,CAAC,CAAD,CAAlB,EAAuB,MAAM,CAAC,CAAD,CAA7B,EAAkC,MAAM,CAAC,CAAD,CAAxC,CAAP;AACD,KAFD,MAEO;AACL,MAAA,IAAI,GAAG,MAAP;AACD;;AACD,IAAA,MAAM,CAAC,MAAD,CAAN,GAAiB,IAAI,CAAC,IAAL,CAAU,GAAV,CAAjB;AAEA,WAAO,YAAY;AAAC;AAAuB,SAAK,IAA7B,EAAoC,MAApC,CAAnB;AACD,GA7CD;AA+CA;;;;AAIG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,WAAO,KAAK,IAAZ;AACD,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,UAAqB,iBAArB,EAAsC;AACpC,SAAK,MAAL,GAAc,IAAd;AACA,SAAK,kBAAL,GAA0B,iBAA1B;AACA,SAAK,OAAL;AACD,GAJD;AAMA;;;;AAIG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,GAAP,EAAU;AACR,QAAI,GAAG,IAAI,KAAK,IAAhB,EAAsB;AACpB,WAAK,IAAL,GAAY,GAAZ;AACA,WAAK,MAAL,GAAc,IAAd;AACA,WAAK,OAAL;AACD;AACF,GAND;AAQA;;;;AAIG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,MAAb,EAAmB;AACjB,IAAA,MAAM,CAAC,KAAK,OAAN,EAAe,MAAf,CAAN;AACA,SAAK,UAAL;AACA,SAAK,MAAL,GAAc,IAAd;AACA,SAAK,OAAL;AACD,GALD;AAOA;;AAEG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACE,QAAM,OAAO,GAAG,KAAK,OAAL,CAAa,SAAb,KAA2B,mBAA3C;AACA,SAAK,IAAL,GAAY,eAAe,CAAC,OAAD,EAAU,KAAV,CAAf,IAAmC,CAA/C;AACD,GAHD;;AAIF,SAAA,QAAA;AAAC,CA5aD,CAAuB,WAAvB,CAAA;;AA8aA,eAAe,QAAf","sourcesContent":["/**\n * @module ol/source/ImageWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport WMSServerType from './WMSServerType.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {assign} from '../obj.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {ceil, floor, round} from '../math.js';\nimport {compareVersions} from '../string.js';\nimport {\n  containsExtent,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {get as getProjection, transform} from '../proj.js';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nconst DECIMALS = 4;\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./WMSServerType.js\").default|string} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} url WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageWMS extends ImageSource {\n  /**\n   * @param {Options} [opt_options] ImageWMS options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    let interpolate =\n      options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    super({\n      attributions: options.attributions,\n      interpolate: interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n    this.updateV13_();\n\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n    this.serverType_ =\n      /** @type {import(\"./WMSServerType.js\").default|undefined} */ (\n        options.serverType\n      );\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        resolution\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const extent = getForViewAndSize(\n      coordinate,\n      resolution,\n      0,\n      GETFEATUREINFO_IMAGE_SIZE\n    );\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    assign(baseParams, this.params_, params);\n\n    const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\n    const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      extent,\n      GETFEATUREINFO_IMAGE_SIZE,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.url_), baseParams);\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const imageResolution = resolution / pixelRatio;\n\n    const center = getCenter(extent);\n    const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n    const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n    const viewExtent = getForViewAndSize(center, imageResolution, 0, [\n      viewWidth,\n      viewHeight,\n    ]);\n    const requestWidth = ceil(\n      (this.ratio_ * getWidth(extent)) / imageResolution,\n      DECIMALS\n    );\n    const requestHeight = ceil(\n      (this.ratio_ * getHeight(extent)) / imageResolution,\n      DECIMALS\n    );\n    const requestExtent = getForViewAndSize(center, imageResolution, 0, [\n      requestWidth,\n      requestHeight,\n    ]);\n\n    const image = this.image_;\n    if (\n      image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), viewExtent)\n    ) {\n      return image;\n    }\n\n    const params = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n    };\n    assign(params, this.params_);\n\n    this.imageSize_[0] = round(\n      getWidth(requestExtent) / imageResolution,\n      DECIMALS\n    );\n    this.imageSize_[1] = round(\n      getHeight(requestExtent) / imageResolution,\n      DECIMALS\n    );\n\n    const url = this.getRequestUrl_(\n      requestExtent,\n      this.imageSize_,\n      pixelRatio,\n      projection,\n      params\n    );\n\n    this.image_ = new ImageWrapper(\n      requestExtent,\n      resolution,\n      pixelRatio,\n      url,\n      this.crossOrigin_,\n      this.imageLoadFunction_\n    );\n\n    this.renderedRevision_ = this.getRevision();\n\n    this.image_.addEventListener(\n      EventType.CHANGE,\n      this.handleImageChange.bind(this)\n    );\n\n    return this.image_;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          const dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default:\n          assert(false, 8); // Unknown `serverType` configured\n          break;\n      }\n    }\n\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n\n    const axisOrientation = projection.getAxisOrientation();\n    let bbox;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    return appendParams(/** @type {string} */ (this.url_), params);\n  }\n\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n}\n\nexport default ImageWMS;\n"]},"metadata":{},"sourceType":"module"}