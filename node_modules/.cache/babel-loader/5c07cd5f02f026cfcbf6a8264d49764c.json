{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { areEqual, last } from \"../../utils/array\";\nimport { Events } from \"../../eventKeys\";\nimport { missing } from \"../../utils/generic\";\nimport { Constants } from \"../../constants/constants\";\nimport { BeanStub } from \"../../context/beanStub\";\n/**\n * Takes care of:\n *  #) Cell Width (including when doing cell spanning, which makes width cover many columns)\n *  #) Cell Height (when doing row span, otherwise we don't touch the height as it's just row height)\n *  #) Cell Left (the horizontal positioning of the cell, the vertical positioning is on the row)\n */\n\nvar CellPositionFeature =\n/** @class */\nfunction (_super) {\n  __extends(CellPositionFeature, _super);\n\n  function CellPositionFeature(ctrl, beans) {\n    var _this = _super.call(this) || this;\n\n    _this.cellCtrl = ctrl;\n    _this.beans = beans;\n    _this.column = ctrl.getColumn();\n    _this.rowNode = ctrl.getRowNode();\n\n    _this.setupColSpan();\n\n    _this.setupRowSpan();\n\n    return _this;\n  }\n\n  CellPositionFeature.prototype.setupRowSpan = function () {\n    this.rowSpan = this.column.getRowSpan(this.rowNode);\n  };\n\n  CellPositionFeature.prototype.setComp = function (comp) {\n    this.cellComp = comp;\n    this.onLeftChanged();\n    this.onWidthChanged();\n    this.applyRowSpan();\n  };\n\n  CellPositionFeature.prototype.onDisplayColumnsChanged = function () {\n    var colsSpanning = this.getColSpanningList();\n\n    if (!areEqual(this.colsSpanning, colsSpanning)) {\n      this.colsSpanning = colsSpanning;\n      this.onWidthChanged();\n      this.onLeftChanged(); // left changes when doing RTL\n    }\n  };\n\n  CellPositionFeature.prototype.setupColSpan = function () {\n    // if no col span is active, then we don't set it up, as it would be wasteful of CPU\n    if (this.column.getColDef().colSpan == null) {\n      return;\n    }\n\n    this.colsSpanning = this.getColSpanningList(); // because we are col spanning, a reorder of the cols can change what cols we are spanning over\n\n    this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this)); // because we are spanning over multiple cols, we check for width any time any cols width changes.\n    // this is expensive - really we should be explicitly checking only the cols we are spanning over\n    // instead of every col, however it would be tricky code to track the cols we are spanning over, so\n    // because hardly anyone will be using colSpan, am favouring this easier way for more maintainable code.\n\n    this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));\n  };\n\n  CellPositionFeature.prototype.onWidthChanged = function () {\n    if (!this.cellComp) {\n      return;\n    }\n\n    var width = this.getCellWidth();\n    this.cellComp.setWidth(width + \"px\");\n  };\n\n  CellPositionFeature.prototype.getCellWidth = function () {\n    if (!this.colsSpanning) {\n      return this.column.getActualWidth();\n    }\n\n    return this.colsSpanning.reduce(function (width, col) {\n      return width + col.getActualWidth();\n    }, 0);\n  };\n\n  CellPositionFeature.prototype.getColSpanningList = function () {\n    var colSpan = this.column.getColSpan(this.rowNode);\n    var colsSpanning = []; // if just one col, the col span is just the column we are in\n\n    if (colSpan === 1) {\n      colsSpanning.push(this.column);\n    } else {\n      var pointer = this.column;\n      var pinned = this.column.getPinned();\n\n      for (var i = 0; pointer && i < colSpan; i++) {\n        colsSpanning.push(pointer);\n        pointer = this.beans.columnModel.getDisplayedColAfter(pointer);\n\n        if (!pointer || missing(pointer)) {\n          break;\n        } // we do not allow col spanning to span outside of pinned areas\n\n\n        if (pinned !== pointer.getPinned()) {\n          break;\n        }\n      }\n    }\n\n    return colsSpanning;\n  };\n\n  CellPositionFeature.prototype.onLeftChanged = function () {\n    if (!this.cellComp) {\n      return;\n    }\n\n    var left = this.modifyLeftForPrintLayout(this.getCellLeft());\n    this.cellComp.setLeft(left + 'px');\n  };\n\n  CellPositionFeature.prototype.getCellLeft = function () {\n    var mostLeftCol;\n\n    if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {\n      mostLeftCol = last(this.colsSpanning);\n    } else {\n      mostLeftCol = this.column;\n    }\n\n    return mostLeftCol.getLeft();\n  };\n\n  CellPositionFeature.prototype.modifyLeftForPrintLayout = function (leftPosition) {\n    if (!this.cellCtrl.isPrintLayout() || this.column.getPinned() === Constants.PINNED_LEFT) {\n      return leftPosition;\n    }\n\n    var leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();\n\n    if (this.column.getPinned() === Constants.PINNED_RIGHT) {\n      var bodyWidth = this.beans.columnModel.getBodyContainerWidth();\n      return leftWidth + bodyWidth + (leftPosition || 0);\n    } // is in body\n\n\n    return leftWidth + (leftPosition || 0);\n  };\n\n  CellPositionFeature.prototype.applyRowSpan = function () {\n    if (this.rowSpan === 1) {\n      return;\n    }\n\n    var singleRowHeight = this.beans.gridOptionsWrapper.getRowHeightAsNumber();\n    var totalRowHeight = singleRowHeight * this.rowSpan;\n    this.cellComp.setHeight(totalRowHeight + \"px\");\n    this.cellComp.setZIndex('1');\n  }; // overriding to make public, as we don't dispose this bean via context\n\n\n  CellPositionFeature.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n  };\n\n  return CellPositionFeature;\n}(BeanStub);\n\nexport { CellPositionFeature };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/rendering/cell/cellPositionFeature.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","areEqual","last","Events","missing","Constants","BeanStub","CellPositionFeature","_super","ctrl","beans","_this","call","cellCtrl","column","getColumn","rowNode","getRowNode","setupColSpan","setupRowSpan","rowSpan","getRowSpan","setComp","comp","cellComp","onLeftChanged","onWidthChanged","applyRowSpan","onDisplayColumnsChanged","colsSpanning","getColSpanningList","getColDef","colSpan","addManagedListener","eventService","EVENT_DISPLAYED_COLUMNS_CHANGED","bind","EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED","width","getCellWidth","setWidth","getActualWidth","reduce","col","getColSpan","push","pointer","pinned","getPinned","i","columnModel","getDisplayedColAfter","left","modifyLeftForPrintLayout","getCellLeft","setLeft","mostLeftCol","gridOptionsWrapper","isEnableRtl","getLeft","leftPosition","isPrintLayout","PINNED_LEFT","leftWidth","getDisplayedColumnsLeftWidth","PINNED_RIGHT","bodyWidth","getBodyContainerWidth","singleRowHeight","getRowHeightAsNumber","totalRowHeight","setHeight","setZIndex","destroy"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { areEqual, last } from \"../../utils/array\";\nimport { Events } from \"../../eventKeys\";\nimport { missing } from \"../../utils/generic\";\nimport { Constants } from \"../../constants/constants\";\nimport { BeanStub } from \"../../context/beanStub\";\n/**\n * Takes care of:\n *  #) Cell Width (including when doing cell spanning, which makes width cover many columns)\n *  #) Cell Height (when doing row span, otherwise we don't touch the height as it's just row height)\n *  #) Cell Left (the horizontal positioning of the cell, the vertical positioning is on the row)\n */\nvar CellPositionFeature = /** @class */ (function (_super) {\n    __extends(CellPositionFeature, _super);\n    function CellPositionFeature(ctrl, beans) {\n        var _this = _super.call(this) || this;\n        _this.cellCtrl = ctrl;\n        _this.beans = beans;\n        _this.column = ctrl.getColumn();\n        _this.rowNode = ctrl.getRowNode();\n        _this.setupColSpan();\n        _this.setupRowSpan();\n        return _this;\n    }\n    CellPositionFeature.prototype.setupRowSpan = function () {\n        this.rowSpan = this.column.getRowSpan(this.rowNode);\n    };\n    CellPositionFeature.prototype.setComp = function (comp) {\n        this.cellComp = comp;\n        this.onLeftChanged();\n        this.onWidthChanged();\n        this.applyRowSpan();\n    };\n    CellPositionFeature.prototype.onDisplayColumnsChanged = function () {\n        var colsSpanning = this.getColSpanningList();\n        if (!areEqual(this.colsSpanning, colsSpanning)) {\n            this.colsSpanning = colsSpanning;\n            this.onWidthChanged();\n            this.onLeftChanged(); // left changes when doing RTL\n        }\n    };\n    CellPositionFeature.prototype.setupColSpan = function () {\n        // if no col span is active, then we don't set it up, as it would be wasteful of CPU\n        if (this.column.getColDef().colSpan == null) {\n            return;\n        }\n        this.colsSpanning = this.getColSpanningList();\n        // because we are col spanning, a reorder of the cols can change what cols we are spanning over\n        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));\n        // because we are spanning over multiple cols, we check for width any time any cols width changes.\n        // this is expensive - really we should be explicitly checking only the cols we are spanning over\n        // instead of every col, however it would be tricky code to track the cols we are spanning over, so\n        // because hardly anyone will be using colSpan, am favouring this easier way for more maintainable code.\n        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));\n    };\n    CellPositionFeature.prototype.onWidthChanged = function () {\n        if (!this.cellComp) {\n            return;\n        }\n        var width = this.getCellWidth();\n        this.cellComp.setWidth(width + \"px\");\n    };\n    CellPositionFeature.prototype.getCellWidth = function () {\n        if (!this.colsSpanning) {\n            return this.column.getActualWidth();\n        }\n        return this.colsSpanning.reduce(function (width, col) { return width + col.getActualWidth(); }, 0);\n    };\n    CellPositionFeature.prototype.getColSpanningList = function () {\n        var colSpan = this.column.getColSpan(this.rowNode);\n        var colsSpanning = [];\n        // if just one col, the col span is just the column we are in\n        if (colSpan === 1) {\n            colsSpanning.push(this.column);\n        }\n        else {\n            var pointer = this.column;\n            var pinned = this.column.getPinned();\n            for (var i = 0; pointer && i < colSpan; i++) {\n                colsSpanning.push(pointer);\n                pointer = this.beans.columnModel.getDisplayedColAfter(pointer);\n                if (!pointer || missing(pointer)) {\n                    break;\n                }\n                // we do not allow col spanning to span outside of pinned areas\n                if (pinned !== pointer.getPinned()) {\n                    break;\n                }\n            }\n        }\n        return colsSpanning;\n    };\n    CellPositionFeature.prototype.onLeftChanged = function () {\n        if (!this.cellComp) {\n            return;\n        }\n        var left = this.modifyLeftForPrintLayout(this.getCellLeft());\n        this.cellComp.setLeft(left + 'px');\n    };\n    CellPositionFeature.prototype.getCellLeft = function () {\n        var mostLeftCol;\n        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {\n            mostLeftCol = last(this.colsSpanning);\n        }\n        else {\n            mostLeftCol = this.column;\n        }\n        return mostLeftCol.getLeft();\n    };\n    CellPositionFeature.prototype.modifyLeftForPrintLayout = function (leftPosition) {\n        if (!this.cellCtrl.isPrintLayout() || this.column.getPinned() === Constants.PINNED_LEFT) {\n            return leftPosition;\n        }\n        var leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();\n        if (this.column.getPinned() === Constants.PINNED_RIGHT) {\n            var bodyWidth = this.beans.columnModel.getBodyContainerWidth();\n            return leftWidth + bodyWidth + (leftPosition || 0);\n        }\n        // is in body\n        return leftWidth + (leftPosition || 0);\n    };\n    CellPositionFeature.prototype.applyRowSpan = function () {\n        if (this.rowSpan === 1) {\n            return;\n        }\n        var singleRowHeight = this.beans.gridOptionsWrapper.getRowHeightAsNumber();\n        var totalRowHeight = singleRowHeight * this.rowSpan;\n        this.cellComp.setHeight(totalRowHeight + \"px\");\n        this.cellComp.setZIndex('1');\n    };\n    // overriding to make public, as we don't dispose this bean via context\n    CellPositionFeature.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n    };\n    return CellPositionFeature;\n}(BeanStub));\nexport { CellPositionFeature };\n"]},"metadata":{},"sourceType":"module"}