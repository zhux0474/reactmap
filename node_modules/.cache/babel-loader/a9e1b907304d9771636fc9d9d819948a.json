{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { SelectionService } from \"./selectionService\";\nimport { ColumnApi } from \"./columns/columnApi\";\nimport { ColumnModel } from \"./columns/columnModel\";\nimport { RowRenderer } from \"./rendering/rowRenderer\";\nimport { GridHeaderComp } from \"./headerRendering/gridHeaderComp\";\nimport { FilterManager } from \"./filter/filterManager\";\nimport { ValueService } from \"./valueService/valueService\";\nimport { EventService } from \"./eventService\";\nimport { GridBodyComp } from \"./gridBodyComp/gridBodyComp\";\nimport { GridApi } from \"./gridApi\";\nimport { ColumnFactory } from \"./columns/columnFactory\";\nimport { DisplayedGroupCreator } from \"./columns/displayedGroupCreator\";\nimport { ExpressionService } from \"./valueService/expressionService\";\nimport { TemplateService } from \"./templateService\";\nimport { PopupService } from \"./widgets/popupService\";\nimport { Logger, LoggerFactory } from \"./logger\";\nimport { ColumnUtils } from \"./columns/columnUtils\";\nimport { AutoWidthCalculator } from \"./rendering/autoWidthCalculator\";\nimport { HorizontalResizeService } from \"./headerRendering/common/horizontalResizeService\";\nimport { Context } from \"./context/context\";\nimport { GridComp } from \"./gridComp/gridComp\";\nimport { DragAndDropService } from \"./dragAndDrop/dragAndDropService\";\nimport { DragService } from \"./dragAndDrop/dragService\";\nimport { SortController } from \"./sortController\";\nimport { FocusService } from \"./focusService\";\nimport { MouseEventService } from \"./gridBodyComp/mouseEventService\";\nimport { CellNavigationService } from \"./cellNavigationService\";\nimport { Events } from \"./events\";\nimport { ValueFormatterService } from \"./rendering/valueFormatterService\";\nimport { AgCheckbox } from \"./widgets/agCheckbox\";\nimport { AgRadioButton } from \"./widgets/agRadioButton\";\nimport { VanillaFrameworkOverrides } from \"./vanillaFrameworkOverrides\";\nimport { ScrollVisibleService } from \"./gridBodyComp/scrollVisibleService\";\nimport { StylingService } from \"./styling/stylingService\";\nimport { ColumnHoverService } from \"./rendering/columnHoverService\";\nimport { ColumnAnimationService } from \"./rendering/columnAnimationService\";\nimport { AutoGroupColService } from \"./columns/autoGroupColService\";\nimport { PaginationProxy } from \"./pagination/paginationProxy\";\nimport { PaginationAutoPageSizeService } from \"./pagination/paginationAutoPageSizeService\";\nimport { Constants } from \"./constants/constants\";\nimport { ValueCache } from \"./valueService/valueCache\";\nimport { ChangeDetectionService } from \"./valueService/changeDetectionService\";\nimport { AlignedGridsService } from \"./alignedGridsService\";\nimport { UserComponentFactory } from \"./components/framework/userComponentFactory\";\nimport { UserComponentRegistry } from \"./components/framework/userComponentRegistry\";\nimport { AgComponentUtils } from \"./components/framework/agComponentUtils\";\nimport { ComponentMetadataProvider } from \"./components/framework/componentMetadataProvider\";\nimport { Beans } from \"./rendering/beans\";\nimport { Environment } from \"./environment\";\nimport { AnimationFrameService } from \"./misc/animationFrameService\";\nimport { NavigationService } from \"./gridBodyComp/navigationService\";\nimport { RowContainerHeightService } from \"./rendering/rowContainerHeightService\";\nimport { SelectableService } from \"./rowNodes/selectableService\";\nimport { PaginationComp } from \"./pagination/paginationComp\";\nimport { ResizeObserverService } from \"./misc/resizeObserverService\";\nimport { OverlayWrapperComponent } from \"./rendering/overlays/overlayWrapperComponent\";\nimport { AgGroupComponent } from \"./widgets/agGroupComponent\";\nimport { AgDialog } from \"./widgets/agDialog\";\nimport { AgPanel } from \"./widgets/agPanel\";\nimport { AgInputTextField } from \"./widgets/agInputTextField\";\nimport { AgInputTextArea } from \"./widgets/agInputTextArea\";\nimport { AgSlider } from \"./widgets/agSlider\";\nimport { AgColorPicker } from \"./widgets/agColorPicker\";\nimport { AgInputNumberField } from \"./widgets/agInputNumberField\";\nimport { AgInputRange } from \"./widgets/agInputRange\";\nimport { AgSelect } from \"./widgets/agSelect\";\nimport { AgAngleSelect } from \"./widgets/agAngleSelect\";\nimport { AgToggleButton } from \"./widgets/agToggleButton\";\nimport { RowPositionUtils } from \"./entities/rowPosition\";\nimport { CellPositionUtils } from \"./entities/cellPosition\";\nimport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { UndoRedoService } from \"./undoRedo/undoRedoService\";\nimport { AgStackComponentsRegistry } from \"./components/agStackComponentsRegistry\";\nimport { HeaderPositionUtils } from \"./headerRendering/common/headerPosition\";\nimport { HeaderNavigationService } from \"./headerRendering/common/headerNavigationService\";\nimport { exists, missing } from \"./utils/generic\";\nimport { assign, iterateObject } from \"./utils/object\";\nimport { ColumnDefFactory } from \"./columns/columnDefFactory\";\nimport { RowCssClassCalculator } from \"./rendering/row/rowCssClassCalculator\";\nimport { RowNodeBlockLoader } from \"./rowNodeCache/rowNodeBlockLoader\";\nimport { RowNodeSorter } from \"./rowNodes/rowNodeSorter\";\nimport { CtrlsService } from \"./ctrlsService\";\nimport { CtrlsFactory } from \"./ctrlsFactory\";\nimport { FakeHScrollComp } from \"./gridBodyComp/fakeHScrollComp\";\nimport { PinnedWidthService } from \"./gridBodyComp/pinnedWidthService\";\nimport { RowContainerComp } from \"./gridBodyComp/rowContainer/rowContainerComp\";\nimport { RowNodeEventThrottle } from \"./entities/rowNodeEventThrottle\";\nimport { StandardMenuFactory } from \"./headerRendering/cells/column/standardMenu\"; // creates JavaScript vanilla Grid, including JavaScript (ag-stack) components, which can\n// be wrapped by the framework wrappers\n\nvar Grid =\n/** @class */\nfunction () {\n  function Grid(eGridDiv, gridOptions, params) {\n    if (!gridOptions) {\n      console.error('AG Grid: no gridOptions provided to the grid');\n      return;\n    }\n\n    this.gridOptions = gridOptions;\n    new GridCoreCreator().create(eGridDiv, gridOptions, function (context) {\n      var gridComp = new GridComp(eGridDiv);\n      context.createBean(gridComp);\n    }, params);\n  }\n\n  Grid.prototype.destroy = function () {\n    if (this.gridOptions && this.gridOptions.api) {\n      this.gridOptions.api.destroy();\n    }\n  };\n\n  return Grid;\n}();\n\nexport { Grid }; // created services of grid only, no UI, so frameworks can use this if providing\n// their own UI\n\nvar GridCoreCreator =\n/** @class */\nfunction () {\n  function GridCoreCreator() {}\n\n  GridCoreCreator.prototype.create = function (eGridDiv, gridOptions, uiCallback, params) {\n    var _this = this;\n\n    var debug = !!gridOptions.debug;\n    var registeredModules = this.getRegisteredModules(params);\n    var beanClasses = this.createBeansList(gridOptions.rowModelType, registeredModules);\n    var providedBeanInstances = this.createProvidedBeans(eGridDiv, gridOptions, params);\n\n    if (!beanClasses) {\n      return;\n    } // happens when no row model found\n\n\n    var contextParams = {\n      providedBeanInstances: providedBeanInstances,\n      beanClasses: beanClasses,\n      debug: debug\n    };\n    var logger = new Logger('AG Grid', function () {\n      return gridOptions.debug;\n    });\n    var contextLogger = new Logger('Context', function () {\n      return contextParams.debug;\n    });\n    var context = new Context(contextParams, contextLogger);\n    var beans = context.getBean('beans');\n    this.registerModuleUserComponents(beans, registeredModules);\n    this.registerStackComponents(beans, registeredModules);\n    this.registerControllers(beans, registeredModules);\n    uiCallback(context); // we wait until the UI has finished initialising before setting in columns and rows\n\n    beans.ctrlsService.whenReady(function () {\n      _this.setColumnsAndData(beans);\n\n      _this.dispatchGridReadyEvent(beans, gridOptions);\n\n      var isEnterprise = ModuleRegistry.isRegistered(ModuleNames.EnterpriseCoreModule);\n      logger.log(\"initialised successfully, enterprise = \" + isEnterprise);\n    });\n  };\n\n  GridCoreCreator.prototype.registerControllers = function (beans, registeredModules) {\n    registeredModules.forEach(function (module) {\n      module.controllers && module.controllers.forEach(function (meta) {\n        return beans.ctrlsFactory.register(meta);\n      });\n    });\n  };\n\n  GridCoreCreator.prototype.registerStackComponents = function (beans, registeredModules) {\n    var agStackComponents = this.createAgStackComponentsList(registeredModules);\n    beans.agStackComponentsRegistry.setupComponents(agStackComponents);\n  };\n\n  GridCoreCreator.prototype.getRegisteredModules = function (params) {\n    var passedViaConstructor = params ? params.modules : null;\n    var registered = ModuleRegistry.getRegisteredModules();\n    var allModules = [];\n    var mapNames = {}; // adds to list and removes duplicates\n\n    function addModule(moduleBased, mod) {\n      function addIndividualModule(currentModule) {\n        if (!mapNames[currentModule.moduleName]) {\n          mapNames[currentModule.moduleName] = true;\n          allModules.push(currentModule);\n          ModuleRegistry.register(currentModule, moduleBased);\n        }\n      }\n\n      addIndividualModule(mod);\n\n      if (mod.dependantModules) {\n        mod.dependantModules.forEach(addModule.bind(null, moduleBased));\n      }\n    }\n\n    if (passedViaConstructor) {\n      passedViaConstructor.forEach(addModule.bind(null, true));\n    }\n\n    if (registered) {\n      registered.forEach(addModule.bind(null, !ModuleRegistry.isPackageBased()));\n    }\n\n    return allModules;\n  };\n\n  GridCoreCreator.prototype.registerModuleUserComponents = function (beans, registeredModules) {\n    var moduleUserComps = this.extractModuleEntity(registeredModules, function (module) {\n      return module.userComponents ? module.userComponents : [];\n    });\n    moduleUserComps.forEach(function (compMeta) {\n      beans.userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);\n    });\n  };\n\n  GridCoreCreator.prototype.createProvidedBeans = function (eGridDiv, gridOptions, params) {\n    var frameworkOverrides = params ? params.frameworkOverrides : null;\n\n    if (missing(frameworkOverrides)) {\n      frameworkOverrides = new VanillaFrameworkOverrides();\n    }\n\n    var seed = {\n      gridOptions: gridOptions,\n      eGridDiv: eGridDiv,\n      $scope: params ? params.$scope : null,\n      $compile: params ? params.$compile : null,\n      globalEventListener: params ? params.globalEventListener : null,\n      frameworkOverrides: frameworkOverrides\n    };\n\n    if (params && params.providedBeanInstances) {\n      assign(seed, params.providedBeanInstances);\n    }\n\n    return seed;\n  };\n\n  GridCoreCreator.prototype.createAgStackComponentsList = function (registeredModules) {\n    var components = [{\n      componentName: 'AgCheckbox',\n      componentClass: AgCheckbox\n    }, {\n      componentName: 'AgRadioButton',\n      componentClass: AgRadioButton\n    }, {\n      componentName: 'AgToggleButton',\n      componentClass: AgToggleButton\n    }, {\n      componentName: 'AgInputTextField',\n      componentClass: AgInputTextField\n    }, {\n      componentName: 'AgInputTextArea',\n      componentClass: AgInputTextArea\n    }, {\n      componentName: 'AgInputNumberField',\n      componentClass: AgInputNumberField\n    }, {\n      componentName: 'AgInputRange',\n      componentClass: AgInputRange\n    }, {\n      componentName: 'AgSelect',\n      componentClass: AgSelect\n    }, {\n      componentName: 'AgSlider',\n      componentClass: AgSlider\n    }, {\n      componentName: 'AgAngleSelect',\n      componentClass: AgAngleSelect\n    }, {\n      componentName: 'AgColorPicker',\n      componentClass: AgColorPicker\n    }, {\n      componentName: 'AgGridBody',\n      componentClass: GridBodyComp\n    }, {\n      componentName: 'AgHeaderRoot',\n      componentClass: GridHeaderComp\n    }, {\n      componentName: 'AgPagination',\n      componentClass: PaginationComp\n    }, {\n      componentName: 'AgOverlayWrapper',\n      componentClass: OverlayWrapperComponent\n    }, {\n      componentName: 'AgGroupComponent',\n      componentClass: AgGroupComponent\n    }, {\n      componentName: 'AgPanel',\n      componentClass: AgPanel\n    }, {\n      componentName: 'AgDialog',\n      componentClass: AgDialog\n    }, {\n      componentName: 'AgRowContainer',\n      componentClass: RowContainerComp\n    }, {\n      componentName: 'AgFakeHorizontalScroll',\n      componentClass: FakeHScrollComp\n    }];\n    var moduleAgStackComps = this.extractModuleEntity(registeredModules, function (module) {\n      return module.agStackComponents ? module.agStackComponents : [];\n    });\n    components = components.concat(moduleAgStackComps);\n    return components;\n  };\n\n  GridCoreCreator.prototype.createBeansList = function (rowModelType, registeredModules) {\n    var rowModelClass = this.getRowModelClass(rowModelType, registeredModules);\n\n    if (!rowModelClass) {\n      return;\n    } // beans should only contain SERVICES, it should NEVER contain COMPONENTS\n\n\n    var beans = [rowModelClass, Beans, RowPositionUtils, CellPositionUtils, HeaderPositionUtils, PaginationAutoPageSizeService, GridApi, UserComponentRegistry, AgComponentUtils, ComponentMetadataProvider, ResizeObserverService, UserComponentFactory, RowContainerHeightService, HorizontalResizeService, PinnedRowModel, DragService, DisplayedGroupCreator, EventService, GridOptionsWrapper, PopupService, SelectionService, FilterManager, ColumnModel, HeaderNavigationService, PaginationProxy, RowRenderer, ExpressionService, ColumnFactory, TemplateService, AlignedGridsService, NavigationService, ValueCache, ValueService, LoggerFactory, ColumnUtils, AutoWidthCalculator, StandardMenuFactory, DragAndDropService, ColumnApi, FocusService, MouseEventService, Environment, CellNavigationService, ValueFormatterService, StylingService, ScrollVisibleService, SortController, ColumnHoverService, ColumnAnimationService, SelectableService, AutoGroupColService, ChangeDetectionService, AnimationFrameService, UndoRedoService, AgStackComponentsRegistry, ColumnDefFactory, RowCssClassCalculator, RowNodeBlockLoader, RowNodeSorter, CtrlsService, PinnedWidthService, RowNodeEventThrottle, CtrlsFactory];\n    var moduleBeans = this.extractModuleEntity(registeredModules, function (module) {\n      return module.beans ? module.beans : [];\n    });\n    beans.push.apply(beans, moduleBeans); // check for duplicates, as different modules could include the same beans that\n    // they depend on, eg ClientSideRowModel in enterprise, and ClientSideRowModel in community\n\n    var beansNoDuplicates = [];\n    beans.forEach(function (bean) {\n      if (beansNoDuplicates.indexOf(bean) < 0) {\n        beansNoDuplicates.push(bean);\n      }\n    });\n    return beansNoDuplicates;\n  };\n\n  GridCoreCreator.prototype.extractModuleEntity = function (moduleEntities, extractor) {\n    return [].concat.apply([], moduleEntities.map(extractor));\n  };\n\n  GridCoreCreator.prototype.setColumnsAndData = function (beans) {\n    var columnDefs = beans.gridOptionsWrapper.getColumnDefs();\n    beans.columnModel.setColumnDefs(columnDefs || [], \"gridInitializing\");\n    beans.rowModel.start();\n  };\n\n  GridCoreCreator.prototype.dispatchGridReadyEvent = function (beans, gridOptions) {\n    var readyEvent = {\n      type: Events.EVENT_GRID_READY,\n      api: gridOptions.api,\n      columnApi: gridOptions.columnApi\n    };\n    beans.eventService.dispatchEvent(readyEvent);\n  };\n\n  GridCoreCreator.prototype.getRowModelClass = function (rowModelType, registeredModules) {\n    // default to client side\n    if (!rowModelType) {\n      rowModelType = Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n    }\n\n    var rowModelClasses = {};\n    registeredModules.forEach(function (module) {\n      iterateObject(module.rowModels, function (key, value) {\n        rowModelClasses[key] = value;\n      });\n    });\n    var rowModelClass = rowModelClasses[rowModelType];\n\n    if (exists(rowModelClass)) {\n      return rowModelClass;\n    }\n\n    if (rowModelType === Constants.ROW_MODEL_TYPE_INFINITE) {\n      console.error(\"AG Grid: Row Model \\\"Infinite\\\" not found. Please ensure the \" + ModuleNames.InfiniteRowModelModule + \" is registered.';\");\n    }\n\n    console.error('AG Grid: could not find matching row model for rowModelType ' + rowModelType);\n\n    if (rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT) {\n      console.error(\"AG Grid: Row Model \\\"Viewport\\\" not found. Please ensure the AG Grid Enterprise Module \" + ModuleNames.ViewportRowModelModule + \" is registered.';\");\n    }\n\n    if (rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE) {\n      console.error(\"AG Grid: Row Model \\\"Server Side\\\" not found. Please ensure the AG Grid Enterprise Module \" + ModuleNames.ServerSideRowModelModule + \" is registered.';\");\n    }\n\n    if (rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      console.error(\"AG Grid: Row Model \\\"Client Side\\\" not found. Please ensure the \" + ModuleNames.ClientSideRowModelModule + \" is registered.';\");\n    }\n  };\n\n  return GridCoreCreator;\n}();\n\nexport { GridCoreCreator };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/grid.js"],"names":["GridOptionsWrapper","SelectionService","ColumnApi","ColumnModel","RowRenderer","GridHeaderComp","FilterManager","ValueService","EventService","GridBodyComp","GridApi","ColumnFactory","DisplayedGroupCreator","ExpressionService","TemplateService","PopupService","Logger","LoggerFactory","ColumnUtils","AutoWidthCalculator","HorizontalResizeService","Context","GridComp","DragAndDropService","DragService","SortController","FocusService","MouseEventService","CellNavigationService","Events","ValueFormatterService","AgCheckbox","AgRadioButton","VanillaFrameworkOverrides","ScrollVisibleService","StylingService","ColumnHoverService","ColumnAnimationService","AutoGroupColService","PaginationProxy","PaginationAutoPageSizeService","Constants","ValueCache","ChangeDetectionService","AlignedGridsService","UserComponentFactory","UserComponentRegistry","AgComponentUtils","ComponentMetadataProvider","Beans","Environment","AnimationFrameService","NavigationService","RowContainerHeightService","SelectableService","PaginationComp","ResizeObserverService","OverlayWrapperComponent","AgGroupComponent","AgDialog","AgPanel","AgInputTextField","AgInputTextArea","AgSlider","AgColorPicker","AgInputNumberField","AgInputRange","AgSelect","AgAngleSelect","AgToggleButton","RowPositionUtils","CellPositionUtils","PinnedRowModel","ModuleRegistry","ModuleNames","UndoRedoService","AgStackComponentsRegistry","HeaderPositionUtils","HeaderNavigationService","exists","missing","assign","iterateObject","ColumnDefFactory","RowCssClassCalculator","RowNodeBlockLoader","RowNodeSorter","CtrlsService","CtrlsFactory","FakeHScrollComp","PinnedWidthService","RowContainerComp","RowNodeEventThrottle","StandardMenuFactory","Grid","eGridDiv","gridOptions","params","console","error","GridCoreCreator","create","context","gridComp","createBean","prototype","destroy","api","uiCallback","_this","debug","registeredModules","getRegisteredModules","beanClasses","createBeansList","rowModelType","providedBeanInstances","createProvidedBeans","contextParams","logger","contextLogger","beans","getBean","registerModuleUserComponents","registerStackComponents","registerControllers","ctrlsService","whenReady","setColumnsAndData","dispatchGridReadyEvent","isEnterprise","isRegistered","EnterpriseCoreModule","log","forEach","module","controllers","meta","ctrlsFactory","register","agStackComponents","createAgStackComponentsList","agStackComponentsRegistry","setupComponents","passedViaConstructor","modules","registered","allModules","mapNames","addModule","moduleBased","mod","addIndividualModule","currentModule","moduleName","push","dependantModules","bind","isPackageBased","moduleUserComps","extractModuleEntity","userComponents","compMeta","userComponentRegistry","registerDefaultComponent","componentName","componentClass","frameworkOverrides","seed","$scope","$compile","globalEventListener","components","moduleAgStackComps","concat","rowModelClass","getRowModelClass","moduleBeans","apply","beansNoDuplicates","bean","indexOf","moduleEntities","extractor","map","columnDefs","gridOptionsWrapper","getColumnDefs","columnModel","setColumnDefs","rowModel","start","readyEvent","type","EVENT_GRID_READY","columnApi","eventService","dispatchEvent","ROW_MODEL_TYPE_CLIENT_SIDE","rowModelClasses","rowModels","key","value","ROW_MODEL_TYPE_INFINITE","InfiniteRowModelModule","ROW_MODEL_TYPE_VIEWPORT","ViewportRowModelModule","ROW_MODEL_TYPE_SERVER_SIDE","ServerSideRowModelModule","ClientSideRowModelModule"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { SelectionService } from \"./selectionService\";\nimport { ColumnApi } from \"./columns/columnApi\";\nimport { ColumnModel } from \"./columns/columnModel\";\nimport { RowRenderer } from \"./rendering/rowRenderer\";\nimport { GridHeaderComp } from \"./headerRendering/gridHeaderComp\";\nimport { FilterManager } from \"./filter/filterManager\";\nimport { ValueService } from \"./valueService/valueService\";\nimport { EventService } from \"./eventService\";\nimport { GridBodyComp } from \"./gridBodyComp/gridBodyComp\";\nimport { GridApi } from \"./gridApi\";\nimport { ColumnFactory } from \"./columns/columnFactory\";\nimport { DisplayedGroupCreator } from \"./columns/displayedGroupCreator\";\nimport { ExpressionService } from \"./valueService/expressionService\";\nimport { TemplateService } from \"./templateService\";\nimport { PopupService } from \"./widgets/popupService\";\nimport { Logger, LoggerFactory } from \"./logger\";\nimport { ColumnUtils } from \"./columns/columnUtils\";\nimport { AutoWidthCalculator } from \"./rendering/autoWidthCalculator\";\nimport { HorizontalResizeService } from \"./headerRendering/common/horizontalResizeService\";\nimport { Context } from \"./context/context\";\nimport { GridComp } from \"./gridComp/gridComp\";\nimport { DragAndDropService } from \"./dragAndDrop/dragAndDropService\";\nimport { DragService } from \"./dragAndDrop/dragService\";\nimport { SortController } from \"./sortController\";\nimport { FocusService } from \"./focusService\";\nimport { MouseEventService } from \"./gridBodyComp/mouseEventService\";\nimport { CellNavigationService } from \"./cellNavigationService\";\nimport { Events } from \"./events\";\nimport { ValueFormatterService } from \"./rendering/valueFormatterService\";\nimport { AgCheckbox } from \"./widgets/agCheckbox\";\nimport { AgRadioButton } from \"./widgets/agRadioButton\";\nimport { VanillaFrameworkOverrides } from \"./vanillaFrameworkOverrides\";\nimport { ScrollVisibleService } from \"./gridBodyComp/scrollVisibleService\";\nimport { StylingService } from \"./styling/stylingService\";\nimport { ColumnHoverService } from \"./rendering/columnHoverService\";\nimport { ColumnAnimationService } from \"./rendering/columnAnimationService\";\nimport { AutoGroupColService } from \"./columns/autoGroupColService\";\nimport { PaginationProxy } from \"./pagination/paginationProxy\";\nimport { PaginationAutoPageSizeService } from \"./pagination/paginationAutoPageSizeService\";\nimport { Constants } from \"./constants/constants\";\nimport { ValueCache } from \"./valueService/valueCache\";\nimport { ChangeDetectionService } from \"./valueService/changeDetectionService\";\nimport { AlignedGridsService } from \"./alignedGridsService\";\nimport { UserComponentFactory } from \"./components/framework/userComponentFactory\";\nimport { UserComponentRegistry } from \"./components/framework/userComponentRegistry\";\nimport { AgComponentUtils } from \"./components/framework/agComponentUtils\";\nimport { ComponentMetadataProvider } from \"./components/framework/componentMetadataProvider\";\nimport { Beans } from \"./rendering/beans\";\nimport { Environment } from \"./environment\";\nimport { AnimationFrameService } from \"./misc/animationFrameService\";\nimport { NavigationService } from \"./gridBodyComp/navigationService\";\nimport { RowContainerHeightService } from \"./rendering/rowContainerHeightService\";\nimport { SelectableService } from \"./rowNodes/selectableService\";\nimport { PaginationComp } from \"./pagination/paginationComp\";\nimport { ResizeObserverService } from \"./misc/resizeObserverService\";\nimport { OverlayWrapperComponent } from \"./rendering/overlays/overlayWrapperComponent\";\nimport { AgGroupComponent } from \"./widgets/agGroupComponent\";\nimport { AgDialog } from \"./widgets/agDialog\";\nimport { AgPanel } from \"./widgets/agPanel\";\nimport { AgInputTextField } from \"./widgets/agInputTextField\";\nimport { AgInputTextArea } from \"./widgets/agInputTextArea\";\nimport { AgSlider } from \"./widgets/agSlider\";\nimport { AgColorPicker } from \"./widgets/agColorPicker\";\nimport { AgInputNumberField } from \"./widgets/agInputNumberField\";\nimport { AgInputRange } from \"./widgets/agInputRange\";\nimport { AgSelect } from \"./widgets/agSelect\";\nimport { AgAngleSelect } from \"./widgets/agAngleSelect\";\nimport { AgToggleButton } from \"./widgets/agToggleButton\";\nimport { RowPositionUtils } from \"./entities/rowPosition\";\nimport { CellPositionUtils } from \"./entities/cellPosition\";\nimport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { UndoRedoService } from \"./undoRedo/undoRedoService\";\nimport { AgStackComponentsRegistry } from \"./components/agStackComponentsRegistry\";\nimport { HeaderPositionUtils } from \"./headerRendering/common/headerPosition\";\nimport { HeaderNavigationService } from \"./headerRendering/common/headerNavigationService\";\nimport { exists, missing } from \"./utils/generic\";\nimport { assign, iterateObject } from \"./utils/object\";\nimport { ColumnDefFactory } from \"./columns/columnDefFactory\";\nimport { RowCssClassCalculator } from \"./rendering/row/rowCssClassCalculator\";\nimport { RowNodeBlockLoader } from \"./rowNodeCache/rowNodeBlockLoader\";\nimport { RowNodeSorter } from \"./rowNodes/rowNodeSorter\";\nimport { CtrlsService } from \"./ctrlsService\";\nimport { CtrlsFactory } from \"./ctrlsFactory\";\nimport { FakeHScrollComp } from \"./gridBodyComp/fakeHScrollComp\";\nimport { PinnedWidthService } from \"./gridBodyComp/pinnedWidthService\";\nimport { RowContainerComp } from \"./gridBodyComp/rowContainer/rowContainerComp\";\nimport { RowNodeEventThrottle } from \"./entities/rowNodeEventThrottle\";\nimport { StandardMenuFactory } from \"./headerRendering/cells/column/standardMenu\";\n// creates JavaScript vanilla Grid, including JavaScript (ag-stack) components, which can\n// be wrapped by the framework wrappers\nvar Grid = /** @class */ (function () {\n    function Grid(eGridDiv, gridOptions, params) {\n        if (!gridOptions) {\n            console.error('AG Grid: no gridOptions provided to the grid');\n            return;\n        }\n        this.gridOptions = gridOptions;\n        new GridCoreCreator().create(eGridDiv, gridOptions, function (context) {\n            var gridComp = new GridComp(eGridDiv);\n            context.createBean(gridComp);\n        }, params);\n    }\n    Grid.prototype.destroy = function () {\n        if (this.gridOptions && this.gridOptions.api) {\n            this.gridOptions.api.destroy();\n        }\n    };\n    return Grid;\n}());\nexport { Grid };\n// created services of grid only, no UI, so frameworks can use this if providing\n// their own UI\nvar GridCoreCreator = /** @class */ (function () {\n    function GridCoreCreator() {\n    }\n    GridCoreCreator.prototype.create = function (eGridDiv, gridOptions, uiCallback, params) {\n        var _this = this;\n        var debug = !!gridOptions.debug;\n        var registeredModules = this.getRegisteredModules(params);\n        var beanClasses = this.createBeansList(gridOptions.rowModelType, registeredModules);\n        var providedBeanInstances = this.createProvidedBeans(eGridDiv, gridOptions, params);\n        if (!beanClasses) {\n            return;\n        } // happens when no row model found\n        var contextParams = {\n            providedBeanInstances: providedBeanInstances,\n            beanClasses: beanClasses,\n            debug: debug\n        };\n        var logger = new Logger('AG Grid', function () { return gridOptions.debug; });\n        var contextLogger = new Logger('Context', function () { return contextParams.debug; });\n        var context = new Context(contextParams, contextLogger);\n        var beans = context.getBean('beans');\n        this.registerModuleUserComponents(beans, registeredModules);\n        this.registerStackComponents(beans, registeredModules);\n        this.registerControllers(beans, registeredModules);\n        uiCallback(context);\n        // we wait until the UI has finished initialising before setting in columns and rows\n        beans.ctrlsService.whenReady(function () {\n            _this.setColumnsAndData(beans);\n            _this.dispatchGridReadyEvent(beans, gridOptions);\n            var isEnterprise = ModuleRegistry.isRegistered(ModuleNames.EnterpriseCoreModule);\n            logger.log(\"initialised successfully, enterprise = \" + isEnterprise);\n        });\n    };\n    GridCoreCreator.prototype.registerControllers = function (beans, registeredModules) {\n        registeredModules.forEach(function (module) {\n            module.controllers && module.controllers.forEach(function (meta) { return beans.ctrlsFactory.register(meta); });\n        });\n    };\n    GridCoreCreator.prototype.registerStackComponents = function (beans, registeredModules) {\n        var agStackComponents = this.createAgStackComponentsList(registeredModules);\n        beans.agStackComponentsRegistry.setupComponents(agStackComponents);\n    };\n    GridCoreCreator.prototype.getRegisteredModules = function (params) {\n        var passedViaConstructor = params ? params.modules : null;\n        var registered = ModuleRegistry.getRegisteredModules();\n        var allModules = [];\n        var mapNames = {};\n        // adds to list and removes duplicates\n        function addModule(moduleBased, mod) {\n            function addIndividualModule(currentModule) {\n                if (!mapNames[currentModule.moduleName]) {\n                    mapNames[currentModule.moduleName] = true;\n                    allModules.push(currentModule);\n                    ModuleRegistry.register(currentModule, moduleBased);\n                }\n            }\n            addIndividualModule(mod);\n            if (mod.dependantModules) {\n                mod.dependantModules.forEach(addModule.bind(null, moduleBased));\n            }\n        }\n        if (passedViaConstructor) {\n            passedViaConstructor.forEach(addModule.bind(null, true));\n        }\n        if (registered) {\n            registered.forEach(addModule.bind(null, !ModuleRegistry.isPackageBased()));\n        }\n        return allModules;\n    };\n    GridCoreCreator.prototype.registerModuleUserComponents = function (beans, registeredModules) {\n        var moduleUserComps = this.extractModuleEntity(registeredModules, function (module) { return module.userComponents ? module.userComponents : []; });\n        moduleUserComps.forEach(function (compMeta) {\n            beans.userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);\n        });\n    };\n    GridCoreCreator.prototype.createProvidedBeans = function (eGridDiv, gridOptions, params) {\n        var frameworkOverrides = params ? params.frameworkOverrides : null;\n        if (missing(frameworkOverrides)) {\n            frameworkOverrides = new VanillaFrameworkOverrides();\n        }\n        var seed = {\n            gridOptions: gridOptions,\n            eGridDiv: eGridDiv,\n            $scope: params ? params.$scope : null,\n            $compile: params ? params.$compile : null,\n            globalEventListener: params ? params.globalEventListener : null,\n            frameworkOverrides: frameworkOverrides\n        };\n        if (params && params.providedBeanInstances) {\n            assign(seed, params.providedBeanInstances);\n        }\n        return seed;\n    };\n    GridCoreCreator.prototype.createAgStackComponentsList = function (registeredModules) {\n        var components = [\n            { componentName: 'AgCheckbox', componentClass: AgCheckbox },\n            { componentName: 'AgRadioButton', componentClass: AgRadioButton },\n            { componentName: 'AgToggleButton', componentClass: AgToggleButton },\n            { componentName: 'AgInputTextField', componentClass: AgInputTextField },\n            { componentName: 'AgInputTextArea', componentClass: AgInputTextArea },\n            { componentName: 'AgInputNumberField', componentClass: AgInputNumberField },\n            { componentName: 'AgInputRange', componentClass: AgInputRange },\n            { componentName: 'AgSelect', componentClass: AgSelect },\n            { componentName: 'AgSlider', componentClass: AgSlider },\n            { componentName: 'AgAngleSelect', componentClass: AgAngleSelect },\n            { componentName: 'AgColorPicker', componentClass: AgColorPicker },\n            { componentName: 'AgGridBody', componentClass: GridBodyComp },\n            { componentName: 'AgHeaderRoot', componentClass: GridHeaderComp },\n            { componentName: 'AgPagination', componentClass: PaginationComp },\n            { componentName: 'AgOverlayWrapper', componentClass: OverlayWrapperComponent },\n            { componentName: 'AgGroupComponent', componentClass: AgGroupComponent },\n            { componentName: 'AgPanel', componentClass: AgPanel },\n            { componentName: 'AgDialog', componentClass: AgDialog },\n            { componentName: 'AgRowContainer', componentClass: RowContainerComp },\n            { componentName: 'AgFakeHorizontalScroll', componentClass: FakeHScrollComp }\n        ];\n        var moduleAgStackComps = this.extractModuleEntity(registeredModules, function (module) { return module.agStackComponents ? module.agStackComponents : []; });\n        components = components.concat(moduleAgStackComps);\n        return components;\n    };\n    GridCoreCreator.prototype.createBeansList = function (rowModelType, registeredModules) {\n        var rowModelClass = this.getRowModelClass(rowModelType, registeredModules);\n        if (!rowModelClass) {\n            return;\n        }\n        // beans should only contain SERVICES, it should NEVER contain COMPONENTS\n        var beans = [\n            rowModelClass, Beans, RowPositionUtils, CellPositionUtils, HeaderPositionUtils,\n            PaginationAutoPageSizeService, GridApi, UserComponentRegistry, AgComponentUtils,\n            ComponentMetadataProvider, ResizeObserverService, UserComponentFactory,\n            RowContainerHeightService, HorizontalResizeService,\n            PinnedRowModel, DragService, DisplayedGroupCreator, EventService, GridOptionsWrapper,\n            PopupService, SelectionService, FilterManager, ColumnModel, HeaderNavigationService,\n            PaginationProxy, RowRenderer, ExpressionService, ColumnFactory, TemplateService,\n            AlignedGridsService, NavigationService, ValueCache, ValueService, LoggerFactory,\n            ColumnUtils, AutoWidthCalculator, StandardMenuFactory, DragAndDropService, ColumnApi,\n            FocusService, MouseEventService, Environment, CellNavigationService, ValueFormatterService,\n            StylingService, ScrollVisibleService, SortController, ColumnHoverService, ColumnAnimationService,\n            SelectableService, AutoGroupColService, ChangeDetectionService, AnimationFrameService,\n            UndoRedoService, AgStackComponentsRegistry, ColumnDefFactory,\n            RowCssClassCalculator, RowNodeBlockLoader, RowNodeSorter, CtrlsService,\n            PinnedWidthService, RowNodeEventThrottle, CtrlsFactory\n        ];\n        var moduleBeans = this.extractModuleEntity(registeredModules, function (module) { return module.beans ? module.beans : []; });\n        beans.push.apply(beans, moduleBeans);\n        // check for duplicates, as different modules could include the same beans that\n        // they depend on, eg ClientSideRowModel in enterprise, and ClientSideRowModel in community\n        var beansNoDuplicates = [];\n        beans.forEach(function (bean) {\n            if (beansNoDuplicates.indexOf(bean) < 0) {\n                beansNoDuplicates.push(bean);\n            }\n        });\n        return beansNoDuplicates;\n    };\n    GridCoreCreator.prototype.extractModuleEntity = function (moduleEntities, extractor) {\n        return [].concat.apply([], moduleEntities.map(extractor));\n    };\n    GridCoreCreator.prototype.setColumnsAndData = function (beans) {\n        var columnDefs = beans.gridOptionsWrapper.getColumnDefs();\n        beans.columnModel.setColumnDefs(columnDefs || [], \"gridInitializing\");\n        beans.rowModel.start();\n    };\n    GridCoreCreator.prototype.dispatchGridReadyEvent = function (beans, gridOptions) {\n        var readyEvent = {\n            type: Events.EVENT_GRID_READY,\n            api: gridOptions.api,\n            columnApi: gridOptions.columnApi\n        };\n        beans.eventService.dispatchEvent(readyEvent);\n    };\n    GridCoreCreator.prototype.getRowModelClass = function (rowModelType, registeredModules) {\n        // default to client side\n        if (!rowModelType) {\n            rowModelType = Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n        }\n        var rowModelClasses = {};\n        registeredModules.forEach(function (module) {\n            iterateObject(module.rowModels, function (key, value) {\n                rowModelClasses[key] = value;\n            });\n        });\n        var rowModelClass = rowModelClasses[rowModelType];\n        if (exists(rowModelClass)) {\n            return rowModelClass;\n        }\n        if (rowModelType === Constants.ROW_MODEL_TYPE_INFINITE) {\n            console.error(\"AG Grid: Row Model \\\"Infinite\\\" not found. Please ensure the \" + ModuleNames.InfiniteRowModelModule + \" is registered.';\");\n        }\n        console.error('AG Grid: could not find matching row model for rowModelType ' + rowModelType);\n        if (rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT) {\n            console.error(\"AG Grid: Row Model \\\"Viewport\\\" not found. Please ensure the AG Grid Enterprise Module \" + ModuleNames.ViewportRowModelModule + \" is registered.';\");\n        }\n        if (rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE) {\n            console.error(\"AG Grid: Row Model \\\"Server Side\\\" not found. Please ensure the AG Grid Enterprise Module \" + ModuleNames.ServerSideRowModelModule + \" is registered.';\");\n        }\n        if (rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            console.error(\"AG Grid: Row Model \\\"Client Side\\\" not found. Please ensure the \" + ModuleNames.ClientSideRowModelModule + \" is registered.';\");\n        }\n    };\n    return GridCoreCreator;\n}());\nexport { GridCoreCreator };\n"]},"metadata":{},"sourceType":"module"}