{"ast":null,"code":"var _jsxFileName = \"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js\";\nimport React from \"react\";\nimport { fromLonLat, get } from \"ol/proj\"; //import \"./SmokerMap.css\";\n\nimport Map from \"ol/Map\"; //import Feature from \"ol/Feature\";\n\nimport View from \"ol/View\"; //import { Point, Style, Circle, Fill, Feature } from \"ol\";\n\nimport TileLayer from \"ol/layer/Tile\"; //import TileWMS from 'ol/source/TileWMS';\n\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport { Fill, Stroke, Style } from 'ol/style';\nimport { metadata } from './metadata.js';\nimport Dropdown from \"./dropdown.js\";\nimport ImageWMS from 'ol/source/ImageWMS';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SmokerMap extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props);\n  }\n\n  componentDidMount() {\n    var basemap = new TileLayer({\n      source: new OSM()\n    }); // use usestate to update the url base on \n\n    var totalsmoker = new VectorSource({\n      url: metadata.geojson_url[0],\n      format: new GeoJSON()\n    }); //var breakarray= [300,400,500,600];\n    //var colorarray= ['#edf8fb','#b3cde3','#8c96c6','#88419d']\n\n    var stylefunction = function (feature) {\n      var style;\n      var value = feature.get('brffs_smokers');\n      var county = feature.get('county'); // assign color to each break from metadata.js\n\n      console.log(county, value);\n\n      for (let i = 0; i < metadata.break.length; i++) {\n        if (value > metadata.break[i]) {\n          style = new Style({\n            fill: new Fill({\n              color: metadata.color[i]\n            }),\n            stroke: new Stroke({\n              color: 'black',\n              width: 0.3\n            })\n          });\n        }\n\n        ;\n      }\n\n      return style;\n    };\n\n    var vectorlayer = new VectorLayer({\n      source: totalsmoker,\n      style: stylefunction,\n      showLegend: true\n    });\n    /*\n    var lungdata = new TileLayer({\n     source : new TileWMS ({\n       url:'https://smartcommunityhealth.ahc.umn.edu/lung_cancer/wms',\n       serverType:'geoserver',\n       params: {'LAYERS': 'lung_cancer:total_smokers_v2', 'TILED': true},\n        transition: 0\n      }),\n     style: vectorstyle\n    const wmsSource = new ImageWMS({\n     url: 'https://ahocevar.com/geoserver/wms',\n     params: {'LAYERS': 'topp:states'},\n     target: \"maplegend\",\n     ratio: 1,\n     serverType: 'geoserver',\n    });\n      })*/\n\n    var remap = new Map({\n      layers: [basemap, vectorlayer],\n      target: \"mapContainer\",\n      view: new View({\n        center: fromLonLat([-94.6859, 46.7296]),\n        zoom: 6\n      })\n    });\n    var attributes = [];\n\n    for (var i = 0; i < metadata.attributename.length; i++) {\n      attributes.push({\n        label: metadata.attributename[i],\n        value: metadata.geojson_url[0]\n      });\n    } // Using state to keep track of selection\n\n\n    var [attribute, setAttribute] = useState(\"Select an attribute\"); // Using this function to update the state \n    // whenever a new option is selected from the dropdown\n\n    var handleAttributeChange = e => {\n      setAttribute(e.target.value);\n    };\n  }\n\n  render() {\n    console.log(\"-> render App\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mapContainer\",\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Dropdown\",\n      children: [attribute, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleAttributeChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \" Select an attribute to display\",\n          children: \" -- Select an attribute -- \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 7\n        }, this), attributes.map(attribute => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: attribute.value,\n          children: [\" \", attribute.label]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 38\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js"],"names":["React","fromLonLat","get","Map","View","TileLayer","VectorLayer","VectorSource","GeoJSON","OSM","Fill","Stroke","Style","metadata","Dropdown","ImageWMS","SmokerMap","Component","constructor","props","console","log","componentDidMount","basemap","source","totalsmoker","url","geojson_url","format","stylefunction","feature","style","value","county","i","break","length","fill","color","stroke","width","vectorlayer","showLegend","remap","layers","target","view","center","zoom","attributes","attributename","push","label","attribute","setAttribute","useState","handleAttributeChange","e","render","height","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { fromLonLat, get } from \"ol/proj\";\n//import \"./SmokerMap.css\";\nimport Map from \"ol/Map\";\n//import Feature from \"ol/Feature\";\nimport View from \"ol/View\";\n//import { Point, Style, Circle, Fill, Feature } from \"ol\";\nimport TileLayer from \"ol/layer/Tile\";\n//import TileWMS from 'ol/source/TileWMS';\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport {Fill, Stroke, Style} from 'ol/style';\nimport {metadata} from './metadata.js';\nimport Dropdown from \"./dropdown.js\"\n\nimport ImageWMS from 'ol/source/ImageWMS';\n\n\n\nexport default class SmokerMap extends React.Component{\n  constructor(props){\n    super(props);\n    console.log(this.props);\n  }\n\n\n  componentDidMount(){\n\n    var basemap =new TileLayer({\n      source: new OSM()\n    })\n    \n\n    // use usestate to update the url base on \n    var totalsmoker = new VectorSource({\n      url:metadata.geojson_url[0],\n      format: new GeoJSON()\n    })\n\n\n  \n    \n\n    //var breakarray= [300,400,500,600];\n    //var colorarray= ['#edf8fb','#b3cde3','#8c96c6','#88419d']\n  \n      var stylefunction = function(feature){\n        var style;\n        \n        var value=feature.get('brffs_smokers');\n        var county=feature.get('county');\n        \n        // assign color to each break from metadata.js\n        console.log(county,value)\n        for (let i =0;i<metadata.break.length;i++){\n          if(value>metadata.break[i]){\n          style= new Style({\n            fill: new Fill({\n              color: metadata.color[i]\n            }),\n            stroke: new Stroke({\n              color:'black',\n              width:0.3\n            })\n          })\n        };\n      }\n\n        return style;\n\n    };\n\n    var vectorlayer = new VectorLayer({\n\n       source: totalsmoker,\n       style: stylefunction,\n       showLegend:true\n\n\n       })\n\n     /*\n    var lungdata = new TileLayer({\n      source : new TileWMS ({\n        url:'https://smartcommunityhealth.ahc.umn.edu/lung_cancer/wms',\n        serverType:'geoserver',\n        params: {'LAYERS': 'lung_cancer:total_smokers_v2', 'TILED': true},\n\n        transition: 0\n\n      }),\n      style: vectorstyle\n   const wmsSource = new ImageWMS({\n      url: 'https://ahocevar.com/geoserver/wms',\n      params: {'LAYERS': 'topp:states'},\n      target: \"maplegend\",\n      ratio: 1,\n      serverType: 'geoserver',\n    });\n\n\n\n    })*/\n\n    var remap=new Map({\n      layers: [basemap,vectorlayer],\n      target: \"mapContainer\",\n      view :new View({\n        center:fromLonLat([-94.6859,46.7296]),\n        zoom: 6\n      })\n\n\n\n    });\n    var attributes = []\n  for (var i =0; i<metadata.attributename.length;i++) {\n    attributes.push( { label: metadata.attributename[i], value: metadata.geojson_url[0]}); \n  }\n  \n\n// Using state to keep track of selection\nvar [attribute, setAttribute] = useState(\"Select an attribute\")\n\n// Using this function to update the state \n// whenever a new option is selected from the dropdown\nvar handleAttributeChange = (e) => {\n  setAttribute(e.target.value)\n}\n\n\n\n\n  }\n\n  \n  render() {\n    console.log(\"-> render App\");\n    return (\n\n\n      <div id=\"mapContainer\" style={{ width: \"100%\",height: \"500px\"}}></div>,\n      <div className=\"Dropdown\">\n    {attribute}\n    <br />\n\n    <select onChange={handleAttributeChange}> \n      <option value=\" Select an attribute to display\"> -- Select an attribute -- </option>\n      \n      {attributes.map((attribute) => <option value={attribute.value}> {attribute.label}</option>)}\n    </select>\n    </div>\n\n\n    );\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}