{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/GML2\n */\n\n\nimport GMLBase, { GMLNS } from './GMLBase.js';\nimport { OBJECT_PROPERTY_NODE_FACTORY, createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender, makeReplacer, makeSimpleNodeFactory, pushParseAndPop, pushSerializeAndPop } from '../xml.js';\nimport { assign } from '../obj.js';\nimport { createOrUpdate } from '../extent.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformExtentWithOptions, transformGeometryWithOptions } from './Feature.js';\nimport { writeStringTextNode } from './xsd.js';\n/**\n * @const\n * @type {string}\n */\n\nvar schemaLocation = GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\n/**\n * @const\n * @type {Object<string, string>}\n */\n\nvar MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format,\n * version 2.1.2.\n *\n * @api\n */\n\nvar GML2 =\n/** @class */\nfunction (_super) {\n  __extends(GML2, _super);\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [opt_options] Optional configuration object.\n   */\n\n\n  function GML2(opt_options) {\n    var _this = this;\n\n    var options =\n    /** @type {import(\"./GMLBase.js\").Options} */\n    opt_options ? opt_options : {};\n    _this = _super.call(this, options) || this;\n    _this.FEATURE_COLLECTION_PARSERS[GMLNS]['featureMember'] = makeArrayPusher(_this.readFeaturesInternal);\n    /**\n     * @type {string}\n     */\n\n    _this.schemaLocation = options.schemaLocation ? options.schemaLocation : schemaLocation;\n    return _this;\n  }\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n\n\n  GML2.prototype.readFlatCoordinates = function (node, objectStack) {\n    var s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    var context =\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    objectStack[0];\n    var containerSrs = context['srsName'];\n    var axisOrientation = 'enu';\n\n    if (containerSrs) {\n      var proj = getProjection(containerSrs);\n\n      if (proj) {\n        axisOrientation = proj.getAxisOrientation();\n      }\n    }\n\n    var coordsGroups = s.trim().split(/\\s+/);\n    var flatCoordinates = [];\n\n    for (var i = 0, ii = coordsGroups.length; i < ii; i++) {\n      var coords = coordsGroups[i].split(/,+/);\n      var x = parseFloat(coords[0]);\n      var y = parseFloat(coords[1]);\n      var z = coords.length === 3 ? parseFloat(coords[2]) : 0;\n\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n\n    return flatCoordinates;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n\n\n  GML2.prototype.readBox = function (node, objectStack) {\n    /** @type {Array<number>} */\n    var flatCoordinates = pushParseAndPop([null], this.BOX_PARSERS_, node, objectStack, this);\n    return createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[1][3], flatCoordinates[1][4]);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n\n\n  GML2.prototype.innerBoundaryIsParser = function (node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n\n    if (flatLinearRing) {\n      var flatLinearRings =\n      /** @type {Array<Array<number>>} */\n      objectStack[objectStack.length - 1];\n      flatLinearRings.push(flatLinearRing);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n\n\n  GML2.prototype.outerBoundaryIsParser = function (node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n\n    if (flatLinearRing) {\n      var flatLinearRings =\n      /** @type {Array<Array<number>>} */\n      objectStack[objectStack.length - 1];\n      flatLinearRings[0] = flatLinearRing;\n    }\n  };\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n\n\n  GML2.prototype.GEOMETRY_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n    var context = objectStack[objectStack.length - 1];\n    var multiSurface = context['multiSurface'];\n    var surface = context['surface'];\n    var multiCurve = context['multiCurve'];\n    var nodeName;\n\n    if (!Array.isArray(value)) {\n      nodeName =\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      value.getType();\n\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n\n    return createElementNS('http://www.opengis.net/gml', nodeName);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeFeatureElement = function (node, feature, objectStack) {\n    var fid = feature.getId();\n\n    if (fid) {\n      node.setAttribute('fid',\n      /** @type {string} */\n      fid);\n    }\n\n    var context =\n    /** @type {Object} */\n    objectStack[objectStack.length - 1];\n    var featureNS = context['featureNS'];\n    var geometryName = feature.getGeometryName();\n\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n\n    var keys = [];\n    var values = [];\n\n    if (feature.hasProperties()) {\n      var properties = feature.getProperties();\n\n      for (var key in properties) {\n        var value = properties[key];\n\n        if (value !== null) {\n          keys.push(key);\n          values.push(value);\n\n          if (key == geometryName || typeof\n          /** @type {?} */\n          value.getSimplifiedGeometry === 'function') {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(this.writeGeometryElement, this);\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n\n    var item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    item, context.serializers, makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeCurveOrLineString = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    if (node.nodeName === 'LineString' || node.nodeName === 'LineStringSegment') {\n      var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n      node.appendChild(coordinates);\n      this.writeCoordinates_(coordinates, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      var segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeLineStringOrCurveMember = function (node, line, objectStack) {\n    var child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeMultiCurveOrLineString = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n    var curve = context['curve'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var lines = geometry.getLineStrings();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      curve: curve\n    }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeGeometryElement = function (node, geometry, objectStack) {\n    var context =\n    /** @type {import(\"./Feature.js\").WriteOptions} */\n    objectStack[objectStack.length - 1];\n    var item = assign({}, context);\n    item['node'] = node;\n    var value;\n\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(\n      /** @type {import(\"../extent.js\").Extent} */\n      geometry, context);\n    } else {\n      value = transformGeometryWithOptions(\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      geometry, true, context);\n    }\n\n    pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    item, this.GEOMETRY_SERIALIZERS, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);\n  };\n  /**\n   * @param {string} namespaceURI XML namespace.\n   * @return {Element} coordinates node.\n   * @private\n   */\n\n\n  GML2.prototype.createCoordinatesNode_ = function (namespaceURI) {\n    var coordinates = createElementNS(namespaceURI, 'coordinates');\n    coordinates.setAttribute('decimal', '.');\n    coordinates.setAttribute('cs', ',');\n    coordinates.setAttribute('ts', ' ');\n    return coordinates;\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LineString.js\").default|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeCoordinates_ = function (node, value, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName']; // only 2d for simple features profile\n\n    var points = value.getCoordinates();\n    var len = points.length;\n    var parts = new Array(len);\n\n    for (var i = 0; i < len; ++i) {\n      var point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n\n    writeStringTextNode(node, parts.join(' '));\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeCurveSegments_ = function (node, line, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeSurfaceOrPolygon = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      var rings = geometry.getLinearRings();\n      pushSerializeAndPop({\n        node: node,\n        hasZ: hasZ,\n        srsName: srsName\n      }, this.RING_SERIALIZERS, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);\n    } else if (node.nodeName === 'Surface') {\n      var patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  };\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n\n\n  GML2.prototype.RING_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n    var context = objectStack[objectStack.length - 1];\n    var parentNode = context.node;\n    var exteriorWritten = context['exteriorWritten'];\n\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n\n    return createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs');\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeSurfacePatches_ = function (node, polygon, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeRing = function (node, ring, objectStack) {\n    var linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  };\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [opt_srsName] Optional srsName\n   * @param {boolean} [opt_hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n\n\n  GML2.prototype.getCoords_ = function (point, opt_srsName, opt_hasZ) {\n    var axisOrientation = 'enu';\n\n    if (opt_srsName) {\n      axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n    }\n\n    var coords = axisOrientation.substr(0, 2) === 'en' ? point[0] + ',' + point[1] : point[1] + ',' + point[0];\n\n    if (opt_hasZ) {\n      // For newly created points, Z can be undefined.\n      var z = point[2] || 0;\n      coords += ',' + z;\n    }\n\n    return coords;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writePoint = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    var point = geometry.getCoordinates();\n    var coord = this.getCoords_(point, srsName, hasZ);\n    writeStringTextNode(coordinates, coord);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeMultiPoint = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var points = geometry.getPoints();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName\n    }, this.POINTMEMBER_SERIALIZERS, makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writePointMember = function (node, point, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeLinearRing = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    this.writeCoordinates_(coordinates, geometry, objectStack);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeMultiSurfaceOrPolygon = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n    var surface = context['surface'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var polygons = geometry.getPolygons();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      surface: surface\n    }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeSurfaceOrPolygonMember = function (node, polygon, objectStack) {\n    var child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeEnvelope = function (node, extent, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var keys = ['lowerCorner', 'upperCorner'];\n    var values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    {\n      node: node\n    }, this.ENVELOPE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);\n  };\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n\n\n  GML2.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n    var parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS('http://www.opengis.net/gml', MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n  };\n\n  return GML2;\n}(GMLBase);\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\n\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser,\n    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML2.prototype.BOX_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeArrayPusher(GML2.prototype.readFlatCoordinates)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML2.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Box': makeReplacer(GML2.prototype.readBox)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML2.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML2.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML2.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\n    'LinearRing': makeChildAppender(GML2.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon),\n    'Surface': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon),\n    'Envelope': makeChildAppender(GML2.prototype.writeEnvelope)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(GML2.prototype.writeLineStringOrCurveMember),\n    'curveMember': makeChildAppender(GML2.prototype.writeLineStringOrCurveMember)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML2.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\n    'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML2.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML2.prototype.writePointMember)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember),\n    'polygonMember': makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML2.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\nexport default GML2;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/ol/src/format/GML2.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @module ol/format/GML2\n */\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport {\n  OBJECT_PROPERTY_NODE_FACTORY,\n  createElementNS,\n  getAllTextContent,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n  makeSimpleNodeFactory,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {assign} from '../obj.js';\nimport {createOrUpdate} from '../extent.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  transformExtentWithOptions,\n  transformGeometryWithOptions,\n} from './Feature.js';\nimport {writeStringTextNode} from './xsd.js';\n\n/**\n * @const\n * @type {string}\n */\nconst schemaLocation =\n  GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember',\n};\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format,\n * version 2.1.2.\n *\n * @api\n */\nclass GML2 extends GMLBase {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [opt_options] Optional configuration object.\n   */\n  constructor(opt_options) {\n    const options =\n      /** @type {import(\"./GMLBase.js\").Options} */\n      (opt_options ? opt_options : {});\n\n    super(options);\n\n    this.FEATURE_COLLECTION_PARSERS[GMLNS]['featureMember'] = makeArrayPusher(\n      this.readFeaturesInternal\n    );\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : schemaLocation;\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatCoordinates(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n      objectStack[0]\n    );\n    const containerSrs = context['srsName'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      if (proj) {\n        axisOrientation = proj.getAxisOrientation();\n      }\n    }\n    const coordsGroups = s.trim().split(/\\s+/);\n    const flatCoordinates = [];\n    for (let i = 0, ii = coordsGroups.length; i < ii; i++) {\n      const coords = coordsGroups[i].split(/,+/);\n      const x = parseFloat(coords[0]);\n      const y = parseFloat(coords[1]);\n      const z = coords.length === 3 ? parseFloat(coords[2]) : 0;\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readBox(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.BOX_PARSERS_,\n      node,\n      objectStack,\n      this\n    );\n    return createOrUpdate(\n      flatCoordinates[1][0],\n      flatCoordinates[1][1],\n      flatCoordinates[1][3],\n      flatCoordinates[1][4]\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  innerBoundaryIsParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  outerBoundaryIsParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const multiCurve = context['multiCurve'];\n    let nodeName;\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        value\n      ).getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS('http://www.opengis.net/gml', nodeName);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */ (fid));\n    }\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const keys = [];\n    const values = [];\n    if (feature.hasProperties()) {\n      const properties = feature.getProperties();\n      for (const key in properties) {\n        const value = properties[key];\n        if (value !== null) {\n          keys.push(key);\n          values.push(value);\n          if (\n            key == geometryName ||\n            typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===\n              'function'\n          ) {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(\n                this.writeGeometryElement,\n                this\n              );\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] =\n                makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n    const item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      context.serializers,\n      makeSimpleNodeFactory(undefined, featureNS),\n      values,\n      objectStack,\n      keys\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (\n      node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment'\n    ) {\n      const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n      node.appendChild(coordinates);\n      this.writeCoordinates_(coordinates, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLineStringOrCurveMember(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      lines,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const item = assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(\n        /** @type {import(\"../extent.js\").Extent} */ (geometry),\n        context\n      );\n    } else {\n      value = transformGeometryWithOptions(\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry),\n        true,\n        context\n      );\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      this.GEOMETRY_SERIALIZERS,\n      this.GEOMETRY_NODE_FACTORY_,\n      [value],\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {string} namespaceURI XML namespace.\n   * @return {Element} coordinates node.\n   * @private\n   */\n  createCoordinatesNode_(namespaceURI) {\n    const coordinates = createElementNS(namespaceURI, 'coordinates');\n    coordinates.setAttribute('decimal', '.');\n    coordinates.setAttribute('cs', ',');\n    coordinates.setAttribute('ts', ' ');\n\n    return coordinates;\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LineString.js\").default|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCoordinates_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      const point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop(\n        {node: node, hasZ: hasZ, srsName: srsName},\n        this.RING_SERIALIZERS,\n        this.RING_NODE_FACTORY_,\n        rings,\n        objectStack,\n        undefined,\n        this\n      );\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(\n      parentNode.namespaceURI,\n      exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs'\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeRing(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [opt_srsName] Optional srsName\n   * @param {boolean} [opt_hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, opt_srsName, opt_hasZ) {\n    let axisOrientation = 'enu';\n    if (opt_srsName) {\n      axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n    }\n    let coords =\n      axisOrientation.substr(0, 2) === 'en'\n        ? point[0] + ',' + point[1]\n        : point[1] + ',' + point[0];\n    if (opt_hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ',' + z;\n    }\n\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    const point = geometry.getCoordinates();\n    const coord = this.getCoords_(point, srsName, hasZ);\n    writeStringTextNode(coordinates, coord);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiPoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      this.POINTMEMBER_SERIALIZERS,\n      makeSimpleNodeFactory('pointMember'),\n      points,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePointMember(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLinearRing(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    this.writeCoordinates_(coordinates, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      polygons,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: node}),\n      this.ENVELOPE_SERIALIZERS,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      objectStack,\n      keys,\n      this\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(\n      'http://www.opengis.net/gml',\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]\n    );\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser,\n    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.BOX_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeArrayPusher(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Box': makeReplacer(GML2.prototype.readBox),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML2.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML2.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML2.prototype.writeMultiCurveOrLineString\n    ),\n    'LinearRing': makeChildAppender(GML2.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML2.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Surface': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML2.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Envelope': makeChildAppender(GML2.prototype.writeEnvelope),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML2.prototype.writeLineStringOrCurveMember\n    ),\n    'curveMember': makeChildAppender(\n      GML2.prototype.writeLineStringOrCurveMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\n    'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML2.prototype.writePointMember),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygonMember\n    ),\n    'polygonMember': makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygonMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\nexport default GML2;\n"]},"metadata":{},"sourceType":"module"}