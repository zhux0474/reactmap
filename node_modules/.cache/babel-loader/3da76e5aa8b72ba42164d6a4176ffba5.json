{"ast":null,"code":"// @ag-grid-community/react v26.2.0\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar beansContext_1 = require(\"../beansContext\");\n\nvar useJsCellRenderer = function (showDetails, showTools, toolsValueSpan, jsCellRendererRef, eGui) {\n  var _a = react_1.useContext(beansContext_1.BeansContext),\n      context = _a.context,\n      userComponentFactory = _a.userComponentFactory;\n\n  var destroyCellRenderer = react_1.useCallback(function () {\n    var comp = jsCellRendererRef.current;\n\n    if (!comp) {\n      return;\n    }\n\n    var compGui = comp.getGui();\n\n    if (compGui && compGui.parentElement) {\n      compGui.parentElement.removeChild(compGui);\n    }\n\n    context.destroyBean(comp);\n    jsCellRendererRef.current = undefined;\n  }, []); // create or refresh JS cell renderer\n\n  react_1.useEffect(function () {\n    var showValue = showDetails != null;\n    var jsCompDetails = showDetails && showDetails.compDetails && !showDetails.compDetails.componentFromFramework;\n    var waitingForToolsSetup = showTools && toolsValueSpan == null;\n    var showComp = showValue && jsCompDetails && !waitingForToolsSetup; // if not showing comp, destroy any existing one and return\n\n    if (!showComp) {\n      destroyCellRenderer();\n      return;\n    }\n\n    var compDetails = showDetails.compDetails;\n\n    if (jsCellRendererRef.current) {\n      // attempt refresh if refresh method exists\n      var comp_1 = jsCellRendererRef.current;\n      var attemptRefresh = comp_1.refresh != null && showDetails.force == false;\n      var refreshResult = attemptRefresh ? comp_1.refresh(compDetails.params) : false;\n      var refreshWorked = refreshResult === true || refreshResult === undefined; // if refresh worked, nothing else to do\n\n      if (refreshWorked) {\n        return;\n      } // if refresh didn't work, we destroy it and continue, so new cell renderer created below\n\n\n      destroyCellRenderer();\n    }\n\n    var promise = compDetails.newAgStackInstance();\n    ;\n\n    if (!promise) {\n      return;\n    }\n\n    var comp = promise.resolveNow(null, function (x) {\n      return x;\n    }); // js comps are never async\n\n    if (!comp) {\n      return;\n    }\n\n    var compGui = comp.getGui();\n    var parent = showTools ? toolsValueSpan : eGui.current;\n    parent.appendChild(compGui);\n    jsCellRendererRef.current = comp;\n  }, [showDetails, showTools, toolsValueSpan]); // this effect makes sure destroyCellRenderer gets called when the\n  // component is destroyed. as the other effect only updates when there\n  // is a change in state\n\n  react_1.useEffect(function () {\n    return destroyCellRenderer;\n  }, []);\n};\n\nexports.default = useJsCellRenderer;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/react/lib/reactUi/cells/reactUi/cells/showJsRenderer.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ICellRendererComp } from '@ag-grid-community/core';\nimport { MutableRefObject, useCallback, useContext, useEffect } from 'react';\nimport { BeansContext } from '../beansContext';\nimport { RenderDetails } from './cellComp';\n\nconst useJsCellRenderer = (\n    showDetails: RenderDetails | undefined,\n    showTools: boolean,\n    toolsValueSpan: HTMLElement | undefined,\n    jsCellRendererRef: MutableRefObject<ICellRendererComp|undefined>,\n    eGui: MutableRefObject<any>) => {\n\n        const {context, userComponentFactory} = useContext(BeansContext);\n\n        const destroyCellRenderer = useCallback(() => {\n            const comp = jsCellRendererRef.current;\n            if (!comp) { return; }\n\n            const compGui = comp.getGui();\n\n            if (compGui && compGui.parentElement) {\n                compGui.parentElement.removeChild(compGui);\n            }\n\n            context.destroyBean(comp);\n            jsCellRendererRef.current = undefined;\n        }, []);\n\n        // create or refresh JS cell renderer\n        useEffect(() => {\n            const showValue = showDetails != null;\n            const jsCompDetails = showDetails && showDetails.compDetails && !showDetails.compDetails.componentFromFramework;\n            const waitingForToolsSetup = showTools && toolsValueSpan == null;\n            const showComp = showValue && jsCompDetails && !waitingForToolsSetup;\n\n            // if not showing comp, destroy any existing one and return\n            if (!showComp) {\n                destroyCellRenderer();\n                return;\n            }\n\n            const compDetails = showDetails!.compDetails;\n\n            if (jsCellRendererRef.current) {\n                // attempt refresh if refresh method exists\n                const comp = jsCellRendererRef.current;\n                const attemptRefresh = comp.refresh != null && showDetails!.force == false;\n                const refreshResult = attemptRefresh ? comp.refresh(compDetails!.params) : false;\n                const refreshWorked = refreshResult === true || refreshResult === undefined;\n\n                // if refresh worked, nothing else to do\n                if (refreshWorked) { return; }\n\n                // if refresh didn't work, we destroy it and continue, so new cell renderer created below\n                destroyCellRenderer();\n            }\n\n            const promise = compDetails!.newAgStackInstance();;\n            if (!promise) { return; }\n\n            const comp = promise.resolveNow(null, x => x); // js comps are never async\n            if (!comp) { return; }\n\n            const compGui = comp.getGui();\n            const parent = showTools ? toolsValueSpan! : eGui.current!;\n            parent.appendChild(compGui);\n\n            jsCellRendererRef.current = comp;\n\n        }, [showDetails, showTools, toolsValueSpan]);\n\n        // this effect makes sure destroyCellRenderer gets called when the\n        // component is destroyed. as the other effect only updates when there\n        // is a change in state\n        useEffect(() => {\n            return destroyCellRenderer;\n        }, []);\n}\n\nexport default useJsCellRenderer;\n"]},"metadata":{},"sourceType":"script"}