{"ast":null,"code":"var _jsxFileName = \"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js\";\nimport React from \"react\";\nimport { fromLonLat, get } from \"ol/proj\"; //import \"./SmokerMap.css\";\n\nimport Map from \"ol/Map\"; //import Feature from \"ol/Feature\";\n\nimport View from \"ol/View\"; //import { Point, Style, Circle, Fill, Feature } from \"ol\";\n\nimport TileLayer from \"ol/layer/Tile\"; //import TileWMS from 'ol/source/TileWMS';\n\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport { Fill, Stroke, Style } from 'ol/style';\nimport { metadata } from './metadata.js';\nimport countyData from './countyline.geojson';\nimport Dropdown from './dropdown.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SmokerMap extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setLayerVisibility = viewed => {\n      this.state.countyOutline.setVisible(viewed === 'County');\n      this.state.smokerlayer.setVisible(viewed === 'County');\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (prevProps.viewed !== this.props.viewed) {\n        this.setLayerVisibility(this.props.viewed);\n      } //var checkAndLoad = (name) =>  this.checkAndLoad(prevProps, name)\n      //checkAndLoad('county')\n\n    };\n\n    this.state = {\n      smokerSource: null,\n      smokerlayer: false,\n      countyOutlineSource: null,\n      countyOutline: false,\n      countyReady: false\n    };\n    console.log(this.props);\n  }\n\n  componentDidMount() {\n    var basemap = new TileLayer({\n      source: new OSM()\n    });\n    var smokerSource = new VectorSource({\n      url: metadata[1].geojson_url,\n      format: new GeoJSON()\n    }); // use usestate to update the url base on \n\n    /*var smokerSource = new VectorSource({\n      url: Dropdown.attribute.value,\n    \n       format: new GeoJSON()\n    })\n    */\n\n    var countyOutlineSource = new VectorSource({\n      url: countyData,\n      format: new GeoJSON()\n    });\n    var countyBorder = new Style({\n      stroke: new Stroke({\n        color: 'black',\n        width: 1\n      })\n    });\n    var countyOutline = new VectorLayer({\n      opacity: 1,\n      //visible: this.props.viewed === 'County',\n      source: countyOutlineSource,\n      style: countyBorder\n    });\n\n    var stylefunction = function (feature) {\n      var style;\n      var value = feature.get('brfss_smoker'); //var county=feature.get('county');\n      // assign color to each break from metadata.js\n      //console.log(county,value)\n\n      for (let i = 0; i < metadata[1]['break'].length; i++) {\n        if (value > metadata[1]['break'][i]) {\n          style = new Style({\n            fill: new Fill({\n              color: metadata[1]['color'][i]\n            }),\n            stroke: new Stroke({\n              color: 'black',\n              width: 0.3\n            })\n          });\n        }\n\n        ;\n      }\n\n      return style;\n    };\n\n    var smokerlayer = new VectorLayer({\n      source: smokerSource,\n      style: stylefunction //showLegend:true\n\n    });\n    var olmap = new Map({\n      layers: [basemap, countyOutline, smokerlayer],\n      target: \"mapContainer\",\n      view: new View({\n        center: fromLonLat([-94.6859, 46.7296]),\n        zoom: 6\n      })\n    });\n    this.setState({\n      olmap: olmap,\n      countyOutlineSource: countyOutlineSource,\n      countyOutline: countyOutline,\n      smokerlayer: smokerlayer,\n      smokerSource: smokerSource\n    }); // when the geographic county data is loaded in add it to state of react object\n\n    countyOutlineSource.on('change', evt => {\n      var countyOutlineSource = evt.target;\n\n      if (countyOutlineSource.getState() === 'ready') {\n        // note that brackets are needed for dynamic names\n        this.setState({\n          countyData: countyOutlineSource.getFeatures()\n        });\n      }\n    });\n  }\n\n  render() {\n    console.log(\"-> render App\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mapContainer\",\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js"],"names":["React","fromLonLat","get","Map","View","TileLayer","VectorLayer","VectorSource","GeoJSON","OSM","Fill","Stroke","Style","metadata","countyData","Dropdown","SmokerMap","Component","constructor","props","setLayerVisibility","viewed","state","countyOutline","setVisible","smokerlayer","componentDidUpdate","prevProps","prevState","smokerSource","countyOutlineSource","countyReady","console","log","componentDidMount","basemap","source","url","geojson_url","format","countyBorder","stroke","color","width","opacity","style","stylefunction","feature","value","i","length","fill","olmap","layers","target","view","center","zoom","setState","on","evt","getState","getFeatures","render","height"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { fromLonLat, get } from \"ol/proj\";\n//import \"./SmokerMap.css\";\nimport Map from \"ol/Map\";\n//import Feature from \"ol/Feature\";\nimport View from \"ol/View\";\n//import { Point, Style, Circle, Fill, Feature } from \"ol\";\nimport TileLayer from \"ol/layer/Tile\";\n//import TileWMS from 'ol/source/TileWMS';\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport {Fill, Stroke, Style} from 'ol/style';\nimport {metadata} from './metadata.js';\nimport countyData from './countyline.geojson'\nimport Dropdown from './dropdown.js'\n\n\nexport default class SmokerMap extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n     \n      smokerSource : null,\n      smokerlayer: false,\n      countyOutlineSource: null,\n      countyOutline: false,\n      countyReady: false\n      \n  };\n    console.log(this.props);\n  }\n\n  \n\n\n  componentDidMount(){\n\n    var basemap =new TileLayer({\n      source: new OSM()\n    })\n    var smokerSource = new VectorSource({\n      url: metadata[1].geojson_url,\n  \n      format: new GeoJSON()\n    })\n    \n\n    // use usestate to update the url base on \n    /*var smokerSource = new VectorSource({\n      url: Dropdown.attribute.value,\n    \n\n      format: new GeoJSON()\n    })\n    */\n\n    var countyOutlineSource = new VectorSource({\n      url: countyData,\n      format: new GeoJSON()\n\n    })\n    var countyBorder = new Style({\n      stroke: new Stroke({\n          color: 'black',\n          width: 1\n      })\n  });\n    var countyOutline = new VectorLayer({\n      opacity: 1,\n      //visible: this.props.viewed === 'County',\n      source: countyOutlineSource,\n      style: countyBorder\n    })\n  \n    var stylefunction = function(feature){\n        var style;\n        \n        var value=feature.get('brfss_smoker');\n        //var county=feature.get('county');\n        \n        // assign color to each break from metadata.js\n        //console.log(county,value)\n        for (let i =0;i<metadata[1]['break'].length;i++){\n          if(value>metadata[1]['break'][i]){\n          style= new Style({\n            fill: new Fill({\n              color: metadata[1]['color'][i]\n            }),\n            stroke: new Stroke({\n              color:'black',\n              width:0.3\n            })\n          })\n        };\n      }\n\n        return style;\n\n    };\n\n    var smokerlayer = new VectorLayer({\n\n       source: smokerSource,\n       style: stylefunction,\n       //showLegend:true\n\n       })\n\n    var olmap=new Map({\n      layers: [basemap,countyOutline,smokerlayer],\n      target: \"mapContainer\",\n      view :new View({\n        center:fromLonLat([-94.6859,46.7296]),\n        zoom: 6\n      })\n\n\n\n    });\n\n    this.setState({\n      \n      olmap: olmap,\n      countyOutlineSource:countyOutlineSource,\n      countyOutline: countyOutline,\n      smokerlayer: smokerlayer,\n      smokerSource:smokerSource\n  })\n\n  // when the geographic county data is loaded in add it to state of react object\n  countyOutlineSource.on('change', (evt) => {\n    var countyOutlineSource=evt.target;\n    if (countyOutlineSource.getState() === 'ready'){\n        // note that brackets are needed for dynamic names\n        this.setState({countyData: countyOutlineSource.getFeatures()});\n    }\n})\n\n\n  }\n\n  setLayerVisibility = viewed => {\n\n    this.state.countyOutline.setVisible(viewed === 'County')\n    this.state.smokerlayer.setVisible(viewed === 'County')\n  }\n  \ncomponentDidUpdate = (prevProps, prevState) => {\n  if (prevProps.viewed !== this.props.viewed) {\n      this.setLayerVisibility(this.props.viewed)\n  }\n  //var checkAndLoad = (name) =>  this.checkAndLoad(prevProps, name)\n  \n  //checkAndLoad('county')\n}\n\n\n  \n\n  \n  render() {\n    console.log(\"-> render App\");\n    return (\n\n\n      <div id=\"mapContainer\" style={{ width: \"100%\",height: \"500px\"}}></div>\n      \n\n\n    );\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}