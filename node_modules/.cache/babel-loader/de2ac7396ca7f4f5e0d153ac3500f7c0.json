{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { BeanStub } from \"../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { Events } from \"../events\";\nimport { getInnerHeight } from \"../utils/dom\"; // listens to changes in the center viewport size, for column and row virtualisation,\n// and adjusts grid as necessary. there are two viewports, one for horizontal and one for\n// vertical scrolling.\n\nvar ViewportSizeFeature =\n/** @class */\nfunction (_super) {\n  __extends(ViewportSizeFeature, _super);\n\n  function ViewportSizeFeature(centerContainer) {\n    var _this = _super.call(this) || this;\n\n    _this.centerContainerCon = centerContainer;\n    return _this;\n  }\n\n  ViewportSizeFeature.prototype.postConstruct = function () {\n    var _this = this;\n\n    this.ctrlsService.whenReady(function () {\n      _this.gridBodyCon = _this.ctrlsService.getGridBodyCtrl();\n\n      _this.listenForResize();\n    });\n    this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));\n  };\n\n  ViewportSizeFeature.prototype.listenForResize = function () {\n    var listener = this.onCenterViewportResized.bind(this); // centerContainer gets horizontal resizes\n\n    this.centerContainerCon.registerViewportResizeListener(listener); // eBodyViewport gets vertical resizes\n\n    this.gridBodyCon.registerBodyViewportResizeListener(listener);\n  };\n\n  ViewportSizeFeature.prototype.onScrollbarWidthChanged = function () {\n    this.checkViewportAndScrolls();\n  };\n\n  ViewportSizeFeature.prototype.onCenterViewportResized = function () {\n    if (this.centerContainerCon.isViewportVisible()) {\n      this.checkViewportAndScrolls();\n      var newWidth = this.centerContainerCon.getCenterWidth();\n\n      if (newWidth !== this.centerWidth) {\n        this.centerWidth = newWidth;\n        this.columnModel.refreshFlexedColumns({\n          viewportWidth: this.centerWidth,\n          updateBodyWidths: true,\n          fireResizedEvent: true\n        });\n      }\n    } else {\n      this.bodyHeight = 0;\n    }\n  }; // gets called every time the viewport size changes. we use this to check visibility of scrollbars\n  // in the grid panel, and also to check size and position of viewport for row and column virtualisation.\n\n\n  ViewportSizeFeature.prototype.checkViewportAndScrolls = function () {\n    // results in updating anything that depends on scroll showing\n    this.updateScrollVisibleService(); // fires event if height changes, used by PaginationService, HeightScalerService, RowRenderer\n\n    this.checkBodyHeight(); // check for virtual columns for ColumnController\n\n    this.onHorizontalViewportChanged();\n    this.gridBodyCon.getScrollFeature().checkScrollLeft();\n  };\n\n  ViewportSizeFeature.prototype.getBodyHeight = function () {\n    return this.bodyHeight;\n  };\n\n  ViewportSizeFeature.prototype.checkBodyHeight = function () {\n    var eBodyViewport = this.gridBodyCon.getBodyViewportElement();\n    var bodyHeight = getInnerHeight(eBodyViewport);\n\n    if (this.bodyHeight !== bodyHeight) {\n      this.bodyHeight = bodyHeight;\n      var event_1 = {\n        type: Events.EVENT_BODY_HEIGHT_CHANGED,\n        api: this.gridApi,\n        columnApi: this.columnApi\n      };\n      this.eventService.dispatchEvent(event_1);\n    }\n  };\n\n  ViewportSizeFeature.prototype.updateScrollVisibleService = function () {\n    // because of column animation (which takes 200ms), we have to do this twice.\n    // eg if user removes cols anywhere except at the RHS, then the cols on the RHS\n    // will animate to the left to fill the gap. this animation means just after\n    // the cols are removed, the remaining cols are still in the original location\n    // at the start of the animation, so pre animation the H scrollbar is still needed,\n    // but post animation it is not.\n    this.updateScrollVisibleServiceImpl();\n    setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);\n  };\n\n  ViewportSizeFeature.prototype.updateScrollVisibleServiceImpl = function () {\n    var params = {\n      horizontalScrollShowing: this.isHorizontalScrollShowing(),\n      verticalScrollShowing: this.gridBodyCon.isVerticalScrollShowing()\n    };\n    this.scrollVisibleService.setScrollsVisible(params); // fix - gridComp should just listen to event from above\n\n    this.gridBodyCon.setVerticalScrollPaddingVisible(params.verticalScrollShowing);\n  };\n\n  ViewportSizeFeature.prototype.isHorizontalScrollShowing = function () {\n    var isAlwaysShowHorizontalScroll = this.gridOptionsWrapper.isAlwaysShowHorizontalScroll();\n    return isAlwaysShowHorizontalScroll || this.centerContainerCon.isViewportHScrollShowing();\n  }; // this gets called whenever a change in the viewport, so we can inform column controller it has to work\n  // out the virtual columns again. gets called from following locations:\n  // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged, API (doLayout)\n\n\n  ViewportSizeFeature.prototype.onHorizontalViewportChanged = function () {\n    var scrollWidth = this.centerContainerCon.getCenterWidth();\n    var scrollPosition = this.centerContainerCon.getViewportScrollLeft();\n    this.columnModel.setViewportPosition(scrollWidth, scrollPosition);\n  };\n\n  __decorate([Autowired('ctrlsService')], ViewportSizeFeature.prototype, \"ctrlsService\", void 0);\n\n  __decorate([Autowired('columnModel')], ViewportSizeFeature.prototype, \"columnModel\", void 0);\n\n  __decorate([Autowired('scrollVisibleService')], ViewportSizeFeature.prototype, \"scrollVisibleService\", void 0);\n\n  __decorate([Autowired('columnApi')], ViewportSizeFeature.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('gridApi')], ViewportSizeFeature.prototype, \"gridApi\", void 0);\n\n  __decorate([PostConstruct], ViewportSizeFeature.prototype, \"postConstruct\", null);\n\n  return ViewportSizeFeature;\n}(BeanStub);\n\nexport { ViewportSizeFeature };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/gridBodyComp/viewportSizeFeature.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","BeanStub","Autowired","PostConstruct","Events","getInnerHeight","ViewportSizeFeature","_super","centerContainer","_this","call","centerContainerCon","postConstruct","ctrlsService","whenReady","gridBodyCon","getGridBodyCtrl","listenForResize","addManagedListener","eventService","EVENT_SCROLLBAR_WIDTH_CHANGED","onScrollbarWidthChanged","bind","listener","onCenterViewportResized","registerViewportResizeListener","registerBodyViewportResizeListener","checkViewportAndScrolls","isViewportVisible","newWidth","getCenterWidth","centerWidth","columnModel","refreshFlexedColumns","viewportWidth","updateBodyWidths","fireResizedEvent","bodyHeight","updateScrollVisibleService","checkBodyHeight","onHorizontalViewportChanged","getScrollFeature","checkScrollLeft","getBodyHeight","eBodyViewport","getBodyViewportElement","event_1","type","EVENT_BODY_HEIGHT_CHANGED","api","gridApi","columnApi","dispatchEvent","updateScrollVisibleServiceImpl","setTimeout","params","horizontalScrollShowing","isHorizontalScrollShowing","verticalScrollShowing","isVerticalScrollShowing","scrollVisibleService","setScrollsVisible","setVerticalScrollPaddingVisible","isAlwaysShowHorizontalScroll","gridOptionsWrapper","isViewportHScrollShowing","scrollWidth","scrollPosition","getViewportScrollLeft","setViewportPosition"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { Events } from \"../events\";\nimport { getInnerHeight } from \"../utils/dom\";\n// listens to changes in the center viewport size, for column and row virtualisation,\n// and adjusts grid as necessary. there are two viewports, one for horizontal and one for\n// vertical scrolling.\nvar ViewportSizeFeature = /** @class */ (function (_super) {\n    __extends(ViewportSizeFeature, _super);\n    function ViewportSizeFeature(centerContainer) {\n        var _this = _super.call(this) || this;\n        _this.centerContainerCon = centerContainer;\n        return _this;\n    }\n    ViewportSizeFeature.prototype.postConstruct = function () {\n        var _this = this;\n        this.ctrlsService.whenReady(function () {\n            _this.gridBodyCon = _this.ctrlsService.getGridBodyCtrl();\n            _this.listenForResize();\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));\n    };\n    ViewportSizeFeature.prototype.listenForResize = function () {\n        var listener = this.onCenterViewportResized.bind(this);\n        // centerContainer gets horizontal resizes\n        this.centerContainerCon.registerViewportResizeListener(listener);\n        // eBodyViewport gets vertical resizes\n        this.gridBodyCon.registerBodyViewportResizeListener(listener);\n    };\n    ViewportSizeFeature.prototype.onScrollbarWidthChanged = function () {\n        this.checkViewportAndScrolls();\n    };\n    ViewportSizeFeature.prototype.onCenterViewportResized = function () {\n        if (this.centerContainerCon.isViewportVisible()) {\n            this.checkViewportAndScrolls();\n            var newWidth = this.centerContainerCon.getCenterWidth();\n            if (newWidth !== this.centerWidth) {\n                this.centerWidth = newWidth;\n                this.columnModel.refreshFlexedColumns({ viewportWidth: this.centerWidth, updateBodyWidths: true, fireResizedEvent: true });\n            }\n        }\n        else {\n            this.bodyHeight = 0;\n        }\n    };\n    // gets called every time the viewport size changes. we use this to check visibility of scrollbars\n    // in the grid panel, and also to check size and position of viewport for row and column virtualisation.\n    ViewportSizeFeature.prototype.checkViewportAndScrolls = function () {\n        // results in updating anything that depends on scroll showing\n        this.updateScrollVisibleService();\n        // fires event if height changes, used by PaginationService, HeightScalerService, RowRenderer\n        this.checkBodyHeight();\n        // check for virtual columns for ColumnController\n        this.onHorizontalViewportChanged();\n        this.gridBodyCon.getScrollFeature().checkScrollLeft();\n    };\n    ViewportSizeFeature.prototype.getBodyHeight = function () {\n        return this.bodyHeight;\n    };\n    ViewportSizeFeature.prototype.checkBodyHeight = function () {\n        var eBodyViewport = this.gridBodyCon.getBodyViewportElement();\n        var bodyHeight = getInnerHeight(eBodyViewport);\n        if (this.bodyHeight !== bodyHeight) {\n            this.bodyHeight = bodyHeight;\n            var event_1 = {\n                type: Events.EVENT_BODY_HEIGHT_CHANGED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event_1);\n        }\n    };\n    ViewportSizeFeature.prototype.updateScrollVisibleService = function () {\n        // because of column animation (which takes 200ms), we have to do this twice.\n        // eg if user removes cols anywhere except at the RHS, then the cols on the RHS\n        // will animate to the left to fill the gap. this animation means just after\n        // the cols are removed, the remaining cols are still in the original location\n        // at the start of the animation, so pre animation the H scrollbar is still needed,\n        // but post animation it is not.\n        this.updateScrollVisibleServiceImpl();\n        setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);\n    };\n    ViewportSizeFeature.prototype.updateScrollVisibleServiceImpl = function () {\n        var params = {\n            horizontalScrollShowing: this.isHorizontalScrollShowing(),\n            verticalScrollShowing: this.gridBodyCon.isVerticalScrollShowing()\n        };\n        this.scrollVisibleService.setScrollsVisible(params);\n        // fix - gridComp should just listen to event from above\n        this.gridBodyCon.setVerticalScrollPaddingVisible(params.verticalScrollShowing);\n    };\n    ViewportSizeFeature.prototype.isHorizontalScrollShowing = function () {\n        var isAlwaysShowHorizontalScroll = this.gridOptionsWrapper.isAlwaysShowHorizontalScroll();\n        return isAlwaysShowHorizontalScroll || this.centerContainerCon.isViewportHScrollShowing();\n    };\n    // this gets called whenever a change in the viewport, so we can inform column controller it has to work\n    // out the virtual columns again. gets called from following locations:\n    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged, API (doLayout)\n    ViewportSizeFeature.prototype.onHorizontalViewportChanged = function () {\n        var scrollWidth = this.centerContainerCon.getCenterWidth();\n        var scrollPosition = this.centerContainerCon.getViewportScrollLeft();\n        this.columnModel.setViewportPosition(scrollWidth, scrollPosition);\n    };\n    __decorate([\n        Autowired('ctrlsService')\n    ], ViewportSizeFeature.prototype, \"ctrlsService\", void 0);\n    __decorate([\n        Autowired('columnModel')\n    ], ViewportSizeFeature.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('scrollVisibleService')\n    ], ViewportSizeFeature.prototype, \"scrollVisibleService\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], ViewportSizeFeature.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], ViewportSizeFeature.prototype, \"gridApi\", void 0);\n    __decorate([\n        PostConstruct\n    ], ViewportSizeFeature.prototype, \"postConstruct\", null);\n    return ViewportSizeFeature;\n}(BeanStub));\nexport { ViewportSizeFeature };\n"]},"metadata":{},"sourceType":"module"}