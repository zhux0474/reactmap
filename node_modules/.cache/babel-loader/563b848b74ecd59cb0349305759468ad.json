{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/filter/IsBetween\n */\n\n\nimport Comparison from './Comparison.js';\n/**\n * @classdesc\n * Represents a `<PropertyIsBetween>` comparison operator.\n * @api\n */\n\nvar IsBetween =\n/** @class */\nfunction (_super) {\n  __extends(IsBetween, _super);\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!number} lowerBoundary The lower bound of the range.\n   * @param {!number} upperBoundary The upper bound of the range.\n   */\n\n\n  function IsBetween(propertyName, lowerBoundary, upperBoundary) {\n    var _this = _super.call(this, 'PropertyIsBetween', propertyName) || this;\n    /**\n     * @type {!number}\n     */\n\n\n    _this.lowerBoundary = lowerBoundary;\n    /**\n     * @type {!number}\n     */\n\n    _this.upperBoundary = upperBoundary;\n    return _this;\n  }\n\n  return IsBetween;\n}(Comparison);\n\nexport default IsBetween;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/ol/src/format/filter/IsBetween.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEG;;;AACH,OAAO,UAAP,MAAuB,iBAAvB;AAEA;;;;AAIG;;AACH,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwB,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;AACtB;;;;AAIG;;;AACH,WAAA,SAAA,CAAY,YAAZ,EAA0B,aAA1B,EAAyC,aAAzC,EAAsD;AAAtD,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,mBAAN,EAA2B,YAA3B,KAAwC,IAD1C;AAGE;;AAEG;;;AACH,IAAA,KAAI,CAAC,aAAL,GAAqB,aAArB;AAEA;;AAEG;;AACH,IAAA,KAAI,CAAC,aAAL,GAAqB,aAArB;;AACD;;AACH,SAAA,SAAA;AAAC,CAnBD,CAAwB,UAAxB,CAAA;;AAqBA,eAAe,SAAf","sourcesContent":["/**\n * @module ol/format/filter/IsBetween\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsBetween>` comparison operator.\n * @api\n */\nclass IsBetween extends Comparison {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!number} lowerBoundary The lower bound of the range.\n   * @param {!number} upperBoundary The upper bound of the range.\n   */\n  constructor(propertyName, lowerBoundary, upperBoundary) {\n    super('PropertyIsBetween', propertyName);\n\n    /**\n     * @type {!number}\n     */\n    this.lowerBoundary = lowerBoundary;\n\n    /**\n     * @type {!number}\n     */\n    this.upperBoundary = upperBoundary;\n  }\n}\n\nexport default IsBetween;\n"]},"metadata":{},"sourceType":"module"}