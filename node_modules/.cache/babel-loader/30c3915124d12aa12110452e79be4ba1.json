{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n// Based on https://stackoverflow.com/a/14991797\n// This will parse a delimited string into an array of arrays.\nexport function stringToArray(strData, delimiter) {\n  if (delimiter === void 0) {\n    delimiter = ',';\n  }\n\n  var data = [];\n\n  var isNewline = function (char) {\n    return char === '\\r' || char === '\\n';\n  };\n\n  var insideQuotedField = false;\n\n  if (strData === '') {\n    return [['']];\n  }\n\n  var _loop_1 = function (row, column, position) {\n    var previousChar = strData[position - 1];\n    var currentChar = strData[position];\n    var nextChar = strData[position + 1];\n\n    var ensureDataExists = function () {\n      if (!data[row]) {\n        // create row if it doesn't exist\n        data[row] = [];\n      }\n\n      if (!data[row][column]) {\n        // create column if it doesn't exist\n        data[row][column] = '';\n      }\n    };\n\n    ensureDataExists();\n\n    if (currentChar === '\"') {\n      if (insideQuotedField) {\n        if (nextChar === '\"') {\n          // unescape double quote\n          data[row][column] += '\"';\n          position++;\n        } else {\n          // exit quoted field\n          insideQuotedField = false;\n        }\n\n        return out_row_1 = row, out_column_1 = column, out_position_1 = position, \"continue\";\n      } else if (previousChar === undefined || previousChar === delimiter || isNewline(previousChar)) {\n        // enter quoted field\n        insideQuotedField = true;\n        return out_row_1 = row, out_column_1 = column, out_position_1 = position, \"continue\";\n      }\n    }\n\n    if (!insideQuotedField) {\n      if (currentChar === delimiter) {\n        // move to next column\n        column++;\n        ensureDataExists();\n        return out_row_1 = row, out_column_1 = column, out_position_1 = position, \"continue\";\n      } else if (isNewline(currentChar)) {\n        // move to next row\n        column = 0;\n        row++;\n        ensureDataExists();\n\n        if (currentChar === '\\r' && nextChar === '\\n') {\n          // skip over second newline character if it exists\n          position++;\n        }\n\n        return out_row_1 = row, out_column_1 = column, out_position_1 = position, \"continue\";\n      }\n    } // add current character to current column\n\n\n    data[row][column] += currentChar;\n    out_row_1 = row;\n    out_column_1 = column;\n    out_position_1 = position;\n  };\n\n  var out_row_1, out_column_1, out_position_1; // iterate over each character, keep track of current row and column (of the returned array)\n\n  for (var row = 0, column = 0, position = 0; position < strData.length; position++) {\n    _loop_1(row, column, position);\n\n    row = out_row_1;\n    column = out_column_1;\n    position = out_position_1;\n  }\n\n  return data;\n}","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/utils/csv.js"],"names":["stringToArray","strData","delimiter","data","isNewline","char","insideQuotedField","_loop_1","row","column","position","previousChar","currentChar","nextChar","ensureDataExists","out_row_1","out_column_1","out_position_1","undefined","length"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n// Based on https://stackoverflow.com/a/14991797\n// This will parse a delimited string into an array of arrays.\nexport function stringToArray(strData, delimiter) {\n    if (delimiter === void 0) { delimiter = ','; }\n    var data = [];\n    var isNewline = function (char) { return char === '\\r' || char === '\\n'; };\n    var insideQuotedField = false;\n    if (strData === '') {\n        return [['']];\n    }\n    var _loop_1 = function (row, column, position) {\n        var previousChar = strData[position - 1];\n        var currentChar = strData[position];\n        var nextChar = strData[position + 1];\n        var ensureDataExists = function () {\n            if (!data[row]) {\n                // create row if it doesn't exist\n                data[row] = [];\n            }\n            if (!data[row][column]) {\n                // create column if it doesn't exist\n                data[row][column] = '';\n            }\n        };\n        ensureDataExists();\n        if (currentChar === '\"') {\n            if (insideQuotedField) {\n                if (nextChar === '\"') {\n                    // unescape double quote\n                    data[row][column] += '\"';\n                    position++;\n                }\n                else {\n                    // exit quoted field\n                    insideQuotedField = false;\n                }\n                return out_row_1 = row, out_column_1 = column, out_position_1 = position, \"continue\";\n            }\n            else if (previousChar === undefined || previousChar === delimiter || isNewline(previousChar)) {\n                // enter quoted field\n                insideQuotedField = true;\n                return out_row_1 = row, out_column_1 = column, out_position_1 = position, \"continue\";\n            }\n        }\n        if (!insideQuotedField) {\n            if (currentChar === delimiter) {\n                // move to next column\n                column++;\n                ensureDataExists();\n                return out_row_1 = row, out_column_1 = column, out_position_1 = position, \"continue\";\n            }\n            else if (isNewline(currentChar)) {\n                // move to next row\n                column = 0;\n                row++;\n                ensureDataExists();\n                if (currentChar === '\\r' && nextChar === '\\n') {\n                    // skip over second newline character if it exists\n                    position++;\n                }\n                return out_row_1 = row, out_column_1 = column, out_position_1 = position, \"continue\";\n            }\n        }\n        // add current character to current column\n        data[row][column] += currentChar;\n        out_row_1 = row;\n        out_column_1 = column;\n        out_position_1 = position;\n    };\n    var out_row_1, out_column_1, out_position_1;\n    // iterate over each character, keep track of current row and column (of the returned array)\n    for (var row = 0, column = 0, position = 0; position < strData.length; position++) {\n        _loop_1(row, column, position);\n        row = out_row_1;\n        column = out_column_1;\n        position = out_position_1;\n    }\n    return data;\n}\n"]},"metadata":{},"sourceType":"module"}