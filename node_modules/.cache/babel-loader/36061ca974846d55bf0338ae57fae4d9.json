{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { loadTemplate } from './dom';\nimport { camelCaseToHyphen } from './string';\nimport { iterateObject } from './object';\n/** @deprecated */\n\nexport function getNameOfClass(theClass) {\n  var funcNameRegex = /function (.{1,})\\(/;\n  var funcAsString = theClass.toString();\n  var results = funcNameRegex.exec(funcAsString);\n  return results && results.length > 1 ? results[1] : \"\";\n}\nexport function findLineByLeastSquares(values) {\n  var len = values.length;\n  var maxDecimals = 0;\n\n  if (len <= 1) {\n    return values;\n  }\n\n  for (var i = 0; i < values.length; i++) {\n    var value = values[i];\n    var splitExponent = value.toString().split('e-');\n\n    if (splitExponent.length > 1) {\n      maxDecimals = Math.max(maxDecimals, parseInt(splitExponent[1], 10));\n      continue;\n    }\n\n    if (Math.floor(value) === value) {\n      continue;\n    }\n\n    maxDecimals = Math.max(maxDecimals, value.toString().split('.')[1].length);\n  }\n\n  var sum_x = 0;\n  var sum_y = 0;\n  var sum_xy = 0;\n  var sum_xx = 0;\n  var y = 0;\n\n  for (var x = 0; x < len; x++) {\n    y = values[x];\n    sum_x += x;\n    sum_y += y;\n    sum_xx += x * x;\n    sum_xy += x * y;\n  }\n\n  var m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);\n  var b = sum_y / len - m * sum_x / len;\n  var result = [];\n\n  for (var x = 0; x <= len; x++) {\n    result.push(parseFloat((x * m + b).toFixed(maxDecimals)));\n  }\n\n  return result;\n}\n/**\n * Converts a CSS object into string\n * @param {Object} stylesToUse an object eg: {color: 'black', top: '25px'}\n * @return {string} A string like \"color: black; top: 25px;\" for html\n */\n\nexport function cssStyleObjectToMarkup(stylesToUse) {\n  if (!stylesToUse) {\n    return '';\n  }\n\n  var resParts = [];\n  iterateObject(stylesToUse, function (styleKey, styleValue) {\n    var styleKeyDashed = camelCaseToHyphen(styleKey);\n    resParts.push(styleKeyDashed + \": \" + styleValue + \";\");\n  });\n  return resParts.join(' ');\n}\n/**\n * Displays a message to the browser. this is useful in iPad, where you can't easily see the console.\n * so the javascript code can use this to give feedback. this is NOT intended to be called in production.\n * it is intended the AG Grid developer calls this to troubleshoot, but then takes out the calls before\n * checking in.\n * @param {string} msg\n */\n\nexport function message(msg) {\n  var eMessage = document.createElement('div');\n  var eBox = document.querySelector('#__ag__message');\n  eMessage.innerHTML = msg;\n\n  if (!eBox) {\n    var template = \"<div id=\\\"__ag__message\\\" style=\\\"display: inline-block; position: absolute; top: 0px; left: 0px; color: white; background-color: black; z-index: 20; padding: 2px; border: 1px solid darkred; height: 200px; overflow-y: auto;\\\"></div>\";\n    eBox = loadTemplate(template);\n\n    if (document.body) {\n      document.body.appendChild(eBox);\n    }\n  }\n\n  eBox.insertBefore(eMessage, eBox.children[0]);\n}\n/**\n * cell renderers are used in a few places. they bind to dom slightly differently to other cell renderes as they\n * can return back strings (instead of html elemnt) in the getGui() method. common code placed here to handle that.\n * @param {AgPromise<ICellRendererComp>} cellRendererPromise\n * @param {HTMLElement} eTarget\n */\n\nexport function bindCellRendererToHtmlElement(cellRendererPromise, eTarget) {\n  cellRendererPromise.then(function (cellRenderer) {\n    var gui = cellRenderer.getGui();\n\n    if (gui != null) {\n      if (typeof gui === 'object') {\n        eTarget.appendChild(gui);\n      } else {\n        eTarget.innerHTML = gui;\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/utils/general.js"],"names":["loadTemplate","camelCaseToHyphen","iterateObject","getNameOfClass","theClass","funcNameRegex","funcAsString","toString","results","exec","length","findLineByLeastSquares","values","len","maxDecimals","i","value","splitExponent","split","Math","max","parseInt","floor","sum_x","sum_y","sum_xy","sum_xx","y","x","m","b","result","push","parseFloat","toFixed","cssStyleObjectToMarkup","stylesToUse","resParts","styleKey","styleValue","styleKeyDashed","join","message","msg","eMessage","document","createElement","eBox","querySelector","innerHTML","template","body","appendChild","insertBefore","children","bindCellRendererToHtmlElement","cellRendererPromise","eTarget","then","cellRenderer","gui","getGui"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { loadTemplate } from './dom';\nimport { camelCaseToHyphen } from './string';\nimport { iterateObject } from './object';\n/** @deprecated */\nexport function getNameOfClass(theClass) {\n    var funcNameRegex = /function (.{1,})\\(/;\n    var funcAsString = theClass.toString();\n    var results = funcNameRegex.exec(funcAsString);\n    return results && results.length > 1 ? results[1] : \"\";\n}\nexport function findLineByLeastSquares(values) {\n    var len = values.length;\n    var maxDecimals = 0;\n    if (len <= 1) {\n        return values;\n    }\n    for (var i = 0; i < values.length; i++) {\n        var value = values[i];\n        var splitExponent = value.toString().split('e-');\n        if (splitExponent.length > 1) {\n            maxDecimals = Math.max(maxDecimals, parseInt(splitExponent[1], 10));\n            continue;\n        }\n        if (Math.floor(value) === value) {\n            continue;\n        }\n        maxDecimals = Math.max(maxDecimals, value.toString().split('.')[1].length);\n    }\n    var sum_x = 0;\n    var sum_y = 0;\n    var sum_xy = 0;\n    var sum_xx = 0;\n    var y = 0;\n    for (var x = 0; x < len; x++) {\n        y = values[x];\n        sum_x += x;\n        sum_y += y;\n        sum_xx += x * x;\n        sum_xy += x * y;\n    }\n    var m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);\n    var b = (sum_y / len) - (m * sum_x) / len;\n    var result = [];\n    for (var x = 0; x <= len; x++) {\n        result.push(parseFloat((x * m + b).toFixed(maxDecimals)));\n    }\n    return result;\n}\n/**\n * Converts a CSS object into string\n * @param {Object} stylesToUse an object eg: {color: 'black', top: '25px'}\n * @return {string} A string like \"color: black; top: 25px;\" for html\n */\nexport function cssStyleObjectToMarkup(stylesToUse) {\n    if (!stylesToUse) {\n        return '';\n    }\n    var resParts = [];\n    iterateObject(stylesToUse, function (styleKey, styleValue) {\n        var styleKeyDashed = camelCaseToHyphen(styleKey);\n        resParts.push(styleKeyDashed + \": \" + styleValue + \";\");\n    });\n    return resParts.join(' ');\n}\n/**\n * Displays a message to the browser. this is useful in iPad, where you can't easily see the console.\n * so the javascript code can use this to give feedback. this is NOT intended to be called in production.\n * it is intended the AG Grid developer calls this to troubleshoot, but then takes out the calls before\n * checking in.\n * @param {string} msg\n */\nexport function message(msg) {\n    var eMessage = document.createElement('div');\n    var eBox = document.querySelector('#__ag__message');\n    eMessage.innerHTML = msg;\n    if (!eBox) {\n        var template = \"<div id=\\\"__ag__message\\\" style=\\\"display: inline-block; position: absolute; top: 0px; left: 0px; color: white; background-color: black; z-index: 20; padding: 2px; border: 1px solid darkred; height: 200px; overflow-y: auto;\\\"></div>\";\n        eBox = loadTemplate(template);\n        if (document.body) {\n            document.body.appendChild(eBox);\n        }\n    }\n    eBox.insertBefore(eMessage, eBox.children[0]);\n}\n/**\n * cell renderers are used in a few places. they bind to dom slightly differently to other cell renderes as they\n * can return back strings (instead of html elemnt) in the getGui() method. common code placed here to handle that.\n * @param {AgPromise<ICellRendererComp>} cellRendererPromise\n * @param {HTMLElement} eTarget\n */\nexport function bindCellRendererToHtmlElement(cellRendererPromise, eTarget) {\n    cellRendererPromise.then(function (cellRenderer) {\n        var gui = cellRenderer.getGui();\n        if (gui != null) {\n            if (typeof gui === 'object') {\n                eTarget.appendChild(gui);\n            }\n            else {\n                eTarget.innerHTML = gui;\n            }\n        }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}