{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { ChangedPath } from \"../utils/changedPath\";\nimport { Constants } from \"../constants/constants\";\nimport { Events } from \"../events\";\n\nvar ChangeDetectionService =\n/** @class */\nfunction (_super) {\n  __extends(ChangeDetectionService, _super);\n\n  function ChangeDetectionService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ChangeDetectionService.prototype.init = function () {\n    if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      this.clientSideRowModel = this.rowModel;\n    }\n\n    this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));\n  };\n\n  ChangeDetectionService.prototype.onCellValueChanged = function (event) {\n    // Clipboard service manages its own change detection, so no need to do it here.\n    // The clipboard manages its own as otherwise this would happen once for every cell\n    // that got updated as part of a paste operation, so e.g. if 100 cells in a paste operation,\n    // this doChangeDetection would get called 100 times (once for each cell), instead clipboard\n    // service executes the logic we have here once (in essence batching up all cell changes\n    // into one change detection).\n    if (event.source === Constants.SOURCE_PASTE) {\n      return;\n    }\n\n    this.doChangeDetection(event.node, event.column);\n  };\n\n  ChangeDetectionService.prototype.doChangeDetection = function (rowNode, column) {\n    if (this.gridOptionsWrapper.isSuppressChangeDetection()) {\n      return;\n    } // step 1 of change detection is to update the aggregated values\n\n\n    if (this.clientSideRowModel && !rowNode.isRowPinned()) {\n      var onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();\n      var changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());\n      changedPath.addParentNode(rowNode.parent, [column]);\n      this.clientSideRowModel.doAggregate(changedPath);\n    } // step 2 of change detection is to refresh the cells\n\n\n    this.rowRenderer.refreshCells();\n  };\n\n  __decorate([Autowired('rowModel')], ChangeDetectionService.prototype, \"rowModel\", void 0);\n\n  __decorate([Autowired('rowRenderer')], ChangeDetectionService.prototype, \"rowRenderer\", void 0);\n\n  __decorate([PostConstruct], ChangeDetectionService.prototype, \"init\", null);\n\n  ChangeDetectionService = __decorate([Bean('changeDetectionService')], ChangeDetectionService);\n  return ChangeDetectionService;\n}(BeanStub);\n\nexport { ChangeDetectionService };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/valueService/changeDetectionService.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","BeanStub","Autowired","Bean","PostConstruct","ChangedPath","Constants","Events","ChangeDetectionService","_super","apply","init","rowModel","getType","ROW_MODEL_TYPE_CLIENT_SIDE","clientSideRowModel","addManagedListener","eventService","EVENT_CELL_VALUE_CHANGED","onCellValueChanged","bind","event","source","SOURCE_PASTE","doChangeDetection","node","column","rowNode","gridOptionsWrapper","isSuppressChangeDetection","isRowPinned","onlyChangedColumns","isAggregateOnlyChangedColumns","changedPath","getRootNode","addParentNode","parent","doAggregate","rowRenderer","refreshCells"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { ChangedPath } from \"../utils/changedPath\";\nimport { Constants } from \"../constants/constants\";\nimport { Events } from \"../events\";\nvar ChangeDetectionService = /** @class */ (function (_super) {\n    __extends(ChangeDetectionService, _super);\n    function ChangeDetectionService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ChangeDetectionService.prototype.init = function () {\n        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            this.clientSideRowModel = this.rowModel;\n        }\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));\n    };\n    ChangeDetectionService.prototype.onCellValueChanged = function (event) {\n        // Clipboard service manages its own change detection, so no need to do it here.\n        // The clipboard manages its own as otherwise this would happen once for every cell\n        // that got updated as part of a paste operation, so e.g. if 100 cells in a paste operation,\n        // this doChangeDetection would get called 100 times (once for each cell), instead clipboard\n        // service executes the logic we have here once (in essence batching up all cell changes\n        // into one change detection).\n        if (event.source === Constants.SOURCE_PASTE) {\n            return;\n        }\n        this.doChangeDetection(event.node, event.column);\n    };\n    ChangeDetectionService.prototype.doChangeDetection = function (rowNode, column) {\n        if (this.gridOptionsWrapper.isSuppressChangeDetection()) {\n            return;\n        }\n        // step 1 of change detection is to update the aggregated values\n        if (this.clientSideRowModel && !rowNode.isRowPinned()) {\n            var onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();\n            var changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());\n            changedPath.addParentNode(rowNode.parent, [column]);\n            this.clientSideRowModel.doAggregate(changedPath);\n        }\n        // step 2 of change detection is to refresh the cells\n        this.rowRenderer.refreshCells();\n    };\n    __decorate([\n        Autowired('rowModel')\n    ], ChangeDetectionService.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], ChangeDetectionService.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        PostConstruct\n    ], ChangeDetectionService.prototype, \"init\", null);\n    ChangeDetectionService = __decorate([\n        Bean('changeDetectionService')\n    ], ChangeDetectionService);\n    return ChangeDetectionService;\n}(BeanStub));\nexport { ChangeDetectionService };\n"]},"metadata":{},"sourceType":"module"}