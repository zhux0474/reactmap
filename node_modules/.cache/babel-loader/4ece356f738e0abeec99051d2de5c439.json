{"ast":null,"code":"var _jsxFileName = \"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/dropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Context } from \"../context.js\";\nimport { metadata } from './metadata.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Array of objects containing data\n  var attributes = [];\n\n  for (var i = 1; i <= Object.keys(metadata).length; i++) {\n    console.log(metadata[i]['attributename']); //need put this info somewhere (inside the state)\n\n    attributes.push({\n      label: metadata[i]['attributename'],\n      value: metadata[i]['geojson_url']\n    });\n  } // Using state to keep track of selection\n\n\n  var [attribute, setAttribute] = useState(\"Select an attribute\");\n  console.log(attribute); // Using this function to update the state \n  // whenever a new option is selected from the dropdown\n  // only if i could move it so smokermap could use it to update source link \n\n  var handleAttributeChange = e => {\n    setAttribute(e.target.value);\n    console.log(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Consumer, {\n    children: context => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Dropdown\",\n      children: [attribute, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: context.handleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \" Select an attribute\",\n          children: \" -- Select an attribute -- \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 7\n        }, this), attributes.map(attribute => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: attribute.value,\n          children: [\" \", attribute.label]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 38\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6kzKkGDaXqM1jQvpmj1VKbp8TkE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/src/components/dropdown.js"],"names":["React","useState","Context","metadata","App","attributes","i","Object","keys","length","console","log","push","label","value","attribute","setAttribute","handleAttributeChange","e","target","context","handleChange","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,OAAR,QAAsB,eAAtB;AACA,SAAQC,QAAR,QAAuB,eAAvB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,MAAIC,UAAU,GAAG,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAE,CAAZ,EAAeA,CAAC,IAAEC,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBM,MAAxC,EAA+CH,CAAC,EAAhD,EAAoD;AAClDI,IAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACG,CAAD,CAAR,CAAY,eAAZ,CAAZ,EADkD,CAElD;;AACAD,IAAAA,UAAU,CAACO,IAAX,CAAiB;AAAEC,MAAAA,KAAK,EAAEV,QAAQ,CAACG,CAAD,CAAR,CAAY,eAAZ,CAAT;AAAuCQ,MAAAA,KAAK,EAAEX,QAAQ,CAACG,CAAD,CAAR,CAAY,aAAZ;AAA9C,KAAjB;AACD,GAPY,CAUf;;;AACA,MAAI,CAACS,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,qBAAD,CAAxC;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYI,SAAZ,EAZe,CAcf;AACA;AACA;;AACA,MAAIE,qBAAqB,GAAIC,CAAD,IAAO;AACjCF,IAAAA,YAAY,CAACE,CAAC,CAACC,MAAF,CAASL,KAAV,CAAZ;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYO,CAAC,CAACC,MAAF,CAASL,KAArB;AACD,GAHD;;AAKE,sBACE,QAAC,OAAD,CAAS,QAAT;AAAA,cACIM,OAAD,iBACH;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,iBACCL,SADD,eAEA;AAAA;AAAA;AAAA;AAAA,cAFA,eAIA;AAAQ,QAAA,QAAQ,EAAEK,OAAO,CAACC,YAA1B;AAAA,gCACE;AAAQ,UAAA,KAAK,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAGGhB,UAAU,CAACiB,GAAX,CAAgBP,SAAD,iBAAe;AAAQ,UAAA,KAAK,EAAEA,SAAS,CAACD,KAAzB;AAAA,0BAAkCC,SAAS,CAACF,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA9B,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,cAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAtCQT,G;;KAAAA,G;AAwCT,eAAeA,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport {Context} from \"../context.js\"\nimport {metadata} from './metadata.js';\n\nfunction App() {\n  // Array of objects containing data\n  var attributes = []\n  for (var i =1; i<=Object.keys(metadata).length;i++) {\n    console.log(metadata[i]['attributename'])\n    //need put this info somewhere (inside the state)\n    attributes.push( { label: metadata[i]['attributename'], value: metadata[i]['geojson_url']}); \n  }\n  \n\n// Using state to keep track of selection\nvar [attribute, setAttribute] = useState(\"Select an attribute\")\nconsole.log(attribute)\n\n// Using this function to update the state \n// whenever a new option is selected from the dropdown\n// only if i could move it so smokermap could use it to update source link \nvar handleAttributeChange = (e) => {\n  setAttribute(e.target.value)\n  console.log(e.target.value)\n}\n\n  return (\n    <Context.Consumer>\n      {(context)=>(\n    <div className=\"Dropdown\">\n    {attribute}\n    <br />\n   \n    <select onChange={context.handleChange}> \n      <option value=\" Select an attribute\"> -- Select an attribute -- </option>\n      \n      {attributes.map((attribute) => <option value={attribute.value}> {attribute.label}</option>)}\n    </select>\n    </div>\n    )}\n    </Context.Consumer>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}