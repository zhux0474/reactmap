{"ast":null,"code":"var _jsxFileName = \"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js\";\nimport React from \"react\";\nimport { fromLonLat, get } from \"ol/proj\"; //import \"./SmokerMap.css\";\n\nimport Map from \"ol/Map\"; //import Feature from \"ol/Feature\";\n\nimport View from \"ol/View\"; //import { Point, Style, Circle, Fill, Feature } from \"ol\";\n\nimport TileLayer from \"ol/layer/Tile\";\nimport TileWMS from 'ol/source/TileWMS';\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport Legend from 'ol/control/Legend';\nimport { Fill, Stroke, Style } from 'ol/style'; //import cityboundary from \"./Minneapolis_Police_Precincts.geojson\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SmokerMap extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props);\n    this.mapRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    var basemap = new TileLayer({\n      source: new OSM()\n    });\n    var vectorstyle = new Style({\n      fill: new Fill({\n        color: '#eeeeee'\n      }),\n      stroke: new Stroke({\n        color: 'black',\n        width: 1\n      })\n    });\n    var totalsmoker = new VectorSource({\n      url: \"https://smartcommunityhealth.ahc.umn.edu/lung_cancer/wms?service=WMS&version=1.1.0&request=GetMap&layers=lung_cancer%3Atotal_smokers_v2&bbox=-97.239209%2C43.499383499%2C-89.4917389999999%2C49.3843580000001&width=768&height=583&srs=EPSG%3A4326&format=geojson\",\n      format: new GeoJSON()\n    });\n    var vectorlayer = new VectorLayer({\n      //source : new VectorSource({\n      //url: \"https://smartcommunityhealth.ahc.umn.edu/lung_cancer/wms?service=WMS&version=1.1.0&request=GetMap&layers=lung_cancer%3Atotal_smokers_v2&bbox=-97.239209%2C43.499383499%2C-89.4917389999999%2C49.3843580000001&width=768&height=583&srs=EPSG%3A4326&format=geojson\",\n      //format: new GeoJSON(),\n      source: totalsmoker,\n      style: vectorstyle\n      /*function (feature){\n        const color=feature.get('COLORS')|| '#eeeeee';\n        this.style.getFill().setColor(color);\n        return this.style;\n          */\n\n    });\n\n    var stylefunction = function (feature) {\n      var style;\n      var value = feature.get('brffs_smokers');\n      var color = value < 100 ? '#ffffff' : value < 200 ? '#ff3f3f' : '#3f0000';\n      this.style.getFill().setColor(color);\n      /*\n      if(feature.get('brffs_smokers')>'100'){\n        style= new Style({\n          fill: new Fill({\n            color: '#B4DFB4'\n          }),\n          stroke: new Stroke({\n            color:'black',\n            width:1\n          })\n        })\n      }\n      else \n        style= new Style({\n         fill: new Fill({\n            color: '#B4DFB4'\n          }),\n         stroke: new Stroke({\n           color:'yellow',\n            width:1\n         })\n      })\n      */\n\n      return style;\n    };\n\n    var lungdata = new TileLayer({\n      source: new TileWMS({\n        url: 'https://smartcommunityhealth.ahc.umn.edu/lung_cancer/wms',\n        serverType: 'geoserver',\n        params: {\n          'LAYERS': 'lung_cancer:total_smokers_v2',\n          'TILED': true\n        },\n        transition: 0\n      }),\n      style: vectorstyle\n    });\n\n    function getFeatureStyle(feature) {\n      var st = []; // Shadow style\n\n      st.push(new Style({\n        image: new Shadow({\n          radius: 15\n        })\n      }));\n      var st1 = []; // Font style\n\n      st.push(new ol.style.Style({\n        image: new ol.style.FontSymbol({\n          form: \"marker\",\n          glyph: 'fa-car',\n          radius: 15,\n          offsetY: -15,\n          fontSize: .7,\n          color: '#fff',\n          fill: new ol.style.Fill({\n            color: 'blue'\n          }),\n          stroke: new ol.style.Stroke({\n            color: '#fff',\n            width: 2\n          })\n        }),\n        stroke: new ol.style.Stroke({\n          width: 5,\n          color: '#f00'\n        }),\n        fill: new ol.style.Fill({\n          color: [255, 0, 0, 0.6]\n        })\n      }));\n      return st;\n    }\n\n    var legend = new Legend({\n      title: 'legend',\n      margin: 5,\n      style: getFeatureStyle\n    });\n    var legendCtrl = new ol.control.Legend({\n      legend: legend,\n      collapsed: false\n    });\n    this.map = new Map({\n      layers: [basemap, vectorlayer],\n      target: \"mapContainer\",\n      view: new View({\n        center: fromLonLat([-94.6859, 46.7296]),\n        zoom: 6\n      })\n    });\n    map.addControl(legendCtrl);\n  }\n\n  render() {\n    console.log(\"-> render App\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mapContainer\",\n      ref: this.mapRef,\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/*\nconst SmokerMap = ({ counties}) =>{\n    /*\n    const mapStyle={\n        fillColor: \"white\",\n        weight: 1,\n        color: \"black\",\n        fillOpacity: 1,\n    };\n    const onEachCountry = (country, layer) => {\n        layer.options.fillColor = country.properties.color;\n        const name = country.properties.ADMIN;\n        const confirmedText = country.properties.confirmedText;\n        layer.bindPopup(`${name} ${confirmedText}`);\n      };*/\n\n/*return (\n  <Map style={{ height: \"90vh\" }} zoom={2} center={[-94.6859,46.7296]}>\n    <GeoJSON\n      style={mapStyle}\n      data={countries}\n      onEachFeature={onEachCountry}\n    />\n  </Map>\n);\nreturn (\n  <div className=\"map_div\">\n  <Map className=\"smoker_map\" view={{center:fromLonLat([-94.6859,46.7296]),zoom:6}}>\n    <Layers>\n      <layer.Tile></layer.Tile>\n      </Layers>\n       </Map>\n  \n  </div>\n);\n};\nexport default SmokerMap;\n*/","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js"],"names":["React","fromLonLat","get","Map","View","TileLayer","TileWMS","VectorLayer","VectorSource","GeoJSON","OSM","Legend","Fill","Stroke","Style","SmokerMap","Component","constructor","props","console","log","mapRef","createRef","componentDidMount","basemap","source","vectorstyle","fill","color","stroke","width","totalsmoker","url","format","vectorlayer","style","stylefunction","feature","value","getFill","setColor","lungdata","serverType","params","transition","getFeatureStyle","st","push","image","Shadow","radius","st1","ol","FontSymbol","form","glyph","offsetY","fontSize","legend","title","margin","legendCtrl","control","collapsed","map","layers","target","view","center","zoom","addControl","render","height"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { fromLonLat, get } from \"ol/proj\";\n//import \"./SmokerMap.css\";\nimport Map from \"ol/Map\";\n//import Feature from \"ol/Feature\";\nimport View from \"ol/View\";\n//import { Point, Style, Circle, Fill, Feature } from \"ol\";\nimport TileLayer from \"ol/layer/Tile\";\nimport TileWMS from 'ol/source/TileWMS';\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport Legend from 'ol/control/Legend';\n\nimport {Fill, Stroke, Style} from 'ol/style';\n//import cityboundary from \"./Minneapolis_Police_Precincts.geojson\";\n\n\nexport default class SmokerMap extends React.Component{\n  constructor(props){\n    super(props);\n    console.log(this.props);\n    this.mapRef=React.createRef();\n  }\n  componentDidMount(){\n\n    var basemap =new TileLayer({\n      source: new OSM()\n    })\n\n    var vectorstyle = new Style({\n      fill: new Fill({\n        color: '#eeeeee'\n      }),\n      stroke: new Stroke({\n        color:'black',\n        width:1\n      })\n    })\n\n    var totalsmoker = new VectorSource({\n      url:\"https://smartcommunityhealth.ahc.umn.edu/lung_cancer/wms?service=WMS&version=1.1.0&request=GetMap&layers=lung_cancer%3Atotal_smokers_v2&bbox=-97.239209%2C43.499383499%2C-89.4917389999999%2C49.3843580000001&width=768&height=583&srs=EPSG%3A4326&format=geojson\",\n      format: new GeoJSON()\n    })\n\n    var vectorlayer = new VectorLayer({\n       //source : new VectorSource({\n        //url: \"https://smartcommunityhealth.ahc.umn.edu/lung_cancer/wms?service=WMS&version=1.1.0&request=GetMap&layers=lung_cancer%3Atotal_smokers_v2&bbox=-97.239209%2C43.499383499%2C-89.4917389999999%2C49.3843580000001&width=768&height=583&srs=EPSG%3A4326&format=geojson\",\n        //format: new GeoJSON(),\n        source: totalsmoker,\n        style: vectorstyle\n        \n        /*function (feature){\n          const color=feature.get('COLORS')|| '#eeeeee';\n          this.style.getFill().setColor(color);\n          return this.style;\n            */\n        })\n    \n      var stylefunction = function(feature){\n      var style;\n      var value=feature.get('brffs_smokers');\n      var color= value <100 ? '#ffffff': value <200 ? '#ff3f3f' : '#3f0000';\n      this.style.getFill().setColor(color);\n\n      /*\n      if(feature.get('brffs_smokers')>'100'){\n        style= new Style({\n          fill: new Fill({\n            color: '#B4DFB4'\n          }),\n          stroke: new Stroke({\n            color:'black',\n            width:1\n          })\n        })\n      }\n      else \n        style= new Style({\n         fill: new Fill({\n            color: '#B4DFB4'\n          }),\n         stroke: new Stroke({\n           color:'yellow',\n            width:1\n         })\n      })\n      */\n      return style;\n\n    };\n\n    \n\n    var lungdata = new TileLayer({\n      source : new TileWMS ({\n        url:'https://smartcommunityhealth.ahc.umn.edu/lung_cancer/wms',\n        serverType:'geoserver',\n        params: {'LAYERS': 'lung_cancer:total_smokers_v2', 'TILED': true},\n        \n        transition: 0\n\n      }),\n      style: vectorstyle\n\n\n\n\n    })\n\n    function getFeatureStyle (feature) {\n      var st= [];\n      // Shadow style\n      st.push (new Style ({\n        image: new Shadow ({\n          radius: 15\n        })\n      }));\n      var st1= [];\n      // Font style\n      st.push ( new ol.style.Style ({\n        image: new ol.style.FontSymbol({\n          form: \"marker\", \n          glyph: 'fa-car', \n          radius: 15, \n          offsetY: -15,\n          fontSize: .7,\n          color: '#fff',\n          fill: new ol.style.Fill ({\n            color: 'blue'\n          }),\n          stroke: new ol.style.Stroke ({\n            color: '#fff',\n            width: 2\n          })\n        }),\n        stroke: new ol.style.Stroke ({\n          width: 5,\n          color: '#f00'\n        }),\n        fill: new ol.style.Fill ({\n          color: [255, 0, 0, 0.6]\n        })\n      }));\n      return st;\n    }\n    var legend = new Legend({\n      title:'legend',\n      margin: 5,\n      style: getFeatureStyle \n\n\n    });\n    var legendCtrl = new ol.control.Legend({\n      legend: legend,\n      collapsed: false\n    });\n    \n  \n\n    this.map=new Map({\n      layers: [basemap,vectorlayer],\n      target: \"mapContainer\",\n      view :new View({\n        center:fromLonLat([-94.6859,46.7296]),\n        zoom: 6\n      })\n\n    });\n    \n    \n    map.addControl(legendCtrl);\n   \n  }\n  render() {\n    console.log(\"-> render App\");\n    return (\n      <div\n        id=\"mapContainer\"\n        ref={this.mapRef}\n        style={{ width: \"100%\", height: \"500px\" }}\n      >\n       \n      </div>\n    );\n  }\n\n\n}\n/*\nconst SmokerMap = ({ counties}) =>{\n    /*\n    const mapStyle={\n        fillColor: \"white\",\n        weight: 1,\n        color: \"black\",\n        fillOpacity: 1,\n    };\n    const onEachCountry = (country, layer) => {\n        layer.options.fillColor = country.properties.color;\n        const name = country.properties.ADMIN;\n        const confirmedText = country.properties.confirmedText;\n        layer.bindPopup(`${name} ${confirmedText}`);\n      };*/\n\n      /*return (\n        <Map style={{ height: \"90vh\" }} zoom={2} center={[-94.6859,46.7296]}>\n          <GeoJSON\n            style={mapStyle}\n            data={countries}\n            onEachFeature={onEachCountry}\n          />\n        </Map>\n      );\n      return (\n        <div className=\"map_div\">\n        <Map className=\"smoker_map\" view={{center:fromLonLat([-94.6859,46.7296]),zoom:6}}>\n          <Layers>\n            <layer.Tile></layer.Tile>\n            </Layers>\n    \n        </Map>\n        \n        </div>\n      );\n};\nexport default SmokerMap;\n*/"]},"metadata":{},"sourceType":"module"}