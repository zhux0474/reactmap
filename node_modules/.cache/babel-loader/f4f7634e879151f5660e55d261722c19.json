{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _render = require(\"ol/render\");\n\nvar _Observable = require(\"ol/Observable\");\n/**\n * This class provides some static methods which might be helpful when working\n * with digitize functions to animate features.\n *\n * @class AnimateUtil\n */\n\n\nvar AnimateUtil = /*#__PURE__*/function () {\n  function AnimateUtil() {\n    (0, _classCallCheck2[\"default\"])(this, AnimateUtil);\n  }\n\n  (0, _createClass2[\"default\"])(AnimateUtil, null, [{\n    key: \"moveFeature\",\n    value:\n    /**\n     * Moves / translates an `OlFeature` to the given `pixel` delta in\n     * in the end with given `duration` in ms, using the given style.\n     *\n     * @param {ol.Map} map An OlMap.\n     * @param {ol.layer.Vector|boolean} layer A vector layer to receive an postrender event or false.\n     * @param {ol.Feature} featureToMove The feature to move.\n     * @param {number} duration The duration in ms for the moving to complete.\n     * @param {Array<number>} pixel Delta of pixels to move the feature.\n     * @param {ol.style.Style} style The style to use when moving the feature.\n     *\n     * @return {string} A listener key from a postrender event.\n     */\n    function moveFeature(map, layer, featureToMove, duration, pixel, style) {\n      return new Promise(function (resolve) {\n        var listenerKey;\n        var geometry = featureToMove.getGeometry();\n        var start = new Date().getTime();\n        var resolution = map.getView().getResolution();\n        var totalDisplacement = pixel * resolution;\n        var expectedFrames = duration / 1000 * 60;\n        var actualFrames = 0;\n        var deltaX = totalDisplacement / expectedFrames;\n        var deltaY = totalDisplacement / expectedFrames;\n        /**\n         * Moves the feature `pixel` right and `pixel` up.\n         * @ignore\n         */\n\n        var animate = function animate(event) {\n          var vectorContext = (0, _render.getVectorContext)(event);\n          var frameState = event.frameState;\n          var elapsed = frameState.time - start;\n          geometry.translate(deltaX, deltaY);\n\n          if (style) {\n            vectorContext.setStyle(style);\n          }\n\n          vectorContext.drawGeometry(geometry);\n\n          if (elapsed > duration || actualFrames >= expectedFrames) {\n            (0, _Observable.unByKey)(listenerKey);\n            resolve(featureToMove);\n          } // tell OpenLayers to continue postrender animation\n\n\n          frameState.animate = true;\n          actualFrames++;\n          map.render();\n        };\n\n        if (layer) {\n          listenerKey = layer.on('postrender', animate);\n        }\n      });\n    }\n  }]);\n  return AnimateUtil;\n}();\n\nvar _default = AnimateUtil;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@terrestris/ol-util/dist/AnimateUtil/AnimateUtil.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_classCallCheck2","_createClass2","_render","_Observable","AnimateUtil","key","moveFeature","map","layer","featureToMove","duration","pixel","style","Promise","resolve","listenerKey","geometry","getGeometry","start","Date","getTime","resolution","getView","getResolution","totalDisplacement","expectedFrames","actualFrames","deltaX","deltaY","animate","event","vectorContext","getVectorContext","frameState","elapsed","time","translate","setStyle","drawGeometry","unByKey","render","on","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _render = require(\"ol/render\");\n\nvar _Observable = require(\"ol/Observable\");\n\n/**\n * This class provides some static methods which might be helpful when working\n * with digitize functions to animate features.\n *\n * @class AnimateUtil\n */\nvar AnimateUtil = /*#__PURE__*/function () {\n  function AnimateUtil() {\n    (0, _classCallCheck2[\"default\"])(this, AnimateUtil);\n  }\n\n  (0, _createClass2[\"default\"])(AnimateUtil, null, [{\n    key: \"moveFeature\",\n    value:\n    /**\n     * Moves / translates an `OlFeature` to the given `pixel` delta in\n     * in the end with given `duration` in ms, using the given style.\n     *\n     * @param {ol.Map} map An OlMap.\n     * @param {ol.layer.Vector|boolean} layer A vector layer to receive an postrender event or false.\n     * @param {ol.Feature} featureToMove The feature to move.\n     * @param {number} duration The duration in ms for the moving to complete.\n     * @param {Array<number>} pixel Delta of pixels to move the feature.\n     * @param {ol.style.Style} style The style to use when moving the feature.\n     *\n     * @return {string} A listener key from a postrender event.\n     */\n    function moveFeature(map, layer, featureToMove, duration, pixel, style) {\n      return new Promise(function (resolve) {\n        var listenerKey;\n        var geometry = featureToMove.getGeometry();\n        var start = new Date().getTime();\n        var resolution = map.getView().getResolution();\n        var totalDisplacement = pixel * resolution;\n        var expectedFrames = duration / 1000 * 60;\n        var actualFrames = 0;\n        var deltaX = totalDisplacement / expectedFrames;\n        var deltaY = totalDisplacement / expectedFrames;\n        /**\n         * Moves the feature `pixel` right and `pixel` up.\n         * @ignore\n         */\n\n        var animate = function animate(event) {\n          var vectorContext = (0, _render.getVectorContext)(event);\n          var frameState = event.frameState;\n          var elapsed = frameState.time - start;\n          geometry.translate(deltaX, deltaY);\n\n          if (style) {\n            vectorContext.setStyle(style);\n          }\n\n          vectorContext.drawGeometry(geometry);\n\n          if (elapsed > duration || actualFrames >= expectedFrames) {\n            (0, _Observable.unByKey)(listenerKey);\n            resolve(featureToMove);\n          } // tell OpenLayers to continue postrender animation\n\n\n          frameState.animate = true;\n          actualFrames++;\n          map.render();\n        };\n\n        if (layer) {\n          listenerKey = layer.on('postrender', animate);\n        }\n      });\n    }\n  }]);\n  return AnimateUtil;\n}();\n\nvar _default = AnimateUtil;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}