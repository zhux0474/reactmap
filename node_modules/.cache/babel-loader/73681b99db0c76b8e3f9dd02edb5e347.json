{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Qualifier } from \"./context/context\";\nimport { Events } from \"./events\";\nimport { Autowired } from \"./context/context\";\nimport { PostConstruct } from \"./context/context\";\nimport { Constants } from \"./constants/constants\";\nimport { ChangedPath } from \"./utils/changedPath\";\nimport { iterateObject } from \"./utils/object\";\nimport { exists } from \"./utils/generic\";\n\nvar SelectionService =\n/** @class */\nfunction (_super) {\n  __extends(SelectionService, _super);\n\n  function SelectionService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SelectionService.prototype.setBeans = function (loggerFactory) {\n    this.logger = loggerFactory.create('selectionService');\n    this.reset();\n\n    if (this.gridOptionsWrapper.isRowModelDefault()) {\n      this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));\n    }\n  };\n\n  SelectionService.prototype.init = function () {\n    this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n    this.addManagedListener(this.eventService, Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));\n  };\n\n  SelectionService.prototype.setLastSelectedNode = function (rowNode) {\n    this.lastSelectedNode = rowNode;\n  };\n\n  SelectionService.prototype.getLastSelectedNode = function () {\n    return this.lastSelectedNode;\n  };\n\n  SelectionService.prototype.getSelectedNodes = function () {\n    var selectedNodes = [];\n    iterateObject(this.selectedNodes, function (key, rowNode) {\n      if (rowNode) {\n        selectedNodes.push(rowNode);\n      }\n    });\n    return selectedNodes;\n  };\n\n  SelectionService.prototype.getSelectedRows = function () {\n    var selectedRows = [];\n    iterateObject(this.selectedNodes, function (key, rowNode) {\n      if (rowNode && rowNode.data) {\n        selectedRows.push(rowNode.data);\n      }\n    });\n    return selectedRows;\n  };\n\n  SelectionService.prototype.removeGroupsFromSelection = function () {\n    var _this = this;\n\n    iterateObject(this.selectedNodes, function (key, rowNode) {\n      if (rowNode && rowNode.group) {\n        _this.selectedNodes[rowNode.id] = undefined;\n      }\n    });\n  }; // should only be called if groupSelectsChildren=true\n\n\n  SelectionService.prototype.updateGroupsFromChildrenSelections = function (changedPath) {\n    // we only do this when group selection state depends on selected children\n    if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {\n      return;\n    } // also only do it if CSRM (code should never allow this anyway)\n\n\n    if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      return;\n    }\n\n    var clientSideRowModel = this.rowModel;\n    var rootNode = clientSideRowModel.getRootNode();\n\n    if (!changedPath) {\n      changedPath = new ChangedPath(true, rootNode);\n      changedPath.setInactive();\n    }\n\n    changedPath.forEachChangedNodeDepthFirst(function (rowNode) {\n      if (rowNode !== rootNode) {\n        rowNode.calculateSelectedFromChildren();\n      }\n    }); // clientSideRowModel.getTopLevelNodes()!.forEach((rowNode: RowNode) => {\n    //     rowNode.depthFirstSearch((node) => {\n    //         if (node.group) {\n    //         }\n    //     });\n    // });\n  };\n\n  SelectionService.prototype.getNodeForIdIfSelected = function (id) {\n    return this.selectedNodes[id];\n  };\n\n  SelectionService.prototype.clearOtherNodes = function (rowNodeToKeepSelected) {\n    var _this = this;\n\n    var groupsToRefresh = {};\n    var updatedCount = 0;\n    iterateObject(this.selectedNodes, function (key, otherRowNode) {\n      if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {\n        var rowNode = _this.selectedNodes[otherRowNode.id];\n        updatedCount += rowNode.setSelectedParams({\n          newValue: false,\n          clearSelection: false,\n          suppressFinishActions: true\n        });\n\n        if (_this.groupSelectsChildren && otherRowNode.parent) {\n          groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;\n        }\n      }\n    });\n    iterateObject(groupsToRefresh, function (key, group) {\n      group.calculateSelectedFromChildren();\n    });\n    return updatedCount;\n  };\n\n  SelectionService.prototype.onRowSelected = function (event) {\n    var rowNode = event.node; // we do not store the group rows when the groups select children\n\n    if (this.groupSelectsChildren && rowNode.group) {\n      return;\n    }\n\n    if (rowNode.isSelected()) {\n      this.selectedNodes[rowNode.id] = rowNode;\n    } else {\n      this.selectedNodes[rowNode.id] = undefined;\n    }\n  };\n\n  SelectionService.prototype.syncInRowNode = function (rowNode, oldNode) {\n    this.syncInOldRowNode(rowNode, oldNode);\n    this.syncInNewRowNode(rowNode);\n  }; // if the id has changed for the node, then this means the rowNode\n  // is getting used for a different data item, which breaks\n  // our selectedNodes, as the node now is mapped by the old id\n  // which is inconsistent. so to keep the old node as selected,\n  // we swap in the clone (with the old id and old data). this means\n  // the oldNode is effectively a daemon we keep a reference to,\n  // so if client calls api.getSelectedNodes(), it gets the daemon\n  // in the result. when the client un-selects, the reference to the\n  // daemon is removed. the daemon, because it's an oldNode, is not\n  // used by the grid for rendering, it's a copy of what the node used\n  // to be like before the id was changed.\n\n\n  SelectionService.prototype.syncInOldRowNode = function (rowNode, oldNode) {\n    var oldNodeHasDifferentId = exists(oldNode) && rowNode.id !== oldNode.id;\n\n    if (oldNodeHasDifferentId && oldNode) {\n      var id = oldNode.id;\n      var oldNodeSelected = this.selectedNodes[id] == rowNode;\n\n      if (oldNodeSelected) {\n        this.selectedNodes[oldNode.id] = oldNode;\n      }\n    }\n  };\n\n  SelectionService.prototype.syncInNewRowNode = function (rowNode) {\n    if (exists(this.selectedNodes[rowNode.id])) {\n      rowNode.setSelectedInitialValue(true);\n      this.selectedNodes[rowNode.id] = rowNode;\n    } else {\n      rowNode.setSelectedInitialValue(false);\n    }\n  };\n\n  SelectionService.prototype.reset = function () {\n    this.logger.log('reset');\n    this.selectedNodes = {};\n    this.lastSelectedNode = null;\n  }; // returns a list of all nodes at 'best cost' - a feature to be used\n  // with groups / trees. if a group has all it's children selected,\n  // then the group appears in the result, but not the children.\n  // Designed for use with 'children' as the group selection type,\n  // where groups don't actually appear in the selection normally.\n\n\n  SelectionService.prototype.getBestCostNodeSelection = function () {\n    if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      console.warn('getBestCostNodeSelection is only available when using normal row model');\n      return;\n    }\n\n    var clientSideRowModel = this.rowModel;\n    var topLevelNodes = clientSideRowModel.getTopLevelNodes();\n\n    if (topLevelNodes === null) {\n      console.warn('selectAll not available doing rowModel=virtual');\n      return;\n    }\n\n    var result = []; // recursive function, to find the selected nodes\n\n    function traverse(nodes) {\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        var node = nodes[i];\n\n        if (node.isSelected()) {\n          result.push(node);\n        } else {\n          // if not selected, then if it's a group, and the group\n          // has children, continue to search for selections\n          var maybeGroup = node;\n\n          if (maybeGroup.group && maybeGroup.children) {\n            traverse(maybeGroup.children);\n          }\n        }\n      }\n    }\n\n    traverse(topLevelNodes);\n    return result;\n  };\n\n  SelectionService.prototype.setRowModel = function (rowModel) {\n    this.rowModel = rowModel;\n  };\n\n  SelectionService.prototype.isEmpty = function () {\n    var count = 0;\n    iterateObject(this.selectedNodes, function (nodeId, rowNode) {\n      if (rowNode) {\n        count++;\n      }\n    });\n    return count === 0;\n  };\n\n  SelectionService.prototype.deselectAllRowNodes = function (justFiltered) {\n    if (justFiltered === void 0) {\n      justFiltered = false;\n    }\n\n    var callback = function (rowNode) {\n      return rowNode.selectThisNode(false);\n    };\n\n    var rowModelClientSide = this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n\n    if (justFiltered) {\n      if (!rowModelClientSide) {\n        console.error('AG Grid: selecting just filtered only works with In Memory Row Model');\n        return;\n      }\n\n      var clientSideRowModel = this.rowModel;\n      clientSideRowModel.forEachNodeAfterFilter(callback);\n    } else {\n      iterateObject(this.selectedNodes, function (id, rowNode) {\n        // remember the reference can be to null, as we never 'delete' from the map\n        if (rowNode) {\n          callback(rowNode);\n        }\n      }); // this clears down the map (whereas above only sets the items in map to 'undefined')\n\n      this.reset();\n    } // the above does not clean up the parent rows if they are selected\n\n\n    if (rowModelClientSide && this.groupSelectsChildren) {\n      this.updateGroupsFromChildrenSelections();\n    }\n\n    var event = {\n      type: Events.EVENT_SELECTION_CHANGED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(event);\n  };\n\n  SelectionService.prototype.selectAllRowNodes = function (justFiltered) {\n    if (justFiltered === void 0) {\n      justFiltered = false;\n    }\n\n    if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      throw new Error(\"selectAll only available with normal row model, ie not \" + this.rowModel.getType());\n    }\n\n    var clientSideRowModel = this.rowModel;\n\n    var callback = function (rowNode) {\n      return rowNode.selectThisNode(true);\n    };\n\n    if (justFiltered) {\n      clientSideRowModel.forEachNodeAfterFilter(callback);\n    } else {\n      clientSideRowModel.forEachNode(callback);\n    } // the above does not clean up the parent rows if they are selected\n\n\n    if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) {\n      this.updateGroupsFromChildrenSelections();\n    }\n\n    var event = {\n      type: Events.EVENT_SELECTION_CHANGED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(event);\n  };\n  /**\n   * @method\n   * @deprecated\n   */\n\n\n  SelectionService.prototype.selectNode = function (rowNode, tryMulti) {\n    if (rowNode) {\n      rowNode.setSelectedParams({\n        newValue: true,\n        clearSelection: !tryMulti\n      });\n    }\n  };\n  /**\n   * @method\n   * @deprecated\n   */\n\n\n  SelectionService.prototype.deselectIndex = function (rowIndex) {\n    var node = this.rowModel.getRow(rowIndex);\n    this.deselectNode(node);\n  };\n  /**\n   * @method\n   * @deprecated\n   */\n\n\n  SelectionService.prototype.deselectNode = function (rowNode) {\n    if (rowNode) {\n      rowNode.setSelectedParams({\n        newValue: false,\n        clearSelection: false\n      });\n    }\n  };\n  /**\n   * @method\n   * @deprecated\n   */\n\n\n  SelectionService.prototype.selectIndex = function (index, tryMulti) {\n    var node = this.rowModel.getRow(index);\n    this.selectNode(node, tryMulti);\n  };\n\n  __decorate([Autowired('rowModel')], SelectionService.prototype, \"rowModel\", void 0);\n\n  __decorate([Autowired('columnApi')], SelectionService.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('gridApi')], SelectionService.prototype, \"gridApi\", void 0);\n\n  __decorate([__param(0, Qualifier('loggerFactory'))], SelectionService.prototype, \"setBeans\", null);\n\n  __decorate([PostConstruct], SelectionService.prototype, \"init\", null);\n\n  SelectionService = __decorate([Bean('selectionService')], SelectionService);\n  return SelectionService;\n}(BeanStub);\n\nexport { SelectionService };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/selectionService.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","Bean","BeanStub","Qualifier","Events","Autowired","PostConstruct","Constants","ChangedPath","iterateObject","exists","SelectionService","_super","apply","setBeans","loggerFactory","logger","reset","gridOptionsWrapper","isRowModelDefault","addManagedListener","eventService","EVENT_ROW_DATA_CHANGED","bind","init","groupSelectsChildren","isGroupSelectsChildren","EVENT_ROW_SELECTED","onRowSelected","setLastSelectedNode","rowNode","lastSelectedNode","getLastSelectedNode","getSelectedNodes","selectedNodes","push","getSelectedRows","selectedRows","data","removeGroupsFromSelection","_this","group","id","undefined","updateGroupsFromChildrenSelections","changedPath","rowModel","getType","ROW_MODEL_TYPE_CLIENT_SIDE","clientSideRowModel","rootNode","getRootNode","setInactive","forEachChangedNodeDepthFirst","calculateSelectedFromChildren","getNodeForIdIfSelected","clearOtherNodes","rowNodeToKeepSelected","groupsToRefresh","updatedCount","otherRowNode","setSelectedParams","newValue","clearSelection","suppressFinishActions","parent","event","node","isSelected","syncInRowNode","oldNode","syncInOldRowNode","syncInNewRowNode","oldNodeHasDifferentId","oldNodeSelected","setSelectedInitialValue","log","getBestCostNodeSelection","console","warn","topLevelNodes","getTopLevelNodes","result","traverse","nodes","l","maybeGroup","children","setRowModel","isEmpty","count","nodeId","deselectAllRowNodes","justFiltered","callback","selectThisNode","rowModelClientSide","error","forEachNodeAfterFilter","type","EVENT_SELECTION_CHANGED","api","gridApi","columnApi","dispatchEvent","selectAllRowNodes","Error","forEachNode","selectNode","tryMulti","deselectIndex","rowIndex","getRow","deselectNode","selectIndex","index"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Qualifier } from \"./context/context\";\nimport { Events } from \"./events\";\nimport { Autowired } from \"./context/context\";\nimport { PostConstruct } from \"./context/context\";\nimport { Constants } from \"./constants/constants\";\nimport { ChangedPath } from \"./utils/changedPath\";\nimport { iterateObject } from \"./utils/object\";\nimport { exists } from \"./utils/generic\";\nvar SelectionService = /** @class */ (function (_super) {\n    __extends(SelectionService, _super);\n    function SelectionService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SelectionService.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('selectionService');\n        this.reset();\n        if (this.gridOptionsWrapper.isRowModelDefault()) {\n            this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));\n        }\n    };\n    SelectionService.prototype.init = function () {\n        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));\n    };\n    SelectionService.prototype.setLastSelectedNode = function (rowNode) {\n        this.lastSelectedNode = rowNode;\n    };\n    SelectionService.prototype.getLastSelectedNode = function () {\n        return this.lastSelectedNode;\n    };\n    SelectionService.prototype.getSelectedNodes = function () {\n        var selectedNodes = [];\n        iterateObject(this.selectedNodes, function (key, rowNode) {\n            if (rowNode) {\n                selectedNodes.push(rowNode);\n            }\n        });\n        return selectedNodes;\n    };\n    SelectionService.prototype.getSelectedRows = function () {\n        var selectedRows = [];\n        iterateObject(this.selectedNodes, function (key, rowNode) {\n            if (rowNode && rowNode.data) {\n                selectedRows.push(rowNode.data);\n            }\n        });\n        return selectedRows;\n    };\n    SelectionService.prototype.removeGroupsFromSelection = function () {\n        var _this = this;\n        iterateObject(this.selectedNodes, function (key, rowNode) {\n            if (rowNode && rowNode.group) {\n                _this.selectedNodes[rowNode.id] = undefined;\n            }\n        });\n    };\n    // should only be called if groupSelectsChildren=true\n    SelectionService.prototype.updateGroupsFromChildrenSelections = function (changedPath) {\n        // we only do this when group selection state depends on selected children\n        if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {\n            return;\n        }\n        // also only do it if CSRM (code should never allow this anyway)\n        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            return;\n        }\n        var clientSideRowModel = this.rowModel;\n        var rootNode = clientSideRowModel.getRootNode();\n        if (!changedPath) {\n            changedPath = new ChangedPath(true, rootNode);\n            changedPath.setInactive();\n        }\n        changedPath.forEachChangedNodeDepthFirst(function (rowNode) {\n            if (rowNode !== rootNode) {\n                rowNode.calculateSelectedFromChildren();\n            }\n        });\n        // clientSideRowModel.getTopLevelNodes()!.forEach((rowNode: RowNode) => {\n        //     rowNode.depthFirstSearch((node) => {\n        //         if (node.group) {\n        //         }\n        //     });\n        // });\n    };\n    SelectionService.prototype.getNodeForIdIfSelected = function (id) {\n        return this.selectedNodes[id];\n    };\n    SelectionService.prototype.clearOtherNodes = function (rowNodeToKeepSelected) {\n        var _this = this;\n        var groupsToRefresh = {};\n        var updatedCount = 0;\n        iterateObject(this.selectedNodes, function (key, otherRowNode) {\n            if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {\n                var rowNode = _this.selectedNodes[otherRowNode.id];\n                updatedCount += rowNode.setSelectedParams({\n                    newValue: false,\n                    clearSelection: false,\n                    suppressFinishActions: true\n                });\n                if (_this.groupSelectsChildren && otherRowNode.parent) {\n                    groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;\n                }\n            }\n        });\n        iterateObject(groupsToRefresh, function (key, group) {\n            group.calculateSelectedFromChildren();\n        });\n        return updatedCount;\n    };\n    SelectionService.prototype.onRowSelected = function (event) {\n        var rowNode = event.node;\n        // we do not store the group rows when the groups select children\n        if (this.groupSelectsChildren && rowNode.group) {\n            return;\n        }\n        if (rowNode.isSelected()) {\n            this.selectedNodes[rowNode.id] = rowNode;\n        }\n        else {\n            this.selectedNodes[rowNode.id] = undefined;\n        }\n    };\n    SelectionService.prototype.syncInRowNode = function (rowNode, oldNode) {\n        this.syncInOldRowNode(rowNode, oldNode);\n        this.syncInNewRowNode(rowNode);\n    };\n    // if the id has changed for the node, then this means the rowNode\n    // is getting used for a different data item, which breaks\n    // our selectedNodes, as the node now is mapped by the old id\n    // which is inconsistent. so to keep the old node as selected,\n    // we swap in the clone (with the old id and old data). this means\n    // the oldNode is effectively a daemon we keep a reference to,\n    // so if client calls api.getSelectedNodes(), it gets the daemon\n    // in the result. when the client un-selects, the reference to the\n    // daemon is removed. the daemon, because it's an oldNode, is not\n    // used by the grid for rendering, it's a copy of what the node used\n    // to be like before the id was changed.\n    SelectionService.prototype.syncInOldRowNode = function (rowNode, oldNode) {\n        var oldNodeHasDifferentId = exists(oldNode) && (rowNode.id !== oldNode.id);\n        if (oldNodeHasDifferentId && oldNode) {\n            var id = oldNode.id;\n            var oldNodeSelected = this.selectedNodes[id] == rowNode;\n            if (oldNodeSelected) {\n                this.selectedNodes[oldNode.id] = oldNode;\n            }\n        }\n    };\n    SelectionService.prototype.syncInNewRowNode = function (rowNode) {\n        if (exists(this.selectedNodes[rowNode.id])) {\n            rowNode.setSelectedInitialValue(true);\n            this.selectedNodes[rowNode.id] = rowNode;\n        }\n        else {\n            rowNode.setSelectedInitialValue(false);\n        }\n    };\n    SelectionService.prototype.reset = function () {\n        this.logger.log('reset');\n        this.selectedNodes = {};\n        this.lastSelectedNode = null;\n    };\n    // returns a list of all nodes at 'best cost' - a feature to be used\n    // with groups / trees. if a group has all it's children selected,\n    // then the group appears in the result, but not the children.\n    // Designed for use with 'children' as the group selection type,\n    // where groups don't actually appear in the selection normally.\n    SelectionService.prototype.getBestCostNodeSelection = function () {\n        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            console.warn('getBestCostNodeSelection is only available when using normal row model');\n            return;\n        }\n        var clientSideRowModel = this.rowModel;\n        var topLevelNodes = clientSideRowModel.getTopLevelNodes();\n        if (topLevelNodes === null) {\n            console.warn('selectAll not available doing rowModel=virtual');\n            return;\n        }\n        var result = [];\n        // recursive function, to find the selected nodes\n        function traverse(nodes) {\n            for (var i = 0, l = nodes.length; i < l; i++) {\n                var node = nodes[i];\n                if (node.isSelected()) {\n                    result.push(node);\n                }\n                else {\n                    // if not selected, then if it's a group, and the group\n                    // has children, continue to search for selections\n                    var maybeGroup = node;\n                    if (maybeGroup.group && maybeGroup.children) {\n                        traverse(maybeGroup.children);\n                    }\n                }\n            }\n        }\n        traverse(topLevelNodes);\n        return result;\n    };\n    SelectionService.prototype.setRowModel = function (rowModel) {\n        this.rowModel = rowModel;\n    };\n    SelectionService.prototype.isEmpty = function () {\n        var count = 0;\n        iterateObject(this.selectedNodes, function (nodeId, rowNode) {\n            if (rowNode) {\n                count++;\n            }\n        });\n        return count === 0;\n    };\n    SelectionService.prototype.deselectAllRowNodes = function (justFiltered) {\n        if (justFiltered === void 0) { justFiltered = false; }\n        var callback = function (rowNode) { return rowNode.selectThisNode(false); };\n        var rowModelClientSide = this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n        if (justFiltered) {\n            if (!rowModelClientSide) {\n                console.error('AG Grid: selecting just filtered only works with In Memory Row Model');\n                return;\n            }\n            var clientSideRowModel = this.rowModel;\n            clientSideRowModel.forEachNodeAfterFilter(callback);\n        }\n        else {\n            iterateObject(this.selectedNodes, function (id, rowNode) {\n                // remember the reference can be to null, as we never 'delete' from the map\n                if (rowNode) {\n                    callback(rowNode);\n                }\n            });\n            // this clears down the map (whereas above only sets the items in map to 'undefined')\n            this.reset();\n        }\n        // the above does not clean up the parent rows if they are selected\n        if (rowModelClientSide && this.groupSelectsChildren) {\n            this.updateGroupsFromChildrenSelections();\n        }\n        var event = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    SelectionService.prototype.selectAllRowNodes = function (justFiltered) {\n        if (justFiltered === void 0) { justFiltered = false; }\n        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            throw new Error(\"selectAll only available with normal row model, ie not \" + this.rowModel.getType());\n        }\n        var clientSideRowModel = this.rowModel;\n        var callback = function (rowNode) { return rowNode.selectThisNode(true); };\n        if (justFiltered) {\n            clientSideRowModel.forEachNodeAfterFilter(callback);\n        }\n        else {\n            clientSideRowModel.forEachNode(callback);\n        }\n        // the above does not clean up the parent rows if they are selected\n        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) {\n            this.updateGroupsFromChildrenSelections();\n        }\n        var event = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    /**\n     * @method\n     * @deprecated\n     */\n    SelectionService.prototype.selectNode = function (rowNode, tryMulti) {\n        if (rowNode) {\n            rowNode.setSelectedParams({ newValue: true, clearSelection: !tryMulti });\n        }\n    };\n    /**\n     * @method\n     * @deprecated\n     */\n    SelectionService.prototype.deselectIndex = function (rowIndex) {\n        var node = this.rowModel.getRow(rowIndex);\n        this.deselectNode(node);\n    };\n    /**\n     * @method\n     * @deprecated\n     */\n    SelectionService.prototype.deselectNode = function (rowNode) {\n        if (rowNode) {\n            rowNode.setSelectedParams({ newValue: false, clearSelection: false });\n        }\n    };\n    /**\n     * @method\n     * @deprecated\n     */\n    SelectionService.prototype.selectIndex = function (index, tryMulti) {\n        var node = this.rowModel.getRow(index);\n        this.selectNode(node, tryMulti);\n    };\n    __decorate([\n        Autowired('rowModel')\n    ], SelectionService.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], SelectionService.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], SelectionService.prototype, \"gridApi\", void 0);\n    __decorate([\n        __param(0, Qualifier('loggerFactory'))\n    ], SelectionService.prototype, \"setBeans\", null);\n    __decorate([\n        PostConstruct\n    ], SelectionService.prototype, \"init\", null);\n    SelectionService = __decorate([\n        Bean('selectionService')\n    ], SelectionService);\n    return SelectionService;\n}(BeanStub));\nexport { SelectionService };\n"]},"metadata":{},"sourceType":"module"}