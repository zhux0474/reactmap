{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n// ARIA HELPER FUNCTIONS\nfunction setAriaAttribute(element, attribute, value) {\n  element.setAttribute(ariaAttributeName(attribute), value.toString());\n}\n\nfunction removeAriaAttribute(element, attribute) {\n  element.removeAttribute(ariaAttributeName(attribute));\n}\n\nfunction ariaAttributeName(attribute) {\n  return \"aria-\" + attribute;\n}\n\nexport function setAriaRole(element, role) {\n  if (role) {\n    element.setAttribute('role', role);\n  } else {\n    element.removeAttribute('role');\n  }\n}\nexport function getAriaSortState(column) {\n  var sort;\n\n  if (column.isSortAscending()) {\n    sort = 'ascending';\n  } else if (column.isSortDescending()) {\n    sort = 'descending';\n  } else {\n    sort = 'none';\n  }\n\n  return sort;\n} // ARIA ATTRIBUTE GETTERS\n\nexport function getAriaLevel(element) {\n  return parseInt(element.getAttribute('aria-level'), 10);\n}\nexport function getAriaPosInSet(element) {\n  return parseInt(element.getAttribute('aria-posinset'), 10);\n}\nexport function getAriaDescribedBy(element) {\n  return element.getAttribute('aria-describedby') || '';\n} // ARIA ATTRIBUTE SETTERS\n\nexport function setAriaLabel(element, label) {\n  var key = 'label';\n\n  if (label) {\n    setAriaAttribute(element, key, label);\n  } else {\n    removeAriaAttribute(element, key);\n  }\n}\nexport function setAriaLabelledBy(element, labelledBy) {\n  var key = 'labelledby';\n\n  if (labelledBy) {\n    setAriaAttribute(element, key, labelledBy);\n  } else {\n    removeAriaAttribute(element, key);\n  }\n}\nexport function setAriaDescribedBy(element, describedby) {\n  var key = 'describedby';\n\n  if (describedby) {\n    setAriaAttribute(element, key, describedby);\n  } else {\n    removeAriaAttribute(element, key);\n  }\n}\nexport function setAriaLevel(element, level) {\n  setAriaAttribute(element, 'level', level);\n}\nexport function setAriaDisabled(element, disabled) {\n  setAriaAttribute(element, 'disabled', disabled);\n}\nexport function setAriaExpanded(element, expanded) {\n  setAriaAttribute(element, 'expanded', expanded);\n}\nexport function removeAriaExpanded(element) {\n  removeAriaAttribute(element, 'expanded');\n}\nexport function setAriaSetSize(element, setsize) {\n  setAriaAttribute(element, 'setsize', setsize);\n}\nexport function setAriaPosInSet(element, position) {\n  setAriaAttribute(element, 'posinset', position);\n}\nexport function setAriaMultiSelectable(element, multiSelectable) {\n  setAriaAttribute(element, 'multiselectable', multiSelectable);\n}\nexport function setAriaRowCount(element, rowCount) {\n  setAriaAttribute(element, 'rowcount', rowCount);\n}\nexport function setAriaRowIndex(element, rowIndex) {\n  setAriaAttribute(element, 'rowindex', rowIndex);\n}\nexport function setAriaColCount(element, colCount) {\n  setAriaAttribute(element, 'colcount', colCount);\n}\nexport function setAriaColIndex(element, colIndex) {\n  setAriaAttribute(element, 'colindex', colIndex);\n}\nexport function setAriaColSpan(element, colSpan) {\n  setAriaAttribute(element, 'colspan', colSpan);\n}\nexport function setAriaSort(element, sort) {\n  setAriaAttribute(element, 'sort', sort);\n}\nexport function removeAriaSort(element) {\n  removeAriaAttribute(element, 'sort');\n}\nexport function setAriaSelected(element, selected) {\n  var attributeName = 'selected';\n\n  if (selected) {\n    setAriaAttribute(element, attributeName, selected);\n  } else {\n    removeAriaAttribute(element, attributeName);\n  }\n}\nexport function setAriaChecked(element, checked) {\n  setAriaAttribute(element, 'checked', checked === undefined ? 'mixed' : checked);\n}","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/utils/aria.js"],"names":["setAriaAttribute","element","attribute","value","setAttribute","ariaAttributeName","toString","removeAriaAttribute","removeAttribute","setAriaRole","role","getAriaSortState","column","sort","isSortAscending","isSortDescending","getAriaLevel","parseInt","getAttribute","getAriaPosInSet","getAriaDescribedBy","setAriaLabel","label","key","setAriaLabelledBy","labelledBy","setAriaDescribedBy","describedby","setAriaLevel","level","setAriaDisabled","disabled","setAriaExpanded","expanded","removeAriaExpanded","setAriaSetSize","setsize","setAriaPosInSet","position","setAriaMultiSelectable","multiSelectable","setAriaRowCount","rowCount","setAriaRowIndex","rowIndex","setAriaColCount","colCount","setAriaColIndex","colIndex","setAriaColSpan","colSpan","setAriaSort","removeAriaSort","setAriaSelected","selected","attributeName","setAriaChecked","checked","undefined"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n// ARIA HELPER FUNCTIONS\nfunction setAriaAttribute(element, attribute, value) {\n    element.setAttribute(ariaAttributeName(attribute), value.toString());\n}\nfunction removeAriaAttribute(element, attribute) {\n    element.removeAttribute(ariaAttributeName(attribute));\n}\nfunction ariaAttributeName(attribute) {\n    return \"aria-\" + attribute;\n}\nexport function setAriaRole(element, role) {\n    if (role) {\n        element.setAttribute('role', role);\n    }\n    else {\n        element.removeAttribute('role');\n    }\n}\nexport function getAriaSortState(column) {\n    var sort;\n    if (column.isSortAscending()) {\n        sort = 'ascending';\n    }\n    else if (column.isSortDescending()) {\n        sort = 'descending';\n    }\n    else {\n        sort = 'none';\n    }\n    return sort;\n}\n// ARIA ATTRIBUTE GETTERS\nexport function getAriaLevel(element) {\n    return parseInt(element.getAttribute('aria-level'), 10);\n}\nexport function getAriaPosInSet(element) {\n    return parseInt(element.getAttribute('aria-posinset'), 10);\n}\nexport function getAriaDescribedBy(element) {\n    return element.getAttribute('aria-describedby') || '';\n}\n// ARIA ATTRIBUTE SETTERS\nexport function setAriaLabel(element, label) {\n    var key = 'label';\n    if (label) {\n        setAriaAttribute(element, key, label);\n    }\n    else {\n        removeAriaAttribute(element, key);\n    }\n}\nexport function setAriaLabelledBy(element, labelledBy) {\n    var key = 'labelledby';\n    if (labelledBy) {\n        setAriaAttribute(element, key, labelledBy);\n    }\n    else {\n        removeAriaAttribute(element, key);\n    }\n}\nexport function setAriaDescribedBy(element, describedby) {\n    var key = 'describedby';\n    if (describedby) {\n        setAriaAttribute(element, key, describedby);\n    }\n    else {\n        removeAriaAttribute(element, key);\n    }\n}\nexport function setAriaLevel(element, level) {\n    setAriaAttribute(element, 'level', level);\n}\nexport function setAriaDisabled(element, disabled) {\n    setAriaAttribute(element, 'disabled', disabled);\n}\nexport function setAriaExpanded(element, expanded) {\n    setAriaAttribute(element, 'expanded', expanded);\n}\nexport function removeAriaExpanded(element) {\n    removeAriaAttribute(element, 'expanded');\n}\nexport function setAriaSetSize(element, setsize) {\n    setAriaAttribute(element, 'setsize', setsize);\n}\nexport function setAriaPosInSet(element, position) {\n    setAriaAttribute(element, 'posinset', position);\n}\nexport function setAriaMultiSelectable(element, multiSelectable) {\n    setAriaAttribute(element, 'multiselectable', multiSelectable);\n}\nexport function setAriaRowCount(element, rowCount) {\n    setAriaAttribute(element, 'rowcount', rowCount);\n}\nexport function setAriaRowIndex(element, rowIndex) {\n    setAriaAttribute(element, 'rowindex', rowIndex);\n}\nexport function setAriaColCount(element, colCount) {\n    setAriaAttribute(element, 'colcount', colCount);\n}\nexport function setAriaColIndex(element, colIndex) {\n    setAriaAttribute(element, 'colindex', colIndex);\n}\nexport function setAriaColSpan(element, colSpan) {\n    setAriaAttribute(element, 'colspan', colSpan);\n}\nexport function setAriaSort(element, sort) {\n    setAriaAttribute(element, 'sort', sort);\n}\nexport function removeAriaSort(element) {\n    removeAriaAttribute(element, 'sort');\n}\nexport function setAriaSelected(element, selected) {\n    var attributeName = 'selected';\n    if (selected) {\n        setAriaAttribute(element, attributeName, selected);\n    }\n    else {\n        removeAriaAttribute(element, attributeName);\n    }\n}\nexport function setAriaChecked(element, checked) {\n    setAriaAttribute(element, 'checked', checked === undefined ? 'mixed' : checked);\n}\n"]},"metadata":{},"sourceType":"module"}