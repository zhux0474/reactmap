{"ast":null,"code":"/**\n * @module ol/functions\n */\nimport { equals as arrayEquals } from './array.js';\n/**\n * Always returns true.\n * @return {boolean} true.\n */\n\nexport function TRUE() {\n  return true;\n}\n/**\n * Always returns false.\n * @return {boolean} false.\n */\n\nexport function FALSE() {\n  return false;\n}\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\n\nexport function VOID() {}\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\n\nexport function memoizeOne(fn) {\n  var called = false;\n  /** @type {ReturnType} */\n\n  var lastResult;\n  /** @type {Array<any>} */\n\n  var lastArgs;\n  var lastThis;\n  return function () {\n    var nextArgs = Array.prototype.slice.call(arguments);\n\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n\n    return lastResult;\n  };\n}\n/**\n * @template T\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\n * @return {Promise<T>} A promise for the value.\n */\n\nexport function toPromise(getter) {\n  function promiseGetter() {\n    var value;\n\n    try {\n      value = getter();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    if (value instanceof Promise) {\n      return value;\n    }\n\n    return Promise.resolve(value);\n  }\n\n  return promiseGetter();\n}","map":{"version":3,"sources":["/Users/rongxuan/node_modules/ol/src/functions.js"],"names":[],"mappings":"AAAA;;AAEG;AAEH,SAAQ,MAAM,IAAI,WAAlB,QAAoC,YAApC;AAEA;;;AAGG;;AACH,OAAM,SAAU,IAAV,GAAc;AAClB,SAAO,IAAP;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,KAAV,GAAe;AACnB,SAAO,KAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,IAAV,GAAc,CAAK;AAEzB;;;;;;;;AAQG;;AACH,OAAM,SAAU,UAAV,CAAqB,EAArB,EAAuB;AAC3B,MAAI,MAAM,GAAG,KAAb;AAEA;;AACA,MAAI,UAAJ;AAEA;;AACA,MAAI,QAAJ;AAEA,MAAI,QAAJ;AAEA,SAAO,YAAA;AACL,QAAM,QAAQ,GAAG,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,CAAjB;;AACA,QAAI,CAAC,MAAD,IAAW,SAAS,QAApB,IAAgC,CAAC,WAAW,CAAC,QAAD,EAAW,QAAX,CAAhD,EAAsE;AACpE,MAAA,MAAM,GAAG,IAAT;AACA,MAAA,QAAQ,GAAG,IAAX;AACA,MAAA,QAAQ,GAAG,QAAX;AACA,MAAA,UAAU,GAAG,EAAE,CAAC,KAAH,CAAS,IAAT,EAAe,SAAf,CAAb;AACD;;AACD,WAAO,UAAP;AACD,GATD;AAUD;AAED;;;;AAIG;;AACH,OAAM,SAAU,SAAV,CAAoB,MAApB,EAA0B;AAC9B,WAAS,aAAT,GAAsB;AACpB,QAAI,KAAJ;;AACA,QAAI;AACF,MAAA,KAAK,GAAG,MAAM,EAAd;AACD,KAFD,CAEE,OAAO,GAAP,EAAY;AACZ,aAAO,OAAO,CAAC,MAAR,CAAe,GAAf,CAAP;AACD;;AACD,QAAI,KAAK,YAAY,OAArB,EAA8B;AAC5B,aAAO,KAAP;AACD;;AACD,WAAO,OAAO,CAAC,OAAR,CAAgB,KAAhB,CAAP;AACD;;AACD,SAAO,aAAa,EAApB;AACD","sourcesContent":["/**\n * @module ol/functions\n */\n\nimport {equals as arrayEquals} from './array.js';\n\n/**\n * Always returns true.\n * @return {boolean} true.\n */\nexport function TRUE() {\n  return true;\n}\n\n/**\n * Always returns false.\n * @return {boolean} false.\n */\nexport function FALSE() {\n  return false;\n}\n\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() {}\n\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\nexport function memoizeOne(fn) {\n  let called = false;\n\n  /** @type {ReturnType} */\n  let lastResult;\n\n  /** @type {Array<any>} */\n  let lastArgs;\n\n  let lastThis;\n\n  return function () {\n    const nextArgs = Array.prototype.slice.call(arguments);\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n    return lastResult;\n  };\n}\n\n/**\n * @template T\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\n * @return {Promise<T>} A promise for the value.\n */\nexport function toPromise(getter) {\n  function promiseGetter() {\n    let value;\n    try {\n      value = getter();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    if (value instanceof Promise) {\n      return value;\n    }\n    return Promise.resolve(value);\n  }\n  return promiseGetter();\n}\n"]},"metadata":{},"sourceType":"module"}