{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/filter/LogicalNary\n */\n\n\nimport Filter from './Filter.js';\nimport { assert } from '../../asserts.js';\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @abstract\n */\n\nvar LogicalNary =\n/** @class */\nfunction (_super) {\n  __extends(LogicalNary, _super);\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {Array<import(\"./Filter.js\").default>} conditions Conditions.\n   */\n\n\n  function LogicalNary(tagName, conditions) {\n    var _this = _super.call(this, tagName) || this;\n    /**\n     * @type {Array<import(\"./Filter.js\").default>}\n     */\n\n\n    _this.conditions = conditions;\n    assert(_this.conditions.length >= 2, 57); // At least 2 conditions are required.\n\n    return _this;\n  }\n\n  return LogicalNary;\n}(Filter);\n\nexport default LogicalNary;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/ol/src/format/filter/LogicalNary.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEG;;;AACH,OAAO,MAAP,MAAmB,aAAnB;AACA,SAAQ,MAAR,QAAqB,kBAArB;AAEA;;;;;;AAMG;;AACH,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0B,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;AACxB;;;AAGG;;;AACH,WAAA,WAAA,CAAY,OAAZ,EAAqB,UAArB,EAA+B;AAA/B,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,KAAc,IADhB;AAGE;;AAEG;;;AACH,IAAA,KAAI,CAAC,UAAL,GAAkB,UAAlB;AACA,IAAA,MAAM,CAAC,KAAI,CAAC,UAAL,CAAgB,MAAhB,IAA0B,CAA3B,EAA8B,EAA9B,CAAN,CAP6B,CAOY;;;AAC1C;;AACH,SAAA,WAAA;AAAC,CAdD,CAA0B,MAA1B,CAAA;;AAgBA,eAAe,WAAf","sourcesContent":["/**\n * @module ol/format/filter/LogicalNary\n */\nimport Filter from './Filter.js';\nimport {assert} from '../../asserts.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @abstract\n */\nclass LogicalNary extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {Array<import(\"./Filter.js\").default>} conditions Conditions.\n   */\n  constructor(tagName, conditions) {\n    super(tagName);\n\n    /**\n     * @type {Array<import(\"./Filter.js\").default>}\n     */\n    this.conditions = conditions;\n    assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.\n  }\n}\n\nexport default LogicalNary;\n"]},"metadata":{},"sourceType":"module"}