{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/Layer\n */\n\n\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { asArray } from '../../color.js';\nimport { containsCoordinate, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../../extent.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { equals } from '../../array.js';\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\n\nvar CanvasLayerRenderer =\n/** @class */\nfunction (_super) {\n  __extends(CanvasLayerRenderer, _super);\n  /**\n   * @param {LayerType} layer Layer.\n   */\n\n\n  function CanvasLayerRenderer(layer) {\n    var _this = _super.call(this, layer) || this;\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n\n\n    _this.container = null;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    _this.renderedResolution;\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    _this.tempTransform = createTransform();\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    _this.pixelTransform = createTransform();\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    _this.inversePixelTransform = createTransform();\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n\n    _this.context = null;\n    /**\n     * @type {boolean}\n     */\n\n    _this.containerReused = false;\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n\n    _this.pixelContext_ = null;\n    return _this;\n  }\n  /**\n   * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n\n\n  CanvasLayerRenderer.prototype.getBackground = function (frameState) {\n    var layer = this.getLayer();\n    var background = layer.getBackground();\n\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n\n    return background || undefined;\n  };\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {number} opacity Opacity.\n   * @param {string} [opt_backgroundColor] Background color.\n   */\n\n\n  CanvasLayerRenderer.prototype.useContainer = function (target, transform, opacity, opt_backgroundColor) {\n    var layerClassName = this.getLayer().getClassName();\n    var container, context;\n\n    if (target && target.className === layerClassName && target.style.opacity === '' && opacity === 1 && (!opt_backgroundColor || target.style.backgroundColor && equals(asArray(target.style.backgroundColor), asArray(opt_backgroundColor)))) {\n      var canvas = target.firstElementChild;\n\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      var style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n\n      if (opt_backgroundColor) {\n        style.backgroundColor = opt_backgroundColor;\n      }\n\n      context = createCanvasContext2D();\n      var canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n\n\n  CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {\n    var topLeft = getTopLeft(extent);\n    var topRight = getTopRight(extent);\n    var bottomRight = getBottomRight(extent);\n    var bottomLeft = getBottomLeft(extent);\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n    var inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  };\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n    var layer = this.getLayer();\n\n    if (layer.hasListener(type)) {\n      var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n      layer.dispatchEvent(event_1);\n    }\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  CanvasLayerRenderer.prototype.preRender = function (context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  CanvasLayerRenderer.prototype.postRender = function (context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  };\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n\n\n  CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {\n    var dx1 = width / 2;\n    var dy1 = height / 2;\n    var sx = pixelRatio / resolution;\n    var sy = -sx;\n    var dx2 = -center[0] + offsetX;\n    var dy2 = -center[1];\n    return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n  };\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n   *    location, null will be returned.  If there is data, but pixel values cannot be\n   *    returned, and empty array will be returned.\n   */\n\n\n  CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n    var renderPixel = applyTransform(this.inversePixelTransform, pixel.slice());\n    var context = this.context;\n    var layer = this.getLayer();\n    var layerExtent = layer.getExtent();\n\n    if (layerExtent) {\n      var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n      /** get only data inside of the layer extent */\n\n      if (!containsCoordinate(layerExtent, renderCoordinate)) {\n        return null;\n      }\n    }\n\n    var x = Math.round(renderPixel[0]);\n    var y = Math.round(renderPixel[1]);\n    var pixelContext = this.pixelContext_;\n\n    if (!pixelContext) {\n      var pixelCanvas = document.createElement('canvas');\n      pixelCanvas.width = 1;\n      pixelCanvas.height = 1;\n      pixelContext = pixelCanvas.getContext('2d');\n      this.pixelContext_ = pixelContext;\n    }\n\n    pixelContext.clearRect(0, 0, 1, 1);\n    var data;\n\n    try {\n      pixelContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      if (err.name === 'SecurityError') {\n        // tainted canvas, we assume there is data at the given pixel (although there might not be)\n        this.pixelContext_ = null;\n        return new Uint8Array();\n      }\n\n      return data;\n    }\n\n    if (data[3] === 0) {\n      return null;\n    }\n\n    return data;\n  };\n\n  return CanvasLayerRenderer;\n}(LayerRenderer);\n\nexport default CanvasLayerRenderer;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/ol/src/renderer/canvas/Layer.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {asArray} from '../../color.js';\nimport {\n  containsCoordinate,\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../../extent.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {equals} from '../../array.js';\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = null;\n\n    /**\n     * @type {boolean}\n     */\n    this.containerReused = false;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.pixelContext_ = null;\n  }\n\n  /**\n   * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n  getBackground(frameState) {\n    const layer = this.getLayer();\n    let background = layer.getBackground();\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n    return background || undefined;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {number} opacity Opacity.\n   * @param {string} [opt_backgroundColor] Background color.\n   */\n  useContainer(target, transform, opacity, opt_backgroundColor) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n    if (\n      target &&\n      target.className === layerClassName &&\n      target.style.opacity === '' &&\n      opacity === 1 &&\n      (!opt_backgroundColor ||\n        (target.style.backgroundColor &&\n          equals(\n            asArray(target.style.backgroundColor),\n            asArray(opt_backgroundColor)\n          )))\n    ) {\n      const canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      if (opt_backgroundColor) {\n        style.backgroundColor = opt_backgroundColor;\n      }\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform,\n        frameState,\n        context\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getRenderTransform(\n    center,\n    resolution,\n    rotation,\n    pixelRatio,\n    width,\n    height,\n    offsetX\n  ) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(\n      this.tempTransform,\n      dx1,\n      dy1,\n      sx,\n      sy,\n      -rotation,\n      dx2,\n      dy2\n    );\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n   *    location, null will be returned.  If there is data, but pixel values cannot be\n   *    returned, and empty array will be returned.\n   */\n  getDataAtPixel(pixel, frameState, hitTolerance) {\n    const renderPixel = applyTransform(\n      this.inversePixelTransform,\n      pixel.slice()\n    );\n    const context = this.context;\n\n    const layer = this.getLayer();\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      const renderCoordinate = applyTransform(\n        frameState.pixelToCoordinateTransform,\n        pixel.slice()\n      );\n\n      /** get only data inside of the layer extent */\n      if (!containsCoordinate(layerExtent, renderCoordinate)) {\n        return null;\n      }\n    }\n\n    const x = Math.round(renderPixel[0]);\n    const y = Math.round(renderPixel[1]);\n    let pixelContext = this.pixelContext_;\n    if (!pixelContext) {\n      const pixelCanvas = document.createElement('canvas');\n      pixelCanvas.width = 1;\n      pixelCanvas.height = 1;\n      pixelContext = pixelCanvas.getContext('2d');\n      this.pixelContext_ = pixelContext;\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n    let data;\n    try {\n      pixelContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      if (err.name === 'SecurityError') {\n        // tainted canvas, we assume there is data at the given pixel (although there might not be)\n        this.pixelContext_ = null;\n        return new Uint8Array();\n      }\n      return data;\n    }\n\n    if (data[3] === 0) {\n      return null;\n    }\n    return data;\n  }\n}\n\nexport default CanvasLayerRenderer;\n"]},"metadata":{},"sourceType":"module"}