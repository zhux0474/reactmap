{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean, PostConstruct, BeanStub } from \"@ag-grid-community/core\";\n\nvar FilterService =\n/** @class */\nfunction (_super) {\n  __extends(FilterService, _super);\n\n  function FilterService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FilterService.prototype.postConstruct = function () {\n    this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n  };\n\n  FilterService.prototype.filter = function (changedPath) {\n    var filterActive = this.filterManager.isAnyFilterPresent();\n    this.filterNodes(filterActive, changedPath);\n  };\n\n  FilterService.prototype.filterNodes = function (filterActive, changedPath) {\n    var _this = this;\n\n    var filterCallback = function (rowNode, includeChildNodes) {\n      // recursively get all children that are groups to also filter\n      if (rowNode.hasChildren()) {\n        // result of filter for this node. when filtering tree data, includeChildNodes = true when parent passes\n        if (filterActive && !includeChildNodes) {\n          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function (childNode) {\n            // a group is included in the result if it has any children of it's own.\n            // by this stage, the child groups are already filtered\n            var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0; // both leaf level nodes and tree data nodes have data. these get added if\n            // the data passes the filter\n\n            var passBecauseDataPasses = childNode.data && _this.filterManager.doesRowPassFilter({\n              rowNode: childNode\n            }); // note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass\n\n\n            return passBecauseChildren || passBecauseDataPasses;\n          });\n        } else {\n          // if not filtering, the result is the original list\n          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n        }\n\n        _this.setAllChildrenCount(rowNode);\n      } else {\n        rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n        rowNode.setAllChildrenCount(null);\n      }\n\n      if (rowNode.sibling) {\n        rowNode.sibling.childrenAfterFilter = rowNode.childrenAfterFilter;\n      }\n    };\n\n    if (this.doingTreeDataFiltering()) {\n      var treeDataDepthFirstFilter_1 = function (rowNode, alreadyFoundInParent) {\n        // tree data filter traverses the hierarchy depth first and includes child nodes if parent passes\n        // filter, and parent nodes will be include if any children exist.\n        if (rowNode.childrenAfterGroup) {\n          for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n            var childNode = rowNode.childrenAfterGroup[i]; // first check if current node passes filter before invoking child nodes\n\n            var foundInParent = alreadyFoundInParent || _this.filterManager.doesRowPassFilter({\n              rowNode: childNode\n            });\n\n            if (childNode.childrenAfterGroup) {\n              treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);\n            } else {\n              filterCallback(childNode, foundInParent);\n            }\n          }\n        }\n\n        filterCallback(rowNode, alreadyFoundInParent);\n      };\n\n      var treeDataFilterCallback = function (rowNode) {\n        return treeDataDepthFirstFilter_1(rowNode, false);\n      };\n\n      changedPath.executeFromRootNode(treeDataFilterCallback);\n    } else {\n      var defaultFilterCallback = function (rowNode) {\n        return filterCallback(rowNode, false);\n      };\n\n      changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);\n    }\n  };\n\n  FilterService.prototype.setAllChildrenCountTreeData = function (rowNode) {\n    // for tree data, we include all children, groups and leafs\n    var allChildrenCount = 0;\n    rowNode.childrenAfterFilter.forEach(function (child) {\n      // include child itself\n      allChildrenCount++; // include children of children\n\n      allChildrenCount += child.allChildrenCount;\n    });\n    rowNode.setAllChildrenCount(allChildrenCount);\n  };\n\n  FilterService.prototype.setAllChildrenCountGridGrouping = function (rowNode) {\n    // for grid data, we only count the leafs\n    var allChildrenCount = 0;\n    rowNode.childrenAfterFilter.forEach(function (child) {\n      if (child.group) {\n        allChildrenCount += child.allChildrenCount;\n      } else {\n        allChildrenCount++;\n      }\n    });\n    rowNode.setAllChildrenCount(allChildrenCount);\n  };\n\n  FilterService.prototype.setAllChildrenCount = function (rowNode) {\n    if (this.doingTreeData) {\n      this.setAllChildrenCountTreeData(rowNode);\n    } else {\n      this.setAllChildrenCountGridGrouping(rowNode);\n    }\n  };\n\n  FilterService.prototype.doingTreeDataFiltering = function () {\n    return this.gridOptionsWrapper.isTreeData() && !this.gridOptionsWrapper.isExcludeChildrenWhenTreeDataFiltering();\n  };\n\n  __decorate([Autowired('filterManager')], FilterService.prototype, \"filterManager\", void 0);\n\n  __decorate([PostConstruct], FilterService.prototype, \"postConstruct\", null);\n\n  FilterService = __decorate([Bean(\"filterService\")], FilterService);\n  return FilterService;\n}(BeanStub);\n\nexport { FilterService };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/filterService.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Autowired","Bean","PostConstruct","BeanStub","FilterService","_super","apply","postConstruct","doingTreeData","gridOptionsWrapper","isTreeData","filter","changedPath","filterActive","filterManager","isAnyFilterPresent","filterNodes","_this","filterCallback","rowNode","includeChildNodes","hasChildren","childrenAfterFilter","childrenAfterGroup","childNode","passBecauseChildren","passBecauseDataPasses","data","doesRowPassFilter","setAllChildrenCount","sibling","doingTreeDataFiltering","treeDataDepthFirstFilter_1","alreadyFoundInParent","foundInParent","treeDataFilterCallback","executeFromRootNode","defaultFilterCallback","forEachChangedNodeDepthFirst","setAllChildrenCountTreeData","allChildrenCount","forEach","child","setAllChildrenCountGridGrouping","group","isExcludeChildrenWhenTreeDataFiltering"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct, BeanStub } from \"@ag-grid-community/core\";\nvar FilterService = /** @class */ (function (_super) {\n    __extends(FilterService, _super);\n    function FilterService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FilterService.prototype.postConstruct = function () {\n        this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n    };\n    FilterService.prototype.filter = function (changedPath) {\n        var filterActive = this.filterManager.isAnyFilterPresent();\n        this.filterNodes(filterActive, changedPath);\n    };\n    FilterService.prototype.filterNodes = function (filterActive, changedPath) {\n        var _this = this;\n        var filterCallback = function (rowNode, includeChildNodes) {\n            // recursively get all children that are groups to also filter\n            if (rowNode.hasChildren()) {\n                // result of filter for this node. when filtering tree data, includeChildNodes = true when parent passes\n                if (filterActive && !includeChildNodes) {\n                    rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function (childNode) {\n                        // a group is included in the result if it has any children of it's own.\n                        // by this stage, the child groups are already filtered\n                        var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;\n                        // both leaf level nodes and tree data nodes have data. these get added if\n                        // the data passes the filter\n                        var passBecauseDataPasses = childNode.data\n                            && _this.filterManager.doesRowPassFilter({ rowNode: childNode });\n                        // note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass\n                        return passBecauseChildren || passBecauseDataPasses;\n                    });\n                }\n                else {\n                    // if not filtering, the result is the original list\n                    rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n                }\n                _this.setAllChildrenCount(rowNode);\n            }\n            else {\n                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n                rowNode.setAllChildrenCount(null);\n            }\n            if (rowNode.sibling) {\n                rowNode.sibling.childrenAfterFilter = rowNode.childrenAfterFilter;\n            }\n        };\n        if (this.doingTreeDataFiltering()) {\n            var treeDataDepthFirstFilter_1 = function (rowNode, alreadyFoundInParent) {\n                // tree data filter traverses the hierarchy depth first and includes child nodes if parent passes\n                // filter, and parent nodes will be include if any children exist.\n                if (rowNode.childrenAfterGroup) {\n                    for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n                        var childNode = rowNode.childrenAfterGroup[i];\n                        // first check if current node passes filter before invoking child nodes\n                        var foundInParent = alreadyFoundInParent\n                            || _this.filterManager.doesRowPassFilter({ rowNode: childNode });\n                        if (childNode.childrenAfterGroup) {\n                            treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);\n                        }\n                        else {\n                            filterCallback(childNode, foundInParent);\n                        }\n                    }\n                }\n                filterCallback(rowNode, alreadyFoundInParent);\n            };\n            var treeDataFilterCallback = function (rowNode) { return treeDataDepthFirstFilter_1(rowNode, false); };\n            changedPath.executeFromRootNode(treeDataFilterCallback);\n        }\n        else {\n            var defaultFilterCallback = function (rowNode) { return filterCallback(rowNode, false); };\n            changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);\n        }\n    };\n    FilterService.prototype.setAllChildrenCountTreeData = function (rowNode) {\n        // for tree data, we include all children, groups and leafs\n        var allChildrenCount = 0;\n        rowNode.childrenAfterFilter.forEach(function (child) {\n            // include child itself\n            allChildrenCount++;\n            // include children of children\n            allChildrenCount += child.allChildrenCount;\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    };\n    FilterService.prototype.setAllChildrenCountGridGrouping = function (rowNode) {\n        // for grid data, we only count the leafs\n        var allChildrenCount = 0;\n        rowNode.childrenAfterFilter.forEach(function (child) {\n            if (child.group) {\n                allChildrenCount += child.allChildrenCount;\n            }\n            else {\n                allChildrenCount++;\n            }\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    };\n    FilterService.prototype.setAllChildrenCount = function (rowNode) {\n        if (this.doingTreeData) {\n            this.setAllChildrenCountTreeData(rowNode);\n        }\n        else {\n            this.setAllChildrenCountGridGrouping(rowNode);\n        }\n    };\n    FilterService.prototype.doingTreeDataFiltering = function () {\n        return this.gridOptionsWrapper.isTreeData() && !this.gridOptionsWrapper.isExcludeChildrenWhenTreeDataFiltering();\n    };\n    __decorate([\n        Autowired('filterManager')\n    ], FilterService.prototype, \"filterManager\", void 0);\n    __decorate([\n        PostConstruct\n    ], FilterService.prototype, \"postConstruct\", null);\n    FilterService = __decorate([\n        Bean(\"filterService\")\n    ], FilterService);\n    return FilterService;\n}(BeanStub));\nexport { FilterService };\n"]},"metadata":{},"sourceType":"module"}