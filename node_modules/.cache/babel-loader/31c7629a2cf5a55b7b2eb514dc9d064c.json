{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Events } from \"./events\";\nimport { Bean } from \"./context/context\";\nimport { Qualifier } from \"./context/context\";\nimport { Autowired } from \"./context/context\";\nimport { PostConstruct } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\n\nvar AlignedGridsService =\n/** @class */\nfunction (_super) {\n  __extends(AlignedGridsService, _super);\n\n  function AlignedGridsService() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master\n    // while processing a master event) we mark this if consuming an event, and if we are, then\n    // we don't fire back any events.\n\n\n    _this.consuming = false;\n    return _this;\n  }\n\n  AlignedGridsService.prototype.setBeans = function (loggerFactory) {\n    this.logger = loggerFactory.create('AlignedGridsService');\n  };\n\n  AlignedGridsService.prototype.init = function () {\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));\n  }; // common logic across all the fire methods\n\n\n  AlignedGridsService.prototype.fireEvent = function (callback) {\n    // if we are already consuming, then we are acting on an event from a master,\n    // so we don't cause a cyclic firing of events\n    if (this.consuming) {\n      return;\n    } // iterate through the aligned grids, and pass each aligned grid service to the callback\n\n\n    var otherGrids = this.gridOptionsWrapper.getAlignedGrids();\n\n    if (otherGrids) {\n      otherGrids.forEach(function (otherGridOptions) {\n        if (otherGridOptions.api) {\n          var alignedGridService = otherGridOptions.api.__getAlignedGridService();\n\n          callback(alignedGridService);\n        }\n      });\n    }\n  }; // common logic across all consume methods. very little common logic, however extracting\n  // guarantees consistency across the methods.\n\n\n  AlignedGridsService.prototype.onEvent = function (callback) {\n    this.consuming = true;\n    callback();\n    this.consuming = false;\n  };\n\n  AlignedGridsService.prototype.fireColumnEvent = function (event) {\n    this.fireEvent(function (alignedGridsService) {\n      alignedGridsService.onColumnEvent(event);\n    });\n  };\n\n  AlignedGridsService.prototype.fireScrollEvent = function (event) {\n    if (event.direction !== 'horizontal') {\n      return;\n    }\n\n    this.fireEvent(function (alignedGridsService) {\n      alignedGridsService.onScrollEvent(event);\n    });\n  };\n\n  AlignedGridsService.prototype.onScrollEvent = function (event) {\n    var _this = this;\n\n    this.onEvent(function () {\n      var gridBodyCon = _this.ctrlsService.getGridBodyCtrl();\n\n      gridBodyCon.getScrollFeature().setHorizontalScrollPosition(event.left);\n    });\n  };\n\n  AlignedGridsService.prototype.getMasterColumns = function (event) {\n    var result = [];\n\n    if (event.columns) {\n      event.columns.forEach(function (column) {\n        result.push(column);\n      });\n    } else if (event.column) {\n      result.push(event.column);\n    }\n\n    return result;\n  };\n\n  AlignedGridsService.prototype.getColumnIds = function (event) {\n    var result = [];\n\n    if (event.columns) {\n      event.columns.forEach(function (column) {\n        result.push(column.getColId());\n      });\n    } else if (event.column) {\n      result.push(event.column.getColId());\n    }\n\n    return result;\n  };\n\n  AlignedGridsService.prototype.onColumnEvent = function (event) {\n    var _this = this;\n\n    this.onEvent(function () {\n      switch (event.type) {\n        case Events.EVENT_COLUMN_MOVED:\n        case Events.EVENT_COLUMN_VISIBLE:\n        case Events.EVENT_COLUMN_PINNED:\n        case Events.EVENT_COLUMN_RESIZED:\n          var colEvent = event;\n\n          _this.processColumnEvent(colEvent);\n\n          break;\n\n        case Events.EVENT_COLUMN_GROUP_OPENED:\n          var groupOpenedEvent = event;\n\n          _this.processGroupOpenedEvent(groupOpenedEvent);\n\n          break;\n\n        case Events.EVENT_COLUMN_PIVOT_CHANGED:\n          // we cannot support pivoting with aligned grids as the columns will be out of sync as the\n          // grids will have columns created based on the row data of the grid.\n          console.warn('AG Grid: pivoting is not supported with aligned grids. ' + 'You can only use one of these features at a time in a grid.');\n          break;\n      }\n    });\n  };\n\n  AlignedGridsService.prototype.processGroupOpenedEvent = function (groupOpenedEvent) {\n    // likewise for column group\n    var masterColumnGroup = groupOpenedEvent.columnGroup;\n    var otherColumnGroup = null;\n\n    if (masterColumnGroup) {\n      var groupId = masterColumnGroup.getGroupId();\n      otherColumnGroup = this.columnModel.getOriginalColumnGroup(groupId);\n    }\n\n    if (masterColumnGroup && !otherColumnGroup) {\n      return;\n    }\n\n    this.logger.log('onColumnEvent-> processing ' + groupOpenedEvent + ' expanded = ' + masterColumnGroup.isExpanded());\n    this.columnModel.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), \"alignedGridChanged\");\n  };\n\n  AlignedGridsService.prototype.processColumnEvent = function (colEvent) {\n    var _this = this; // the column in the event is from the master grid. need to\n    // look up the equivalent from this (other) grid\n\n\n    var masterColumn = colEvent.column;\n    var otherColumn = null;\n\n    if (masterColumn) {\n      otherColumn = this.columnModel.getPrimaryColumn(masterColumn.getColId());\n    } // if event was with respect to a master column, that is not present in this\n    // grid, then we ignore the event\n\n\n    if (masterColumn && !otherColumn) {\n      return;\n    } // in time, all the methods below should use the column ids, it's a more generic way\n    // of handling columns, and also allows for single or multi column events\n\n\n    var masterColumns = this.getMasterColumns(colEvent);\n\n    switch (colEvent.type) {\n      case Events.EVENT_COLUMN_MOVED:\n        // when the user moves columns via setColumnState, we can't depend on moving specific columns\n        // to an index, as there maybe be many indexes columns moved to (as wasn't result of a mouse drag).\n        // so only way to be sure is match the order of all columns using Column State.\n        {\n          var movedEvent = colEvent;\n          var srcColState = colEvent.columnApi.getColumnState();\n          var destColState = srcColState.map(function (s) {\n            return {\n              colId: s.colId\n            };\n          });\n          this.columnModel.applyColumnState({\n            state: destColState,\n            applyOrder: true\n          }, \"alignedGridChanged\");\n          this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" toIndex = \" + movedEvent.toIndex);\n        }\n        break;\n\n      case Events.EVENT_COLUMN_VISIBLE:\n        // when the user changes visibility via setColumnState, we can't depend on visibility flag in event\n        // as there maybe be mix of true/false (as wasn't result of a mouse click to set visiblity).\n        // so only way to be sure is match the visibility of all columns using Column State.\n        {\n          var visibleEvent = colEvent;\n          var srcColState = colEvent.columnApi.getColumnState();\n          var destColState = srcColState.map(function (s) {\n            return {\n              colId: s.colId,\n              hide: s.hide\n            };\n          });\n          this.columnModel.applyColumnState({\n            state: destColState\n          }, \"alignedGridChanged\");\n          this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" visible = \" + visibleEvent.visible);\n        }\n        break;\n\n      case Events.EVENT_COLUMN_PINNED:\n        {\n          var pinnedEvent = colEvent;\n          var srcColState = colEvent.columnApi.getColumnState();\n          var destColState = srcColState.map(function (s) {\n            return {\n              colId: s.colId,\n              pinned: s.pinned\n            };\n          });\n          this.columnModel.applyColumnState({\n            state: destColState\n          }, \"alignedGridChanged\");\n          this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" pinned = \" + pinnedEvent.pinned);\n        }\n        break;\n\n      case Events.EVENT_COLUMN_RESIZED:\n        var resizedEvent_1 = colEvent;\n        masterColumns.forEach(function (column) {\n          _this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" actualWidth = \" + column.getActualWidth());\n\n          var columnWidths = [{\n            key: column.getColId(),\n            newWidth: column.getActualWidth()\n          }];\n\n          _this.columnModel.setColumnWidths(columnWidths, false, resizedEvent_1.finished, \"alignedGridChanged\");\n        });\n        break;\n    }\n\n    var gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n    var isVerticalScrollShowing = gridBodyCon.isVerticalScrollShowing();\n    var alignedGrids = this.gridOptionsWrapper.getAlignedGrids();\n\n    if (alignedGrids) {\n      alignedGrids.forEach(function (grid) {\n        if (grid.api) {\n          grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing);\n        }\n      });\n    }\n  };\n\n  __decorate([Autowired('columnModel')], AlignedGridsService.prototype, \"columnModel\", void 0);\n\n  __decorate([Autowired('ctrlsService')], AlignedGridsService.prototype, \"ctrlsService\", void 0);\n\n  __decorate([__param(0, Qualifier('loggerFactory'))], AlignedGridsService.prototype, \"setBeans\", null);\n\n  __decorate([PostConstruct], AlignedGridsService.prototype, \"init\", null);\n\n  AlignedGridsService = __decorate([Bean('alignedGridsService')], AlignedGridsService);\n  return AlignedGridsService;\n}(BeanStub);\n\nexport { AlignedGridsService };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/alignedGridsService.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","Events","Bean","Qualifier","Autowired","PostConstruct","BeanStub","AlignedGridsService","_super","_this","apply","consuming","setBeans","loggerFactory","logger","init","addManagedListener","eventService","EVENT_COLUMN_MOVED","fireColumnEvent","bind","EVENT_COLUMN_VISIBLE","EVENT_COLUMN_PINNED","EVENT_COLUMN_GROUP_OPENED","EVENT_COLUMN_RESIZED","EVENT_BODY_SCROLL","fireScrollEvent","fireEvent","callback","otherGrids","gridOptionsWrapper","getAlignedGrids","forEach","otherGridOptions","api","alignedGridService","__getAlignedGridService","onEvent","event","alignedGridsService","onColumnEvent","direction","onScrollEvent","gridBodyCon","ctrlsService","getGridBodyCtrl","getScrollFeature","setHorizontalScrollPosition","left","getMasterColumns","result","columns","column","push","getColumnIds","getColId","type","colEvent","processColumnEvent","groupOpenedEvent","processGroupOpenedEvent","EVENT_COLUMN_PIVOT_CHANGED","console","warn","masterColumnGroup","columnGroup","otherColumnGroup","groupId","getGroupId","columnModel","getOriginalColumnGroup","log","isExpanded","setColumnGroupOpened","masterColumn","otherColumn","getPrimaryColumn","masterColumns","movedEvent","srcColState","columnApi","getColumnState","destColState","map","s","colId","applyColumnState","state","applyOrder","toIndex","visibleEvent","hide","visible","pinnedEvent","pinned","resizedEvent_1","getActualWidth","columnWidths","newWidth","setColumnWidths","finished","isVerticalScrollShowing","alignedGrids","grid","setAlwaysShowVerticalScroll"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Events } from \"./events\";\nimport { Bean } from \"./context/context\";\nimport { Qualifier } from \"./context/context\";\nimport { Autowired } from \"./context/context\";\nimport { PostConstruct } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nvar AlignedGridsService = /** @class */ (function (_super) {\n    __extends(AlignedGridsService, _super);\n    function AlignedGridsService() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master\n        // while processing a master event) we mark this if consuming an event, and if we are, then\n        // we don't fire back any events.\n        _this.consuming = false;\n        return _this;\n    }\n    AlignedGridsService.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('AlignedGridsService');\n    };\n    AlignedGridsService.prototype.init = function () {\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));\n    };\n    // common logic across all the fire methods\n    AlignedGridsService.prototype.fireEvent = function (callback) {\n        // if we are already consuming, then we are acting on an event from a master,\n        // so we don't cause a cyclic firing of events\n        if (this.consuming) {\n            return;\n        }\n        // iterate through the aligned grids, and pass each aligned grid service to the callback\n        var otherGrids = this.gridOptionsWrapper.getAlignedGrids();\n        if (otherGrids) {\n            otherGrids.forEach(function (otherGridOptions) {\n                if (otherGridOptions.api) {\n                    var alignedGridService = otherGridOptions.api.__getAlignedGridService();\n                    callback(alignedGridService);\n                }\n            });\n        }\n    };\n    // common logic across all consume methods. very little common logic, however extracting\n    // guarantees consistency across the methods.\n    AlignedGridsService.prototype.onEvent = function (callback) {\n        this.consuming = true;\n        callback();\n        this.consuming = false;\n    };\n    AlignedGridsService.prototype.fireColumnEvent = function (event) {\n        this.fireEvent(function (alignedGridsService) {\n            alignedGridsService.onColumnEvent(event);\n        });\n    };\n    AlignedGridsService.prototype.fireScrollEvent = function (event) {\n        if (event.direction !== 'horizontal') {\n            return;\n        }\n        this.fireEvent(function (alignedGridsService) {\n            alignedGridsService.onScrollEvent(event);\n        });\n    };\n    AlignedGridsService.prototype.onScrollEvent = function (event) {\n        var _this = this;\n        this.onEvent(function () {\n            var gridBodyCon = _this.ctrlsService.getGridBodyCtrl();\n            gridBodyCon.getScrollFeature().setHorizontalScrollPosition(event.left);\n        });\n    };\n    AlignedGridsService.prototype.getMasterColumns = function (event) {\n        var result = [];\n        if (event.columns) {\n            event.columns.forEach(function (column) {\n                result.push(column);\n            });\n        }\n        else if (event.column) {\n            result.push(event.column);\n        }\n        return result;\n    };\n    AlignedGridsService.prototype.getColumnIds = function (event) {\n        var result = [];\n        if (event.columns) {\n            event.columns.forEach(function (column) {\n                result.push(column.getColId());\n            });\n        }\n        else if (event.column) {\n            result.push(event.column.getColId());\n        }\n        return result;\n    };\n    AlignedGridsService.prototype.onColumnEvent = function (event) {\n        var _this = this;\n        this.onEvent(function () {\n            switch (event.type) {\n                case Events.EVENT_COLUMN_MOVED:\n                case Events.EVENT_COLUMN_VISIBLE:\n                case Events.EVENT_COLUMN_PINNED:\n                case Events.EVENT_COLUMN_RESIZED:\n                    var colEvent = event;\n                    _this.processColumnEvent(colEvent);\n                    break;\n                case Events.EVENT_COLUMN_GROUP_OPENED:\n                    var groupOpenedEvent = event;\n                    _this.processGroupOpenedEvent(groupOpenedEvent);\n                    break;\n                case Events.EVENT_COLUMN_PIVOT_CHANGED:\n                    // we cannot support pivoting with aligned grids as the columns will be out of sync as the\n                    // grids will have columns created based on the row data of the grid.\n                    console.warn('AG Grid: pivoting is not supported with aligned grids. ' +\n                        'You can only use one of these features at a time in a grid.');\n                    break;\n            }\n        });\n    };\n    AlignedGridsService.prototype.processGroupOpenedEvent = function (groupOpenedEvent) {\n        // likewise for column group\n        var masterColumnGroup = groupOpenedEvent.columnGroup;\n        var otherColumnGroup = null;\n        if (masterColumnGroup) {\n            var groupId = masterColumnGroup.getGroupId();\n            otherColumnGroup = this.columnModel.getOriginalColumnGroup(groupId);\n        }\n        if (masterColumnGroup && !otherColumnGroup) {\n            return;\n        }\n        this.logger.log('onColumnEvent-> processing ' + groupOpenedEvent + ' expanded = ' + masterColumnGroup.isExpanded());\n        this.columnModel.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), \"alignedGridChanged\");\n    };\n    AlignedGridsService.prototype.processColumnEvent = function (colEvent) {\n        var _this = this;\n        // the column in the event is from the master grid. need to\n        // look up the equivalent from this (other) grid\n        var masterColumn = colEvent.column;\n        var otherColumn = null;\n        if (masterColumn) {\n            otherColumn = this.columnModel.getPrimaryColumn(masterColumn.getColId());\n        }\n        // if event was with respect to a master column, that is not present in this\n        // grid, then we ignore the event\n        if (masterColumn && !otherColumn) {\n            return;\n        }\n        // in time, all the methods below should use the column ids, it's a more generic way\n        // of handling columns, and also allows for single or multi column events\n        var masterColumns = this.getMasterColumns(colEvent);\n        switch (colEvent.type) {\n            case Events.EVENT_COLUMN_MOVED:\n                // when the user moves columns via setColumnState, we can't depend on moving specific columns\n                // to an index, as there maybe be many indexes columns moved to (as wasn't result of a mouse drag).\n                // so only way to be sure is match the order of all columns using Column State.\n                {\n                    var movedEvent = colEvent;\n                    var srcColState = colEvent.columnApi.getColumnState();\n                    var destColState = srcColState.map(function (s) { return ({ colId: s.colId }); });\n                    this.columnModel.applyColumnState({ state: destColState, applyOrder: true }, \"alignedGridChanged\");\n                    this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" toIndex = \" + movedEvent.toIndex);\n                }\n                break;\n            case Events.EVENT_COLUMN_VISIBLE:\n                // when the user changes visibility via setColumnState, we can't depend on visibility flag in event\n                // as there maybe be mix of true/false (as wasn't result of a mouse click to set visiblity).\n                // so only way to be sure is match the visibility of all columns using Column State.\n                {\n                    var visibleEvent = colEvent;\n                    var srcColState = colEvent.columnApi.getColumnState();\n                    var destColState = srcColState.map(function (s) { return ({ colId: s.colId, hide: s.hide }); });\n                    this.columnModel.applyColumnState({ state: destColState }, \"alignedGridChanged\");\n                    this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" visible = \" + visibleEvent.visible);\n                }\n                break;\n            case Events.EVENT_COLUMN_PINNED:\n                {\n                    var pinnedEvent = colEvent;\n                    var srcColState = colEvent.columnApi.getColumnState();\n                    var destColState = srcColState.map(function (s) { return ({ colId: s.colId, pinned: s.pinned }); });\n                    this.columnModel.applyColumnState({ state: destColState }, \"alignedGridChanged\");\n                    this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" pinned = \" + pinnedEvent.pinned);\n                }\n                break;\n            case Events.EVENT_COLUMN_RESIZED:\n                var resizedEvent_1 = colEvent;\n                masterColumns.forEach(function (column) {\n                    _this.logger.log(\"onColumnEvent-> processing \" + colEvent.type + \" actualWidth = \" + column.getActualWidth());\n                    var columnWidths = [{ key: column.getColId(), newWidth: column.getActualWidth() }];\n                    _this.columnModel.setColumnWidths(columnWidths, false, resizedEvent_1.finished, \"alignedGridChanged\");\n                });\n                break;\n        }\n        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        var isVerticalScrollShowing = gridBodyCon.isVerticalScrollShowing();\n        var alignedGrids = this.gridOptionsWrapper.getAlignedGrids();\n        if (alignedGrids) {\n            alignedGrids.forEach(function (grid) {\n                if (grid.api) {\n                    grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing);\n                }\n            });\n        }\n    };\n    __decorate([\n        Autowired('columnModel')\n    ], AlignedGridsService.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('ctrlsService')\n    ], AlignedGridsService.prototype, \"ctrlsService\", void 0);\n    __decorate([\n        __param(0, Qualifier('loggerFactory'))\n    ], AlignedGridsService.prototype, \"setBeans\", null);\n    __decorate([\n        PostConstruct\n    ], AlignedGridsService.prototype, \"init\", null);\n    AlignedGridsService = __decorate([\n        Bean('alignedGridsService')\n    ], AlignedGridsService);\n    return AlignedGridsService;\n}(BeanStub));\nexport { AlignedGridsService };\n"]},"metadata":{},"sourceType":"module"}