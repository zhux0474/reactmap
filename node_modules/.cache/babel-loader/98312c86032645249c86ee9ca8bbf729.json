{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/reproj/Image\n */\n\n\nimport { ERROR_THRESHOLD } from './common.js';\nimport EventType from '../events/EventType.js';\nimport ImageBase from '../ImageBase.js';\nimport ImageState from '../ImageState.js';\nimport Triangulation from './Triangulation.js';\nimport { calculateSourceResolution, render as renderReprojected } from '../reproj.js';\nimport { getCenter, getHeight, getIntersection, getWidth } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../ImageBase.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\n\nvar ReprojImage =\n/** @class */\nfunction (_super) {\n  __extends(ReprojImage, _super);\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n\n\n  function ReprojImage(sourceProj, targetProj, targetExtent, targetResolution, pixelRatio, getImageFunction, interpolate) {\n    var _this = this;\n\n    var maxSourceExtent = sourceProj.getExtent();\n    var maxTargetExtent = targetProj.getExtent();\n    var limitedTargetExtent = maxTargetExtent ? getIntersection(targetExtent, maxTargetExtent) : targetExtent;\n    var targetCenter = getCenter(limitedTargetExtent);\n    var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n    var errorThresholdInPixels = ERROR_THRESHOLD;\n    var triangulation = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);\n    var sourceExtent = triangulation.calculateSourceExtent();\n    var sourceImage = getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    var state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    var sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n    _this = _super.call(this, targetExtent, targetResolution, sourcePixelRatio, state) || this;\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    _this.targetProj_ = targetProj;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    _this.maxSourceExtent_ = maxSourceExtent;\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n\n    _this.triangulation_ = triangulation;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.targetResolution_ = targetResolution;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    _this.targetExtent_ = targetExtent;\n    /**\n     * @private\n     * @type {import(\"../ImageBase.js\").default}\n     */\n\n    _this.sourceImage_ = sourceImage;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.sourcePixelRatio_ = sourcePixelRatio;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.interpolate_ = interpolate;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    _this.canvas_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    _this.sourceListenerKey_ = null;\n    return _this;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  ReprojImage.prototype.disposeInternal = function () {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @return {HTMLCanvasElement} Image.\n   */\n\n\n  ReprojImage.prototype.getImage = function () {\n    return this.canvas_;\n  };\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  ReprojImage.prototype.getProjection = function () {\n    return this.targetProj_;\n  };\n  /**\n   * @private\n   */\n\n\n  ReprojImage.prototype.reproject_ = function () {\n    var sourceState = this.sourceImage_.getState();\n\n    if (sourceState == ImageState.LOADED) {\n      var width = getWidth(this.targetExtent_) / this.targetResolution_;\n      var height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(width, height, this.sourcePixelRatio_, this.sourceImage_.getResolution(), this.maxSourceExtent_, this.targetResolution_, this.targetExtent_, this.triangulation_, [{\n        extent: this.sourceImage_.getExtent(),\n        image: this.sourceImage_.getImage()\n      }], 0, undefined, this.interpolate_);\n    }\n\n    this.state = sourceState;\n    this.changed();\n  };\n  /**\n   * Load not yet loaded URI.\n   */\n\n\n  ReprojImage.prototype.load = function () {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      var sourceState = this.sourceImage_.getState();\n\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(this.sourceImage_, EventType.CHANGE, function (e) {\n          var sourceState = this.sourceImage_.getState();\n\n          if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n            this.unlistenSource_();\n            this.reproject_();\n          }\n        }, this);\n        this.sourceImage_.load();\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  ReprojImage.prototype.unlistenSource_ = function () {\n    unlistenByKey(\n    /** @type {!import(\"../events.js\").EventsKey} */\n    this.sourceListenerKey_);\n    this.sourceListenerKey_ = null;\n  };\n\n  return ReprojImage;\n}(ImageBase);\n\nexport default ReprojImage;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/ol/src/reproj/Image.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @module ol/reproj/Image\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport EventType from '../events/EventType.js';\nimport ImageBase from '../ImageBase.js';\nimport ImageState from '../ImageState.js';\nimport Triangulation from './Triangulation.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {getCenter, getHeight, getIntersection, getWidth} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../ImageBase.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageBase {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    interpolate\n  ) {\n    const maxSourceExtent = sourceProj.getExtent();\n    const maxTargetExtent = targetProj.getExtent();\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = getImageFunction(\n      sourceExtent,\n      sourceResolution,\n      pixelRatio\n    );\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../ImageBase.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        this.sourceImage_.getResolution(),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.interpolate_\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          function (e) {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n          this\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (this.sourceListenerKey_)\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n"]},"metadata":{},"sourceType":"module"}