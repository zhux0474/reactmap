{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n// class returns a unique id to use for the column. it checks the existing columns, and if the requested\n// id is already taken, it will start appending numbers until it gets a unique id.\n// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}\n// if no field or id provided in the col, it will try the ids of natural numbers\nimport { toStringOrNull } from \"../utils/generic\";\n\nvar ColumnKeyCreator =\n/** @class */\nfunction () {\n  function ColumnKeyCreator() {\n    this.existingKeys = {};\n  }\n\n  ColumnKeyCreator.prototype.addExistingKeys = function (keys) {\n    for (var i = 0; i < keys.length; i++) {\n      this.existingKeys[keys[i]] = true;\n    }\n  };\n\n  ColumnKeyCreator.prototype.getUniqueKey = function (colId, colField) {\n    // in case user passed in number for colId, convert to string\n    colId = toStringOrNull(colId);\n    var count = 0;\n\n    while (true) {\n      var idToTry = void 0;\n\n      if (colId) {\n        idToTry = colId;\n\n        if (count !== 0) {\n          idToTry += '_' + count;\n        }\n      } else if (colField) {\n        idToTry = colField;\n\n        if (count !== 0) {\n          idToTry += '_' + count;\n        }\n      } else {\n        idToTry = '' + count;\n      }\n\n      if (!this.existingKeys[idToTry]) {\n        this.existingKeys[idToTry] = true;\n        return idToTry;\n      }\n\n      count++;\n    }\n  };\n\n  return ColumnKeyCreator;\n}();\n\nexport { ColumnKeyCreator };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/columns/columnKeyCreator.js"],"names":["toStringOrNull","ColumnKeyCreator","existingKeys","prototype","addExistingKeys","keys","i","length","getUniqueKey","colId","colField","count","idToTry"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,QAA+B,kBAA/B;;AACA,IAAIC,gBAAgB;AAAG;AAAe,YAAY;AAC9C,WAASA,gBAAT,GAA4B;AACxB,SAAKC,YAAL,GAAoB,EAApB;AACH;;AACDD,EAAAA,gBAAgB,CAACE,SAAjB,CAA2BC,eAA3B,GAA6C,UAAUC,IAAV,EAAgB;AACzD,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,WAAKJ,YAAL,CAAkBG,IAAI,CAACC,CAAD,CAAtB,IAA6B,IAA7B;AACH;AACJ,GAJD;;AAKAL,EAAAA,gBAAgB,CAACE,SAAjB,CAA2BK,YAA3B,GAA0C,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AACjE;AACAD,IAAAA,KAAK,GAAGT,cAAc,CAACS,KAAD,CAAtB;AACA,QAAIE,KAAK,GAAG,CAAZ;;AACA,WAAO,IAAP,EAAa;AACT,UAAIC,OAAO,GAAG,KAAK,CAAnB;;AACA,UAAIH,KAAJ,EAAW;AACPG,QAAAA,OAAO,GAAGH,KAAV;;AACA,YAAIE,KAAK,KAAK,CAAd,EAAiB;AACbC,UAAAA,OAAO,IAAI,MAAMD,KAAjB;AACH;AACJ,OALD,MAMK,IAAID,QAAJ,EAAc;AACfE,QAAAA,OAAO,GAAGF,QAAV;;AACA,YAAIC,KAAK,KAAK,CAAd,EAAiB;AACbC,UAAAA,OAAO,IAAI,MAAMD,KAAjB;AACH;AACJ,OALI,MAMA;AACDC,QAAAA,OAAO,GAAG,KAAKD,KAAf;AACH;;AACD,UAAI,CAAC,KAAKT,YAAL,CAAkBU,OAAlB,CAAL,EAAiC;AAC7B,aAAKV,YAAL,CAAkBU,OAAlB,IAA6B,IAA7B;AACA,eAAOA,OAAP;AACH;;AACDD,MAAAA,KAAK;AACR;AACJ,GA3BD;;AA4BA,SAAOV,gBAAP;AACH,CAtCqC,EAAtC;;AAuCA,SAASA,gBAAT","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n// class returns a unique id to use for the column. it checks the existing columns, and if the requested\n// id is already taken, it will start appending numbers until it gets a unique id.\n// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}\n// if no field or id provided in the col, it will try the ids of natural numbers\nimport { toStringOrNull } from \"../utils/generic\";\nvar ColumnKeyCreator = /** @class */ (function () {\n    function ColumnKeyCreator() {\n        this.existingKeys = {};\n    }\n    ColumnKeyCreator.prototype.addExistingKeys = function (keys) {\n        for (var i = 0; i < keys.length; i++) {\n            this.existingKeys[keys[i]] = true;\n        }\n    };\n    ColumnKeyCreator.prototype.getUniqueKey = function (colId, colField) {\n        // in case user passed in number for colId, convert to string\n        colId = toStringOrNull(colId);\n        var count = 0;\n        while (true) {\n            var idToTry = void 0;\n            if (colId) {\n                idToTry = colId;\n                if (count !== 0) {\n                    idToTry += '_' + count;\n                }\n            }\n            else if (colField) {\n                idToTry = colField;\n                if (count !== 0) {\n                    idToTry += '_' + count;\n                }\n            }\n            else {\n                idToTry = '' + count;\n            }\n            if (!this.existingKeys[idToTry]) {\n                this.existingKeys[idToTry] = true;\n                return idToTry;\n            }\n            count++;\n        }\n    };\n    return ColumnKeyCreator;\n}());\nexport { ColumnKeyCreator };\n"]},"metadata":{},"sourceType":"module"}