{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { loadTemplate, isNodeOrElement } from './dom';\nimport { setAriaRole } from './aria'; //\n// IMPORTANT NOTE!\n//\n// If you change the list below, copy/paste the new content into the docs page javascript-grid-icons\n//\n\nexport var iconNameClassMap = {\n  // header column group shown when expanded (click to contract)\n  columnGroupOpened: 'expanded',\n  // header column group shown when contracted (click to expand)\n  columnGroupClosed: 'contracted',\n  // tool panel column group contracted (click to expand)\n  columnSelectClosed: 'tree-closed',\n  // tool panel column group expanded (click to contract)\n  columnSelectOpen: 'tree-open',\n  // column tool panel header expand/collapse all button, shown when some children are expanded and\n  //     others are collapsed\n  columnSelectIndeterminate: 'tree-indeterminate',\n  // shown on ghost icon while dragging column to the side of the grid to pin\n  columnMovePin: 'pin',\n  // shown on ghost icon while dragging over part of the page that is not a drop zone\n  columnMoveHide: 'eye-slash',\n  // shown on ghost icon while dragging columns to reorder\n  columnMoveMove: 'arrows',\n  // animating icon shown when dragging a column to the right of the grid causes horizontal scrolling\n  columnMoveLeft: 'left',\n  // animating icon shown when dragging a column to the left of the grid causes horizontal scrolling\n  columnMoveRight: 'right',\n  // shown on ghost icon while dragging over Row Groups drop zone\n  columnMoveGroup: 'group',\n  // shown on ghost icon while dragging over Values drop zone\n  columnMoveValue: 'aggregation',\n  // shown on ghost icon while dragging over pivot drop zone\n  columnMovePivot: 'pivot',\n  // shown on ghost icon while dragging over drop zone that doesn't support it, e.g.\n  //     string column over aggregation drop zone\n  dropNotAllowed: 'not-allowed',\n  // shown on row group when contracted (click to expand)\n  groupContracted: 'tree-closed',\n  // shown on row group when expanded (click to contract)\n  groupExpanded: 'tree-open',\n  // context menu chart item\n  chart: 'chart',\n  // chart window title bar\n  close: 'cross',\n  // X (remove) on column 'pill' after adding it to a drop zone list\n  cancel: 'cancel',\n  // indicates the currently active pin state in the \"Pin column\" sub-menu of the column menu\n  check: 'tick',\n  // \"go to first\" button in pagination controls\n  first: 'first',\n  // \"go to previous\" button in pagination controls\n  previous: 'previous',\n  // \"go to next\" button in pagination controls\n  next: 'next',\n  // \"go to last\" button in pagination controls\n  last: 'last',\n  // shown on top right of chart when chart is linked to range data (click to unlink)\n  linked: 'linked',\n  // shown on top right of chart when chart is not linked to range data (click to link)\n  unlinked: 'unlinked',\n  // \"Choose colour\" button on chart settings tab\n  colorPicker: 'color-picker',\n  // rotating spinner shown by the loading cell renderer\n  groupLoading: 'loading',\n  // button to launch enterprise column menu\n  menu: 'menu',\n  // filter tool panel tab\n  filter: 'filter',\n  // column tool panel tab\n  columns: 'columns',\n  // button in chart regular size window title bar (click to maximise)\n  maximize: 'maximize',\n  // button in chart maximised window title bar (click to make regular size)\n  minimize: 'minimize',\n  // \"Pin column\" item in column header menu\n  menuPin: 'pin',\n  // \"Value aggregation\" column menu item (shown on numeric columns when grouping is active)\"\n  menuValue: 'aggregation',\n  // \"Group by {column-name}\" item in column header menu\n  menuAddRowGroup: 'group',\n  // \"Un-Group by {column-name}\" item in column header menu\n  menuRemoveRowGroup: 'group',\n  // context menu copy item\n  clipboardCopy: 'copy',\n  // context menu paste item\n  clipboardPaste: 'paste',\n  // identifies the pivot drop zone\n  pivotPanel: 'pivot',\n  // \"Row groups\" drop zone in column tool panel\n  rowGroupPanel: 'group',\n  // columns tool panel Values drop zone\n  valuePanel: 'aggregation',\n  // drag handle used to pick up draggable columns\n  columnDrag: 'grip',\n  // drag handle used to pick up draggable rows\n  rowDrag: 'grip',\n  // context menu export item\n  save: 'save',\n  // csv export\n  csvExport: 'csv',\n  // excel export,\n  excelExport: 'excel',\n  // icon on dropdown editors\n  smallDown: 'small-down',\n  // version of small-right used in RTL mode\n  smallLeft: 'small-left',\n  // separater between column 'pills' when you add multiple columns to the header drop zone\n  smallRight: 'small-right',\n  smallUp: 'small-up',\n  // show on column header when column is sorted ascending\n  sortAscending: 'asc',\n  // show on column header when column is sorted descending\n  sortDescending: 'desc',\n  // show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true\n  sortUnSort: 'none'\n};\n/**\n * If icon provided, use this (either a string, or a function callback).\n * if not, then use the default icon from the theme\n * @param {string} iconName\n * @param {GridOptionsWrapper} gridOptionsWrapper\n * @param {Column | null} [column]\n * @returns {HTMLElement}\n */\n\nexport function createIcon(iconName, gridOptionsWrapper, column) {\n  var iconContents = createIconNoSpan(iconName, gridOptionsWrapper, column);\n\n  if (iconContents && iconContents.className.indexOf('ag-icon') > -1) {\n    return iconContents;\n  }\n\n  var eResult = document.createElement('span');\n  eResult.appendChild(iconContents);\n  return eResult;\n}\nexport function createIconNoSpan(iconName, gridOptionsWrapper, column, forceCreate) {\n  var userProvidedIcon = null; // check col for icon first\n\n  var icons = column && column.getColDef().icons;\n\n  if (icons) {\n    userProvidedIcon = icons[iconName];\n  } // if not in col, try grid options\n\n\n  if (gridOptionsWrapper && !userProvidedIcon) {\n    var optionsIcons = gridOptionsWrapper.getIcons();\n\n    if (optionsIcons) {\n      userProvidedIcon = optionsIcons[iconName];\n    }\n  } // now if user provided, use it\n\n\n  if (userProvidedIcon) {\n    var rendererResult = void 0;\n\n    if (typeof userProvidedIcon === 'function') {\n      rendererResult = userProvidedIcon();\n    } else if (typeof userProvidedIcon === 'string') {\n      rendererResult = userProvidedIcon;\n    } else {\n      throw new Error('icon from grid options needs to be a string or a function');\n    }\n\n    if (typeof rendererResult === 'string') {\n      return loadTemplate(rendererResult);\n    }\n\n    if (isNodeOrElement(rendererResult)) {\n      return rendererResult;\n    }\n\n    console.warn('AG Grid: iconRenderer should return back a string or a dom object');\n  } else {\n    var span = document.createElement('span');\n    var cssClass = iconNameClassMap[iconName];\n\n    if (!cssClass) {\n      if (!forceCreate) {\n        console.warn(\"AG Grid: Did not find icon \" + iconName);\n        cssClass = '';\n      } else {\n        cssClass = iconName;\n      }\n    }\n\n    span.setAttribute('class', \"ag-icon ag-icon-\" + cssClass);\n    span.setAttribute('unselectable', 'on');\n    setAriaRole(span, 'presentation');\n    return span;\n  }\n}","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/utils/icon.js"],"names":["loadTemplate","isNodeOrElement","setAriaRole","iconNameClassMap","columnGroupOpened","columnGroupClosed","columnSelectClosed","columnSelectOpen","columnSelectIndeterminate","columnMovePin","columnMoveHide","columnMoveMove","columnMoveLeft","columnMoveRight","columnMoveGroup","columnMoveValue","columnMovePivot","dropNotAllowed","groupContracted","groupExpanded","chart","close","cancel","check","first","previous","next","last","linked","unlinked","colorPicker","groupLoading","menu","filter","columns","maximize","minimize","menuPin","menuValue","menuAddRowGroup","menuRemoveRowGroup","clipboardCopy","clipboardPaste","pivotPanel","rowGroupPanel","valuePanel","columnDrag","rowDrag","save","csvExport","excelExport","smallDown","smallLeft","smallRight","smallUp","sortAscending","sortDescending","sortUnSort","createIcon","iconName","gridOptionsWrapper","column","iconContents","createIconNoSpan","className","indexOf","eResult","document","createElement","appendChild","forceCreate","userProvidedIcon","icons","getColDef","optionsIcons","getIcons","rendererResult","Error","console","warn","span","cssClass","setAttribute"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { loadTemplate, isNodeOrElement } from './dom';\nimport { setAriaRole } from './aria';\n//\n// IMPORTANT NOTE!\n//\n// If you change the list below, copy/paste the new content into the docs page javascript-grid-icons\n//\nexport var iconNameClassMap = {\n    // header column group shown when expanded (click to contract)\n    columnGroupOpened: 'expanded',\n    // header column group shown when contracted (click to expand)\n    columnGroupClosed: 'contracted',\n    // tool panel column group contracted (click to expand)\n    columnSelectClosed: 'tree-closed',\n    // tool panel column group expanded (click to contract)\n    columnSelectOpen: 'tree-open',\n    // column tool panel header expand/collapse all button, shown when some children are expanded and\n    //     others are collapsed\n    columnSelectIndeterminate: 'tree-indeterminate',\n    // shown on ghost icon while dragging column to the side of the grid to pin\n    columnMovePin: 'pin',\n    // shown on ghost icon while dragging over part of the page that is not a drop zone\n    columnMoveHide: 'eye-slash',\n    // shown on ghost icon while dragging columns to reorder\n    columnMoveMove: 'arrows',\n    // animating icon shown when dragging a column to the right of the grid causes horizontal scrolling\n    columnMoveLeft: 'left',\n    // animating icon shown when dragging a column to the left of the grid causes horizontal scrolling\n    columnMoveRight: 'right',\n    // shown on ghost icon while dragging over Row Groups drop zone\n    columnMoveGroup: 'group',\n    // shown on ghost icon while dragging over Values drop zone\n    columnMoveValue: 'aggregation',\n    // shown on ghost icon while dragging over pivot drop zone\n    columnMovePivot: 'pivot',\n    // shown on ghost icon while dragging over drop zone that doesn't support it, e.g.\n    //     string column over aggregation drop zone\n    dropNotAllowed: 'not-allowed',\n    // shown on row group when contracted (click to expand)\n    groupContracted: 'tree-closed',\n    // shown on row group when expanded (click to contract)\n    groupExpanded: 'tree-open',\n    // context menu chart item\n    chart: 'chart',\n    // chart window title bar\n    close: 'cross',\n    // X (remove) on column 'pill' after adding it to a drop zone list\n    cancel: 'cancel',\n    // indicates the currently active pin state in the \"Pin column\" sub-menu of the column menu\n    check: 'tick',\n    // \"go to first\" button in pagination controls\n    first: 'first',\n    // \"go to previous\" button in pagination controls\n    previous: 'previous',\n    // \"go to next\" button in pagination controls\n    next: 'next',\n    // \"go to last\" button in pagination controls\n    last: 'last',\n    // shown on top right of chart when chart is linked to range data (click to unlink)\n    linked: 'linked',\n    // shown on top right of chart when chart is not linked to range data (click to link)\n    unlinked: 'unlinked',\n    // \"Choose colour\" button on chart settings tab\n    colorPicker: 'color-picker',\n    // rotating spinner shown by the loading cell renderer\n    groupLoading: 'loading',\n    // button to launch enterprise column menu\n    menu: 'menu',\n    // filter tool panel tab\n    filter: 'filter',\n    // column tool panel tab\n    columns: 'columns',\n    // button in chart regular size window title bar (click to maximise)\n    maximize: 'maximize',\n    // button in chart maximised window title bar (click to make regular size)\n    minimize: 'minimize',\n    // \"Pin column\" item in column header menu\n    menuPin: 'pin',\n    // \"Value aggregation\" column menu item (shown on numeric columns when grouping is active)\"\n    menuValue: 'aggregation',\n    // \"Group by {column-name}\" item in column header menu\n    menuAddRowGroup: 'group',\n    // \"Un-Group by {column-name}\" item in column header menu\n    menuRemoveRowGroup: 'group',\n    // context menu copy item\n    clipboardCopy: 'copy',\n    // context menu paste item\n    clipboardPaste: 'paste',\n    // identifies the pivot drop zone\n    pivotPanel: 'pivot',\n    // \"Row groups\" drop zone in column tool panel\n    rowGroupPanel: 'group',\n    // columns tool panel Values drop zone\n    valuePanel: 'aggregation',\n    // drag handle used to pick up draggable columns\n    columnDrag: 'grip',\n    // drag handle used to pick up draggable rows\n    rowDrag: 'grip',\n    // context menu export item\n    save: 'save',\n    // csv export\n    csvExport: 'csv',\n    // excel export,\n    excelExport: 'excel',\n    // icon on dropdown editors\n    smallDown: 'small-down',\n    // version of small-right used in RTL mode\n    smallLeft: 'small-left',\n    // separater between column 'pills' when you add multiple columns to the header drop zone\n    smallRight: 'small-right',\n    smallUp: 'small-up',\n    // show on column header when column is sorted ascending\n    sortAscending: 'asc',\n    // show on column header when column is sorted descending\n    sortDescending: 'desc',\n    // show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true\n    sortUnSort: 'none'\n};\n/**\n * If icon provided, use this (either a string, or a function callback).\n * if not, then use the default icon from the theme\n * @param {string} iconName\n * @param {GridOptionsWrapper} gridOptionsWrapper\n * @param {Column | null} [column]\n * @returns {HTMLElement}\n */\nexport function createIcon(iconName, gridOptionsWrapper, column) {\n    var iconContents = createIconNoSpan(iconName, gridOptionsWrapper, column);\n    if (iconContents && iconContents.className.indexOf('ag-icon') > -1) {\n        return iconContents;\n    }\n    var eResult = document.createElement('span');\n    eResult.appendChild(iconContents);\n    return eResult;\n}\nexport function createIconNoSpan(iconName, gridOptionsWrapper, column, forceCreate) {\n    var userProvidedIcon = null;\n    // check col for icon first\n    var icons = column && column.getColDef().icons;\n    if (icons) {\n        userProvidedIcon = icons[iconName];\n    }\n    // if not in col, try grid options\n    if (gridOptionsWrapper && !userProvidedIcon) {\n        var optionsIcons = gridOptionsWrapper.getIcons();\n        if (optionsIcons) {\n            userProvidedIcon = optionsIcons[iconName];\n        }\n    }\n    // now if user provided, use it\n    if (userProvidedIcon) {\n        var rendererResult = void 0;\n        if (typeof userProvidedIcon === 'function') {\n            rendererResult = userProvidedIcon();\n        }\n        else if (typeof userProvidedIcon === 'string') {\n            rendererResult = userProvidedIcon;\n        }\n        else {\n            throw new Error('icon from grid options needs to be a string or a function');\n        }\n        if (typeof rendererResult === 'string') {\n            return loadTemplate(rendererResult);\n        }\n        if (isNodeOrElement(rendererResult)) {\n            return rendererResult;\n        }\n        console.warn('AG Grid: iconRenderer should return back a string or a dom object');\n    }\n    else {\n        var span = document.createElement('span');\n        var cssClass = iconNameClassMap[iconName];\n        if (!cssClass) {\n            if (!forceCreate) {\n                console.warn(\"AG Grid: Did not find icon \" + iconName);\n                cssClass = '';\n            }\n            else {\n                cssClass = iconName;\n            }\n        }\n        span.setAttribute('class', \"ag-icon ag-icon-\" + cssClass);\n        span.setAttribute('unselectable', 'on');\n        setAriaRole(span, 'presentation');\n        return span;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}