{"ast":null,"code":"// @ag-grid-community/react v26.2.0\n\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar PortalManager =\n/** @class */\nfunction () {\n  function PortalManager(parent, wrappingElement, maxComponentCreationTimeMs) {\n    this.destroyed = false;\n    this.portals = [];\n    this.hasPendingPortalUpdate = false;\n    this.wrappingElement = wrappingElement ? wrappingElement : 'div';\n    this.parent = parent;\n    this.maxComponentCreationTimeMs = maxComponentCreationTimeMs ? maxComponentCreationTimeMs : PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS;\n  }\n\n  PortalManager.prototype.getPortals = function () {\n    return this.portals;\n  };\n\n  PortalManager.prototype.destroy = function () {\n    this.destroyed = true;\n  };\n\n  PortalManager.prototype.destroyPortal = function (portal) {\n    this.portals = this.portals.filter(function (curPortal) {\n      return curPortal !== portal;\n    });\n    this.batchUpdate();\n  };\n\n  PortalManager.prototype.getComponentWrappingElement = function () {\n    return this.wrappingElement;\n  };\n\n  PortalManager.prototype.mountReactPortal = function (portal, reactComponent, resolve) {\n    this.portals = __spreadArrays(this.portals, [portal]);\n    this.waitForInstance(reactComponent, resolve);\n    this.batchUpdate();\n  };\n\n  PortalManager.prototype.updateReactPortal = function (oldPortal, newPortal) {\n    this.portals[this.portals.indexOf(oldPortal)] = newPortal;\n    this.batchUpdate();\n  };\n\n  PortalManager.prototype.batchUpdate = function () {\n    var _this = this;\n\n    if (this.hasPendingPortalUpdate) {\n      return;\n    }\n\n    setTimeout(function () {\n      if (!_this.destroyed) {\n        // destroyed?\n        _this.parent.forceUpdate(function () {\n          _this.hasPendingPortalUpdate = false;\n        });\n      }\n    });\n    this.hasPendingPortalUpdate = true;\n  };\n\n  PortalManager.prototype.waitForInstance = function (reactComponent, resolve, startTime) {\n    var _this = this;\n\n    if (startTime === void 0) {\n      startTime = Date.now();\n    } // if the grid has been destroyed in the meantime just resolve\n\n\n    if (this.destroyed) {\n      resolve(null);\n      return;\n    }\n\n    if (reactComponent.rendered()) {\n      resolve(reactComponent);\n    } else {\n      if (Date.now() - startTime >= this.maxComponentCreationTimeMs && !this.hasPendingPortalUpdate) {\n        // last check - we check if this is a null value being rendered - we do this last as using SSR to check the value\n        // can mess up contexts\n        if (reactComponent.isNullValue()) {\n          resolve(reactComponent);\n          return;\n        }\n\n        console.error(\"AG Grid: React Component '\" + reactComponent.getReactComponentName() + \"' not created within \" + this.maxComponentCreationTimeMs + \"ms\");\n        return;\n      }\n\n      window.setTimeout(function () {\n        _this.waitForInstance(reactComponent, resolve, startTime);\n      });\n    }\n  };\n\n  PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS = 1000; // a second should be more than enough to instantiate a component\n\n  return PortalManager;\n}();\n\nexports.PortalManager = PortalManager;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/react/lib/shared/shared/portalManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, ReactPortal } from \"react\";\nimport { ReactComponent } from \"./reactComponent\";\n\nexport class PortalManager {\n\n    private static MAX_COMPONENT_CREATION_TIME_IN_MS: number = 1000; // a second should be more than enough to instantiate a component\n\n    private parent: Component;\n    private wrappingElement: string;\n    private destroyed = false;\n\n    private portals: ReactPortal[] = [];\n    private hasPendingPortalUpdate = false;\n\n    private maxComponentCreationTimeMs: number;\n\n    constructor(parent: Component, wrappingElement?: string, maxComponentCreationTimeMs?: number) {\n        this.wrappingElement = wrappingElement ? wrappingElement : 'div';\n        this.parent = parent;\n        this.maxComponentCreationTimeMs = maxComponentCreationTimeMs ? maxComponentCreationTimeMs : PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS;\n    }\n\n    public getPortals(): ReactPortal[] {\n        return this.portals;\n    }\n\n    public destroy(): void {\n        this.destroyed = true;\n    }\n\n    public destroyPortal(portal: ReactPortal): void {\n        this.portals = this.portals.filter(curPortal => curPortal !== portal);\n        this.batchUpdate();\n    }\n\n    public getComponentWrappingElement(): string | undefined {\n        return this.wrappingElement;\n    }\n\n    public mountReactPortal(portal: ReactPortal, reactComponent: ReactComponent, resolve: (value: any) => void): void {\n        this.portals = [...this.portals, portal];\n        this.waitForInstance(reactComponent, resolve);\n        this.batchUpdate();\n    }\n\n    public updateReactPortal(oldPortal: ReactPortal, newPortal: ReactPortal): void {\n        this.portals[this.portals.indexOf(oldPortal)] = newPortal;\n        this.batchUpdate();\n    }\n\n    private batchUpdate(): void {\n        if (this.hasPendingPortalUpdate) {\n            return;\n        }\n\n        setTimeout(() => {\n            if (!this.destroyed) { // destroyed?\n                this.parent.forceUpdate(() => {\n                    this.hasPendingPortalUpdate = false;\n                });\n            }\n        });\n\n        this.hasPendingPortalUpdate = true;\n    }\n\n    waitForInstance(reactComponent: ReactComponent, resolve: (value: any) => void, startTime = Date.now()): void {\n        // if the grid has been destroyed in the meantime just resolve\n        if (this.destroyed) {\n            resolve(null);\n            return;\n        }\n\n        if (reactComponent.rendered()) {\n            resolve(reactComponent);\n        } else {\n            if (Date.now() - startTime >= this.maxComponentCreationTimeMs! && !this.hasPendingPortalUpdate) {\n                // last check - we check if this is a null value being rendered - we do this last as using SSR to check the value\n                // can mess up contexts\n                if (reactComponent.isNullValue()) {\n                    resolve(reactComponent);\n                    return;\n                }\n\n                console.error(`AG Grid: React Component '${reactComponent.getReactComponentName()}' not created within ${this.maxComponentCreationTimeMs}ms`);\n                return;\n            }\n\n            window.setTimeout(() => {\n                this.waitForInstance(reactComponent, resolve, startTime);\n            });\n        }\n    }\n}"]},"metadata":{},"sourceType":"script"}