{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/Group\n */\n\n\nimport BaseLayer from './Base.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport SourceState from '../source/State.js';\nimport { assert } from '../asserts.js';\nimport { assign, clear } from '../obj.js';\nimport { getIntersection } from '../extent.js';\nimport { getUid } from '../util.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {'addlayer'|'removelayer'} EventType\n */\n\n/**\n * @classdesc\n * A layer group triggers 'addlayer' and 'removelayer' events when layers are added to or removed from\n * the group or one of its child groups.  When a layer group is added to or removed from another layer group,\n * a single event will be triggered (instead of one per layer in the group added or removed).\n */\n\nvar GroupEvent =\n/** @class */\nfunction (_super) {\n  __extends(GroupEvent, _super);\n  /**\n   * @param {EventType} type The event type.\n   * @param {BaseLayer} layer The layer.\n   */\n\n\n  function GroupEvent(type, layer) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The added or removed layer.\n     * @type {BaseLayer}\n     * @api\n     */\n\n\n    _this.layer = layer;\n    return _this;\n  }\n\n  return GroupEvent;\n}(Event);\n\nexport { GroupEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:layers', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:layers', Return>} GroupOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<import(\"./Base.js\").default>|import(\"../Collection.js\").default<import(\"./Base.js\").default>} [layers] Child layers.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\n\nvar Property = {\n  LAYERS: 'layers'\n};\n/**\n * @classdesc\n * A {@link module:ol/Collection~Collection} of layers that are handled together.\n *\n * A generic `change` event is triggered when the group/Collection changes.\n *\n * @api\n */\n\nvar LayerGroup =\n/** @class */\nfunction (_super) {\n  __extends(LayerGroup, _super);\n  /**\n   * @param {Options} [opt_options] Layer options.\n   */\n\n\n  function LayerGroup(opt_options) {\n    var _this = this;\n\n    var options = opt_options || {};\n    var baseOptions =\n    /** @type {Options} */\n    assign({}, options);\n    delete baseOptions.layers;\n    var layers = options.layers;\n    _this = _super.call(this, baseOptions) || this;\n    /***\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.on;\n    /***\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {GroupOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n\n    _this.layersListenerKeys_ = [];\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n\n    _this.listenerKeys_ = {};\n\n    _this.addChangeListener(Property.LAYERS, _this.handleLayersChanged_);\n\n    if (layers) {\n      if (Array.isArray(layers)) {\n        layers = new Collection(layers.slice(), {\n          unique: true\n        });\n      } else {\n        assert(typeof\n        /** @type {?} */\n        layers.getArray === 'function', 43); // Expected `layers` to be an array or a `Collection`\n      }\n    } else {\n      layers = new Collection(undefined, {\n        unique: true\n      });\n    }\n\n    _this.setLayers(layers);\n\n    return _this;\n  }\n  /**\n   * @private\n   */\n\n\n  LayerGroup.prototype.handleLayerChange_ = function () {\n    this.changed();\n  };\n  /**\n   * @private\n   */\n\n\n  LayerGroup.prototype.handleLayersChanged_ = function () {\n    this.layersListenerKeys_.forEach(unlistenByKey);\n    this.layersListenerKeys_.length = 0;\n    var layers = this.getLayers();\n    this.layersListenerKeys_.push(listen(layers, CollectionEventType.ADD, this.handleLayersAdd_, this), listen(layers, CollectionEventType.REMOVE, this.handleLayersRemove_, this));\n\n    for (var id in this.listenerKeys_) {\n      this.listenerKeys_[id].forEach(unlistenByKey);\n    }\n\n    clear(this.listenerKeys_);\n    var layersArray = layers.getArray();\n\n    for (var i = 0, ii = layersArray.length; i < ii; i++) {\n      var layer = layersArray[i];\n      this.registerLayerListeners_(layer);\n      this.dispatchEvent(new GroupEvent('addlayer', layer));\n    }\n\n    this.changed();\n  };\n  /**\n   * @param {BaseLayer} layer The layer.\n   */\n\n\n  LayerGroup.prototype.registerLayerListeners_ = function (layer) {\n    var listenerKeys = [listen(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this), listen(layer, EventType.CHANGE, this.handleLayerChange_, this)];\n\n    if (layer instanceof LayerGroup) {\n      listenerKeys.push(listen(layer, 'addlayer', this.handleLayerGroupAdd_, this), listen(layer, 'removelayer', this.handleLayerGroupRemove_, this));\n    }\n\n    this.listenerKeys_[getUid(layer)] = listenerKeys;\n  };\n  /**\n   * @param {GroupEvent} event The layer group event.\n   */\n\n\n  LayerGroup.prototype.handleLayerGroupAdd_ = function (event) {\n    this.dispatchEvent(new GroupEvent('addlayer', event.layer));\n  };\n  /**\n   * @param {GroupEvent} event The layer group event.\n   */\n\n\n  LayerGroup.prototype.handleLayerGroupRemove_ = function (event) {\n    this.dispatchEvent(new GroupEvent('removelayer', event.layer));\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} collectionEvent CollectionEvent.\n   * @private\n   */\n\n\n  LayerGroup.prototype.handleLayersAdd_ = function (collectionEvent) {\n    var layer =\n    /** @type {import(\"./Base.js\").default} */\n    collectionEvent.element;\n    this.registerLayerListeners_(layer);\n    this.dispatchEvent(new GroupEvent('addlayer', layer));\n    this.changed();\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} collectionEvent CollectionEvent.\n   * @private\n   */\n\n\n  LayerGroup.prototype.handleLayersRemove_ = function (collectionEvent) {\n    var layer =\n    /** @type {import(\"./Base.js\").default} */\n    collectionEvent.element;\n    var key = getUid(layer);\n    this.listenerKeys_[key].forEach(unlistenByKey);\n    delete this.listenerKeys_[key];\n    this.dispatchEvent(new GroupEvent('removelayer', layer));\n    this.changed();\n  };\n  /**\n   * Returns the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}\n   * in this group.\n   * @return {!import(\"../Collection.js\").default<import(\"./Base.js\").default>} Collection of\n   *   {@link module:ol/layer/Base layers} that are part of this group.\n   * @observable\n   * @api\n   */\n\n\n  LayerGroup.prototype.getLayers = function () {\n    return (\n      /** @type {!import(\"../Collection.js\").default<import(\"./Base.js\").default>} */\n      this.get(Property.LAYERS)\n    );\n  };\n  /**\n   * Set the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}\n   * in this group.\n   * @param {!import(\"../Collection.js\").default<import(\"./Base.js\").default>} layers Collection of\n   *   {@link module:ol/layer/Base layers} that are part of this group.\n   * @observable\n   * @api\n   */\n\n\n  LayerGroup.prototype.setLayers = function (layers) {\n    var collection = this.getLayers();\n\n    if (collection) {\n      var currentLayers = collection.getArray();\n\n      for (var i = 0, ii = currentLayers.length; i < ii; ++i) {\n        this.dispatchEvent(new GroupEvent('removelayer', currentLayers[i]));\n      }\n    }\n\n    this.set(Property.LAYERS, layers);\n  };\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [opt_array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n\n\n  LayerGroup.prototype.getLayersArray = function (opt_array) {\n    var array = opt_array !== undefined ? opt_array : [];\n    this.getLayers().forEach(function (layer) {\n      layer.getLayersArray(array);\n    });\n    return array;\n  };\n  /**\n   * Get the layer states list and use this groups z-index as the default\n   * for all layers in this and nested groups, if it is unset at this point.\n   * If opt_states is not provided and this group's z-index is undefined\n   * 0 is used a the default z-index.\n   * @param {Array<import(\"./Layer.js\").State>} [opt_states] Optional list\n   * of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n\n\n  LayerGroup.prototype.getLayerStatesArray = function (opt_states) {\n    var states = opt_states !== undefined ? opt_states : [];\n    var pos = states.length;\n    this.getLayers().forEach(function (layer) {\n      layer.getLayerStatesArray(states);\n    });\n    var ownLayerState = this.getLayerState();\n    var defaultZIndex = ownLayerState.zIndex;\n\n    if (!opt_states && ownLayerState.zIndex === undefined) {\n      defaultZIndex = 0;\n    }\n\n    for (var i = pos, ii = states.length; i < ii; i++) {\n      var layerState = states[i];\n      layerState.opacity *= ownLayerState.opacity;\n      layerState.visible = layerState.visible && ownLayerState.visible;\n      layerState.maxResolution = Math.min(layerState.maxResolution, ownLayerState.maxResolution);\n      layerState.minResolution = Math.max(layerState.minResolution, ownLayerState.minResolution);\n      layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);\n      layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);\n\n      if (ownLayerState.extent !== undefined) {\n        if (layerState.extent !== undefined) {\n          layerState.extent = getIntersection(layerState.extent, ownLayerState.extent);\n        } else {\n          layerState.extent = ownLayerState.extent;\n        }\n      }\n\n      if (layerState.zIndex === undefined) {\n        layerState.zIndex = defaultZIndex;\n      }\n    }\n\n    return states;\n  };\n  /**\n   * @return {import(\"../source/State.js\").default} Source state.\n   */\n\n\n  LayerGroup.prototype.getSourceState = function () {\n    return SourceState.READY;\n  };\n\n  return LayerGroup;\n}(BaseLayer);\n\nexport default LayerGroup;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/ol/src/layer/Group.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @module ol/layer/Group\n */\nimport BaseLayer from './Base.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport SourceState from '../source/State.js';\nimport {assert} from '../asserts.js';\nimport {assign, clear} from '../obj.js';\nimport {getIntersection} from '../extent.js';\nimport {getUid} from '../util.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {'addlayer'|'removelayer'} EventType\n */\n\n/**\n * @classdesc\n * A layer group triggers 'addlayer' and 'removelayer' events when layers are added to or removed from\n * the group or one of its child groups.  When a layer group is added to or removed from another layer group,\n * a single event will be triggered (instead of one per layer in the group added or removed).\n */\nexport class GroupEvent extends Event {\n  /**\n   * @param {EventType} type The event type.\n   * @param {BaseLayer} layer The layer.\n   */\n  constructor(type, layer) {\n    super(type);\n\n    /**\n     * The added or removed layer.\n     * @type {BaseLayer}\n     * @api\n     */\n    this.layer = layer;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:layers', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:layers', Return>} GroupOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<import(\"./Base.js\").default>|import(\"../Collection.js\").default<import(\"./Base.js\").default>} [layers] Child layers.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  LAYERS: 'layers',\n};\n\n/**\n * @classdesc\n * A {@link module:ol/Collection~Collection} of layers that are handled together.\n *\n * A generic `change` event is triggered when the group/Collection changes.\n *\n * @api\n */\nclass LayerGroup extends BaseLayer {\n  /**\n   * @param {Options} [opt_options] Layer options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n    const baseOptions = /** @type {Options} */ (assign({}, options));\n    delete baseOptions.layers;\n\n    let layers = options.layers;\n\n    super(baseOptions);\n\n    /***\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {GroupOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.layersListenerKeys_ = [];\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.listenerKeys_ = {};\n\n    this.addChangeListener(Property.LAYERS, this.handleLayersChanged_);\n\n    if (layers) {\n      if (Array.isArray(layers)) {\n        layers = new Collection(layers.slice(), {unique: true});\n      } else {\n        assert(typeof (/** @type {?} */ (layers).getArray) === 'function', 43); // Expected `layers` to be an array or a `Collection`\n      }\n    } else {\n      layers = new Collection(undefined, {unique: true});\n    }\n\n    this.setLayers(layers);\n  }\n\n  /**\n   * @private\n   */\n  handleLayerChange_() {\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  handleLayersChanged_() {\n    this.layersListenerKeys_.forEach(unlistenByKey);\n    this.layersListenerKeys_.length = 0;\n\n    const layers = this.getLayers();\n    this.layersListenerKeys_.push(\n      listen(layers, CollectionEventType.ADD, this.handleLayersAdd_, this),\n      listen(layers, CollectionEventType.REMOVE, this.handleLayersRemove_, this)\n    );\n\n    for (const id in this.listenerKeys_) {\n      this.listenerKeys_[id].forEach(unlistenByKey);\n    }\n    clear(this.listenerKeys_);\n\n    const layersArray = layers.getArray();\n    for (let i = 0, ii = layersArray.length; i < ii; i++) {\n      const layer = layersArray[i];\n      this.registerLayerListeners_(layer);\n      this.dispatchEvent(new GroupEvent('addlayer', layer));\n    }\n    this.changed();\n  }\n\n  /**\n   * @param {BaseLayer} layer The layer.\n   */\n  registerLayerListeners_(layer) {\n    const listenerKeys = [\n      listen(\n        layer,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleLayerChange_,\n        this\n      ),\n      listen(layer, EventType.CHANGE, this.handleLayerChange_, this),\n    ];\n\n    if (layer instanceof LayerGroup) {\n      listenerKeys.push(\n        listen(layer, 'addlayer', this.handleLayerGroupAdd_, this),\n        listen(layer, 'removelayer', this.handleLayerGroupRemove_, this)\n      );\n    }\n\n    this.listenerKeys_[getUid(layer)] = listenerKeys;\n  }\n\n  /**\n   * @param {GroupEvent} event The layer group event.\n   */\n  handleLayerGroupAdd_(event) {\n    this.dispatchEvent(new GroupEvent('addlayer', event.layer));\n  }\n\n  /**\n   * @param {GroupEvent} event The layer group event.\n   */\n  handleLayerGroupRemove_(event) {\n    this.dispatchEvent(new GroupEvent('removelayer', event.layer));\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} collectionEvent CollectionEvent.\n   * @private\n   */\n  handleLayersAdd_(collectionEvent) {\n    const layer = /** @type {import(\"./Base.js\").default} */ (\n      collectionEvent.element\n    );\n    this.registerLayerListeners_(layer);\n    this.dispatchEvent(new GroupEvent('addlayer', layer));\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} collectionEvent CollectionEvent.\n   * @private\n   */\n  handleLayersRemove_(collectionEvent) {\n    const layer = /** @type {import(\"./Base.js\").default} */ (\n      collectionEvent.element\n    );\n    const key = getUid(layer);\n    this.listenerKeys_[key].forEach(unlistenByKey);\n    delete this.listenerKeys_[key];\n    this.dispatchEvent(new GroupEvent('removelayer', layer));\n    this.changed();\n  }\n\n  /**\n   * Returns the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}\n   * in this group.\n   * @return {!import(\"../Collection.js\").default<import(\"./Base.js\").default>} Collection of\n   *   {@link module:ol/layer/Base layers} that are part of this group.\n   * @observable\n   * @api\n   */\n  getLayers() {\n    return /** @type {!import(\"../Collection.js\").default<import(\"./Base.js\").default>} */ (\n      this.get(Property.LAYERS)\n    );\n  }\n\n  /**\n   * Set the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}\n   * in this group.\n   * @param {!import(\"../Collection.js\").default<import(\"./Base.js\").default>} layers Collection of\n   *   {@link module:ol/layer/Base layers} that are part of this group.\n   * @observable\n   * @api\n   */\n  setLayers(layers) {\n    const collection = this.getLayers();\n    if (collection) {\n      const currentLayers = collection.getArray();\n      for (let i = 0, ii = currentLayers.length; i < ii; ++i) {\n        this.dispatchEvent(new GroupEvent('removelayer', currentLayers[i]));\n      }\n    }\n\n    this.set(Property.LAYERS, layers);\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [opt_array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(opt_array) {\n    const array = opt_array !== undefined ? opt_array : [];\n    this.getLayers().forEach(function (layer) {\n      layer.getLayersArray(array);\n    });\n    return array;\n  }\n\n  /**\n   * Get the layer states list and use this groups z-index as the default\n   * for all layers in this and nested groups, if it is unset at this point.\n   * If opt_states is not provided and this group's z-index is undefined\n   * 0 is used a the default z-index.\n   * @param {Array<import(\"./Layer.js\").State>} [opt_states] Optional list\n   * of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(opt_states) {\n    const states = opt_states !== undefined ? opt_states : [];\n    const pos = states.length;\n\n    this.getLayers().forEach(function (layer) {\n      layer.getLayerStatesArray(states);\n    });\n\n    const ownLayerState = this.getLayerState();\n    let defaultZIndex = ownLayerState.zIndex;\n    if (!opt_states && ownLayerState.zIndex === undefined) {\n      defaultZIndex = 0;\n    }\n    for (let i = pos, ii = states.length; i < ii; i++) {\n      const layerState = states[i];\n      layerState.opacity *= ownLayerState.opacity;\n      layerState.visible = layerState.visible && ownLayerState.visible;\n      layerState.maxResolution = Math.min(\n        layerState.maxResolution,\n        ownLayerState.maxResolution\n      );\n      layerState.minResolution = Math.max(\n        layerState.minResolution,\n        ownLayerState.minResolution\n      );\n      layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);\n      layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);\n      if (ownLayerState.extent !== undefined) {\n        if (layerState.extent !== undefined) {\n          layerState.extent = getIntersection(\n            layerState.extent,\n            ownLayerState.extent\n          );\n        } else {\n          layerState.extent = ownLayerState.extent;\n        }\n      }\n      if (layerState.zIndex === undefined) {\n        layerState.zIndex = defaultZIndex;\n      }\n    }\n\n    return states;\n  }\n\n  /**\n   * @return {import(\"../source/State.js\").default} Source state.\n   */\n  getSourceState() {\n    return SourceState.READY;\n  }\n}\n\nexport default LayerGroup;\n"]},"metadata":{},"sourceType":"module"}