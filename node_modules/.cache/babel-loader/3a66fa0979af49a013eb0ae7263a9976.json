{"ast":null,"code":"/**\n * @module ol/MapBrowserEventHandler\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport EventType from './events/EventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport Target from './events/Target.js';\nimport { PASSIVE_EVENT_LISTENERS } from './has.js';\nimport { VOID } from './functions.js';\nimport { listen, unlistenByKey } from './events.js';\n\nvar MapBrowserEventHandler =\n/** @class */\nfunction (_super) {\n  __extends(MapBrowserEventHandler, _super);\n  /**\n   * @param {import(\"./PluggableMap.js\").default} map The map with the viewport to listen to events on.\n   * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.\n   */\n\n\n  function MapBrowserEventHandler(map, moveTolerance) {\n    var _this = _super.call(this, map) || this;\n    /**\n     * This is the element that we will listen to the real events on.\n     * @type {import(\"./PluggableMap.js\").default}\n     * @private\n     */\n\n\n    _this.map_ = map;\n    /**\n     * @type {any}\n     * @private\n     */\n\n    _this.clickTimeoutId_;\n    /**\n     * Emulate dblclick and singleclick. Will be true when only one pointer is active.\n     * @type {boolean}\n     */\n\n    _this.emulateClicks_ = false;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.dragging_ = false;\n    /**\n     * @type {!Array<import(\"./events.js\").EventsKey>}\n     * @private\n     */\n\n    _this.dragListenerKeys_ = [];\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;\n    /**\n     * The most recent \"down\" type event (or null if none have occurred).\n     * Set on pointerdown.\n     * @type {PointerEvent}\n     * @private\n     */\n\n    _this.down_ = null;\n\n    var element = _this.map_.getViewport();\n    /**\n     * @type {number}\n     * @private\n     */\n\n\n    _this.activePointers_ = 0;\n    /**\n     * @type {!Object<number, boolean>}\n     * @private\n     */\n\n    _this.trackedTouches_ = {};\n    _this.element_ = element;\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n\n    _this.pointerdownListenerKey_ = listen(element, PointerEventType.POINTERDOWN, _this.handlePointerDown_, _this);\n    /**\n     * @type {PointerEvent}\n     * @private\n     */\n\n    _this.originalPointerMoveEvent_;\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n\n    _this.relayedListenerKey_ = listen(element, PointerEventType.POINTERMOVE, _this.relayEvent_, _this);\n    /**\n     * @private\n     */\n\n    _this.boundHandleTouchMove_ = _this.handleTouchMove_.bind(_this);\n\n    _this.element_.addEventListener(EventType.TOUCHMOVE, _this.boundHandleTouchMove_, PASSIVE_EVENT_LISTENERS ? {\n      passive: false\n    } : false);\n\n    return _this;\n  }\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.emulateClick_ = function (pointerEvent) {\n    var newEvent = new MapBrowserEvent(MapBrowserEventType.CLICK, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent);\n\n    if (this.clickTimeoutId_ !== undefined) {\n      // double-click\n      clearTimeout(this.clickTimeoutId_);\n      this.clickTimeoutId_ = undefined;\n      newEvent = new MapBrowserEvent(MapBrowserEventType.DBLCLICK, this.map_, pointerEvent);\n      this.dispatchEvent(newEvent);\n    } else {\n      // click\n      this.clickTimeoutId_ = setTimeout(\n      /** @this {MapBrowserEventHandler} */\n      function () {\n        this.clickTimeoutId_ = undefined;\n        var newEvent = new MapBrowserEvent(MapBrowserEventType.SINGLECLICK, this.map_, pointerEvent);\n        this.dispatchEvent(newEvent);\n      }.bind(this), 250);\n    }\n  };\n  /**\n   * Keeps track on how many pointers are currently active.\n   *\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.updateActivePointers_ = function (pointerEvent) {\n    var event = pointerEvent;\n\n    if (event.type == MapBrowserEventType.POINTERUP || event.type == MapBrowserEventType.POINTERCANCEL) {\n      delete this.trackedTouches_[event.pointerId];\n    } else if (event.type == MapBrowserEventType.POINTERDOWN) {\n      this.trackedTouches_[event.pointerId] = true;\n    }\n\n    this.activePointers_ = Object.keys(this.trackedTouches_).length;\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.handlePointerUp_ = function (pointerEvent) {\n    this.updateActivePointers_(pointerEvent);\n    var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERUP, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent); // We emulate click events on left mouse button click, touch contact, and pen\n    // contact. isMouseActionButton returns true in these cases (evt.button is set\n    // to 0).\n    // See http://www.w3.org/TR/pointerevents/#button-states\n    // We only fire click, singleclick, and doubleclick if nobody has called\n    // event.preventDefault().\n\n    if (this.emulateClicks_ && !newEvent.defaultPrevented && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) {\n      this.emulateClick_(this.down_);\n    }\n\n    if (this.activePointers_ === 0) {\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n      this.dragging_ = false;\n      this.down_ = null;\n    }\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} If the left mouse button was pressed.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.isMouseActionButton_ = function (pointerEvent) {\n    return pointerEvent.button === 0;\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.handlePointerDown_ = function (pointerEvent) {\n    this.emulateClicks_ = this.activePointers_ === 0;\n    this.updateActivePointers_(pointerEvent);\n    var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERDOWN, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent); // Store a copy of the down event\n\n    this.down_ =\n    /** @type {PointerEvent} */\n    {};\n\n    for (var property in pointerEvent) {\n      var value = pointerEvent[property];\n      this.down_[property] = typeof value === 'function' ? VOID : value;\n    }\n\n    if (this.dragListenerKeys_.length === 0) {\n      var doc = this.map_.getOwnerDocument();\n      this.dragListenerKeys_.push(listen(doc, MapBrowserEventType.POINTERMOVE, this.handlePointerMove_, this), listen(doc, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this),\n      /* Note that the listener for `pointercancel is set up on\n       * `pointerEventHandler_` and not `documentPointerEventHandler_` like\n       * the `pointerup` and `pointermove` listeners.\n       *\n       * The reason for this is the following: `TouchSource.vacuumTouches_()`\n       * issues `pointercancel` events, when there was no `touchend` for a\n       * `touchstart`. Now, let's say a first `touchstart` is registered on\n       * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.\n       * But `documentPointerEventHandler_` doesn't know about the first\n       * `touchstart`. If there is no `touchend` for the `touchstart`, we can\n       * only receive a `touchcancel` from `pointerEventHandler_`, because it is\n       * only registered there.\n       */\n      listen(this.element_, MapBrowserEventType.POINTERCANCEL, this.handlePointerUp_, this));\n\n      if (this.element_.getRootNode && this.element_.getRootNode() !== doc) {\n        this.dragListenerKeys_.push(listen(this.element_.getRootNode(), MapBrowserEventType.POINTERUP, this.handlePointerUp_, this));\n      }\n    }\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.handlePointerMove_ = function (pointerEvent) {\n    // Between pointerdown and pointerup, pointermove events are triggered.\n    // To avoid a 'false' touchmove event to be dispatched, we test if the pointer\n    // moved a significant distance.\n    if (this.isMoving_(pointerEvent)) {\n      this.dragging_ = true;\n      var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERDRAG, this.map_, pointerEvent, this.dragging_);\n      this.dispatchEvent(newEvent);\n    }\n  };\n  /**\n   * Wrap and relay a pointer event.  Note that this requires that the type\n   * string for the MapBrowserEvent matches the PointerEvent type.\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.relayEvent_ = function (pointerEvent) {\n    this.originalPointerMoveEvent_ = pointerEvent;\n    var dragging = !!(this.down_ && this.isMoving_(pointerEvent));\n    this.dispatchEvent(new MapBrowserEvent(pointerEvent.type, this.map_, pointerEvent, dragging));\n  };\n  /**\n   * Flexible handling of a `touch-action: none` css equivalent: because calling\n   * `preventDefault()` on a `pointermove` event does not stop native page scrolling\n   * and zooming, we also listen for `touchmove` and call `preventDefault()` on it\n   * when an interaction (currently `DragPan` handles the event.\n   * @param {TouchEvent} event Event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.handleTouchMove_ = function (event) {\n    // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`\n    // may not be initialized yet when we get here on a platform without native pointer events.\n    var originalEvent = this.originalPointerMoveEvent_;\n\n    if ((!originalEvent || originalEvent.defaultPrevented) && (typeof event.cancelable !== 'boolean' || event.cancelable === true)) {\n      event.preventDefault();\n    }\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} Is moving.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.isMoving_ = function (pointerEvent) {\n    return this.dragging_ || Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ || Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;\n  };\n  /**\n   * Clean up.\n   */\n\n\n  MapBrowserEventHandler.prototype.disposeInternal = function () {\n    if (this.relayedListenerKey_) {\n      unlistenByKey(this.relayedListenerKey_);\n      this.relayedListenerKey_ = null;\n    }\n\n    this.element_.removeEventListener(EventType.TOUCHMOVE, this.boundHandleTouchMove_);\n\n    if (this.pointerdownListenerKey_) {\n      unlistenByKey(this.pointerdownListenerKey_);\n      this.pointerdownListenerKey_ = null;\n    }\n\n    this.dragListenerKeys_.forEach(unlistenByKey);\n    this.dragListenerKeys_.length = 0;\n    this.element_ = null;\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return MapBrowserEventHandler;\n}(Target);\n\nexport default MapBrowserEventHandler;","map":{"version":3,"sources":["/Users/rongxuan/node_modules/ol/src/MapBrowserEventHandler.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @module ol/MapBrowserEventHandler\n */\n\nimport EventType from './events/EventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport Target from './events/Target.js';\nimport {PASSIVE_EVENT_LISTENERS} from './has.js';\nimport {VOID} from './functions.js';\nimport {listen, unlistenByKey} from './events.js';\n\nclass MapBrowserEventHandler extends Target {\n  /**\n   * @param {import(\"./PluggableMap.js\").default} map The map with the viewport to listen to events on.\n   * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.\n   */\n  constructor(map, moveTolerance) {\n    super(map);\n\n    /**\n     * This is the element that we will listen to the real events on.\n     * @type {import(\"./PluggableMap.js\").default}\n     * @private\n     */\n    this.map_ = map;\n\n    /**\n     * @type {any}\n     * @private\n     */\n    this.clickTimeoutId_;\n\n    /**\n     * Emulate dblclick and singleclick. Will be true when only one pointer is active.\n     * @type {boolean}\n     */\n    this.emulateClicks_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dragging_ = false;\n\n    /**\n     * @type {!Array<import(\"./events.js\").EventsKey>}\n     * @private\n     */\n    this.dragListenerKeys_ = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;\n\n    /**\n     * The most recent \"down\" type event (or null if none have occurred).\n     * Set on pointerdown.\n     * @type {PointerEvent}\n     * @private\n     */\n    this.down_ = null;\n\n    const element = this.map_.getViewport();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.activePointers_ = 0;\n\n    /**\n     * @type {!Object<number, boolean>}\n     * @private\n     */\n    this.trackedTouches_ = {};\n\n    this.element_ = element;\n\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n    this.pointerdownListenerKey_ = listen(\n      element,\n      PointerEventType.POINTERDOWN,\n      this.handlePointerDown_,\n      this\n    );\n\n    /**\n     * @type {PointerEvent}\n     * @private\n     */\n    this.originalPointerMoveEvent_;\n\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n    this.relayedListenerKey_ = listen(\n      element,\n      PointerEventType.POINTERMOVE,\n      this.relayEvent_,\n      this\n    );\n\n    /**\n     * @private\n     */\n    this.boundHandleTouchMove_ = this.handleTouchMove_.bind(this);\n\n    this.element_.addEventListener(\n      EventType.TOUCHMOVE,\n      this.boundHandleTouchMove_,\n      PASSIVE_EVENT_LISTENERS ? {passive: false} : false\n    );\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  emulateClick_(pointerEvent) {\n    let newEvent = new MapBrowserEvent(\n      MapBrowserEventType.CLICK,\n      this.map_,\n      pointerEvent\n    );\n    this.dispatchEvent(newEvent);\n    if (this.clickTimeoutId_ !== undefined) {\n      // double-click\n      clearTimeout(this.clickTimeoutId_);\n      this.clickTimeoutId_ = undefined;\n      newEvent = new MapBrowserEvent(\n        MapBrowserEventType.DBLCLICK,\n        this.map_,\n        pointerEvent\n      );\n      this.dispatchEvent(newEvent);\n    } else {\n      // click\n      this.clickTimeoutId_ = setTimeout(\n        /** @this {MapBrowserEventHandler} */\n        function () {\n          this.clickTimeoutId_ = undefined;\n          const newEvent = new MapBrowserEvent(\n            MapBrowserEventType.SINGLECLICK,\n            this.map_,\n            pointerEvent\n          );\n          this.dispatchEvent(newEvent);\n        }.bind(this),\n        250\n      );\n    }\n  }\n\n  /**\n   * Keeps track on how many pointers are currently active.\n   *\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  updateActivePointers_(pointerEvent) {\n    const event = pointerEvent;\n\n    if (\n      event.type == MapBrowserEventType.POINTERUP ||\n      event.type == MapBrowserEventType.POINTERCANCEL\n    ) {\n      delete this.trackedTouches_[event.pointerId];\n    } else if (event.type == MapBrowserEventType.POINTERDOWN) {\n      this.trackedTouches_[event.pointerId] = true;\n    }\n    this.activePointers_ = Object.keys(this.trackedTouches_).length;\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  handlePointerUp_(pointerEvent) {\n    this.updateActivePointers_(pointerEvent);\n    const newEvent = new MapBrowserEvent(\n      MapBrowserEventType.POINTERUP,\n      this.map_,\n      pointerEvent\n    );\n    this.dispatchEvent(newEvent);\n\n    // We emulate click events on left mouse button click, touch contact, and pen\n    // contact. isMouseActionButton returns true in these cases (evt.button is set\n    // to 0).\n    // See http://www.w3.org/TR/pointerevents/#button-states\n    // We only fire click, singleclick, and doubleclick if nobody has called\n    // event.preventDefault().\n    if (\n      this.emulateClicks_ &&\n      !newEvent.defaultPrevented &&\n      !this.dragging_ &&\n      this.isMouseActionButton_(pointerEvent)\n    ) {\n      this.emulateClick_(this.down_);\n    }\n\n    if (this.activePointers_ === 0) {\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n      this.dragging_ = false;\n      this.down_ = null;\n    }\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} If the left mouse button was pressed.\n   * @private\n   */\n  isMouseActionButton_(pointerEvent) {\n    return pointerEvent.button === 0;\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  handlePointerDown_(pointerEvent) {\n    this.emulateClicks_ = this.activePointers_ === 0;\n    this.updateActivePointers_(pointerEvent);\n    const newEvent = new MapBrowserEvent(\n      MapBrowserEventType.POINTERDOWN,\n      this.map_,\n      pointerEvent\n    );\n    this.dispatchEvent(newEvent);\n\n    // Store a copy of the down event\n    this.down_ = /** @type {PointerEvent} */ ({});\n    for (const property in pointerEvent) {\n      const value = pointerEvent[property];\n      this.down_[property] = typeof value === 'function' ? VOID : value;\n    }\n\n    if (this.dragListenerKeys_.length === 0) {\n      const doc = this.map_.getOwnerDocument();\n      this.dragListenerKeys_.push(\n        listen(\n          doc,\n          MapBrowserEventType.POINTERMOVE,\n          this.handlePointerMove_,\n          this\n        ),\n        listen(doc, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this),\n        /* Note that the listener for `pointercancel is set up on\n         * `pointerEventHandler_` and not `documentPointerEventHandler_` like\n         * the `pointerup` and `pointermove` listeners.\n         *\n         * The reason for this is the following: `TouchSource.vacuumTouches_()`\n         * issues `pointercancel` events, when there was no `touchend` for a\n         * `touchstart`. Now, let's say a first `touchstart` is registered on\n         * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.\n         * But `documentPointerEventHandler_` doesn't know about the first\n         * `touchstart`. If there is no `touchend` for the `touchstart`, we can\n         * only receive a `touchcancel` from `pointerEventHandler_`, because it is\n         * only registered there.\n         */\n        listen(\n          this.element_,\n          MapBrowserEventType.POINTERCANCEL,\n          this.handlePointerUp_,\n          this\n        )\n      );\n      if (this.element_.getRootNode && this.element_.getRootNode() !== doc) {\n        this.dragListenerKeys_.push(\n          listen(\n            this.element_.getRootNode(),\n            MapBrowserEventType.POINTERUP,\n            this.handlePointerUp_,\n            this\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  handlePointerMove_(pointerEvent) {\n    // Between pointerdown and pointerup, pointermove events are triggered.\n    // To avoid a 'false' touchmove event to be dispatched, we test if the pointer\n    // moved a significant distance.\n    if (this.isMoving_(pointerEvent)) {\n      this.dragging_ = true;\n      const newEvent = new MapBrowserEvent(\n        MapBrowserEventType.POINTERDRAG,\n        this.map_,\n        pointerEvent,\n        this.dragging_\n      );\n      this.dispatchEvent(newEvent);\n    }\n  }\n\n  /**\n   * Wrap and relay a pointer event.  Note that this requires that the type\n   * string for the MapBrowserEvent matches the PointerEvent type.\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  relayEvent_(pointerEvent) {\n    this.originalPointerMoveEvent_ = pointerEvent;\n    const dragging = !!(this.down_ && this.isMoving_(pointerEvent));\n    this.dispatchEvent(\n      new MapBrowserEvent(pointerEvent.type, this.map_, pointerEvent, dragging)\n    );\n  }\n\n  /**\n   * Flexible handling of a `touch-action: none` css equivalent: because calling\n   * `preventDefault()` on a `pointermove` event does not stop native page scrolling\n   * and zooming, we also listen for `touchmove` and call `preventDefault()` on it\n   * when an interaction (currently `DragPan` handles the event.\n   * @param {TouchEvent} event Event.\n   * @private\n   */\n  handleTouchMove_(event) {\n    // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`\n    // may not be initialized yet when we get here on a platform without native pointer events.\n    const originalEvent = this.originalPointerMoveEvent_;\n    if (\n      (!originalEvent || originalEvent.defaultPrevented) &&\n      (typeof event.cancelable !== 'boolean' || event.cancelable === true)\n    ) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} Is moving.\n   * @private\n   */\n  isMoving_(pointerEvent) {\n    return (\n      this.dragging_ ||\n      Math.abs(pointerEvent.clientX - this.down_.clientX) >\n        this.moveTolerance_ ||\n      Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_\n    );\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.relayedListenerKey_) {\n      unlistenByKey(this.relayedListenerKey_);\n      this.relayedListenerKey_ = null;\n    }\n    this.element_.removeEventListener(\n      EventType.TOUCHMOVE,\n      this.boundHandleTouchMove_\n    );\n\n    if (this.pointerdownListenerKey_) {\n      unlistenByKey(this.pointerdownListenerKey_);\n      this.pointerdownListenerKey_ = null;\n    }\n\n    this.dragListenerKeys_.forEach(unlistenByKey);\n    this.dragListenerKeys_.length = 0;\n\n    this.element_ = null;\n    super.disposeInternal();\n  }\n}\n\nexport default MapBrowserEventHandler;\n"]},"metadata":{},"sourceType":"module"}