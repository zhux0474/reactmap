{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { BeanStub } from \"../context/beanStub\";\n\nvar RowNodeBlock =\n/** @class */\nfunction (_super) {\n  __extends(RowNodeBlock, _super);\n\n  function RowNodeBlock(id) {\n    var _this = _super.call(this) || this;\n\n    _this.state = RowNodeBlock.STATE_WAITING_TO_LOAD;\n    _this.version = 0;\n    _this.id = id;\n    return _this;\n  }\n\n  RowNodeBlock.prototype.getId = function () {\n    return this.id;\n  };\n\n  RowNodeBlock.prototype.load = function () {\n    this.state = RowNodeBlock.STATE_LOADING;\n    this.loadFromDatasource();\n  };\n\n  RowNodeBlock.prototype.getVersion = function () {\n    return this.version;\n  };\n\n  RowNodeBlock.prototype.setStateWaitingToLoad = function () {\n    // in case any current loads in progress, this will have their results ignored\n    this.version++;\n    this.state = RowNodeBlock.STATE_WAITING_TO_LOAD;\n  };\n\n  RowNodeBlock.prototype.getState = function () {\n    return this.state;\n  };\n\n  RowNodeBlock.prototype.pageLoadFailed = function (version) {\n    var requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);\n\n    if (requestMostRecentAndLive) {\n      this.state = RowNodeBlock.STATE_FAILED;\n      this.processServerFail();\n    }\n\n    this.dispatchLoadCompleted(false);\n  };\n\n  RowNodeBlock.prototype.success = function (version, params) {\n    this.successCommon(version, params);\n  };\n\n  RowNodeBlock.prototype.pageLoaded = function (version, rows, lastRow) {\n    this.successCommon(version, {\n      rowData: rows,\n      rowCount: lastRow\n    });\n  };\n\n  RowNodeBlock.prototype.isRequestMostRecentAndLive = function (version) {\n    // thisIsMostRecentRequest - if block was refreshed, then another request\n    // could of been sent after this one.\n    var thisIsMostRecentRequest = version === this.version; // weAreNotDestroyed - if InfiniteStore is purged, then blocks are destroyed\n    // and new blocks created. so data loads of old blocks are discarded.\n\n    var weAreNotDestroyed = this.isAlive();\n    return thisIsMostRecentRequest && weAreNotDestroyed;\n  };\n\n  RowNodeBlock.prototype.successCommon = function (version, params) {\n    // need to dispatch load complete before processing the data, as PaginationComp checks\n    // RowNodeBlockLoader to see if it is still loading, so the RowNodeBlockLoader needs to\n    // be updated first (via LoadComplete event) before PaginationComp updates (via processServerResult method)\n    this.dispatchLoadCompleted();\n    var requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);\n\n    if (requestMostRecentAndLive) {\n      this.state = RowNodeBlock.STATE_LOADED;\n      this.processServerResult(params);\n    }\n  };\n\n  RowNodeBlock.prototype.dispatchLoadCompleted = function (success) {\n    if (success === void 0) {\n      success = true;\n    } // we fire event regardless of processing data or now, as we want\n    // the concurrentLoadRequests count to be reduced in BlockLoader\n\n\n    var event = {\n      type: RowNodeBlock.EVENT_LOAD_COMPLETE,\n      success: success,\n      block: this\n    };\n    this.dispatchEvent(event);\n  };\n\n  RowNodeBlock.EVENT_LOAD_COMPLETE = 'loadComplete';\n  RowNodeBlock.STATE_WAITING_TO_LOAD = 'needsLoading';\n  RowNodeBlock.STATE_LOADING = 'loading';\n  RowNodeBlock.STATE_LOADED = 'loaded';\n  RowNodeBlock.STATE_FAILED = 'failed';\n  return RowNodeBlock;\n}(BeanStub);\n\nexport { RowNodeBlock };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/rowNodeCache/rowNodeBlock.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","BeanStub","RowNodeBlock","_super","id","_this","call","state","STATE_WAITING_TO_LOAD","version","getId","load","STATE_LOADING","loadFromDatasource","getVersion","setStateWaitingToLoad","getState","pageLoadFailed","requestMostRecentAndLive","isRequestMostRecentAndLive","STATE_FAILED","processServerFail","dispatchLoadCompleted","success","params","successCommon","pageLoaded","rows","lastRow","rowData","rowCount","thisIsMostRecentRequest","weAreNotDestroyed","isAlive","STATE_LOADED","processServerResult","event","type","EVENT_LOAD_COMPLETE","block","dispatchEvent"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BeanStub } from \"../context/beanStub\";\nvar RowNodeBlock = /** @class */ (function (_super) {\n    __extends(RowNodeBlock, _super);\n    function RowNodeBlock(id) {\n        var _this = _super.call(this) || this;\n        _this.state = RowNodeBlock.STATE_WAITING_TO_LOAD;\n        _this.version = 0;\n        _this.id = id;\n        return _this;\n    }\n    RowNodeBlock.prototype.getId = function () {\n        return this.id;\n    };\n    RowNodeBlock.prototype.load = function () {\n        this.state = RowNodeBlock.STATE_LOADING;\n        this.loadFromDatasource();\n    };\n    RowNodeBlock.prototype.getVersion = function () {\n        return this.version;\n    };\n    RowNodeBlock.prototype.setStateWaitingToLoad = function () {\n        // in case any current loads in progress, this will have their results ignored\n        this.version++;\n        this.state = RowNodeBlock.STATE_WAITING_TO_LOAD;\n    };\n    RowNodeBlock.prototype.getState = function () {\n        return this.state;\n    };\n    RowNodeBlock.prototype.pageLoadFailed = function (version) {\n        var requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);\n        if (requestMostRecentAndLive) {\n            this.state = RowNodeBlock.STATE_FAILED;\n            this.processServerFail();\n        }\n        this.dispatchLoadCompleted(false);\n    };\n    RowNodeBlock.prototype.success = function (version, params) {\n        this.successCommon(version, params);\n    };\n    RowNodeBlock.prototype.pageLoaded = function (version, rows, lastRow) {\n        this.successCommon(version, { rowData: rows, rowCount: lastRow });\n    };\n    RowNodeBlock.prototype.isRequestMostRecentAndLive = function (version) {\n        // thisIsMostRecentRequest - if block was refreshed, then another request\n        // could of been sent after this one.\n        var thisIsMostRecentRequest = version === this.version;\n        // weAreNotDestroyed - if InfiniteStore is purged, then blocks are destroyed\n        // and new blocks created. so data loads of old blocks are discarded.\n        var weAreNotDestroyed = this.isAlive();\n        return thisIsMostRecentRequest && weAreNotDestroyed;\n    };\n    RowNodeBlock.prototype.successCommon = function (version, params) {\n        // need to dispatch load complete before processing the data, as PaginationComp checks\n        // RowNodeBlockLoader to see if it is still loading, so the RowNodeBlockLoader needs to\n        // be updated first (via LoadComplete event) before PaginationComp updates (via processServerResult method)\n        this.dispatchLoadCompleted();\n        var requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);\n        if (requestMostRecentAndLive) {\n            this.state = RowNodeBlock.STATE_LOADED;\n            this.processServerResult(params);\n        }\n    };\n    RowNodeBlock.prototype.dispatchLoadCompleted = function (success) {\n        if (success === void 0) { success = true; }\n        // we fire event regardless of processing data or now, as we want\n        // the concurrentLoadRequests count to be reduced in BlockLoader\n        var event = {\n            type: RowNodeBlock.EVENT_LOAD_COMPLETE,\n            success: success,\n            block: this\n        };\n        this.dispatchEvent(event);\n    };\n    RowNodeBlock.EVENT_LOAD_COMPLETE = 'loadComplete';\n    RowNodeBlock.STATE_WAITING_TO_LOAD = 'needsLoading';\n    RowNodeBlock.STATE_LOADING = 'loading';\n    RowNodeBlock.STATE_LOADED = 'loaded';\n    RowNodeBlock.STATE_FAILED = 'failed';\n    return RowNodeBlock;\n}(BeanStub));\nexport { RowNodeBlock };\n"]},"metadata":{},"sourceType":"module"}