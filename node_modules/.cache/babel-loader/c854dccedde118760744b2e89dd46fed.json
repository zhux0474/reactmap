{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { includes } from './array';\nvar AG_GRID_STOP_PROPAGATION = '__ag_Grid_Stop_Propagation';\nvar PASSIVE_EVENTS = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];\nvar supports = {};\n/**\n * a user once raised an issue - they said that when you opened a popup (eg context menu)\n * and then clicked on a selection checkbox, the popup wasn't closed. this is because the\n * popup listens for clicks on the body, however ag-grid WAS stopping propagation on the\n * checkbox clicks (so the rows didn't pick them up as row selection selection clicks).\n * to get around this, we have a pattern to stop propagation for the purposes of AG Grid,\n * but we still let the event pass back to the body.\n * @param {Event} event\n */\n\nexport function stopPropagationForAgGrid(event) {\n  event[AG_GRID_STOP_PROPAGATION] = true;\n}\nexport function isStopPropagationForAgGrid(event) {\n  return event[AG_GRID_STOP_PROPAGATION] === true;\n}\nexport var isEventSupported = function () {\n  var tags = {\n    select: 'input',\n    change: 'input',\n    submit: 'form',\n    reset: 'form',\n    error: 'img',\n    load: 'img',\n    abort: 'img'\n  };\n\n  var eventChecker = function (eventName) {\n    if (typeof supports[eventName] === 'boolean') {\n      return supports[eventName];\n    }\n\n    var el = document.createElement(tags[eventName] || 'div');\n    eventName = 'on' + eventName;\n    var isSupported = (eventName in el);\n\n    if (!isSupported) {\n      el.setAttribute(eventName, 'return;');\n      isSupported = typeof el[eventName] == 'function';\n    }\n\n    return supports[eventName] = isSupported;\n  };\n\n  return eventChecker;\n}();\nexport function getCtrlForEvent(gridOptionsWrapper, event, type) {\n  var sourceElement = getTarget(event);\n\n  while (sourceElement) {\n    var renderedComp = gridOptionsWrapper.getDomData(sourceElement, type);\n\n    if (renderedComp) {\n      return renderedComp;\n    }\n\n    sourceElement = sourceElement.parentElement;\n  }\n\n  return null;\n}\n/**\n * @deprecated\n * Adds all type of change listeners to an element, intended to be a text field\n * @param {HTMLElement} element\n * @param {EventListener} listener\n */\n\nexport function addChangeListener(element, listener) {\n  element.addEventListener('changed', listener);\n  element.addEventListener('paste', listener);\n  element.addEventListener('input', listener); // IE doesn't fire changed for special keys (eg delete, backspace), so need to\n  // listen for this further ones\n\n  element.addEventListener('keydown', listener);\n  element.addEventListener('keyup', listener);\n}\n/**\n * srcElement is only available in IE. In all other browsers it is target\n * http://stackoverflow.com/questions/5301643/how-can-i-make-event-srcelement-work-in-firefox-and-what-does-it-mean\n * @param {Event} event\n * @returns {Element}\n */\n\nexport function getTarget(event) {\n  var eventNoType = event;\n  return eventNoType.target || eventNoType.srcElement;\n}\nexport function isElementInEventPath(element, event) {\n  if (!event || !element) {\n    return false;\n  }\n\n  return getEventPath(event).indexOf(element) >= 0;\n}\nexport function createEventPath(event) {\n  var res = [];\n  var pointer = getTarget(event);\n\n  while (pointer) {\n    res.push(pointer);\n    pointer = pointer.parentElement;\n  }\n\n  return res;\n}\n/**\n * firefox doesn't have event.path set, or any alternative to it, so we hack\n * it in. this is needed as it's to late to work out the path when the item is\n * removed from the dom. used by MouseEventService, where it works out if a click\n * was from the current grid, or a detail grid (master / detail).\n * @param {Event} event\n */\n\nexport function addAgGridEventPath(event) {\n  event.__agGridEventPath = getEventPath(event);\n}\n/**\n * Gets the path for an Event.\n * https://stackoverflow.com/questions/39245488/event-path-undefined-with-firefox-and-vue-js\n * https://developer.mozilla.org/en-US/docs/Web/API/Event\n * @param {Event} event\n * @returns {EventTarget[]}\n */\n\nexport function getEventPath(event) {\n  var eventNoType = event;\n\n  if (eventNoType.deepPath) {\n    // IE supports deep path\n    return eventNoType.deepPath();\n  }\n\n  if (eventNoType.path) {\n    // Chrome supports path\n    return eventNoType.path;\n  }\n\n  if (eventNoType.composedPath) {\n    // Firefox supports composePath\n    return eventNoType.composedPath();\n  }\n\n  if (eventNoType.__agGridEventPath) {\n    // Firefox supports composePath\n    return eventNoType.__agGridEventPath;\n  } // and finally, if none of the above worked,\n  // we create the path ourselves\n\n\n  return createEventPath(event);\n}\nexport function addSafePassiveEventListener(frameworkOverrides, eElement, event, listener) {\n  var isPassive = includes(PASSIVE_EVENTS, event);\n  var options = isPassive ? {\n    passive: true\n  } : undefined; // this check is here for certain scenarios where I believe the user must be destroying\n  // the grid somehow but continuing for it to be used\n\n  if (frameworkOverrides && frameworkOverrides.addEventListener) {\n    frameworkOverrides.addEventListener(eElement, event, listener, options);\n  }\n}","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/utils/event.js"],"names":["includes","AG_GRID_STOP_PROPAGATION","PASSIVE_EVENTS","supports","stopPropagationForAgGrid","event","isStopPropagationForAgGrid","isEventSupported","tags","select","change","submit","reset","error","load","abort","eventChecker","eventName","el","document","createElement","isSupported","setAttribute","getCtrlForEvent","gridOptionsWrapper","type","sourceElement","getTarget","renderedComp","getDomData","parentElement","addChangeListener","element","listener","addEventListener","eventNoType","target","srcElement","isElementInEventPath","getEventPath","indexOf","createEventPath","res","pointer","push","addAgGridEventPath","__agGridEventPath","deepPath","path","composedPath","addSafePassiveEventListener","frameworkOverrides","eElement","isPassive","options","passive","undefined"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { includes } from './array';\nvar AG_GRID_STOP_PROPAGATION = '__ag_Grid_Stop_Propagation';\nvar PASSIVE_EVENTS = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];\nvar supports = {};\n/**\n * a user once raised an issue - they said that when you opened a popup (eg context menu)\n * and then clicked on a selection checkbox, the popup wasn't closed. this is because the\n * popup listens for clicks on the body, however ag-grid WAS stopping propagation on the\n * checkbox clicks (so the rows didn't pick them up as row selection selection clicks).\n * to get around this, we have a pattern to stop propagation for the purposes of AG Grid,\n * but we still let the event pass back to the body.\n * @param {Event} event\n */\nexport function stopPropagationForAgGrid(event) {\n    event[AG_GRID_STOP_PROPAGATION] = true;\n}\nexport function isStopPropagationForAgGrid(event) {\n    return event[AG_GRID_STOP_PROPAGATION] === true;\n}\nexport var isEventSupported = (function () {\n    var tags = {\n        select: 'input',\n        change: 'input',\n        submit: 'form',\n        reset: 'form',\n        error: 'img',\n        load: 'img',\n        abort: 'img'\n    };\n    var eventChecker = function (eventName) {\n        if (typeof supports[eventName] === 'boolean') {\n            return supports[eventName];\n        }\n        var el = document.createElement(tags[eventName] || 'div');\n        eventName = 'on' + eventName;\n        var isSupported = (eventName in el);\n        if (!isSupported) {\n            el.setAttribute(eventName, 'return;');\n            isSupported = typeof el[eventName] == 'function';\n        }\n        return supports[eventName] = isSupported;\n    };\n    return eventChecker;\n})();\nexport function getCtrlForEvent(gridOptionsWrapper, event, type) {\n    var sourceElement = getTarget(event);\n    while (sourceElement) {\n        var renderedComp = gridOptionsWrapper.getDomData(sourceElement, type);\n        if (renderedComp) {\n            return renderedComp;\n        }\n        sourceElement = sourceElement.parentElement;\n    }\n    return null;\n}\n/**\n * @deprecated\n * Adds all type of change listeners to an element, intended to be a text field\n * @param {HTMLElement} element\n * @param {EventListener} listener\n */\nexport function addChangeListener(element, listener) {\n    element.addEventListener('changed', listener);\n    element.addEventListener('paste', listener);\n    element.addEventListener('input', listener);\n    // IE doesn't fire changed for special keys (eg delete, backspace), so need to\n    // listen for this further ones\n    element.addEventListener('keydown', listener);\n    element.addEventListener('keyup', listener);\n}\n/**\n * srcElement is only available in IE. In all other browsers it is target\n * http://stackoverflow.com/questions/5301643/how-can-i-make-event-srcelement-work-in-firefox-and-what-does-it-mean\n * @param {Event} event\n * @returns {Element}\n */\nexport function getTarget(event) {\n    var eventNoType = event;\n    return eventNoType.target || eventNoType.srcElement;\n}\nexport function isElementInEventPath(element, event) {\n    if (!event || !element) {\n        return false;\n    }\n    return getEventPath(event).indexOf(element) >= 0;\n}\nexport function createEventPath(event) {\n    var res = [];\n    var pointer = getTarget(event);\n    while (pointer) {\n        res.push(pointer);\n        pointer = pointer.parentElement;\n    }\n    return res;\n}\n/**\n * firefox doesn't have event.path set, or any alternative to it, so we hack\n * it in. this is needed as it's to late to work out the path when the item is\n * removed from the dom. used by MouseEventService, where it works out if a click\n * was from the current grid, or a detail grid (master / detail).\n * @param {Event} event\n */\nexport function addAgGridEventPath(event) {\n    event.__agGridEventPath = getEventPath(event);\n}\n/**\n * Gets the path for an Event.\n * https://stackoverflow.com/questions/39245488/event-path-undefined-with-firefox-and-vue-js\n * https://developer.mozilla.org/en-US/docs/Web/API/Event\n * @param {Event} event\n * @returns {EventTarget[]}\n */\nexport function getEventPath(event) {\n    var eventNoType = event;\n    if (eventNoType.deepPath) {\n        // IE supports deep path\n        return eventNoType.deepPath();\n    }\n    if (eventNoType.path) {\n        // Chrome supports path\n        return eventNoType.path;\n    }\n    if (eventNoType.composedPath) {\n        // Firefox supports composePath\n        return eventNoType.composedPath();\n    }\n    if (eventNoType.__agGridEventPath) {\n        // Firefox supports composePath\n        return eventNoType.__agGridEventPath;\n    }\n    // and finally, if none of the above worked,\n    // we create the path ourselves\n    return createEventPath(event);\n}\nexport function addSafePassiveEventListener(frameworkOverrides, eElement, event, listener) {\n    var isPassive = includes(PASSIVE_EVENTS, event);\n    var options = isPassive ? { passive: true } : undefined;\n    // this check is here for certain scenarios where I believe the user must be destroying\n    // the grid somehow but continuing for it to be used\n    if (frameworkOverrides && frameworkOverrides.addEventListener) {\n        frameworkOverrides.addEventListener(eElement, event, listener, options);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}