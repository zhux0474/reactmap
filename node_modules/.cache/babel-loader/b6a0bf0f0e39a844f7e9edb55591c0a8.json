{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar Color =\n/** @class */\nfunction () {\n  /**\n   * Every color component should be in the [0, 1] range.\n   * Some easing functions (such as elastic easing) can overshoot the target value by some amount.\n   * So, when animating colors, if the source or target color components are already near\n   * or at the edge of the allowed [0, 1] range, it is possible for the intermediate color\n   * component value to end up outside of that range mid-animation. For this reason the constructor\n   * performs range checking/constraining.\n   * @param r Red component.\n   * @param g Green component.\n   * @param b Blue component.\n   * @param a Alpha (opacity) component.\n   */\n  function Color(r, g, b, a) {\n    if (a === void 0) {\n      a = 1;\n    } // NaN is treated as 0.\n\n\n    this.r = Math.min(1, Math.max(0, r || 0));\n    this.g = Math.min(1, Math.max(0, g || 0));\n    this.b = Math.min(1, Math.max(0, b || 0));\n    this.a = Math.min(1, Math.max(0, a || 0));\n  }\n  /**\n   * The given string can be in one of the following formats:\n   * - #rgb\n   * - #rrggbb\n   * - rgb(r, g, b)\n   * - rgba(r, g, b, a)\n   * - CSS color name such as 'white', 'orange', 'cyan', etc.\n   * @param str\n   */\n\n\n  Color.fromString = function (str) {\n    // hexadecimal notation\n    if (str.indexOf('#') >= 0) {\n      // there can be some leading whitespace\n      return Color.fromHexString(str);\n    } // color name\n\n\n    var hex = Color.nameToHex[str];\n\n    if (hex) {\n      return Color.fromHexString(hex);\n    } // rgb(a) notation\n\n\n    if (str.indexOf('rgb') >= 0) {\n      return Color.fromRgbaString(str);\n    }\n\n    throw new Error(\"Invalid color string: '\" + str + \"'\");\n  }; // See https://drafts.csswg.org/css-color/#hex-notation\n\n\n  Color.parseHex = function (input) {\n    input = input.replace(/ /g, '').slice(1);\n    var parts;\n\n    switch (input.length) {\n      case 6:\n      case 8:\n        parts = [];\n\n        for (var i = 0; i < input.length; i += 2) {\n          parts.push(parseInt(\"\" + input[i] + input[i + 1], 16));\n        }\n\n        break;\n\n      case 3:\n      case 4:\n        parts = input.split('').map(function (p) {\n          return parseInt(p, 16);\n        }).map(function (p) {\n          return p + p * 16;\n        });\n        break;\n    }\n\n    if (parts.length >= 3) {\n      if (parts.every(function (p) {\n        return p >= 0;\n      })) {\n        if (parts.length === 3) {\n          parts.push(255);\n        }\n\n        return parts;\n      }\n    }\n  };\n\n  Color.fromHexString = function (str) {\n    var values = Color.parseHex(str);\n\n    if (values) {\n      var r = values[0],\n          g = values[1],\n          b = values[2],\n          a = values[3];\n      return new Color(r / 255, g / 255, b / 255, a / 255);\n    }\n\n    throw new Error(\"Malformed hexadecimal color string: '\" + str + \"'\");\n  };\n\n  Color.stringToRgba = function (str) {\n    // Find positions of opening and closing parentheses.\n    var _a = [NaN, NaN],\n        po = _a[0],\n        pc = _a[1];\n\n    for (var i = 0; i < str.length; i++) {\n      var c = str[i];\n\n      if (!po && c === '(') {\n        po = i;\n      } else if (c === ')') {\n        pc = i;\n        break;\n      }\n    }\n\n    var contents = po && pc && str.substring(po + 1, pc);\n\n    if (!contents) {\n      return;\n    }\n\n    var parts = contents.split(',');\n    var rgba = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      var part = parts[i];\n      var value = parseFloat(part);\n\n      if (isNaN(value)) {\n        return;\n      }\n\n      if (part.indexOf('%') >= 0) {\n        // percentage r, g, or b value\n        value = Math.max(0, Math.min(100, value));\n        value /= 100;\n      } else {\n        if (i === 3) {\n          // alpha component\n          value = Math.max(0, Math.min(1, value));\n        } else {\n          // absolute r, g, or b value\n          value = Math.max(0, Math.min(255, value));\n          value /= 255;\n        }\n      }\n\n      rgba.push(value);\n    }\n\n    return rgba;\n  };\n\n  Color.fromRgbaString = function (str) {\n    var rgba = Color.stringToRgba(str);\n\n    if (rgba) {\n      if (rgba.length === 3) {\n        return new Color(rgba[0], rgba[1], rgba[2]);\n      } else if (rgba.length === 4) {\n        return new Color(rgba[0], rgba[1], rgba[2], rgba[3]);\n      }\n    }\n\n    throw new Error(\"Malformed rgb/rgba color string: '\" + str + \"'\");\n  };\n\n  Color.fromArray = function (arr) {\n    if (arr.length === 4) {\n      return new Color(arr[0], arr[1], arr[2], arr[3]);\n    }\n\n    if (arr.length === 3) {\n      return new Color(arr[0], arr[1], arr[2]);\n    }\n\n    throw new Error('The given array should contain 3 or 4 color components (numbers).');\n  };\n\n  Color.fromHSB = function (h, s, b, alpha) {\n    if (alpha === void 0) {\n      alpha = 1;\n    }\n\n    var rgb = Color.HSBtoRGB(h, s, b);\n    return new Color(rgb[0], rgb[1], rgb[2], alpha);\n  };\n\n  Color.padHex = function (str) {\n    // Can't use `padStart(2, '0')` here because of IE.\n    return str.length === 1 ? '0' + str : str;\n  };\n\n  Color.prototype.toHexString = function () {\n    var hex = '#' + Color.padHex(Math.round(this.r * 255).toString(16)) + Color.padHex(Math.round(this.g * 255).toString(16)) + Color.padHex(Math.round(this.b * 255).toString(16));\n\n    if (this.a < 1) {\n      hex += Color.padHex(Math.round(this.a * 255).toString(16));\n    }\n\n    return hex;\n  };\n\n  Color.prototype.toRgbaString = function (fractionDigits) {\n    if (fractionDigits === void 0) {\n      fractionDigits = 3;\n    }\n\n    var components = [Math.round(this.r * 255), Math.round(this.g * 255), Math.round(this.b * 255)];\n    var k = Math.pow(10, fractionDigits);\n\n    if (this.a !== 1) {\n      components.push(Math.round(this.a * k) / k);\n      return \"rgba(\" + components.join(', ') + \")\";\n    }\n\n    return \"rgb(\" + components.join(', ') + \")\";\n  };\n\n  Color.prototype.toString = function () {\n    if (this.a === 1) {\n      return this.toHexString();\n    }\n\n    return this.toRgbaString();\n  };\n\n  Color.prototype.toHSB = function () {\n    return Color.RGBtoHSB(this.r, this.g, this.b);\n  };\n  /**\n   * Converts the given RGB triple to an array of HSB (HSV) components.\n   * The hue component will be `NaN` for achromatic colors.\n   */\n\n\n  Color.RGBtoHSB = function (r, g, b) {\n    var min = Math.min(r, g, b);\n    var max = Math.max(r, g, b);\n    var S = max !== 0 ? (max - min) / max : 0;\n    var H = NaN; // min == max, means all components are the same\n    // and the color is a shade of gray with no hue (H is NaN)\n\n    if (min !== max) {\n      var delta = max - min;\n      var rc = (max - r) / delta;\n      var gc = (max - g) / delta;\n      var bc = (max - b) / delta;\n\n      if (r === max) {\n        H = bc - gc;\n      } else if (g === max) {\n        H = 2.0 + rc - bc;\n      } else {\n        H = 4.0 + gc - rc;\n      }\n\n      H /= 6.0;\n\n      if (H < 0) {\n        H = H + 1.0;\n      }\n    }\n\n    return [H * 360, S, max];\n  };\n  /**\n   * Converts the given HSB (HSV) triple to an array of RGB components.\n   */\n\n\n  Color.HSBtoRGB = function (H, S, B) {\n    if (isNaN(H)) {\n      H = 0;\n    }\n\n    H = (H % 360 + 360) % 360 / 360; // normalize hue to [0, 360] interval, then scale to [0, 1]\n\n    var r = 0;\n    var g = 0;\n    var b = 0;\n\n    if (S === 0) {\n      r = g = b = B;\n    } else {\n      var h = (H - Math.floor(H)) * 6;\n      var f = h - Math.floor(h);\n      var p = B * (1 - S);\n      var q = B * (1 - S * f);\n      var t = B * (1 - S * (1 - f));\n\n      switch (h >> 0) {\n        // discard the floating point part of the number\n        case 0:\n          r = B;\n          g = t;\n          b = p;\n          break;\n\n        case 1:\n          r = q;\n          g = B;\n          b = p;\n          break;\n\n        case 2:\n          r = p;\n          g = B;\n          b = t;\n          break;\n\n        case 3:\n          r = p;\n          g = q;\n          b = B;\n          break;\n\n        case 4:\n          r = t;\n          g = p;\n          b = B;\n          break;\n\n        case 5:\n          r = B;\n          g = p;\n          b = q;\n          break;\n      }\n    }\n\n    return [r, g, b];\n  };\n\n  Color.prototype.derive = function (hueShift, saturationFactor, brightnessFactor, opacityFactor) {\n    var hsb = Color.RGBtoHSB(this.r, this.g, this.b);\n    var b = hsb[2];\n\n    if (b == 0 && brightnessFactor > 1.0) {\n      b = 0.05;\n    }\n\n    var h = ((hsb[0] + hueShift) % 360 + 360) % 360;\n    var s = Math.max(Math.min(hsb[1] * saturationFactor, 1.0), 0.0);\n    b = Math.max(Math.min(b * brightnessFactor, 1.0), 0.0);\n    var a = Math.max(Math.min(this.a * opacityFactor, 1.0), 0.0);\n    var rgba = Color.HSBtoRGB(h, s, b);\n    rgba.push(a);\n    return Color.fromArray(rgba);\n  };\n\n  Color.prototype.brighter = function () {\n    return this.derive(0, 1.0, 1.0 / 0.7, 1.0);\n  };\n\n  Color.prototype.darker = function () {\n    return this.derive(0, 1.0, 0.7, 1.0);\n  };\n  /**\n   * CSS Color Module Level 4:\n   * https://drafts.csswg.org/css-color/#named-colors\n   */\n\n\n  Color.nameToHex = Object.freeze({\n    aliceblue: '#F0F8FF',\n    antiquewhite: '#FAEBD7',\n    aqua: '#00FFFF',\n    aquamarine: '#7FFFD4',\n    azure: '#F0FFFF',\n    beige: '#F5F5DC',\n    bisque: '#FFE4C4',\n    black: '#000000',\n    blanchedalmond: '#FFEBCD',\n    blue: '#0000FF',\n    blueviolet: '#8A2BE2',\n    brown: '#A52A2A',\n    burlywood: '#DEB887',\n    cadetblue: '#5F9EA0',\n    chartreuse: '#7FFF00',\n    chocolate: '#D2691E',\n    coral: '#FF7F50',\n    cornflowerblue: '#6495ED',\n    cornsilk: '#FFF8DC',\n    crimson: '#DC143C',\n    cyan: '#00FFFF',\n    darkblue: '#00008B',\n    darkcyan: '#008B8B',\n    darkgoldenrod: '#B8860B',\n    darkgray: '#A9A9A9',\n    darkgreen: '#006400',\n    darkgrey: '#A9A9A9',\n    darkkhaki: '#BDB76B',\n    darkmagenta: '#8B008B',\n    darkolivegreen: '#556B2F',\n    darkorange: '#FF8C00',\n    darkorchid: '#9932CC',\n    darkred: '#8B0000',\n    darksalmon: '#E9967A',\n    darkseagreen: '#8FBC8F',\n    darkslateblue: '#483D8B',\n    darkslategray: '#2F4F4F',\n    darkslategrey: '#2F4F4F',\n    darkturquoise: '#00CED1',\n    darkviolet: '#9400D3',\n    deeppink: '#FF1493',\n    deepskyblue: '#00BFFF',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1E90FF',\n    firebrick: '#B22222',\n    floralwhite: '#FFFAF0',\n    forestgreen: '#228B22',\n    fuchsia: '#FF00FF',\n    gainsboro: '#DCDCDC',\n    ghostwhite: '#F8F8FF',\n    gold: '#FFD700',\n    goldenrod: '#DAA520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#ADFF2F',\n    grey: '#808080',\n    honeydew: '#F0FFF0',\n    hotpink: '#FF69B4',\n    indianred: '#CD5C5C',\n    indigo: '#4B0082',\n    ivory: '#FFFFF0',\n    khaki: '#F0E68C',\n    lavender: '#E6E6FA',\n    lavenderblush: '#FFF0F5',\n    lawngreen: '#7CFC00',\n    lemonchiffon: '#FFFACD',\n    lightblue: '#ADD8E6',\n    lightcoral: '#F08080',\n    lightcyan: '#E0FFFF',\n    lightgoldenrodyellow: '#FAFAD2',\n    lightgray: '#D3D3D3',\n    lightgreen: '#90EE90',\n    lightgrey: '#D3D3D3',\n    lightpink: '#FFB6C1',\n    lightsalmon: '#FFA07A',\n    lightseagreen: '#20B2AA',\n    lightskyblue: '#87CEFA',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#B0C4DE',\n    lightyellow: '#FFFFE0',\n    lime: '#00FF00',\n    limegreen: '#32CD32',\n    linen: '#FAF0E6',\n    magenta: '#FF00FF',\n    maroon: '#800000',\n    mediumaquamarine: '#66CDAA',\n    mediumblue: '#0000CD',\n    mediumorchid: '#BA55D3',\n    mediumpurple: '#9370DB',\n    mediumseagreen: '#3CB371',\n    mediumslateblue: '#7B68EE',\n    mediumspringgreen: '#00FA9A',\n    mediumturquoise: '#48D1CC',\n    mediumvioletred: '#C71585',\n    midnightblue: '#191970',\n    mintcream: '#F5FFFA',\n    mistyrose: '#FFE4E1',\n    moccasin: '#FFE4B5',\n    navajowhite: '#FFDEAD',\n    navy: '#000080',\n    oldlace: '#FDF5E6',\n    olive: '#808000',\n    olivedrab: '#6B8E23',\n    orange: '#FFA500',\n    orangered: '#FF4500',\n    orchid: '#DA70D6',\n    palegoldenrod: '#EEE8AA',\n    palegreen: '#98FB98',\n    paleturquoise: '#AFEEEE',\n    palevioletred: '#DB7093',\n    papayawhip: '#FFEFD5',\n    peachpuff: '#FFDAB9',\n    peru: '#CD853F',\n    pink: '#FFC0CB',\n    plum: '#DDA0DD',\n    powderblue: '#B0E0E6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#FF0000',\n    rosybrown: '#BC8F8F',\n    royalblue: '#4169E1',\n    saddlebrown: '#8B4513',\n    salmon: '#FA8072',\n    sandybrown: '#F4A460',\n    seagreen: '#2E8B57',\n    seashell: '#FFF5EE',\n    sienna: '#A0522D',\n    silver: '#C0C0C0',\n    skyblue: '#87CEEB',\n    slateblue: '#6A5ACD',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#FFFAFA',\n    springgreen: '#00FF7F',\n    steelblue: '#4682B4',\n    tan: '#D2B48C',\n    teal: '#008080',\n    thistle: '#D8BFD8',\n    tomato: '#FF6347',\n    turquoise: '#40E0D0',\n    violet: '#EE82EE',\n    wheat: '#F5DEB3',\n    white: '#FFFFFF',\n    whitesmoke: '#F5F5F5',\n    yellow: '#FFFF00',\n    yellowgreen: '#9ACD32'\n  });\n  return Color;\n}();\n\nexport { Color };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/utils/color.js"],"names":["Color","r","g","b","a","Math","min","max","fromString","str","indexOf","fromHexString","hex","nameToHex","fromRgbaString","Error","parseHex","input","replace","slice","parts","length","i","push","parseInt","split","map","p","every","values","stringToRgba","_a","NaN","po","pc","c","contents","substring","rgba","part","value","parseFloat","isNaN","fromArray","arr","fromHSB","h","s","alpha","rgb","HSBtoRGB","padHex","prototype","toHexString","round","toString","toRgbaString","fractionDigits","components","k","pow","join","toHSB","RGBtoHSB","S","H","delta","rc","gc","bc","B","floor","f","q","t","derive","hueShift","saturationFactor","brightnessFactor","opacityFactor","hsb","brighter","darker","Object","freeze","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar Color = /** @class */ (function () {\n    /**\n     * Every color component should be in the [0, 1] range.\n     * Some easing functions (such as elastic easing) can overshoot the target value by some amount.\n     * So, when animating colors, if the source or target color components are already near\n     * or at the edge of the allowed [0, 1] range, it is possible for the intermediate color\n     * component value to end up outside of that range mid-animation. For this reason the constructor\n     * performs range checking/constraining.\n     * @param r Red component.\n     * @param g Green component.\n     * @param b Blue component.\n     * @param a Alpha (opacity) component.\n     */\n    function Color(r, g, b, a) {\n        if (a === void 0) { a = 1; }\n        // NaN is treated as 0.\n        this.r = Math.min(1, Math.max(0, r || 0));\n        this.g = Math.min(1, Math.max(0, g || 0));\n        this.b = Math.min(1, Math.max(0, b || 0));\n        this.a = Math.min(1, Math.max(0, a || 0));\n    }\n    /**\n     * The given string can be in one of the following formats:\n     * - #rgb\n     * - #rrggbb\n     * - rgb(r, g, b)\n     * - rgba(r, g, b, a)\n     * - CSS color name such as 'white', 'orange', 'cyan', etc.\n     * @param str\n     */\n    Color.fromString = function (str) {\n        // hexadecimal notation\n        if (str.indexOf('#') >= 0) { // there can be some leading whitespace\n            return Color.fromHexString(str);\n        }\n        // color name\n        var hex = Color.nameToHex[str];\n        if (hex) {\n            return Color.fromHexString(hex);\n        }\n        // rgb(a) notation\n        if (str.indexOf('rgb') >= 0) {\n            return Color.fromRgbaString(str);\n        }\n        throw new Error(\"Invalid color string: '\" + str + \"'\");\n    };\n    // See https://drafts.csswg.org/css-color/#hex-notation\n    Color.parseHex = function (input) {\n        input = input.replace(/ /g, '').slice(1);\n        var parts;\n        switch (input.length) {\n            case 6:\n            case 8:\n                parts = [];\n                for (var i = 0; i < input.length; i += 2) {\n                    parts.push(parseInt(\"\" + input[i] + input[i + 1], 16));\n                }\n                break;\n            case 3:\n            case 4:\n                parts = input.split('').map(function (p) { return parseInt(p, 16); }).map(function (p) { return p + p * 16; });\n                break;\n        }\n        if (parts.length >= 3) {\n            if (parts.every(function (p) { return p >= 0; })) {\n                if (parts.length === 3) {\n                    parts.push(255);\n                }\n                return parts;\n            }\n        }\n    };\n    Color.fromHexString = function (str) {\n        var values = Color.parseHex(str);\n        if (values) {\n            var r = values[0], g = values[1], b = values[2], a = values[3];\n            return new Color(r / 255, g / 255, b / 255, a / 255);\n        }\n        throw new Error(\"Malformed hexadecimal color string: '\" + str + \"'\");\n    };\n    Color.stringToRgba = function (str) {\n        // Find positions of opening and closing parentheses.\n        var _a = [NaN, NaN], po = _a[0], pc = _a[1];\n        for (var i = 0; i < str.length; i++) {\n            var c = str[i];\n            if (!po && c === '(') {\n                po = i;\n            }\n            else if (c === ')') {\n                pc = i;\n                break;\n            }\n        }\n        var contents = po && pc && str.substring(po + 1, pc);\n        if (!contents) {\n            return;\n        }\n        var parts = contents.split(',');\n        var rgba = [];\n        for (var i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            var value = parseFloat(part);\n            if (isNaN(value)) {\n                return;\n            }\n            if (part.indexOf('%') >= 0) { // percentage r, g, or b value\n                value = Math.max(0, Math.min(100, value));\n                value /= 100;\n            }\n            else {\n                if (i === 3) { // alpha component\n                    value = Math.max(0, Math.min(1, value));\n                }\n                else { // absolute r, g, or b value\n                    value = Math.max(0, Math.min(255, value));\n                    value /= 255;\n                }\n            }\n            rgba.push(value);\n        }\n        return rgba;\n    };\n    Color.fromRgbaString = function (str) {\n        var rgba = Color.stringToRgba(str);\n        if (rgba) {\n            if (rgba.length === 3) {\n                return new Color(rgba[0], rgba[1], rgba[2]);\n            }\n            else if (rgba.length === 4) {\n                return new Color(rgba[0], rgba[1], rgba[2], rgba[3]);\n            }\n        }\n        throw new Error(\"Malformed rgb/rgba color string: '\" + str + \"'\");\n    };\n    Color.fromArray = function (arr) {\n        if (arr.length === 4) {\n            return new Color(arr[0], arr[1], arr[2], arr[3]);\n        }\n        if (arr.length === 3) {\n            return new Color(arr[0], arr[1], arr[2]);\n        }\n        throw new Error('The given array should contain 3 or 4 color components (numbers).');\n    };\n    Color.fromHSB = function (h, s, b, alpha) {\n        if (alpha === void 0) { alpha = 1; }\n        var rgb = Color.HSBtoRGB(h, s, b);\n        return new Color(rgb[0], rgb[1], rgb[2], alpha);\n    };\n    Color.padHex = function (str) {\n        // Can't use `padStart(2, '0')` here because of IE.\n        return str.length === 1 ? '0' + str : str;\n    };\n    Color.prototype.toHexString = function () {\n        var hex = '#'\n            + Color.padHex(Math.round(this.r * 255).toString(16))\n            + Color.padHex(Math.round(this.g * 255).toString(16))\n            + Color.padHex(Math.round(this.b * 255).toString(16));\n        if (this.a < 1) {\n            hex += Color.padHex(Math.round(this.a * 255).toString(16));\n        }\n        return hex;\n    };\n    Color.prototype.toRgbaString = function (fractionDigits) {\n        if (fractionDigits === void 0) { fractionDigits = 3; }\n        var components = [\n            Math.round(this.r * 255),\n            Math.round(this.g * 255),\n            Math.round(this.b * 255)\n        ];\n        var k = Math.pow(10, fractionDigits);\n        if (this.a !== 1) {\n            components.push(Math.round(this.a * k) / k);\n            return \"rgba(\" + components.join(', ') + \")\";\n        }\n        return \"rgb(\" + components.join(', ') + \")\";\n    };\n    Color.prototype.toString = function () {\n        if (this.a === 1) {\n            return this.toHexString();\n        }\n        return this.toRgbaString();\n    };\n    Color.prototype.toHSB = function () {\n        return Color.RGBtoHSB(this.r, this.g, this.b);\n    };\n    /**\n     * Converts the given RGB triple to an array of HSB (HSV) components.\n     * The hue component will be `NaN` for achromatic colors.\n     */\n    Color.RGBtoHSB = function (r, g, b) {\n        var min = Math.min(r, g, b);\n        var max = Math.max(r, g, b);\n        var S = max !== 0 ? (max - min) / max : 0;\n        var H = NaN;\n        // min == max, means all components are the same\n        // and the color is a shade of gray with no hue (H is NaN)\n        if (min !== max) {\n            var delta = max - min;\n            var rc = (max - r) / delta;\n            var gc = (max - g) / delta;\n            var bc = (max - b) / delta;\n            if (r === max) {\n                H = bc - gc;\n            }\n            else if (g === max) {\n                H = 2.0 + rc - bc;\n            }\n            else {\n                H = 4.0 + gc - rc;\n            }\n            H /= 6.0;\n            if (H < 0) {\n                H = H + 1.0;\n            }\n        }\n        return [H * 360, S, max];\n    };\n    /**\n     * Converts the given HSB (HSV) triple to an array of RGB components.\n     */\n    Color.HSBtoRGB = function (H, S, B) {\n        if (isNaN(H)) {\n            H = 0;\n        }\n        H = (((H % 360) + 360) % 360) / 360; // normalize hue to [0, 360] interval, then scale to [0, 1]\n        var r = 0;\n        var g = 0;\n        var b = 0;\n        if (S === 0) {\n            r = g = b = B;\n        }\n        else {\n            var h = (H - Math.floor(H)) * 6;\n            var f = h - Math.floor(h);\n            var p = B * (1 - S);\n            var q = B * (1 - S * f);\n            var t = B * (1 - (S * (1 - f)));\n            switch (h >> 0) { // discard the floating point part of the number\n                case 0:\n                    r = B;\n                    g = t;\n                    b = p;\n                    break;\n                case 1:\n                    r = q;\n                    g = B;\n                    b = p;\n                    break;\n                case 2:\n                    r = p;\n                    g = B;\n                    b = t;\n                    break;\n                case 3:\n                    r = p;\n                    g = q;\n                    b = B;\n                    break;\n                case 4:\n                    r = t;\n                    g = p;\n                    b = B;\n                    break;\n                case 5:\n                    r = B;\n                    g = p;\n                    b = q;\n                    break;\n            }\n        }\n        return [r, g, b];\n    };\n    Color.prototype.derive = function (hueShift, saturationFactor, brightnessFactor, opacityFactor) {\n        var hsb = Color.RGBtoHSB(this.r, this.g, this.b);\n        var b = hsb[2];\n        if (b == 0 && brightnessFactor > 1.0) {\n            b = 0.05;\n        }\n        var h = (((hsb[0] + hueShift) % 360) + 360) % 360;\n        var s = Math.max(Math.min(hsb[1] * saturationFactor, 1.0), 0.0);\n        b = Math.max(Math.min(b * brightnessFactor, 1.0), 0.0);\n        var a = Math.max(Math.min(this.a * opacityFactor, 1.0), 0.0);\n        var rgba = Color.HSBtoRGB(h, s, b);\n        rgba.push(a);\n        return Color.fromArray(rgba);\n    };\n    Color.prototype.brighter = function () {\n        return this.derive(0, 1.0, 1.0 / 0.7, 1.0);\n    };\n    Color.prototype.darker = function () {\n        return this.derive(0, 1.0, 0.7, 1.0);\n    };\n    /**\n     * CSS Color Module Level 4:\n     * https://drafts.csswg.org/css-color/#named-colors\n     */\n    Color.nameToHex = Object.freeze({\n        aliceblue: '#F0F8FF',\n        antiquewhite: '#FAEBD7',\n        aqua: '#00FFFF',\n        aquamarine: '#7FFFD4',\n        azure: '#F0FFFF',\n        beige: '#F5F5DC',\n        bisque: '#FFE4C4',\n        black: '#000000',\n        blanchedalmond: '#FFEBCD',\n        blue: '#0000FF',\n        blueviolet: '#8A2BE2',\n        brown: '#A52A2A',\n        burlywood: '#DEB887',\n        cadetblue: '#5F9EA0',\n        chartreuse: '#7FFF00',\n        chocolate: '#D2691E',\n        coral: '#FF7F50',\n        cornflowerblue: '#6495ED',\n        cornsilk: '#FFF8DC',\n        crimson: '#DC143C',\n        cyan: '#00FFFF',\n        darkblue: '#00008B',\n        darkcyan: '#008B8B',\n        darkgoldenrod: '#B8860B',\n        darkgray: '#A9A9A9',\n        darkgreen: '#006400',\n        darkgrey: '#A9A9A9',\n        darkkhaki: '#BDB76B',\n        darkmagenta: '#8B008B',\n        darkolivegreen: '#556B2F',\n        darkorange: '#FF8C00',\n        darkorchid: '#9932CC',\n        darkred: '#8B0000',\n        darksalmon: '#E9967A',\n        darkseagreen: '#8FBC8F',\n        darkslateblue: '#483D8B',\n        darkslategray: '#2F4F4F',\n        darkslategrey: '#2F4F4F',\n        darkturquoise: '#00CED1',\n        darkviolet: '#9400D3',\n        deeppink: '#FF1493',\n        deepskyblue: '#00BFFF',\n        dimgray: '#696969',\n        dimgrey: '#696969',\n        dodgerblue: '#1E90FF',\n        firebrick: '#B22222',\n        floralwhite: '#FFFAF0',\n        forestgreen: '#228B22',\n        fuchsia: '#FF00FF',\n        gainsboro: '#DCDCDC',\n        ghostwhite: '#F8F8FF',\n        gold: '#FFD700',\n        goldenrod: '#DAA520',\n        gray: '#808080',\n        green: '#008000',\n        greenyellow: '#ADFF2F',\n        grey: '#808080',\n        honeydew: '#F0FFF0',\n        hotpink: '#FF69B4',\n        indianred: '#CD5C5C',\n        indigo: '#4B0082',\n        ivory: '#FFFFF0',\n        khaki: '#F0E68C',\n        lavender: '#E6E6FA',\n        lavenderblush: '#FFF0F5',\n        lawngreen: '#7CFC00',\n        lemonchiffon: '#FFFACD',\n        lightblue: '#ADD8E6',\n        lightcoral: '#F08080',\n        lightcyan: '#E0FFFF',\n        lightgoldenrodyellow: '#FAFAD2',\n        lightgray: '#D3D3D3',\n        lightgreen: '#90EE90',\n        lightgrey: '#D3D3D3',\n        lightpink: '#FFB6C1',\n        lightsalmon: '#FFA07A',\n        lightseagreen: '#20B2AA',\n        lightskyblue: '#87CEFA',\n        lightslategray: '#778899',\n        lightslategrey: '#778899',\n        lightsteelblue: '#B0C4DE',\n        lightyellow: '#FFFFE0',\n        lime: '#00FF00',\n        limegreen: '#32CD32',\n        linen: '#FAF0E6',\n        magenta: '#FF00FF',\n        maroon: '#800000',\n        mediumaquamarine: '#66CDAA',\n        mediumblue: '#0000CD',\n        mediumorchid: '#BA55D3',\n        mediumpurple: '#9370DB',\n        mediumseagreen: '#3CB371',\n        mediumslateblue: '#7B68EE',\n        mediumspringgreen: '#00FA9A',\n        mediumturquoise: '#48D1CC',\n        mediumvioletred: '#C71585',\n        midnightblue: '#191970',\n        mintcream: '#F5FFFA',\n        mistyrose: '#FFE4E1',\n        moccasin: '#FFE4B5',\n        navajowhite: '#FFDEAD',\n        navy: '#000080',\n        oldlace: '#FDF5E6',\n        olive: '#808000',\n        olivedrab: '#6B8E23',\n        orange: '#FFA500',\n        orangered: '#FF4500',\n        orchid: '#DA70D6',\n        palegoldenrod: '#EEE8AA',\n        palegreen: '#98FB98',\n        paleturquoise: '#AFEEEE',\n        palevioletred: '#DB7093',\n        papayawhip: '#FFEFD5',\n        peachpuff: '#FFDAB9',\n        peru: '#CD853F',\n        pink: '#FFC0CB',\n        plum: '#DDA0DD',\n        powderblue: '#B0E0E6',\n        purple: '#800080',\n        rebeccapurple: '#663399',\n        red: '#FF0000',\n        rosybrown: '#BC8F8F',\n        royalblue: '#4169E1',\n        saddlebrown: '#8B4513',\n        salmon: '#FA8072',\n        sandybrown: '#F4A460',\n        seagreen: '#2E8B57',\n        seashell: '#FFF5EE',\n        sienna: '#A0522D',\n        silver: '#C0C0C0',\n        skyblue: '#87CEEB',\n        slateblue: '#6A5ACD',\n        slategray: '#708090',\n        slategrey: '#708090',\n        snow: '#FFFAFA',\n        springgreen: '#00FF7F',\n        steelblue: '#4682B4',\n        tan: '#D2B48C',\n        teal: '#008080',\n        thistle: '#D8BFD8',\n        tomato: '#FF6347',\n        turquoise: '#40E0D0',\n        violet: '#EE82EE',\n        wheat: '#F5DEB3',\n        white: '#FFFFFF',\n        whitesmoke: '#F5F5F5',\n        yellow: '#FFFF00',\n        yellowgreen: '#9ACD32'\n    });\n    return Color;\n}());\nexport { Color };\n"]},"metadata":{},"sourceType":"module"}