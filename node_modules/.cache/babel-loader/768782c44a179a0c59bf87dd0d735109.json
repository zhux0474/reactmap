{"ast":null,"code":"/**\n * @module ol/render\n */\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\nimport { DEVICE_PIXEL_RATIO } from './has.js';\nimport { apply as applyTransform, create as createTransform, multiply as multiplyTransform, scale as scaleTransform } from './transform.js';\nimport { getSquaredTolerance } from './renderer/vector.js';\nimport { getTransformFromProjections, getUserProjection } from './proj.js';\n/**\n * @typedef {Object} State\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\n * @property {import(\"./Feature.js\").FeatureLike} feature Feature.\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\n * @property {number} resolution Resolution that the render batch was created and optimized for.\n * This is not the view's resolution that is being rendered.\n * @property {number} rotation Rotation of the rendered layer in radians.\n */\n\n/**\n * A function to be used when sorting features before rendering.\n * It takes two instances of {@link module:ol/Feature} or\n * {@link module:ol/render/Feature} and returns a `{number}`.\n *\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\n */\n\n/**\n * @typedef {Object} ToContextOptions\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\n * pixels. When provided, both canvas and css size will be set according to the\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\n * altered.\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\n * pixel to css pixel ratio) for the canvas.\n */\n\n/**\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\n * to the context's canvas.\n *\n * The units for geometry coordinates are css pixels relative to the top left\n * corner of the canvas element.\n * ```js\n * import {toContext} from 'ol/render';\n * import Fill from 'ol/style/Fill';\n * import Polygon from 'ol/geom/Polygon';\n *\n * var canvas = document.createElement('canvas');\n * var render = toContext(canvas.getContext('2d'),\n *     { size: [100, 100] });\n * render.setFillStrokeStyle(new Fill({ color: blue }));\n * render.drawPolygon(\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));\n * ```\n *\n * @param {CanvasRenderingContext2D} context Canvas context.\n * @param {ToContextOptions} [opt_options] Options.\n * @return {CanvasImmediateRenderer} Canvas Immediate.\n * @api\n */\n\nexport function toContext(context, opt_options) {\n  var canvas = context.canvas;\n  var options = opt_options ? opt_options : {};\n  var pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\n  var size = options.size;\n\n  if (size) {\n    canvas.width = size[0] * pixelRatio;\n    canvas.height = size[1] * pixelRatio;\n    canvas.style.width = size[0] + 'px';\n    canvas.style.height = size[1] + 'px';\n  }\n\n  var extent = [0, 0, canvas.width, canvas.height];\n  var transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\n  return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\n}\n/**\n * Gets a vector context for drawing to the event's canvas.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @return {CanvasImmediateRenderer} Vector context.\n * @api\n */\n\nexport function getVectorContext(event) {\n  if (!(event.context instanceof CanvasRenderingContext2D)) {\n    throw new Error('Only works for render events from Canvas 2D layers');\n  } // canvas may be at a different pixel ratio than frameState.pixelRatio\n\n\n  var canvasPixelRatio = event.inversePixelTransform[0];\n  var frameState = event.frameState;\n  var transform = multiplyTransform(event.inversePixelTransform.slice(), frameState.coordinateToPixelTransform);\n  var squaredTolerance = getSquaredTolerance(frameState.viewState.resolution, canvasPixelRatio);\n  var userTransform;\n  var userProjection = getUserProjection();\n\n  if (userProjection) {\n    userTransform = getTransformFromProjections(userProjection, frameState.viewState.projection);\n  }\n\n  return new CanvasImmediateRenderer(event.context, canvasPixelRatio, frameState.extent, transform, frameState.viewState.rotation, squaredTolerance, userTransform);\n}\n/**\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\n * corner of the map viewport.\n * @return {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\n * @api\n */\n\nexport function getRenderPixel(event, pixel) {\n  return applyTransform(event.inversePixelTransform, pixel.slice(0));\n}","map":{"version":3,"sources":["/Users/rongxuan/Desktop/git_react/node_modules/ol/src/render.js"],"names":[],"mappings":"AAAA;;AAEG;AACH,OAAO,uBAAP,MAAoC,8BAApC;AACA,SAAQ,kBAAR,QAAiC,UAAjC;AACA,SACE,KAAK,IAAI,cADX,EAEE,MAAM,IAAI,eAFZ,EAGE,QAAQ,IAAI,iBAHd,EAIE,KAAK,IAAI,cAJX,QAKO,gBALP;AAMA,SAAQ,mBAAR,QAAkC,sBAAlC;AACA,SAAQ,2BAAR,EAAqC,iBAArC,QAA6D,WAA7D;AAEA;;;;;;;;;AASG;;AAEH;;;;;;AAMG;;AAEH;;;;;;;;AAQG;;AAEH;;;;;;;;;;;;;;;;;;;;;;;AAuBG;;AACH,OAAM,SAAU,SAAV,CAAoB,OAApB,EAA6B,WAA7B,EAAwC;AAC5C,MAAM,MAAM,GAAG,OAAO,CAAC,MAAvB;AACA,MAAM,OAAO,GAAG,WAAW,GAAG,WAAH,GAAiB,EAA5C;AACA,MAAM,UAAU,GAAG,OAAO,CAAC,UAAR,IAAsB,kBAAzC;AACA,MAAM,IAAI,GAAG,OAAO,CAAC,IAArB;;AACA,MAAI,IAAJ,EAAU;AACR,IAAA,MAAM,CAAC,KAAP,GAAe,IAAI,CAAC,CAAD,CAAJ,GAAU,UAAzB;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,IAAI,CAAC,CAAD,CAAJ,GAAU,UAA1B;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,KAAb,GAAqB,IAAI,CAAC,CAAD,CAAJ,GAAU,IAA/B;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,MAAb,GAAsB,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAhC;AACD;;AACD,MAAM,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,MAAM,CAAC,KAAd,EAAqB,MAAM,CAAC,MAA5B,CAAf;AACA,MAAM,SAAS,GAAG,cAAc,CAAC,eAAe,EAAhB,EAAoB,UAApB,EAAgC,UAAhC,CAAhC;AACA,SAAO,IAAI,uBAAJ,CAA4B,OAA5B,EAAqC,UAArC,EAAiD,MAAjD,EAAyD,SAAzD,EAAoE,CAApE,CAAP;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,gBAAV,CAA2B,KAA3B,EAAgC;AACpC,MAAI,EAAE,KAAK,CAAC,OAAN,YAAyB,wBAA3B,CAAJ,EAA0D;AACxD,UAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACD,GAHmC,CAKpC;;;AACA,MAAM,gBAAgB,GAAG,KAAK,CAAC,qBAAN,CAA4B,CAA5B,CAAzB;AACA,MAAM,UAAU,GAAG,KAAK,CAAC,UAAzB;AACA,MAAM,SAAS,GAAG,iBAAiB,CACjC,KAAK,CAAC,qBAAN,CAA4B,KAA5B,EADiC,EAEjC,UAAU,CAAC,0BAFsB,CAAnC;AAIA,MAAM,gBAAgB,GAAG,mBAAmB,CAC1C,UAAU,CAAC,SAAX,CAAqB,UADqB,EAE1C,gBAF0C,CAA5C;AAIA,MAAI,aAAJ;AACA,MAAM,cAAc,GAAG,iBAAiB,EAAxC;;AACA,MAAI,cAAJ,EAAoB;AAClB,IAAA,aAAa,GAAG,2BAA2B,CACzC,cADyC,EAEzC,UAAU,CAAC,SAAX,CAAqB,UAFoB,CAA3C;AAID;;AAED,SAAO,IAAI,uBAAJ,CACL,KAAK,CAAC,OADD,EAEL,gBAFK,EAGL,UAAU,CAAC,MAHN,EAIL,SAJK,EAKL,UAAU,CAAC,SAAX,CAAqB,QALhB,EAML,gBANK,EAOL,aAPK,CAAP;AASD;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,cAAV,CAAyB,KAAzB,EAAgC,KAAhC,EAAqC;AACzC,SAAO,cAAc,CAAC,KAAK,CAAC,qBAAP,EAA8B,KAAK,CAAC,KAAN,CAAY,CAAZ,CAA9B,CAArB;AACD","sourcesContent":["/**\n * @module ol/render\n */\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\nimport {DEVICE_PIXEL_RATIO} from './has.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n  multiply as multiplyTransform,\n  scale as scaleTransform,\n} from './transform.js';\nimport {getSquaredTolerance} from './renderer/vector.js';\nimport {getTransformFromProjections, getUserProjection} from './proj.js';\n\n/**\n * @typedef {Object} State\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\n * @property {import(\"./Feature.js\").FeatureLike} feature Feature.\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\n * @property {number} resolution Resolution that the render batch was created and optimized for.\n * This is not the view's resolution that is being rendered.\n * @property {number} rotation Rotation of the rendered layer in radians.\n */\n\n/**\n * A function to be used when sorting features before rendering.\n * It takes two instances of {@link module:ol/Feature} or\n * {@link module:ol/render/Feature} and returns a `{number}`.\n *\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\n */\n\n/**\n * @typedef {Object} ToContextOptions\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\n * pixels. When provided, both canvas and css size will be set according to the\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\n * altered.\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\n * pixel to css pixel ratio) for the canvas.\n */\n\n/**\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\n * to the context's canvas.\n *\n * The units for geometry coordinates are css pixels relative to the top left\n * corner of the canvas element.\n * ```js\n * import {toContext} from 'ol/render';\n * import Fill from 'ol/style/Fill';\n * import Polygon from 'ol/geom/Polygon';\n *\n * var canvas = document.createElement('canvas');\n * var render = toContext(canvas.getContext('2d'),\n *     { size: [100, 100] });\n * render.setFillStrokeStyle(new Fill({ color: blue }));\n * render.drawPolygon(\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));\n * ```\n *\n * @param {CanvasRenderingContext2D} context Canvas context.\n * @param {ToContextOptions} [opt_options] Options.\n * @return {CanvasImmediateRenderer} Canvas Immediate.\n * @api\n */\nexport function toContext(context, opt_options) {\n  const canvas = context.canvas;\n  const options = opt_options ? opt_options : {};\n  const pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\n  const size = options.size;\n  if (size) {\n    canvas.width = size[0] * pixelRatio;\n    canvas.height = size[1] * pixelRatio;\n    canvas.style.width = size[0] + 'px';\n    canvas.style.height = size[1] + 'px';\n  }\n  const extent = [0, 0, canvas.width, canvas.height];\n  const transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\n  return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\n}\n\n/**\n * Gets a vector context for drawing to the event's canvas.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @return {CanvasImmediateRenderer} Vector context.\n * @api\n */\nexport function getVectorContext(event) {\n  if (!(event.context instanceof CanvasRenderingContext2D)) {\n    throw new Error('Only works for render events from Canvas 2D layers');\n  }\n\n  // canvas may be at a different pixel ratio than frameState.pixelRatio\n  const canvasPixelRatio = event.inversePixelTransform[0];\n  const frameState = event.frameState;\n  const transform = multiplyTransform(\n    event.inversePixelTransform.slice(),\n    frameState.coordinateToPixelTransform\n  );\n  const squaredTolerance = getSquaredTolerance(\n    frameState.viewState.resolution,\n    canvasPixelRatio\n  );\n  let userTransform;\n  const userProjection = getUserProjection();\n  if (userProjection) {\n    userTransform = getTransformFromProjections(\n      userProjection,\n      frameState.viewState.projection\n    );\n  }\n\n  return new CanvasImmediateRenderer(\n    event.context,\n    canvasPixelRatio,\n    frameState.extent,\n    transform,\n    frameState.viewState.rotation,\n    squaredTolerance,\n    userTransform\n  );\n}\n\n/**\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\n * corner of the map viewport.\n * @return {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\n * @api\n */\nexport function getRenderPixel(event, pixel) {\n  return applyTransform(event.inversePixelTransform, pixel.slice(0));\n}\n"]},"metadata":{},"sourceType":"module"}