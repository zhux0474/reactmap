{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport { _, Events, RowNode } from \"@ag-grid-community/core\";\n\nvar ClientSideNodeManager =\n/** @class */\nfunction () {\n  function ClientSideNodeManager(rootNode, gridOptionsWrapper, eventService, columnModel, gridApi, columnApi, selectionService, beans) {\n    this.nextId = 0; // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n\n    this.allNodesMap = {};\n    this.rootNode = rootNode;\n    this.gridOptionsWrapper = gridOptionsWrapper;\n    this.eventService = eventService;\n    this.columnModel = columnModel;\n    this.gridApi = gridApi;\n    this.columnApi = columnApi;\n    this.beans = beans;\n    this.selectionService = selectionService;\n    this.rootNode.group = true;\n    this.rootNode.level = -1;\n    this.rootNode.id = ClientSideNodeManager.ROOT_NODE_ID;\n    this.rootNode.allLeafChildren = [];\n    this.rootNode.childrenAfterGroup = [];\n    this.rootNode.childrenAfterSort = [];\n    this.rootNode.childrenAfterFilter = []; // if we make this class a bean, then can annotate postConstruct\n\n    this.postConstruct();\n  } // @PostConstruct - this is not a bean, so postConstruct called by constructor\n\n\n  ClientSideNodeManager.prototype.postConstruct = function () {\n    // func below doesn't have 'this' pointer, so need to pull out these bits\n    this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();\n    this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();\n    this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n    this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();\n  };\n\n  ClientSideNodeManager.prototype.getCopyOfNodesMap = function () {\n    return _.cloneObject(this.allNodesMap);\n  };\n\n  ClientSideNodeManager.prototype.getRowNode = function (id) {\n    return this.allNodesMap[id];\n  };\n\n  ClientSideNodeManager.prototype.setRowData = function (rowData) {\n    var _this = this;\n\n    if (typeof rowData === 'string') {\n      console.warn('AG Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');\n      return;\n    }\n\n    var rootNode = this.rootNode;\n    var sibling = this.rootNode.sibling;\n    rootNode.childrenAfterFilter = null;\n    rootNode.childrenAfterGroup = null;\n    rootNode.childrenAfterSort = null;\n    rootNode.childrenMapped = null;\n    rootNode.updateHasChildren();\n    this.nextId = 0;\n    this.allNodesMap = {};\n\n    if (rowData) {\n      // we use rootNode as the parent, however if using ag-grid-enterprise, the grouping stage\n      // sets the parent node on each row (even if we are not grouping). so setting parent node\n      // here is for benefit of ag-grid-community users\n      rootNode.allLeafChildren = rowData.map(function (dataItem) {\n        return _this.createNode(dataItem, _this.rootNode, ClientSideNodeManager.TOP_LEVEL);\n      });\n    } else {\n      rootNode.allLeafChildren = [];\n      rootNode.childrenAfterGroup = [];\n    }\n\n    if (sibling) {\n      sibling.childrenAfterFilter = rootNode.childrenAfterFilter;\n      sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n      sibling.childrenAfterSort = rootNode.childrenAfterSort;\n      sibling.childrenMapped = rootNode.childrenMapped;\n      sibling.allLeafChildren = rootNode.allLeafChildren;\n    }\n  };\n\n  ClientSideNodeManager.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n    var rowNodeTransaction = {\n      remove: [],\n      update: [],\n      add: []\n    };\n    var nodesToUnselect = [];\n    this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);\n    this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);\n    this.executeAdd(rowDataTran, rowNodeTransaction);\n    this.updateSelection(nodesToUnselect);\n\n    if (rowNodeOrder) {\n      _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);\n    }\n\n    return rowNodeTransaction;\n  };\n\n  ClientSideNodeManager.prototype.updateSelection = function (nodesToUnselect) {\n    var selectionChanged = nodesToUnselect.length > 0;\n\n    if (selectionChanged) {\n      nodesToUnselect.forEach(function (rowNode) {\n        rowNode.setSelected(false, false, true);\n      });\n    } // we do this regardless of nodes to unselect or not, as it's possible\n    // a new node was inserted, so a parent that was previously selected (as all\n    // children were selected) should not be tri-state (as new one unselected against\n    // all other selected children).\n\n\n    this.selectionService.updateGroupsFromChildrenSelections();\n\n    if (selectionChanged) {\n      var event_1 = {\n        type: Events.EVENT_SELECTION_CHANGED,\n        api: this.gridApi,\n        columnApi: this.columnApi\n      };\n      this.eventService.dispatchEvent(event_1);\n    }\n  };\n\n  ClientSideNodeManager.prototype.executeAdd = function (rowDataTran, rowNodeTransaction) {\n    var _this = this;\n\n    var add = rowDataTran.add,\n        addIndex = rowDataTran.addIndex;\n\n    if (_.missingOrEmpty(add)) {\n      return;\n    } // create new row nodes for each data item\n\n\n    var newNodes = add.map(function (item) {\n      return _this.createNode(item, _this.rootNode, ClientSideNodeManager.TOP_LEVEL);\n    }); // add new row nodes to the root nodes 'allLeafChildren'\n\n    var useIndex = typeof addIndex === 'number' && addIndex >= 0;\n\n    if (useIndex) {\n      // new rows are inserted in one go by concatenating them in between the existing rows at the desired index.\n      // this is much faster than splicing them individually into 'allLeafChildren' when there are large inserts.\n      var existingLeafChildren = this.rootNode.allLeafChildren;\n      var nodesBeforeIndex = existingLeafChildren.slice(0, addIndex);\n      var nodesAfterIndex = existingLeafChildren.slice(addIndex, existingLeafChildren.length);\n      this.rootNode.allLeafChildren = __spreadArrays(nodesBeforeIndex, newNodes, nodesAfterIndex);\n    } else {\n      this.rootNode.allLeafChildren = __spreadArrays(this.rootNode.allLeafChildren, newNodes);\n    }\n\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;\n    } // add new row nodes to the transaction add items\n\n\n    rowNodeTransaction.add = newNodes;\n  };\n\n  ClientSideNodeManager.prototype.executeRemove = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n    var _this = this;\n\n    var remove = rowDataTran.remove;\n\n    if (_.missingOrEmpty(remove)) {\n      return;\n    }\n\n    var rowIdsRemoved = {};\n    remove.forEach(function (item) {\n      var rowNode = _this.lookupRowNode(item);\n\n      if (!rowNode) {\n        return;\n      } // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for\n      // each row node updated, instead it is raised once by the calling code if any selected nodes exist.\n\n\n      if (rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      } // so row renderer knows to fade row out (and not reposition it)\n\n\n      rowNode.clearRowTopAndRowIndex(); // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially\n      // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\n\n      rowIdsRemoved[rowNode.id] = true; // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n\n      delete _this.allNodesMap[rowNode.id];\n      rowNodeTransaction.remove.push(rowNode);\n    });\n    this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function (rowNode) {\n      return !rowIdsRemoved[rowNode.id];\n    });\n\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;\n    }\n  };\n\n  ClientSideNodeManager.prototype.executeUpdate = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n    var _this = this;\n\n    var update = rowDataTran.update;\n\n    if (_.missingOrEmpty(update)) {\n      return;\n    }\n\n    update.forEach(function (item) {\n      var rowNode = _this.lookupRowNode(item);\n\n      if (!rowNode) {\n        return;\n      }\n\n      rowNode.updateData(item);\n\n      if (!rowNode.selectable && rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      }\n\n      _this.setMasterForRow(rowNode, item, ClientSideNodeManager.TOP_LEVEL, false);\n\n      rowNodeTransaction.update.push(rowNode);\n    });\n  };\n\n  ClientSideNodeManager.prototype.lookupRowNode = function (data) {\n    var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();\n    var rowNode;\n\n    if (_.exists(rowNodeIdFunc)) {\n      // find rowNode using id\n      var id = rowNodeIdFunc(data);\n      rowNode = this.allNodesMap[id];\n\n      if (!rowNode) {\n        console.error(\"AG Grid: could not find row id=\" + id + \", data item was not found for this id\");\n        return null;\n      }\n    } else {\n      // find rowNode using object references\n      rowNode = _.find(this.rootNode.allLeafChildren, function (node) {\n        return node.data === data;\n      });\n\n      if (!rowNode) {\n        console.error(\"AG Grid: could not find data item as object was not found\", data);\n        console.error(\"Consider using getRowNodeId to help the Grid find matching row data\");\n        return null;\n      }\n    }\n\n    return rowNode;\n  };\n\n  ClientSideNodeManager.prototype.createNode = function (dataItem, parent, level) {\n    var node = new RowNode(this.beans);\n    node.group = false;\n    this.setMasterForRow(node, dataItem, level, true);\n\n    if (parent && !this.suppressParentsInRowNodes) {\n      node.parent = parent;\n    }\n\n    node.level = level;\n    node.setDataAndId(dataItem, this.nextId.toString());\n\n    if (this.allNodesMap[node.id]) {\n      console.warn(\"ag-grid: duplicate node id '\" + node.id + \"' detected from getRowNodeId callback, this could cause issues in your grid.\");\n    }\n\n    this.allNodesMap[node.id] = node;\n    this.nextId++;\n    return node;\n  };\n\n  ClientSideNodeManager.prototype.setMasterForRow = function (rowNode, data, level, setExpanded) {\n    if (this.doingTreeData) {\n      rowNode.setMaster(false);\n\n      if (setExpanded) {\n        rowNode.expanded = false;\n      }\n    } else {\n      // this is the default, for when doing grid data\n      if (this.doingMasterDetail) {\n        // if we are doing master detail, then the\n        // default is that everything can be a Master Row.\n        if (this.isRowMasterFunc) {\n          rowNode.setMaster(this.isRowMasterFunc(data));\n        } else {\n          rowNode.setMaster(true);\n        }\n      } else {\n        rowNode.setMaster(false);\n      }\n\n      if (setExpanded) {\n        var rowGroupColumns = this.columnModel.getRowGroupColumns();\n        var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0; // need to take row group into account when determining level\n\n        var masterRowLevel = level + numRowGroupColumns;\n        rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n      }\n    }\n  };\n\n  ClientSideNodeManager.prototype.isExpanded = function (level) {\n    var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();\n\n    if (expandByDefault === -1) {\n      return true;\n    }\n\n    return level < expandByDefault;\n  };\n\n  ClientSideNodeManager.TOP_LEVEL = 0;\n  ClientSideNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';\n  return ClientSideNodeManager;\n}();\n\nexport { ClientSideNodeManager };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/clientSideNodeManager.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","_","Events","RowNode","ClientSideNodeManager","rootNode","gridOptionsWrapper","eventService","columnModel","gridApi","columnApi","selectionService","beans","nextId","allNodesMap","group","level","id","ROOT_NODE_ID","allLeafChildren","childrenAfterGroup","childrenAfterSort","childrenAfterFilter","postConstruct","prototype","suppressParentsInRowNodes","isSuppressParentsInRowNodes","isRowMasterFunc","getIsRowMasterFunc","doingTreeData","isTreeData","doingMasterDetail","isMasterDetail","getCopyOfNodesMap","cloneObject","getRowNode","setRowData","rowData","_this","console","warn","sibling","childrenMapped","updateHasChildren","map","dataItem","createNode","TOP_LEVEL","updateRowData","rowDataTran","rowNodeOrder","rowNodeTransaction","remove","update","add","nodesToUnselect","executeRemove","executeUpdate","executeAdd","updateSelection","sortRowNodesByOrder","selectionChanged","forEach","rowNode","setSelected","updateGroupsFromChildrenSelections","event_1","type","EVENT_SELECTION_CHANGED","api","dispatchEvent","addIndex","missingOrEmpty","newNodes","item","useIndex","existingLeafChildren","nodesBeforeIndex","slice","nodesAfterIndex","rowIdsRemoved","lookupRowNode","isSelected","push","clearRowTopAndRowIndex","filter","updateData","selectable","setMasterForRow","data","rowNodeIdFunc","getRowNodeIdFunc","exists","error","find","node","parent","setDataAndId","toString","setExpanded","setMaster","expanded","rowGroupColumns","getRowGroupColumns","numRowGroupColumns","masterRowLevel","master","isExpanded","expandByDefault","getGroupDefaultExpanded"],"mappings":"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","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { _, Events, RowNode } from \"@ag-grid-community/core\";\nvar ClientSideNodeManager = /** @class */ (function () {\n    function ClientSideNodeManager(rootNode, gridOptionsWrapper, eventService, columnModel, gridApi, columnApi, selectionService, beans) {\n        this.nextId = 0;\n        // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n        this.allNodesMap = {};\n        this.rootNode = rootNode;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n        this.eventService = eventService;\n        this.columnModel = columnModel;\n        this.gridApi = gridApi;\n        this.columnApi = columnApi;\n        this.beans = beans;\n        this.selectionService = selectionService;\n        this.rootNode.group = true;\n        this.rootNode.level = -1;\n        this.rootNode.id = ClientSideNodeManager.ROOT_NODE_ID;\n        this.rootNode.allLeafChildren = [];\n        this.rootNode.childrenAfterGroup = [];\n        this.rootNode.childrenAfterSort = [];\n        this.rootNode.childrenAfterFilter = [];\n        // if we make this class a bean, then can annotate postConstruct\n        this.postConstruct();\n    }\n    // @PostConstruct - this is not a bean, so postConstruct called by constructor\n    ClientSideNodeManager.prototype.postConstruct = function () {\n        // func below doesn't have 'this' pointer, so need to pull out these bits\n        this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();\n        this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();\n        this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();\n    };\n    ClientSideNodeManager.prototype.getCopyOfNodesMap = function () {\n        return _.cloneObject(this.allNodesMap);\n    };\n    ClientSideNodeManager.prototype.getRowNode = function (id) {\n        return this.allNodesMap[id];\n    };\n    ClientSideNodeManager.prototype.setRowData = function (rowData) {\n        var _this = this;\n        if (typeof rowData === 'string') {\n            console.warn('AG Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');\n            return;\n        }\n        var rootNode = this.rootNode;\n        var sibling = this.rootNode.sibling;\n        rootNode.childrenAfterFilter = null;\n        rootNode.childrenAfterGroup = null;\n        rootNode.childrenAfterSort = null;\n        rootNode.childrenMapped = null;\n        rootNode.updateHasChildren();\n        this.nextId = 0;\n        this.allNodesMap = {};\n        if (rowData) {\n            // we use rootNode as the parent, however if using ag-grid-enterprise, the grouping stage\n            // sets the parent node on each row (even if we are not grouping). so setting parent node\n            // here is for benefit of ag-grid-community users\n            rootNode.allLeafChildren = rowData.map(function (dataItem) { return _this.createNode(dataItem, _this.rootNode, ClientSideNodeManager.TOP_LEVEL); });\n        }\n        else {\n            rootNode.allLeafChildren = [];\n            rootNode.childrenAfterGroup = [];\n        }\n        if (sibling) {\n            sibling.childrenAfterFilter = rootNode.childrenAfterFilter;\n            sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n            sibling.childrenAfterSort = rootNode.childrenAfterSort;\n            sibling.childrenMapped = rootNode.childrenMapped;\n            sibling.allLeafChildren = rootNode.allLeafChildren;\n        }\n    };\n    ClientSideNodeManager.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n        var rowNodeTransaction = {\n            remove: [],\n            update: [],\n            add: []\n        };\n        var nodesToUnselect = [];\n        this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);\n        this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);\n        this.executeAdd(rowDataTran, rowNodeTransaction);\n        this.updateSelection(nodesToUnselect);\n        if (rowNodeOrder) {\n            _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);\n        }\n        return rowNodeTransaction;\n    };\n    ClientSideNodeManager.prototype.updateSelection = function (nodesToUnselect) {\n        var selectionChanged = nodesToUnselect.length > 0;\n        if (selectionChanged) {\n            nodesToUnselect.forEach(function (rowNode) {\n                rowNode.setSelected(false, false, true);\n            });\n        }\n        // we do this regardless of nodes to unselect or not, as it's possible\n        // a new node was inserted, so a parent that was previously selected (as all\n        // children were selected) should not be tri-state (as new one unselected against\n        // all other selected children).\n        this.selectionService.updateGroupsFromChildrenSelections();\n        if (selectionChanged) {\n            var event_1 = {\n                type: Events.EVENT_SELECTION_CHANGED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event_1);\n        }\n    };\n    ClientSideNodeManager.prototype.executeAdd = function (rowDataTran, rowNodeTransaction) {\n        var _this = this;\n        var add = rowDataTran.add, addIndex = rowDataTran.addIndex;\n        if (_.missingOrEmpty(add)) {\n            return;\n        }\n        // create new row nodes for each data item\n        var newNodes = add.map(function (item) { return _this.createNode(item, _this.rootNode, ClientSideNodeManager.TOP_LEVEL); });\n        // add new row nodes to the root nodes 'allLeafChildren'\n        var useIndex = typeof addIndex === 'number' && addIndex >= 0;\n        if (useIndex) {\n            // new rows are inserted in one go by concatenating them in between the existing rows at the desired index.\n            // this is much faster than splicing them individually into 'allLeafChildren' when there are large inserts.\n            var existingLeafChildren = this.rootNode.allLeafChildren;\n            var nodesBeforeIndex = existingLeafChildren.slice(0, addIndex);\n            var nodesAfterIndex = existingLeafChildren.slice(addIndex, existingLeafChildren.length);\n            this.rootNode.allLeafChildren = __spreadArrays(nodesBeforeIndex, newNodes, nodesAfterIndex);\n        }\n        else {\n            this.rootNode.allLeafChildren = __spreadArrays(this.rootNode.allLeafChildren, newNodes);\n        }\n        if (this.rootNode.sibling) {\n            this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;\n        }\n        // add new row nodes to the transaction add items\n        rowNodeTransaction.add = newNodes;\n    };\n    ClientSideNodeManager.prototype.executeRemove = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n        var _this = this;\n        var remove = rowDataTran.remove;\n        if (_.missingOrEmpty(remove)) {\n            return;\n        }\n        var rowIdsRemoved = {};\n        remove.forEach(function (item) {\n            var rowNode = _this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for\n            // each row node updated, instead it is raised once by the calling code if any selected nodes exist.\n            if (rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n            // so row renderer knows to fade row out (and not reposition it)\n            rowNode.clearRowTopAndRowIndex();\n            // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially\n            // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\n            rowIdsRemoved[rowNode.id] = true;\n            // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n            delete _this.allNodesMap[rowNode.id];\n            rowNodeTransaction.remove.push(rowNode);\n        });\n        this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function (rowNode) { return !rowIdsRemoved[rowNode.id]; });\n        if (this.rootNode.sibling) {\n            this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;\n        }\n    };\n    ClientSideNodeManager.prototype.executeUpdate = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n        var _this = this;\n        var update = rowDataTran.update;\n        if (_.missingOrEmpty(update)) {\n            return;\n        }\n        update.forEach(function (item) {\n            var rowNode = _this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            rowNode.updateData(item);\n            if (!rowNode.selectable && rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n            _this.setMasterForRow(rowNode, item, ClientSideNodeManager.TOP_LEVEL, false);\n            rowNodeTransaction.update.push(rowNode);\n        });\n    };\n    ClientSideNodeManager.prototype.lookupRowNode = function (data) {\n        var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();\n        var rowNode;\n        if (_.exists(rowNodeIdFunc)) {\n            // find rowNode using id\n            var id = rowNodeIdFunc(data);\n            rowNode = this.allNodesMap[id];\n            if (!rowNode) {\n                console.error(\"AG Grid: could not find row id=\" + id + \", data item was not found for this id\");\n                return null;\n            }\n        }\n        else {\n            // find rowNode using object references\n            rowNode = _.find(this.rootNode.allLeafChildren, function (node) { return node.data === data; });\n            if (!rowNode) {\n                console.error(\"AG Grid: could not find data item as object was not found\", data);\n                console.error(\"Consider using getRowNodeId to help the Grid find matching row data\");\n                return null;\n            }\n        }\n        return rowNode;\n    };\n    ClientSideNodeManager.prototype.createNode = function (dataItem, parent, level) {\n        var node = new RowNode(this.beans);\n        node.group = false;\n        this.setMasterForRow(node, dataItem, level, true);\n        if (parent && !this.suppressParentsInRowNodes) {\n            node.parent = parent;\n        }\n        node.level = level;\n        node.setDataAndId(dataItem, this.nextId.toString());\n        if (this.allNodesMap[node.id]) {\n            console.warn(\"ag-grid: duplicate node id '\" + node.id + \"' detected from getRowNodeId callback, this could cause issues in your grid.\");\n        }\n        this.allNodesMap[node.id] = node;\n        this.nextId++;\n        return node;\n    };\n    ClientSideNodeManager.prototype.setMasterForRow = function (rowNode, data, level, setExpanded) {\n        if (this.doingTreeData) {\n            rowNode.setMaster(false);\n            if (setExpanded) {\n                rowNode.expanded = false;\n            }\n        }\n        else {\n            // this is the default, for when doing grid data\n            if (this.doingMasterDetail) {\n                // if we are doing master detail, then the\n                // default is that everything can be a Master Row.\n                if (this.isRowMasterFunc) {\n                    rowNode.setMaster(this.isRowMasterFunc(data));\n                }\n                else {\n                    rowNode.setMaster(true);\n                }\n            }\n            else {\n                rowNode.setMaster(false);\n            }\n            if (setExpanded) {\n                var rowGroupColumns = this.columnModel.getRowGroupColumns();\n                var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;\n                // need to take row group into account when determining level\n                var masterRowLevel = level + numRowGroupColumns;\n                rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n            }\n        }\n    };\n    ClientSideNodeManager.prototype.isExpanded = function (level) {\n        var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();\n        if (expandByDefault === -1) {\n            return true;\n        }\n        return level < expandByDefault;\n    };\n    ClientSideNodeManager.TOP_LEVEL = 0;\n    ClientSideNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';\n    return ClientSideNodeManager;\n}());\nexport { ClientSideNodeManager };\n"]},"metadata":{},"sourceType":"module"}