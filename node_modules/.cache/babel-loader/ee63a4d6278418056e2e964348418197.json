{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean } from \"../context/context\";\nimport { Column } from \"../entities/column\";\nimport { Constants } from \"../constants/constants\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { mergeDeep, assign } from \"../utils/object\";\nimport { missing } from \"../utils/generic\";\n\nvar AutoGroupColService =\n/** @class */\nfunction (_super) {\n  __extends(AutoGroupColService, _super);\n\n  function AutoGroupColService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AutoGroupColService_1 = AutoGroupColService;\n\n  AutoGroupColService.prototype.createAutoGroupColumns = function (rowGroupColumns) {\n    var _this = this;\n\n    var groupAutoColumns = [];\n    var doingTreeData = this.gridOptionsWrapper.isTreeData();\n    var doingMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();\n\n    if (doingTreeData && doingMultiAutoColumn) {\n      console.warn('AG Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data');\n      doingMultiAutoColumn = false;\n    } // if doing groupMultiAutoColumn, then we call the method multiple times, once\n    // for each column we are grouping by\n\n\n    if (doingMultiAutoColumn) {\n      rowGroupColumns.forEach(function (rowGroupCol, index) {\n        groupAutoColumns.push(_this.createOneAutoGroupColumn(rowGroupCol, index));\n      });\n    } else {\n      groupAutoColumns.push(this.createOneAutoGroupColumn());\n    }\n\n    return groupAutoColumns;\n  }; // rowGroupCol and index are missing if groupMultiAutoColumn=false\n\n\n  AutoGroupColService.prototype.createOneAutoGroupColumn = function (rowGroupCol, index) {\n    // if one provided by user, use it, otherwise create one\n    var defaultAutoColDef = this.generateDefaultColDef(rowGroupCol); // if doing multi, set the field\n\n    var colId;\n\n    if (rowGroupCol) {\n      colId = Constants.GROUP_AUTO_COLUMN_ID + \"-\" + rowGroupCol.getId();\n    } else {\n      colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_BUNDLE_ID;\n    }\n\n    var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();\n    mergeDeep(defaultAutoColDef, userAutoColDef);\n    defaultAutoColDef = this.columnFactory.mergeColDefs(defaultAutoColDef);\n    defaultAutoColDef.colId = colId; // For tree data the filter is always allowed\n\n    if (!this.gridOptionsWrapper.isTreeData()) {\n      // we would only allow filter if the user has provided field or value getter. otherwise the filter\n      // would not be able to work.\n      var noFieldOrValueGetter = missing(defaultAutoColDef.field) && missing(defaultAutoColDef.valueGetter) && missing(defaultAutoColDef.filterValueGetter);\n\n      if (noFieldOrValueGetter) {\n        defaultAutoColDef.filter = false;\n      }\n    } // if showing many cols, we don't want to show more than one with a checkbox for selection\n\n\n    if (index && index > 0) {\n      defaultAutoColDef.headerCheckboxSelection = false;\n    }\n\n    var newCol = new Column(defaultAutoColDef, null, colId, true);\n    this.context.createBean(newCol);\n    return newCol;\n  };\n\n  AutoGroupColService.prototype.generateDefaultColDef = function (rowGroupCol) {\n    var userDef = this.gridOptionsWrapper.getAutoGroupColumnDef();\n    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n    var res = {\n      headerName: localeTextFunc('group', 'Group')\n    };\n    var userHasProvidedGroupCellRenderer = userDef && (userDef.cellRenderer || userDef.cellRendererFramework || userDef.cellRendererSelector); // only add the default group cell renderer if user hasn't provided one\n\n    if (!userHasProvidedGroupCellRenderer) {\n      res.cellRenderer = 'agGroupCellRenderer';\n    } // we never allow moving the group column\n    // defaultAutoColDef.suppressMovable = true;\n\n\n    if (rowGroupCol) {\n      var colDef = rowGroupCol.getColDef();\n      assign(res, {\n        // cellRendererParams.groupKey: colDefToCopy.field;\n        headerName: this.columnModel.getDisplayNameForColumn(rowGroupCol, 'header'),\n        headerValueGetter: colDef.headerValueGetter\n      });\n\n      if (colDef.cellRenderer) {\n        assign(res, {\n          cellRendererParams: {\n            innerRenderer: colDef.cellRenderer,\n            innerRendererParams: colDef.cellRendererParams\n          }\n        });\n      }\n\n      res.showRowGroup = rowGroupCol.getColId();\n    } else {\n      res.showRowGroup = true;\n    }\n\n    return res;\n  };\n\n  var AutoGroupColService_1;\n  AutoGroupColService.GROUP_AUTO_COLUMN_BUNDLE_ID = Constants.GROUP_AUTO_COLUMN_ID;\n\n  __decorate([Autowired('columnModel')], AutoGroupColService.prototype, \"columnModel\", void 0);\n\n  __decorate([Autowired('columnFactory')], AutoGroupColService.prototype, \"columnFactory\", void 0);\n\n  AutoGroupColService = AutoGroupColService_1 = __decorate([Bean('autoGroupColService')], AutoGroupColService);\n  return AutoGroupColService;\n}(BeanStub);\n\nexport { AutoGroupColService };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/columns/autoGroupColService.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Autowired","Bean","Column","Constants","BeanStub","mergeDeep","assign","missing","AutoGroupColService","_super","apply","AutoGroupColService_1","createAutoGroupColumns","rowGroupColumns","_this","groupAutoColumns","doingTreeData","gridOptionsWrapper","isTreeData","doingMultiAutoColumn","isGroupMultiAutoColumn","console","warn","forEach","rowGroupCol","index","push","createOneAutoGroupColumn","defaultAutoColDef","generateDefaultColDef","colId","GROUP_AUTO_COLUMN_ID","getId","GROUP_AUTO_COLUMN_BUNDLE_ID","userAutoColDef","getAutoGroupColumnDef","columnFactory","mergeColDefs","noFieldOrValueGetter","field","valueGetter","filterValueGetter","filter","headerCheckboxSelection","newCol","context","createBean","userDef","localeTextFunc","getLocaleTextFunc","res","headerName","userHasProvidedGroupCellRenderer","cellRenderer","cellRendererFramework","cellRendererSelector","colDef","getColDef","columnModel","getDisplayNameForColumn","headerValueGetter","cellRendererParams","innerRenderer","innerRendererParams","showRowGroup","getColId"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"../context/context\";\nimport { Column } from \"../entities/column\";\nimport { Constants } from \"../constants/constants\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { mergeDeep, assign } from \"../utils/object\";\nimport { missing } from \"../utils/generic\";\nvar AutoGroupColService = /** @class */ (function (_super) {\n    __extends(AutoGroupColService, _super);\n    function AutoGroupColService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AutoGroupColService_1 = AutoGroupColService;\n    AutoGroupColService.prototype.createAutoGroupColumns = function (rowGroupColumns) {\n        var _this = this;\n        var groupAutoColumns = [];\n        var doingTreeData = this.gridOptionsWrapper.isTreeData();\n        var doingMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();\n        if (doingTreeData && doingMultiAutoColumn) {\n            console.warn('AG Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data');\n            doingMultiAutoColumn = false;\n        }\n        // if doing groupMultiAutoColumn, then we call the method multiple times, once\n        // for each column we are grouping by\n        if (doingMultiAutoColumn) {\n            rowGroupColumns.forEach(function (rowGroupCol, index) {\n                groupAutoColumns.push(_this.createOneAutoGroupColumn(rowGroupCol, index));\n            });\n        }\n        else {\n            groupAutoColumns.push(this.createOneAutoGroupColumn());\n        }\n        return groupAutoColumns;\n    };\n    // rowGroupCol and index are missing if groupMultiAutoColumn=false\n    AutoGroupColService.prototype.createOneAutoGroupColumn = function (rowGroupCol, index) {\n        // if one provided by user, use it, otherwise create one\n        var defaultAutoColDef = this.generateDefaultColDef(rowGroupCol);\n        // if doing multi, set the field\n        var colId;\n        if (rowGroupCol) {\n            colId = Constants.GROUP_AUTO_COLUMN_ID + \"-\" + rowGroupCol.getId();\n        }\n        else {\n            colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_BUNDLE_ID;\n        }\n        var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();\n        mergeDeep(defaultAutoColDef, userAutoColDef);\n        defaultAutoColDef = this.columnFactory.mergeColDefs(defaultAutoColDef);\n        defaultAutoColDef.colId = colId;\n        // For tree data the filter is always allowed\n        if (!this.gridOptionsWrapper.isTreeData()) {\n            // we would only allow filter if the user has provided field or value getter. otherwise the filter\n            // would not be able to work.\n            var noFieldOrValueGetter = missing(defaultAutoColDef.field) && missing(defaultAutoColDef.valueGetter) && missing(defaultAutoColDef.filterValueGetter);\n            if (noFieldOrValueGetter) {\n                defaultAutoColDef.filter = false;\n            }\n        }\n        // if showing many cols, we don't want to show more than one with a checkbox for selection\n        if (index && index > 0) {\n            defaultAutoColDef.headerCheckboxSelection = false;\n        }\n        var newCol = new Column(defaultAutoColDef, null, colId, true);\n        this.context.createBean(newCol);\n        return newCol;\n    };\n    AutoGroupColService.prototype.generateDefaultColDef = function (rowGroupCol) {\n        var userDef = this.gridOptionsWrapper.getAutoGroupColumnDef();\n        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n        var res = {\n            headerName: localeTextFunc('group', 'Group')\n        };\n        var userHasProvidedGroupCellRenderer = userDef &&\n            (userDef.cellRenderer || userDef.cellRendererFramework || userDef.cellRendererSelector);\n        // only add the default group cell renderer if user hasn't provided one\n        if (!userHasProvidedGroupCellRenderer) {\n            res.cellRenderer = 'agGroupCellRenderer';\n        }\n        // we never allow moving the group column\n        // defaultAutoColDef.suppressMovable = true;\n        if (rowGroupCol) {\n            var colDef = rowGroupCol.getColDef();\n            assign(res, {\n                // cellRendererParams.groupKey: colDefToCopy.field;\n                headerName: this.columnModel.getDisplayNameForColumn(rowGroupCol, 'header'),\n                headerValueGetter: colDef.headerValueGetter\n            });\n            if (colDef.cellRenderer) {\n                assign(res, {\n                    cellRendererParams: {\n                        innerRenderer: colDef.cellRenderer,\n                        innerRendererParams: colDef.cellRendererParams\n                    }\n                });\n            }\n            res.showRowGroup = rowGroupCol.getColId();\n        }\n        else {\n            res.showRowGroup = true;\n        }\n        return res;\n    };\n    var AutoGroupColService_1;\n    AutoGroupColService.GROUP_AUTO_COLUMN_BUNDLE_ID = Constants.GROUP_AUTO_COLUMN_ID;\n    __decorate([\n        Autowired('columnModel')\n    ], AutoGroupColService.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('columnFactory')\n    ], AutoGroupColService.prototype, \"columnFactory\", void 0);\n    AutoGroupColService = AutoGroupColService_1 = __decorate([\n        Bean('autoGroupColService')\n    ], AutoGroupColService);\n    return AutoGroupColService;\n}(BeanStub));\nexport { AutoGroupColService };\n"]},"metadata":{},"sourceType":"module"}