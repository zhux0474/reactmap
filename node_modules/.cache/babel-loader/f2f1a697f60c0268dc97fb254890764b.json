{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { isBrowserEdge, isBrowserIE } from './browser';\nimport { exists } from './generic';\nvar NUMPAD_DEL_NUMLOCK_ON_KEY = 'Del';\nvar NUMPAD_DEL_NUMLOCK_ON_CHARCODE = 46;\nexport function isKeyPressed(event, keyToCheck) {\n  return (event.which || event.keyCode) === keyToCheck;\n}\nexport function isEventFromPrintableCharacter(event) {\n  // no allowed printable chars have alt or ctrl key combinations\n  if (event.altKey || event.ctrlKey || event.metaKey) {\n    return false;\n  } // if key is length 1, eg if it is 'a' for the a key, or '2' for the '2' key.\n  // non-printable characters have names, eg 'Enter' or 'Backspace'.\n\n\n  var printableCharacter = event.key.length === 1; // IE11 & Edge treat the numpad del key differently - with numlock on we get \"Del\" for key,\n  // so this addition checks if its IE11/Edge and handles that specific case the same was as all other browsers\n\n  var numpadDelWithNumlockOnForEdgeOrIe = isNumpadDelWithNumlockOnForEdgeOrIe(event);\n  return printableCharacter || numpadDelWithNumlockOnForEdgeOrIe;\n}\n/**\n * Allows user to tell the grid to skip specific keyboard events\n * @param {GridOptionsWrapper} gridOptionsWrapper\n * @param {KeyboardEvent} keyboardEvent\n * @param {RowNode} rowNode\n * @param {Column} column\n * @param {boolean} editing\n * @returns {boolean}\n */\n\nexport function isUserSuppressingKeyboardEvent(gridOptionsWrapper, keyboardEvent, rowNode, column, editing) {\n  var gridOptionsFunc = gridOptionsWrapper.getSuppressKeyboardEventFunc();\n  var colDefFunc = column ? column.getColDef().suppressKeyboardEvent : undefined; // if no callbacks provided by user, then do nothing\n\n  if (!gridOptionsFunc && !colDefFunc) {\n    return false;\n  }\n\n  var params = {\n    event: keyboardEvent,\n    editing: editing,\n    column: column,\n    api: gridOptionsWrapper.getApi(),\n    node: rowNode,\n    data: rowNode.data,\n    colDef: column.getColDef(),\n    context: gridOptionsWrapper.getContext(),\n    columnApi: gridOptionsWrapper.getColumnApi()\n  }; // colDef get first preference on suppressing events\n\n  if (colDefFunc) {\n    var colDefFuncResult = colDefFunc(params); // if colDef func suppressed, then return now, no need to call gridOption func\n\n    if (colDefFuncResult) {\n      return true;\n    }\n  }\n\n  if (gridOptionsFunc) {\n    // if gridOption func, return the result\n    return gridOptionsFunc(params);\n  } // otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions\n\n\n  return false;\n}\nexport function isUserSuppressingHeaderKeyboardEvent(gridOptionsWrapper, keyboardEvent, headerRowIndex, column) {\n  var colDef = column.getDefinition();\n  var colDefFunc = colDef && colDef.suppressHeaderKeyboardEvent;\n\n  if (!exists(colDefFunc)) {\n    return false;\n  }\n\n  var params = {\n    api: gridOptionsWrapper.getApi(),\n    columnApi: gridOptionsWrapper.getColumnApi(),\n    context: gridOptionsWrapper.getContext(),\n    colDef: colDef,\n    column: column,\n    headerRowIndex: headerRowIndex,\n    event: keyboardEvent\n  };\n  return !!colDefFunc(params);\n}\n\nfunction isNumpadDelWithNumlockOnForEdgeOrIe(event) {\n  return (isBrowserEdge() || isBrowserIE()) && event.key === NUMPAD_DEL_NUMLOCK_ON_KEY && event.charCode === NUMPAD_DEL_NUMLOCK_ON_CHARCODE;\n}","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/utils/keyboard.js"],"names":["isBrowserEdge","isBrowserIE","exists","NUMPAD_DEL_NUMLOCK_ON_KEY","NUMPAD_DEL_NUMLOCK_ON_CHARCODE","isKeyPressed","event","keyToCheck","which","keyCode","isEventFromPrintableCharacter","altKey","ctrlKey","metaKey","printableCharacter","key","length","numpadDelWithNumlockOnForEdgeOrIe","isNumpadDelWithNumlockOnForEdgeOrIe","isUserSuppressingKeyboardEvent","gridOptionsWrapper","keyboardEvent","rowNode","column","editing","gridOptionsFunc","getSuppressKeyboardEventFunc","colDefFunc","getColDef","suppressKeyboardEvent","undefined","params","api","getApi","node","data","colDef","context","getContext","columnApi","getColumnApi","colDefFuncResult","isUserSuppressingHeaderKeyboardEvent","headerRowIndex","getDefinition","suppressHeaderKeyboardEvent","charCode"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { isBrowserEdge, isBrowserIE } from './browser';\nimport { exists } from './generic';\nvar NUMPAD_DEL_NUMLOCK_ON_KEY = 'Del';\nvar NUMPAD_DEL_NUMLOCK_ON_CHARCODE = 46;\nexport function isKeyPressed(event, keyToCheck) {\n    return (event.which || event.keyCode) === keyToCheck;\n}\nexport function isEventFromPrintableCharacter(event) {\n    // no allowed printable chars have alt or ctrl key combinations\n    if (event.altKey || event.ctrlKey || event.metaKey) {\n        return false;\n    }\n    // if key is length 1, eg if it is 'a' for the a key, or '2' for the '2' key.\n    // non-printable characters have names, eg 'Enter' or 'Backspace'.\n    var printableCharacter = event.key.length === 1;\n    // IE11 & Edge treat the numpad del key differently - with numlock on we get \"Del\" for key,\n    // so this addition checks if its IE11/Edge and handles that specific case the same was as all other browsers\n    var numpadDelWithNumlockOnForEdgeOrIe = isNumpadDelWithNumlockOnForEdgeOrIe(event);\n    return printableCharacter || numpadDelWithNumlockOnForEdgeOrIe;\n}\n/**\n * Allows user to tell the grid to skip specific keyboard events\n * @param {GridOptionsWrapper} gridOptionsWrapper\n * @param {KeyboardEvent} keyboardEvent\n * @param {RowNode} rowNode\n * @param {Column} column\n * @param {boolean} editing\n * @returns {boolean}\n */\nexport function isUserSuppressingKeyboardEvent(gridOptionsWrapper, keyboardEvent, rowNode, column, editing) {\n    var gridOptionsFunc = gridOptionsWrapper.getSuppressKeyboardEventFunc();\n    var colDefFunc = column ? column.getColDef().suppressKeyboardEvent : undefined;\n    // if no callbacks provided by user, then do nothing\n    if (!gridOptionsFunc && !colDefFunc) {\n        return false;\n    }\n    var params = {\n        event: keyboardEvent,\n        editing: editing,\n        column: column,\n        api: gridOptionsWrapper.getApi(),\n        node: rowNode,\n        data: rowNode.data,\n        colDef: column.getColDef(),\n        context: gridOptionsWrapper.getContext(),\n        columnApi: gridOptionsWrapper.getColumnApi()\n    };\n    // colDef get first preference on suppressing events\n    if (colDefFunc) {\n        var colDefFuncResult = colDefFunc(params);\n        // if colDef func suppressed, then return now, no need to call gridOption func\n        if (colDefFuncResult) {\n            return true;\n        }\n    }\n    if (gridOptionsFunc) {\n        // if gridOption func, return the result\n        return gridOptionsFunc(params);\n    }\n    // otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions\n    return false;\n}\nexport function isUserSuppressingHeaderKeyboardEvent(gridOptionsWrapper, keyboardEvent, headerRowIndex, column) {\n    var colDef = column.getDefinition();\n    var colDefFunc = colDef && colDef.suppressHeaderKeyboardEvent;\n    if (!exists(colDefFunc)) {\n        return false;\n    }\n    var params = {\n        api: gridOptionsWrapper.getApi(),\n        columnApi: gridOptionsWrapper.getColumnApi(),\n        context: gridOptionsWrapper.getContext(),\n        colDef: colDef,\n        column: column,\n        headerRowIndex: headerRowIndex,\n        event: keyboardEvent\n    };\n    return !!colDefFunc(params);\n}\nfunction isNumpadDelWithNumlockOnForEdgeOrIe(event) {\n    return (isBrowserEdge() || isBrowserIE()) &&\n        event.key === NUMPAD_DEL_NUMLOCK_ON_KEY &&\n        event.charCode === NUMPAD_DEL_NUMLOCK_ON_CHARCODE;\n}\n"]},"metadata":{},"sourceType":"module"}