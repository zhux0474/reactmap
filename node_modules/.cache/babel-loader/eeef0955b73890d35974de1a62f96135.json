{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UrlUtil = void 0;\n\nvar url_parse_1 = __importDefault(require(\"url-parse\"));\n\nvar query_string_1 = __importDefault(require(\"query-string\"));\n\nvar clone_js_1 = __importDefault(require(\"lodash/clone.js\"));\n\nvar isURL_1 = __importDefault(require(\"validator/lib/isURL\"));\n/**\n * Helper Class for the URL handling.\n *\n * @class\n */\n\n\nvar UrlUtil =\n/** @class */\nfunction () {\n  function UrlUtil() {}\n  /**\n   * Returns an object representation of an URL.\n   *\n   * @param {string} url The URL to read in.\n   * @return {URL} The parsed URL object.\n   */\n\n\n  UrlUtil.read = function (url) {\n    return new url_parse_1.default(url, null, query_string_1.default.parse);\n  };\n  /**\n   * Returns a string representation of an URL object.\n   *\n   * @param {URL} urlObj The URL object to write out.\n   * @return {string} The stringified URL.\n   */\n\n\n  UrlUtil.write = function (urlObj) {\n    return urlObj.toString();\n  };\n  /**\n   * Returns the base path of an URL.\n   *\n   * @param {string} url The URL to obtain the base path from.\n   * @return {string} The base path.\n   */\n\n\n  UrlUtil.getBasePath = function (url) {\n    var urlObj = UrlUtil.read(url);\n    return urlObj.protocol + \"//\" + urlObj.host + urlObj.pathname;\n  };\n  /**\n   * Returns the query params of a given URL as object.\n   *\n   * @param {string} url The URL to get the query params from.\n   * @return {Object} The query params of the given URL.\n   */\n\n\n  UrlUtil.getQueryParams = function (url) {\n    var urlObj = UrlUtil.read(url);\n    return urlObj.query;\n  };\n  /**\n   * Returns the value of the given query param of the provided URL. If not\n   * found, undefined will be returned.\n   *\n   * @param {string} url The URL to get the query params from.\n   * @param {string} key The key to get the value from.\n   * @return {string} The query param value.\n   */\n\n\n  UrlUtil.getQueryParam = function (url, key) {\n    var queryParamsObj = UrlUtil.getQueryParams(url);\n    var foundKey = Object.keys(queryParamsObj).filter(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    })[0];\n    return queryParamsObj[foundKey];\n  };\n  /**\n   * Joins some query parameters (defined by `keys`) of two query objects and\n   * returns the joined query parameters.\n   *\n   *     var params1 = {FOO: 'foo,bar', BAZ: 'baz', HUMPTY: '1'};\n   *     var params2 = {FOO: 'pupe,pape', BAZ: 'baz', DUMPTY: '42'};\n   *     var keys = ['FOO'];\n   *     var joined = this.joinQueryParams(params1, params2, keys);\n   *     // joined is now\n   *     // {FOO: 'foo,bar,pupe,pape', BAZ: 'baz', HUMPTY: '1'};\n   *\n   * @param {Object} params1 The first object with parameters, where certain\n   *                         keys might have values that are joined with `,`.\n   * @param {Object} params2 The second object with parameters, where certain\n   *                         keys might have values that are joined with `,`.\n   * @param {Array} keys The keys which we will consider for joining. Others\n   *                     will be taken from the first object with parameters.\n   * @return {Object} The joined query parameters.\n   */\n\n\n  UrlUtil.joinQueryParams = function (params1, params2, keys) {\n    var joined = clone_js_1.default(params1);\n    var comma = ',';\n    keys.forEach(function (key) {\n      if (joined[key]) {\n        joined[key] = joined[key].split(comma).concat(params2[key].split(comma)).join(comma);\n      }\n    });\n    return joined;\n  };\n  /**\n   * Checks if a given URL has the provided query parameter present.\n   *\n   * @param {string} url The URL to check.\n   * @param {string} key The query parameter to check.\n   * @return {boolean} Whether the parameter is present or not.\n   */\n\n\n  UrlUtil.hasQueryParam = function (url, key) {\n    var queryParamsObj = UrlUtil.getQueryParams(url);\n    return !!Object.keys(queryParamsObj).some(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n  /**\n   * Creates a valid GetCapabilitiesRequest out of the given URL by checking if\n   * SERVICE, REQUEST and VERSION are set.\n   *\n   * @param {string} url The URL to validate.\n   * @param {string} service The service to set. Default is to 'WMS'.\n   * @param {string} version The version to set. Default is to '1.3.0'.\n   * @return {string} The validated URL.\n   */\n\n\n  UrlUtil.createValidGetCapabilitiesRequest = function (url, service, version) {\n    if (service === void 0) {\n      service = 'WMS';\n    }\n\n    if (version === void 0) {\n      version = '1.3.0';\n    }\n\n    var baseUrl = UrlUtil.getBasePath(url);\n    var queryParamsObject = UrlUtil.getQueryParams(url);\n\n    if (!UrlUtil.hasQueryParam(url, 'SERVICE')) {\n      queryParamsObject.SERVICE = service;\n    }\n\n    if (!UrlUtil.hasQueryParam(url, 'REQUEST')) {\n      queryParamsObject.REQUEST = 'GetCapabilities';\n    }\n\n    if (!UrlUtil.hasQueryParam(url, 'VERSION')) {\n      queryParamsObject.VERSION = version;\n    }\n\n    return baseUrl + \"?\" + UrlUtil.objectToRequestString(queryParamsObject);\n  };\n  /**\n   * This joins/bundles a given set of (typically WMS GetFeatureInfo) requests\n   * by the base URL. E.g. it merges the following two requests:\n   *\n   * https://maps.bvb.de?SERVICE=WMS&REQUEST=GetFeatureInfo&LAYERS=Shinji\n   * https://maps.bvb.de?SERVICE=WMS&REQUEST=GetFeatureInfo&LAYERS=Kagawa\n   *\n   * to\n   *\n   * https://maps.bvb.de?SERVICE=WMS&REQUEST=GetFeatureInfo&LAYERS=Shinji,Kagawa\n   *\n   * @param {Array} featureInfoUrls An array of requests to bundle.\n   * @param {boolean} stringify Whether to stringify the output or not. If set\n   *                            to false an object keyed by the base URL and\n   *                            valued by the combined requests params will be\n   *                            returned.\n   * @param {Array} bundleParams An array of query params to bundle, default is\n   *                             to ['LAYERS', 'QUERY_LAYERS', 'STYLES'].\n   */\n\n\n  UrlUtil.bundleOgcRequests = function (featureInfoUrls, stringify, bundleParams) {\n    if (stringify === void 0) {\n      stringify = false;\n    }\n\n    if (bundleParams === void 0) {\n      bundleParams = ['LAYERS', 'QUERY_LAYERS', 'STYLES'];\n    }\n\n    var featureInfoUrlColl = {};\n    featureInfoUrls.forEach(function (featureInfoUrl) {\n      var featureInfoQueryParams = UrlUtil.getQueryParams(featureInfoUrl);\n      var featureInfoBaseUrl = UrlUtil.getBasePath(featureInfoUrl);\n\n      if (!featureInfoUrlColl[featureInfoBaseUrl]) {\n        featureInfoUrlColl[featureInfoBaseUrl] = featureInfoQueryParams;\n      } else {\n        var existingQueryParams = featureInfoUrlColl[featureInfoBaseUrl];\n        var newQueryParams = featureInfoQueryParams;\n        featureInfoUrlColl[featureInfoBaseUrl] = UrlUtil.joinQueryParams(existingQueryParams, newQueryParams, bundleParams);\n      }\n    });\n    var urls = [];\n\n    if (stringify) {\n      for (var _i = 0, _a = Object.entries(featureInfoUrlColl); _i < _a.length; _i++) {\n        var _b = _a[_i],\n            baseUrl = _b[0],\n            queryParams = _b[1];\n        var urlObj = UrlUtil.read(baseUrl);\n        urlObj.set('query', queryParams);\n        urls.push(UrlUtil.write(urlObj));\n      }\n\n      return urls;\n    }\n\n    return featureInfoUrlColl;\n  };\n  /**\n   * Transforms an object into a string containing requestParams (without\n   * leading questionmark).\n   *\n   * @param {Object} object An object containing kvp for the request.\n   *                        e.g. {height:400, width:200}\n   * @return {string} The kvps as a requestString. e.g. 'height=400&width=200'\n   */\n\n\n  UrlUtil.objectToRequestString = function (object) {\n    var requestString = Object.keys(object).map(function (key) {\n      return encodeURIComponent(key) + '=' + encodeURIComponent(object[key]);\n    }).join('&');\n    return requestString;\n  };\n  /**\n   * Checks if a given URL is valid. Implementation based on\n   * https://www.npmjs.com/package/validator.\n   *\n   * @param {string} url The URL to validate.\n   * @param {Object} opts The validation `validator` options.\n   * @return {boolean} Whether the URL is valid or not.\n   */\n\n\n  UrlUtil.isValid = function (url, opts) {\n    if (opts === void 0) {\n      opts = {\n        require_tld: false,\n        require_protocol: true,\n        protocols: ['http', 'https', 'ftp'],\n        require_host: true,\n        require_valid_protocol: true,\n        allow_underscores: false,\n        allow_trailing_dot: false,\n        allow_protocol_relative_urls: false,\n        disallow_auth: false\n      };\n    }\n\n    return isURL_1.default(url, opts);\n  };\n\n  return UrlUtil;\n}();\n\nexports.UrlUtil = UrlUtil;\nexports.default = UrlUtil;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@terrestris/base-util/dist/UrlUtil/UrlUtil.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","UrlUtil","url_parse_1","require","query_string_1","clone_js_1","isURL_1","read","url","default","parse","write","urlObj","toString","getBasePath","protocol","host","pathname","getQueryParams","query","getQueryParam","key","queryParamsObj","foundKey","keys","filter","k","toLowerCase","joinQueryParams","params1","params2","joined","comma","forEach","split","concat","join","hasQueryParam","some","createValidGetCapabilitiesRequest","service","version","baseUrl","queryParamsObject","SERVICE","REQUEST","VERSION","objectToRequestString","bundleOgcRequests","featureInfoUrls","stringify","bundleParams","featureInfoUrlColl","featureInfoUrl","featureInfoQueryParams","featureInfoBaseUrl","existingQueryParams","newQueryParams","urls","_i","_a","entries","length","_b","queryParams","set","push","object","requestString","map","encodeURIComponent","isValid","opts","require_tld","require_protocol","protocols","require_host","require_valid_protocol","allow_underscores","allow_trailing_dot","allow_protocol_relative_urls","disallow_auth"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UrlUtil = void 0;\nvar url_parse_1 = __importDefault(require(\"url-parse\"));\nvar query_string_1 = __importDefault(require(\"query-string\"));\nvar clone_js_1 = __importDefault(require(\"lodash/clone.js\"));\nvar isURL_1 = __importDefault(require(\"validator/lib/isURL\"));\n/**\n * Helper Class for the URL handling.\n *\n * @class\n */\nvar UrlUtil = /** @class */ (function () {\n    function UrlUtil() {\n    }\n    /**\n     * Returns an object representation of an URL.\n     *\n     * @param {string} url The URL to read in.\n     * @return {URL} The parsed URL object.\n     */\n    UrlUtil.read = function (url) {\n        return new url_parse_1.default(url, null, query_string_1.default.parse);\n    };\n    /**\n     * Returns a string representation of an URL object.\n     *\n     * @param {URL} urlObj The URL object to write out.\n     * @return {string} The stringified URL.\n     */\n    UrlUtil.write = function (urlObj) {\n        return urlObj.toString();\n    };\n    /**\n     * Returns the base path of an URL.\n     *\n     * @param {string} url The URL to obtain the base path from.\n     * @return {string} The base path.\n     */\n    UrlUtil.getBasePath = function (url) {\n        var urlObj = UrlUtil.read(url);\n        return urlObj.protocol + \"//\" + urlObj.host + urlObj.pathname;\n    };\n    /**\n     * Returns the query params of a given URL as object.\n     *\n     * @param {string} url The URL to get the query params from.\n     * @return {Object} The query params of the given URL.\n     */\n    UrlUtil.getQueryParams = function (url) {\n        var urlObj = UrlUtil.read(url);\n        return urlObj.query;\n    };\n    /**\n     * Returns the value of the given query param of the provided URL. If not\n     * found, undefined will be returned.\n     *\n     * @param {string} url The URL to get the query params from.\n     * @param {string} key The key to get the value from.\n     * @return {string} The query param value.\n     */\n    UrlUtil.getQueryParam = function (url, key) {\n        var queryParamsObj = UrlUtil.getQueryParams(url);\n        var foundKey = Object.keys(queryParamsObj).filter(function (k) { return k.toLowerCase() === key.toLowerCase(); })[0];\n        return queryParamsObj[foundKey];\n    };\n    /**\n     * Joins some query parameters (defined by `keys`) of two query objects and\n     * returns the joined query parameters.\n     *\n     *     var params1 = {FOO: 'foo,bar', BAZ: 'baz', HUMPTY: '1'};\n     *     var params2 = {FOO: 'pupe,pape', BAZ: 'baz', DUMPTY: '42'};\n     *     var keys = ['FOO'];\n     *     var joined = this.joinQueryParams(params1, params2, keys);\n     *     // joined is now\n     *     // {FOO: 'foo,bar,pupe,pape', BAZ: 'baz', HUMPTY: '1'};\n     *\n     * @param {Object} params1 The first object with parameters, where certain\n     *                         keys might have values that are joined with `,`.\n     * @param {Object} params2 The second object with parameters, where certain\n     *                         keys might have values that are joined with `,`.\n     * @param {Array} keys The keys which we will consider for joining. Others\n     *                     will be taken from the first object with parameters.\n     * @return {Object} The joined query parameters.\n     */\n    UrlUtil.joinQueryParams = function (params1, params2, keys) {\n        var joined = clone_js_1.default(params1);\n        var comma = ',';\n        keys.forEach(function (key) {\n            if (joined[key]) {\n                joined[key] = joined[key].split(comma).concat(params2[key].split(comma)).join(comma);\n            }\n        });\n        return joined;\n    };\n    /**\n     * Checks if a given URL has the provided query parameter present.\n     *\n     * @param {string} url The URL to check.\n     * @param {string} key The query parameter to check.\n     * @return {boolean} Whether the parameter is present or not.\n     */\n    UrlUtil.hasQueryParam = function (url, key) {\n        var queryParamsObj = UrlUtil.getQueryParams(url);\n        return !!Object.keys(queryParamsObj).some(function (k) { return k.toLowerCase() === key.toLowerCase(); });\n    };\n    /**\n     * Creates a valid GetCapabilitiesRequest out of the given URL by checking if\n     * SERVICE, REQUEST and VERSION are set.\n     *\n     * @param {string} url The URL to validate.\n     * @param {string} service The service to set. Default is to 'WMS'.\n     * @param {string} version The version to set. Default is to '1.3.0'.\n     * @return {string} The validated URL.\n     */\n    UrlUtil.createValidGetCapabilitiesRequest = function (url, service, version) {\n        if (service === void 0) { service = 'WMS'; }\n        if (version === void 0) { version = '1.3.0'; }\n        var baseUrl = UrlUtil.getBasePath(url);\n        var queryParamsObject = UrlUtil.getQueryParams(url);\n        if (!UrlUtil.hasQueryParam(url, 'SERVICE')) {\n            queryParamsObject.SERVICE = service;\n        }\n        if (!UrlUtil.hasQueryParam(url, 'REQUEST')) {\n            queryParamsObject.REQUEST = 'GetCapabilities';\n        }\n        if (!UrlUtil.hasQueryParam(url, 'VERSION')) {\n            queryParamsObject.VERSION = version;\n        }\n        return baseUrl + \"?\" + UrlUtil.objectToRequestString(queryParamsObject);\n    };\n    /**\n     * This joins/bundles a given set of (typically WMS GetFeatureInfo) requests\n     * by the base URL. E.g. it merges the following two requests:\n     *\n     * https://maps.bvb.de?SERVICE=WMS&REQUEST=GetFeatureInfo&LAYERS=Shinji\n     * https://maps.bvb.de?SERVICE=WMS&REQUEST=GetFeatureInfo&LAYERS=Kagawa\n     *\n     * to\n     *\n     * https://maps.bvb.de?SERVICE=WMS&REQUEST=GetFeatureInfo&LAYERS=Shinji,Kagawa\n     *\n     * @param {Array} featureInfoUrls An array of requests to bundle.\n     * @param {boolean} stringify Whether to stringify the output or not. If set\n     *                            to false an object keyed by the base URL and\n     *                            valued by the combined requests params will be\n     *                            returned.\n     * @param {Array} bundleParams An array of query params to bundle, default is\n     *                             to ['LAYERS', 'QUERY_LAYERS', 'STYLES'].\n     */\n    UrlUtil.bundleOgcRequests = function (featureInfoUrls, stringify, bundleParams) {\n        if (stringify === void 0) { stringify = false; }\n        if (bundleParams === void 0) { bundleParams = ['LAYERS', 'QUERY_LAYERS', 'STYLES']; }\n        var featureInfoUrlColl = {};\n        featureInfoUrls.forEach(function (featureInfoUrl) {\n            var featureInfoQueryParams = UrlUtil.getQueryParams(featureInfoUrl);\n            var featureInfoBaseUrl = UrlUtil.getBasePath(featureInfoUrl);\n            if (!featureInfoUrlColl[featureInfoBaseUrl]) {\n                featureInfoUrlColl[featureInfoBaseUrl] = featureInfoQueryParams;\n            }\n            else {\n                var existingQueryParams = featureInfoUrlColl[featureInfoBaseUrl];\n                var newQueryParams = featureInfoQueryParams;\n                featureInfoUrlColl[featureInfoBaseUrl] = UrlUtil.joinQueryParams(existingQueryParams, newQueryParams, bundleParams);\n            }\n        });\n        var urls = [];\n        if (stringify) {\n            for (var _i = 0, _a = Object.entries(featureInfoUrlColl); _i < _a.length; _i++) {\n                var _b = _a[_i], baseUrl = _b[0], queryParams = _b[1];\n                var urlObj = UrlUtil.read(baseUrl);\n                urlObj.set('query', queryParams);\n                urls.push(UrlUtil.write(urlObj));\n            }\n            return urls;\n        }\n        return featureInfoUrlColl;\n    };\n    /**\n     * Transforms an object into a string containing requestParams (without\n     * leading questionmark).\n     *\n     * @param {Object} object An object containing kvp for the request.\n     *                        e.g. {height:400, width:200}\n     * @return {string} The kvps as a requestString. e.g. 'height=400&width=200'\n     */\n    UrlUtil.objectToRequestString = function (object) {\n        var requestString = Object.keys(object).map(function (key) {\n            return encodeURIComponent(key) + '=' + encodeURIComponent(object[key]);\n        }).join('&');\n        return requestString;\n    };\n    /**\n     * Checks if a given URL is valid. Implementation based on\n     * https://www.npmjs.com/package/validator.\n     *\n     * @param {string} url The URL to validate.\n     * @param {Object} opts The validation `validator` options.\n     * @return {boolean} Whether the URL is valid or not.\n     */\n    UrlUtil.isValid = function (url, opts) {\n        if (opts === void 0) { opts = {\n            require_tld: false,\n            require_protocol: true,\n            protocols: ['http', 'https', 'ftp'],\n            require_host: true,\n            require_valid_protocol: true,\n            allow_underscores: false,\n            allow_trailing_dot: false,\n            allow_protocol_relative_urls: false,\n            disallow_auth: false\n        }; }\n        return isURL_1.default(url, opts);\n    };\n    return UrlUtil;\n}());\nexports.UrlUtil = UrlUtil;\nexports.default = UrlUtil;\n"]},"metadata":{},"sourceType":"script"}