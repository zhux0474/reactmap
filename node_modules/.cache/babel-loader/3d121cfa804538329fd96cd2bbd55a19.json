{"ast":null,"code":"// @ag-grid-community/react v26.2.0\n\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar core_1 = require(\"@ag-grid-community/core\");\n\nvar jsComp_1 = require(\"../jsComp\");\n\nvar utils_1 = require(\"../utils\");\n\nvar beansContext_1 = require(\"../beansContext\");\n\nvar cellComp_1 = __importDefault(require(\"../cells/cellComp\"));\n\nvar maintainOrderOnColumns = function (prev, next, domOrder) {\n  if (domOrder) {\n    var res_1 = {\n      list: next,\n      instanceIdMap: new Map()\n    };\n    next.forEach(function (c) {\n      return res_1.instanceIdMap.set(c.getInstanceId(), c);\n    });\n    return res_1;\n  } // if dom order not important, we don't want to change the order\n  // of the elements in the dom, as this would break transition styles\n\n\n  var oldCellCtrls = [];\n  var newCellCtrls = [];\n  var newInstanceIdMap = new Map();\n  var tempMap = new Map();\n  next.forEach(function (c) {\n    return tempMap.set(c.getInstanceId(), c);\n  });\n  prev.list.forEach(function (c) {\n    var instanceId = c.getInstanceId();\n\n    if (tempMap.has(instanceId)) {\n      oldCellCtrls.push(c);\n      newInstanceIdMap.set(instanceId, c);\n    }\n  });\n  next.forEach(function (c) {\n    var instanceId = c.getInstanceId();\n\n    if (!prev.instanceIdMap.has(instanceId)) {\n      newCellCtrls.push(c);\n      newInstanceIdMap.set(instanceId, c);\n    }\n  });\n  var res = {\n    list: __spreadArrays(oldCellCtrls, newCellCtrls),\n    instanceIdMap: newInstanceIdMap\n  };\n  return res;\n};\n\nvar RowComp = function (params) {\n  var context = react_1.useContext(beansContext_1.BeansContext).context;\n  var rowCtrl = params.rowCtrl,\n      pinned = params.pinned;\n\n  var _a = react_1.useState(),\n      height = _a[0],\n      setHeight = _a[1];\n\n  var _b = react_1.useState(rowCtrl.getInitialRowTop()),\n      top = _b[0],\n      setTop = _b[1];\n\n  var _c = react_1.useState(rowCtrl.getInitialTransform()),\n      transform = _c[0],\n      setTransform = _c[1];\n\n  var _d = react_1.useState(new utils_1.CssClasses()),\n      cssClasses = _d[0],\n      setCssClasses = _d[1];\n\n  var _e = react_1.useState(),\n      rowIndex = _e[0],\n      setRowIndex = _e[1];\n\n  var _f = react_1.useState(),\n      rowId = _f[0],\n      setRowId = _f[1];\n\n  var _g = react_1.useState(),\n      role = _g[0],\n      setRole = _g[1];\n\n  var _h = react_1.useState(),\n      rowBusinessKey = _h[0],\n      setRowBusinessKey = _h[1];\n\n  var _j = react_1.useState(),\n      tabIndex = _j[0],\n      setTabIndex = _j[1];\n\n  var _k = react_1.useState(),\n      ariaRowIndex = _k[0],\n      setAriaRowIndex = _k[1];\n\n  var _l = react_1.useState(),\n      ariaExpanded = _l[0],\n      setAriaExpanded = _l[1];\n\n  var _m = react_1.useState(),\n      ariaLabel = _m[0],\n      setAriaLabel = _m[1];\n\n  var _o = react_1.useState(),\n      ariaSelected = _o[0],\n      setAriaSelected = _o[1];\n\n  var _p = react_1.useState(),\n      userStyles = _p[0],\n      setUserStyles = _p[1];\n\n  var _q = react_1.useState({\n    list: [],\n    instanceIdMap: new Map()\n  }),\n      cellCtrls = _q[0],\n      setCellCtrls = _q[1];\n\n  var _r = react_1.useState(),\n      fullWidthCompDetails = _r[0],\n      setFullWidthCompDetails = _r[1];\n\n  var _s = react_1.useState(false),\n      domOrder = _s[0],\n      setDomOrder = _s[1];\n\n  var _t = react_1.useState(),\n      display = _t[0],\n      setDisplay = _t[1];\n\n  var eGui = react_1.useRef(null);\n  var fullWidthCompRef = react_1.useRef();\n  react_1.useEffect(function () {\n    var compProxy = {\n      setDisplay: function (value) {\n        return setDisplay(value);\n      },\n      setDomOrder: function (domOrder) {\n        return setDomOrder(domOrder);\n      },\n      setHeight: function (value) {\n        return setHeight(value);\n      },\n      setTop: function (value) {\n        return setTop(value);\n      },\n      setTransform: function (value) {\n        return setTransform(value);\n      },\n      addOrRemoveCssClass: function (name, on) {\n        return setCssClasses(function (prev) {\n          return prev.setClass(name, on);\n        });\n      },\n      setRowIndex: function (value) {\n        return setRowIndex(value);\n      },\n      setAriaRowIndex: function (value) {\n        return setAriaRowIndex(value);\n      },\n      setAriaExpanded: function (value) {\n        return setAriaExpanded(value);\n      },\n      setAriaLabel: function (value) {\n        return setAriaLabel(value);\n      },\n      setRowId: function (value) {\n        return setRowId(value);\n      },\n      setRowBusinessKey: function (value) {\n        return setRowBusinessKey(value);\n      },\n      setTabIndex: function (value) {\n        return setTabIndex(value);\n      },\n      setUserStyles: function (styles) {\n        return setUserStyles(styles);\n      },\n      setAriaSelected: function (value) {\n        return setAriaSelected(value);\n      },\n      setRole: function (value) {\n        return setRole(value);\n      },\n      // if we don't maintain the order, then cols will be ripped out and into the dom\n      // when cols reordered, which would stop the CSS transitions from working\n      setCellCtrls: function (next) {\n        return setCellCtrls(function (prev) {\n          return maintainOrderOnColumns(prev, next, domOrder);\n        });\n      },\n      showFullWidth: function (compDetails) {\n        return setFullWidthCompDetails(compDetails);\n      },\n      getFullWidthCellRenderer: function () {\n        return fullWidthCompRef.current;\n      }\n    };\n    rowCtrl.setComp(compProxy, eGui.current, pinned);\n  }, []);\n  react_1.useEffect(function () {\n    return jsComp_1.showJsComp(fullWidthCompDetails, context, eGui.current, fullWidthCompRef);\n  }, [fullWidthCompDetails]);\n  var rowStyles = react_1.useMemo(function () {\n    var res = {\n      height: height,\n      top: top,\n      transform: transform,\n      display: display\n    };\n\n    core_1._.assign(res, userStyles);\n\n    return res;\n  }, [height, top, transform, userStyles, display]);\n  var className = react_1.useMemo(function () {\n    return cssClasses.toString();\n  }, [cssClasses]);\n  var showFullWidthFramework = fullWidthCompDetails && fullWidthCompDetails.componentFromFramework;\n  var showCells = cellCtrls != null;\n  var reactFullWidthCellRendererStateless = react_1.useMemo(function () {\n    var res = fullWidthCompDetails && fullWidthCompDetails.componentFromFramework && utils_1.isComponentStateless(fullWidthCompDetails.componentClass);\n    return !!res;\n  }, [fullWidthCompDetails]);\n\n  var showCellsJsx = function () {\n    return cellCtrls.list.map(function (cellCtrl) {\n      return react_1.default.createElement(cellComp_1.default, {\n        cellCtrl: cellCtrl,\n        editingRow: rowCtrl.isEditing(),\n        printLayout: rowCtrl.isPrintLayout(),\n        key: cellCtrl.getInstanceId()\n      });\n    });\n  };\n\n  var showFullWidthFrameworkJsx = function () {\n    var FullWidthComp = fullWidthCompDetails.componentClass;\n    return react_1.default.createElement(react_1.default.Fragment, null, reactFullWidthCellRendererStateless && react_1.default.createElement(FullWidthComp, __assign({}, fullWidthCompDetails.params)), !reactFullWidthCellRendererStateless && react_1.default.createElement(FullWidthComp, __assign({}, fullWidthCompDetails.params, {\n      ref: fullWidthCompRef\n    })));\n  };\n\n  return react_1.default.createElement(\"div\", {\n    ref: eGui,\n    role: role,\n    className: className,\n    style: rowStyles,\n    \"row-index\": rowIndex,\n    \"aria-rowindex\": ariaRowIndex,\n    \"aria-expanded\": ariaExpanded,\n    \"aria-label\": ariaLabel,\n    \"aria-selected\": ariaSelected,\n    \"row-id\": rowId,\n    \"row-business-key\": rowBusinessKey,\n    tabIndex: tabIndex\n  }, showCells && showCellsJsx(), showFullWidthFramework && showFullWidthFrameworkJsx());\n};\n\nexports.default = react_1.memo(RowComp);","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/react/lib/reactUi/rows/reactUi/rows/rowComp.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, useMemo, memo, useContext } from 'react';\nimport { CellCtrl, IRowComp, RowCtrl, UserCompDetails, _, ICellRenderer } from '@ag-grid-community/core';\nimport { showJsComp } from '../jsComp';\nimport { CssClasses, isComponentStateless } from '../utils';\nimport { BeansContext } from '../beansContext';\nimport CellComp from '../cells/cellComp';\n\ninterface CellCtrls {\n    list: CellCtrl[],\n    instanceIdMap: Map<string, CellCtrl>\n}\n\nconst maintainOrderOnColumns = (prev: CellCtrls, next: CellCtrl[], domOrder: boolean): CellCtrls => {\n    if (domOrder) {\n        const res: CellCtrls = { list: next, instanceIdMap: new Map() };\n        next.forEach(c => res.instanceIdMap.set(c.getInstanceId(), c));\n\n        return res;\n    }\n\n    // if dom order not important, we don't want to change the order\n    // of the elements in the dom, as this would break transition styles\n    const oldCellCtrls: CellCtrl[] = [];\n    const newCellCtrls: CellCtrl[] = [];\n    const newInstanceIdMap: Map<string, CellCtrl> = new Map();\n    const tempMap: Map<string, CellCtrl> = new Map();\n\n    next.forEach(c => tempMap.set(c.getInstanceId(), c));\n\n    prev.list.forEach(c => {\n        const instanceId = c.getInstanceId();\n        if (tempMap.has(instanceId)) {\n            oldCellCtrls.push(c);\n            newInstanceIdMap.set(instanceId, c);\n        }\n    });\n\n    next.forEach(c => {\n        const instanceId = c.getInstanceId();\n        if (!prev.instanceIdMap.has(instanceId)) {\n            newCellCtrls.push(c);\n            newInstanceIdMap.set(instanceId, c);\n        }\n    });\n\n    const res: CellCtrls = {\n        list: [...oldCellCtrls, ...newCellCtrls],\n        instanceIdMap: newInstanceIdMap\n    };\n\n    return res;\n}\n\nconst RowComp = (params: {rowCtrl: RowCtrl, pinned: string | null}) => {\n\n    const {context} = useContext(BeansContext);\n\n    const { rowCtrl, pinned } = params;\n\n    const [height, setHeight] = useState<string>();\n    const [top, setTop] = useState<string | undefined>(rowCtrl.getInitialRowTop());\n    const [transform, setTransform] = useState<string | undefined>(rowCtrl.getInitialTransform());\n    const [cssClasses, setCssClasses] = useState<CssClasses>(new CssClasses());\n    const [rowIndex, setRowIndex] = useState<string>();\n    const [rowId, setRowId] = useState<string>();\n    const [role, setRole] = useState<string>();\n    const [rowBusinessKey, setRowBusinessKey] = useState<string>();\n    const [tabIndex, setTabIndex] = useState<number>();\n    const [ariaRowIndex, setAriaRowIndex] = useState<number>();\n    const [ariaExpanded, setAriaExpanded] = useState<boolean>();\n    const [ariaLabel, setAriaLabel] = useState<string>();\n    const [ariaSelected, setAriaSelected] = useState<boolean>();\n    const [userStyles, setUserStyles] = useState<any>();\n    const [cellCtrls, setCellCtrls] = useState<CellCtrls>({ list: [], instanceIdMap: new Map() });\n    const [fullWidthCompDetails, setFullWidthCompDetails] = useState<UserCompDetails>();\n    const [domOrder, setDomOrder] = useState<boolean>(false);\n    const [display, setDisplay] = useState<string>();\n\n    const eGui = useRef<HTMLDivElement>(null);\n    const fullWidthCompRef = useRef<ICellRenderer>();\n\n    useEffect(() => {\n        const compProxy: IRowComp = {\n            setDisplay: value => setDisplay(value),\n            setDomOrder: domOrder => setDomOrder(domOrder),\n            setHeight: value => setHeight(value),\n            setTop: value => setTop(value),\n            setTransform: value => setTransform(value),\n            addOrRemoveCssClass: (name, on) => setCssClasses( prev => prev.setClass(name, on) ),\n            setRowIndex: value => setRowIndex(value),\n            setAriaRowIndex: value => setAriaRowIndex(value),\n            setAriaExpanded: value => setAriaExpanded(value),\n            setAriaLabel: value => setAriaLabel(value),\n            setRowId: value => setRowId(value),\n            setRowBusinessKey: value => setRowBusinessKey(value),\n            setTabIndex: value => setTabIndex(value),\n            setUserStyles: styles => setUserStyles(styles),\n            setAriaSelected: value => setAriaSelected(value),\n            setRole: value => setRole(value),\n            // if we don't maintain the order, then cols will be ripped out and into the dom\n            // when cols reordered, which would stop the CSS transitions from working\n            setCellCtrls: next => setCellCtrls(prev => maintainOrderOnColumns(prev, next, domOrder)),\n            showFullWidth: compDetails => setFullWidthCompDetails(compDetails),\n            getFullWidthCellRenderer: ()=> fullWidthCompRef.current,\n        };\n        rowCtrl.setComp(compProxy, eGui.current!, pinned);\n    }, []);\n\n    useEffect(() => {\n        return showJsComp(fullWidthCompDetails, context, eGui.current!, fullWidthCompRef);\n    }, [fullWidthCompDetails]);\n\n    const rowStyles = useMemo(() => {\n        const res = {\n            height,\n            top,\n            transform,\n            display\n        };\n        _.assign(res, userStyles);\n        return res;\n    }, [height, top, transform, userStyles, display]);\n\n    const className = useMemo( ()=> cssClasses.toString(), [cssClasses]);\n\n    const showFullWidthFramework = fullWidthCompDetails && fullWidthCompDetails.componentFromFramework;\n    const showCells = cellCtrls != null;\n    \n    const reactFullWidthCellRendererStateless = useMemo( ()=> {\n        const res = fullWidthCompDetails \n                    && fullWidthCompDetails.componentFromFramework \n                    && isComponentStateless(fullWidthCompDetails.componentClass);\n        return !!res;\n    }, [fullWidthCompDetails]);\n\n    const showCellsJsx = () => cellCtrls.list.map(cellCtrl =>\n        (\n            <CellComp cellCtrl={ cellCtrl }\n                        editingRow={ rowCtrl.isEditing() } printLayout={ rowCtrl.isPrintLayout() }\n                        key={ cellCtrl.getInstanceId() }/>\n        ));\n\n    const showFullWidthFrameworkJsx = () => {\n        const FullWidthComp = fullWidthCompDetails!.componentClass;\n        return (\n            <>\n                {\n                    reactFullWidthCellRendererStateless \n                    && <FullWidthComp  { ...fullWidthCompDetails!.params } />\n                }\n                {\n                    !reactFullWidthCellRendererStateless \n                    && <FullWidthComp  { ...fullWidthCompDetails!.params } ref={ fullWidthCompRef } />\n                }\n            </>\n        );\n    };\n\n    return (\n        <div ref={ eGui } role={ role } className={ className } style={ rowStyles } row-index={ rowIndex }\n             aria-rowindex={ ariaRowIndex } aria-expanded={ ariaExpanded } aria-label={ ariaLabel }\n             aria-selected={ ariaSelected } row-id={ rowId } row-business-key={ rowBusinessKey } tabIndex={ tabIndex }>\n            {\n                showCells && showCellsJsx()\n            }\n            {\n                showFullWidthFramework && showFullWidthFrameworkJsx() \n            }\n        </div>\n    );\n};\n\nexport default memo(RowComp);\n"]},"metadata":{},"sourceType":"script"}