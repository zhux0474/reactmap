{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { DragAndDropService } from \"../../dragAndDrop/dragAndDropService\";\nimport { Autowired } from \"../../context/context\";\n\nvar BodyDropPivotTarget =\n/** @class */\nfunction () {\n  function BodyDropPivotTarget(pinned) {\n    this.columnsToAggregate = [];\n    this.columnsToGroup = [];\n    this.columnsToPivot = [];\n    this.pinned = pinned;\n  }\n  /** Callback for when drag enters */\n\n\n  BodyDropPivotTarget.prototype.onDragEnter = function (draggingEvent) {\n    var _this = this;\n\n    this.clearColumnsList(); // in pivot mode, we don't accept any drops if functions are read only\n\n    if (this.gridOptionsWrapper.isFunctionsReadOnly()) {\n      return;\n    }\n\n    var dragColumns = draggingEvent.dragItem.columns;\n\n    if (!dragColumns) {\n      return;\n    }\n\n    dragColumns.forEach(function (column) {\n      // we don't allow adding secondary columns\n      if (!column.isPrimary()) {\n        return;\n      }\n\n      if (column.isAnyFunctionActive()) {\n        return;\n      }\n\n      if (column.isAllowValue()) {\n        _this.columnsToAggregate.push(column);\n      } else if (column.isAllowRowGroup()) {\n        _this.columnsToGroup.push(column);\n      } else if (column.isAllowPivot()) {\n        _this.columnsToPivot.push(column);\n      }\n    });\n  };\n\n  BodyDropPivotTarget.prototype.getIconName = function () {\n    var totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;\n\n    if (totalColumns > 0) {\n      return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;\n    }\n\n    return null;\n  };\n  /** Callback for when drag leaves */\n\n\n  BodyDropPivotTarget.prototype.onDragLeave = function (draggingEvent) {\n    // if we are taking columns out of the center, then we remove them from the report\n    this.clearColumnsList();\n  };\n\n  BodyDropPivotTarget.prototype.clearColumnsList = function () {\n    this.columnsToAggregate.length = 0;\n    this.columnsToGroup.length = 0;\n    this.columnsToPivot.length = 0;\n  };\n  /** Callback for when dragging */\n\n\n  BodyDropPivotTarget.prototype.onDragging = function (draggingEvent) {};\n  /** Callback for when drag stops */\n\n\n  BodyDropPivotTarget.prototype.onDragStop = function (draggingEvent) {\n    if (this.columnsToAggregate.length > 0) {\n      this.columnModel.addValueColumns(this.columnsToAggregate, \"toolPanelDragAndDrop\");\n    }\n\n    if (this.columnsToGroup.length > 0) {\n      this.columnModel.addRowGroupColumns(this.columnsToGroup, \"toolPanelDragAndDrop\");\n    }\n\n    if (this.columnsToPivot.length > 0) {\n      this.columnModel.addPivotColumns(this.columnsToPivot, \"toolPanelDragAndDrop\");\n    }\n  };\n\n  __decorate([Autowired('columnModel')], BodyDropPivotTarget.prototype, \"columnModel\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], BodyDropPivotTarget.prototype, \"gridOptionsWrapper\", void 0);\n\n  return BodyDropPivotTarget;\n}();\n\nexport { BodyDropPivotTarget };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/headerRendering/columnDrag/bodyDropPivotTarget.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","DragAndDropService","Autowired","BodyDropPivotTarget","pinned","columnsToAggregate","columnsToGroup","columnsToPivot","prototype","onDragEnter","draggingEvent","_this","clearColumnsList","gridOptionsWrapper","isFunctionsReadOnly","dragColumns","dragItem","columns","forEach","column","isPrimary","isAnyFunctionActive","isAllowValue","push","isAllowRowGroup","isAllowPivot","getIconName","totalColumns","ICON_PINNED","ICON_MOVE","onDragLeave","onDragging","onDragStop","columnModel","addValueColumns","addRowGroupColumns","addPivotColumns"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { DragAndDropService } from \"../../dragAndDrop/dragAndDropService\";\nimport { Autowired } from \"../../context/context\";\nvar BodyDropPivotTarget = /** @class */ (function () {\n    function BodyDropPivotTarget(pinned) {\n        this.columnsToAggregate = [];\n        this.columnsToGroup = [];\n        this.columnsToPivot = [];\n        this.pinned = pinned;\n    }\n    /** Callback for when drag enters */\n    BodyDropPivotTarget.prototype.onDragEnter = function (draggingEvent) {\n        var _this = this;\n        this.clearColumnsList();\n        // in pivot mode, we don't accept any drops if functions are read only\n        if (this.gridOptionsWrapper.isFunctionsReadOnly()) {\n            return;\n        }\n        var dragColumns = draggingEvent.dragItem.columns;\n        if (!dragColumns) {\n            return;\n        }\n        dragColumns.forEach(function (column) {\n            // we don't allow adding secondary columns\n            if (!column.isPrimary()) {\n                return;\n            }\n            if (column.isAnyFunctionActive()) {\n                return;\n            }\n            if (column.isAllowValue()) {\n                _this.columnsToAggregate.push(column);\n            }\n            else if (column.isAllowRowGroup()) {\n                _this.columnsToGroup.push(column);\n            }\n            else if (column.isAllowPivot()) {\n                _this.columnsToPivot.push(column);\n            }\n        });\n    };\n    BodyDropPivotTarget.prototype.getIconName = function () {\n        var totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;\n        if (totalColumns > 0) {\n            return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;\n        }\n        return null;\n    };\n    /** Callback for when drag leaves */\n    BodyDropPivotTarget.prototype.onDragLeave = function (draggingEvent) {\n        // if we are taking columns out of the center, then we remove them from the report\n        this.clearColumnsList();\n    };\n    BodyDropPivotTarget.prototype.clearColumnsList = function () {\n        this.columnsToAggregate.length = 0;\n        this.columnsToGroup.length = 0;\n        this.columnsToPivot.length = 0;\n    };\n    /** Callback for when dragging */\n    BodyDropPivotTarget.prototype.onDragging = function (draggingEvent) {\n    };\n    /** Callback for when drag stops */\n    BodyDropPivotTarget.prototype.onDragStop = function (draggingEvent) {\n        if (this.columnsToAggregate.length > 0) {\n            this.columnModel.addValueColumns(this.columnsToAggregate, \"toolPanelDragAndDrop\");\n        }\n        if (this.columnsToGroup.length > 0) {\n            this.columnModel.addRowGroupColumns(this.columnsToGroup, \"toolPanelDragAndDrop\");\n        }\n        if (this.columnsToPivot.length > 0) {\n            this.columnModel.addPivotColumns(this.columnsToPivot, \"toolPanelDragAndDrop\");\n        }\n    };\n    __decorate([\n        Autowired('columnModel')\n    ], BodyDropPivotTarget.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], BodyDropPivotTarget.prototype, \"gridOptionsWrapper\", void 0);\n    return BodyDropPivotTarget;\n}());\nexport { BodyDropPivotTarget };\n"]},"metadata":{},"sourceType":"module"}