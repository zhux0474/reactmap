{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { ComponentUtil } from \"./componentUtil\";\nimport { Grid } from \"../grid\";\nvar registered = false;\nexport function initialiseAgGridWithWebComponents() {\n  console.warn('ag-grid: initialiseAgGridWithWebComponents is deprecated. Please use the ag-grid-webcomponent dependency instead. '); // only register to WebComponents once\n\n  if (registered) {\n    return;\n  }\n\n  registered = true;\n\n  if (typeof document === 'undefined' || !document.registerElement) {\n    console.error('AG Grid: unable to find document.registerElement() function, unable to initialise AG Grid as a Web Component');\n  } // i don't think this type of extension is possible in TypeScript, so back to\n  // plain Javascript to create this object\n\n\n  var AgileGridProto = Object.create(HTMLElement.prototype); // wrap each property with a get and set method, so we can track when changes are done\n\n  ComponentUtil.ALL_PROPERTIES.forEach(function (key) {\n    Object.defineProperty(AgileGridProto, key, {\n      set: function (v) {\n        this.__agGridSetProperty(key, v);\n      },\n      get: function () {\n        return this.__agGridGetProperty(key);\n      },\n      enumerable: true,\n      configurable: true\n    });\n  });\n  var agGridProtoNoType = AgileGridProto;\n\n  agGridProtoNoType.__agGridSetProperty = function (key, value) {\n    if (!this.__attributes) {\n      this.__attributes = {};\n    }\n\n    this.__attributes[key] = value; // keeping this consistent with the ng2 onChange, so I can reuse the handling code\n\n    var changeObject = {};\n    changeObject[key] = {\n      currentValue: value\n    };\n    this.onChange(changeObject);\n  };\n\n  agGridProtoNoType.onChange = function (changes) {\n    if (this._initialised) {\n      ComponentUtil.processOnChange(changes, this._gridOptions, this.api, this.columnApi);\n    }\n  };\n\n  agGridProtoNoType.__agGridGetProperty = function (key) {\n    if (!this.__attributes) {\n      this.__attributes = {};\n    }\n\n    return this.__attributes[key];\n  };\n\n  agGridProtoNoType.setGridOptions = function (options) {\n    var globalEventListener = this.globalEventListener.bind(this);\n    this._gridOptions = ComponentUtil.copyAttributesToGridOptions(options, this);\n    var gridParams = {\n      globalEventListener: globalEventListener\n    };\n    this._agGrid = new Grid(this, this._gridOptions, gridParams);\n    this.api = options.api;\n    this.columnApi = options.columnApi;\n    this._initialised = true;\n  }; // copies all the attributes into this object\n\n\n  agGridProtoNoType.createdCallback = function () {\n    for (var i = 0; i < this.attributes.length; i++) {\n      var attribute = this.attributes[i];\n      this.setPropertyFromAttribute(attribute);\n    }\n  };\n\n  agGridProtoNoType.setPropertyFromAttribute = function (attribute) {\n    var name = toCamelCase(attribute.nodeName);\n    var value = attribute.nodeValue;\n\n    if (ComponentUtil.ALL_PROPERTIES.indexOf(name) >= 0) {\n      this[name] = value;\n    }\n  };\n\n  agGridProtoNoType.attachedCallback = function (params) {};\n\n  agGridProtoNoType.detachedCallback = function (params) {};\n\n  agGridProtoNoType.attributeChangedCallback = function (attributeName) {\n    var attribute = this.attributes[attributeName];\n    this.setPropertyFromAttribute(attribute);\n  };\n\n  agGridProtoNoType.globalEventListener = function (eventType, event) {\n    var eventLowerCase = eventType.toLowerCase();\n    var browserEvent = new Event(eventLowerCase);\n    var browserEventNoType = browserEvent;\n    browserEventNoType.agGridDetails = event;\n    this.dispatchEvent(browserEvent);\n    var callbackMethod = 'on' + eventLowerCase;\n\n    if (typeof this[callbackMethod] === 'function') {\n      this[callbackMethod](browserEvent);\n    }\n  }; // finally, register\n\n\n  document.registerElement('ag-grid', {\n    prototype: AgileGridProto\n  });\n}\n\nfunction toCamelCase(myString) {\n  if (typeof myString === 'string') {\n    var result = myString.replace(/-([a-z])/g, function (g) {\n      return g[1].toUpperCase();\n    });\n    return result;\n  } else {\n    return myString;\n  }\n}","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/components/agGridWebComponent.js"],"names":["ComponentUtil","Grid","registered","initialiseAgGridWithWebComponents","console","warn","document","registerElement","error","AgileGridProto","Object","create","HTMLElement","prototype","ALL_PROPERTIES","forEach","key","defineProperty","set","v","__agGridSetProperty","get","__agGridGetProperty","enumerable","configurable","agGridProtoNoType","value","__attributes","changeObject","currentValue","onChange","changes","_initialised","processOnChange","_gridOptions","api","columnApi","setGridOptions","options","globalEventListener","bind","copyAttributesToGridOptions","gridParams","_agGrid","createdCallback","i","attributes","length","attribute","setPropertyFromAttribute","name","toCamelCase","nodeName","nodeValue","indexOf","attachedCallback","params","detachedCallback","attributeChangedCallback","attributeName","eventType","event","eventLowerCase","toLowerCase","browserEvent","Event","browserEventNoType","agGridDetails","dispatchEvent","callbackMethod","myString","result","replace","g","toUpperCase"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { ComponentUtil } from \"./componentUtil\";\nimport { Grid } from \"../grid\";\nvar registered = false;\nexport function initialiseAgGridWithWebComponents() {\n    console.warn('ag-grid: initialiseAgGridWithWebComponents is deprecated. Please use the ag-grid-webcomponent dependency instead. ');\n    // only register to WebComponents once\n    if (registered) {\n        return;\n    }\n    registered = true;\n    if (typeof document === 'undefined' || !document.registerElement) {\n        console.error('AG Grid: unable to find document.registerElement() function, unable to initialise AG Grid as a Web Component');\n    }\n    // i don't think this type of extension is possible in TypeScript, so back to\n    // plain Javascript to create this object\n    var AgileGridProto = Object.create(HTMLElement.prototype);\n    // wrap each property with a get and set method, so we can track when changes are done\n    ComponentUtil.ALL_PROPERTIES.forEach(function (key) {\n        Object.defineProperty(AgileGridProto, key, {\n            set: function (v) {\n                this.__agGridSetProperty(key, v);\n            },\n            get: function () {\n                return this.__agGridGetProperty(key);\n            },\n            enumerable: true,\n            configurable: true\n        });\n    });\n    var agGridProtoNoType = AgileGridProto;\n    agGridProtoNoType.__agGridSetProperty = function (key, value) {\n        if (!this.__attributes) {\n            this.__attributes = {};\n        }\n        this.__attributes[key] = value;\n        // keeping this consistent with the ng2 onChange, so I can reuse the handling code\n        var changeObject = {};\n        changeObject[key] = { currentValue: value };\n        this.onChange(changeObject);\n    };\n    agGridProtoNoType.onChange = function (changes) {\n        if (this._initialised) {\n            ComponentUtil.processOnChange(changes, this._gridOptions, this.api, this.columnApi);\n        }\n    };\n    agGridProtoNoType.__agGridGetProperty = function (key) {\n        if (!this.__attributes) {\n            this.__attributes = {};\n        }\n        return this.__attributes[key];\n    };\n    agGridProtoNoType.setGridOptions = function (options) {\n        var globalEventListener = this.globalEventListener.bind(this);\n        this._gridOptions = ComponentUtil.copyAttributesToGridOptions(options, this);\n        var gridParams = {\n            globalEventListener: globalEventListener\n        };\n        this._agGrid = new Grid(this, this._gridOptions, gridParams);\n        this.api = options.api;\n        this.columnApi = options.columnApi;\n        this._initialised = true;\n    };\n    // copies all the attributes into this object\n    agGridProtoNoType.createdCallback = function () {\n        for (var i = 0; i < this.attributes.length; i++) {\n            var attribute = this.attributes[i];\n            this.setPropertyFromAttribute(attribute);\n        }\n    };\n    agGridProtoNoType.setPropertyFromAttribute = function (attribute) {\n        var name = toCamelCase(attribute.nodeName);\n        var value = attribute.nodeValue;\n        if (ComponentUtil.ALL_PROPERTIES.indexOf(name) >= 0) {\n            this[name] = value;\n        }\n    };\n    agGridProtoNoType.attachedCallback = function (params) { };\n    agGridProtoNoType.detachedCallback = function (params) { };\n    agGridProtoNoType.attributeChangedCallback = function (attributeName) {\n        var attribute = this.attributes[attributeName];\n        this.setPropertyFromAttribute(attribute);\n    };\n    agGridProtoNoType.globalEventListener = function (eventType, event) {\n        var eventLowerCase = eventType.toLowerCase();\n        var browserEvent = new Event(eventLowerCase);\n        var browserEventNoType = browserEvent;\n        browserEventNoType.agGridDetails = event;\n        this.dispatchEvent(browserEvent);\n        var callbackMethod = 'on' + eventLowerCase;\n        if (typeof this[callbackMethod] === 'function') {\n            this[callbackMethod](browserEvent);\n        }\n    };\n    // finally, register\n    document.registerElement('ag-grid', { prototype: AgileGridProto });\n}\nfunction toCamelCase(myString) {\n    if (typeof myString === 'string') {\n        var result = myString.replace(/-([a-z])/g, function (g) {\n            return g[1].toUpperCase();\n        });\n        return result;\n    }\n    else {\n        return myString;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}