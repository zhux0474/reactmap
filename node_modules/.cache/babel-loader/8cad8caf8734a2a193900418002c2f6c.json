{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Bean } from \"../context/context\";\nimport { deepCloneDefinition } from \"../utils/object\";\n\nvar ColumnDefFactory =\n/** @class */\nfunction () {\n  function ColumnDefFactory() {}\n\n  ColumnDefFactory.prototype.buildColumnDefs = function (cols, rowGroupColumns, pivotColumns) {\n    var _this = this;\n\n    var res = [];\n    var colGroupDefs = {};\n    cols.forEach(function (col) {\n      var colDef = _this.createDefFromColumn(col, rowGroupColumns, pivotColumns);\n\n      var addToResult = true;\n      var childDef = colDef;\n      var pointer = col.getOriginalParent();\n\n      while (pointer) {\n        var parentDef = null; // we don't include padding groups, as the column groups provided\n        // by application didn't have these. the whole point of padding groups\n        // is to balance the column tree that the user provided.\n\n        if (pointer.isPadding()) {\n          pointer = pointer.getOriginalParent();\n          continue;\n        } // if colDef for this group already exists, use it\n\n\n        var existingParentDef = colGroupDefs[pointer.getGroupId()];\n\n        if (existingParentDef) {\n          existingParentDef.children.push(childDef); // if we added to result, it would be the second time we did it\n\n          addToResult = false; // we don't want to continue up the tree, as it has already been\n          // done for this group\n\n          break;\n        }\n\n        parentDef = _this.createDefFromGroup(pointer);\n\n        if (parentDef) {\n          parentDef.children = [childDef];\n          colGroupDefs[parentDef.groupId] = parentDef;\n          childDef = parentDef;\n          pointer = pointer.getOriginalParent();\n        }\n      }\n\n      if (addToResult) {\n        res.push(childDef);\n      }\n    });\n    return res;\n  };\n\n  ColumnDefFactory.prototype.createDefFromGroup = function (group) {\n    var defCloned = deepCloneDefinition(group.getColGroupDef(), ['children']);\n\n    if (defCloned) {\n      defCloned.groupId = group.getGroupId();\n    }\n\n    return defCloned;\n  };\n\n  ColumnDefFactory.prototype.createDefFromColumn = function (col, rowGroupColumns, pivotColumns) {\n    var colDefCloned = deepCloneDefinition(col.getColDef());\n    colDefCloned.colId = col.getColId();\n    colDefCloned.width = col.getActualWidth();\n    colDefCloned.rowGroup = col.isRowGroupActive();\n    colDefCloned.rowGroupIndex = col.isRowGroupActive() ? rowGroupColumns.indexOf(col) : null;\n    colDefCloned.pivot = col.isPivotActive();\n    colDefCloned.pivotIndex = col.isPivotActive() ? pivotColumns.indexOf(col) : null;\n    colDefCloned.aggFunc = col.isValueActive() ? col.getAggFunc() : null;\n    colDefCloned.hide = col.isVisible() ? undefined : true;\n    colDefCloned.pinned = col.isPinned() ? col.getPinned() : null;\n    colDefCloned.sort = col.getSort() ? col.getSort() : null;\n    colDefCloned.sortIndex = col.getSortIndex() != null ? col.getSortIndex() : null;\n    return colDefCloned;\n  };\n\n  ColumnDefFactory = __decorate([Bean('columnDefFactory')], ColumnDefFactory);\n  return ColumnDefFactory;\n}();\n\nexport { ColumnDefFactory };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/columns/columnDefFactory.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","Bean","deepCloneDefinition","ColumnDefFactory","prototype","buildColumnDefs","cols","rowGroupColumns","pivotColumns","_this","res","colGroupDefs","forEach","col","colDef","createDefFromColumn","addToResult","childDef","pointer","getOriginalParent","parentDef","isPadding","existingParentDef","getGroupId","children","push","createDefFromGroup","groupId","group","defCloned","getColGroupDef","colDefCloned","getColDef","colId","getColId","width","getActualWidth","rowGroup","isRowGroupActive","rowGroupIndex","indexOf","pivot","isPivotActive","pivotIndex","aggFunc","isValueActive","getAggFunc","hide","isVisible","undefined","pinned","isPinned","getPinned","sort","getSort","sortIndex","getSortIndex"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean } from \"../context/context\";\nimport { deepCloneDefinition } from \"../utils/object\";\nvar ColumnDefFactory = /** @class */ (function () {\n    function ColumnDefFactory() {\n    }\n    ColumnDefFactory.prototype.buildColumnDefs = function (cols, rowGroupColumns, pivotColumns) {\n        var _this = this;\n        var res = [];\n        var colGroupDefs = {};\n        cols.forEach(function (col) {\n            var colDef = _this.createDefFromColumn(col, rowGroupColumns, pivotColumns);\n            var addToResult = true;\n            var childDef = colDef;\n            var pointer = col.getOriginalParent();\n            while (pointer) {\n                var parentDef = null;\n                // we don't include padding groups, as the column groups provided\n                // by application didn't have these. the whole point of padding groups\n                // is to balance the column tree that the user provided.\n                if (pointer.isPadding()) {\n                    pointer = pointer.getOriginalParent();\n                    continue;\n                }\n                // if colDef for this group already exists, use it\n                var existingParentDef = colGroupDefs[pointer.getGroupId()];\n                if (existingParentDef) {\n                    existingParentDef.children.push(childDef);\n                    // if we added to result, it would be the second time we did it\n                    addToResult = false;\n                    // we don't want to continue up the tree, as it has already been\n                    // done for this group\n                    break;\n                }\n                parentDef = _this.createDefFromGroup(pointer);\n                if (parentDef) {\n                    parentDef.children = [childDef];\n                    colGroupDefs[parentDef.groupId] = parentDef;\n                    childDef = parentDef;\n                    pointer = pointer.getOriginalParent();\n                }\n            }\n            if (addToResult) {\n                res.push(childDef);\n            }\n        });\n        return res;\n    };\n    ColumnDefFactory.prototype.createDefFromGroup = function (group) {\n        var defCloned = deepCloneDefinition(group.getColGroupDef(), ['children']);\n        if (defCloned) {\n            defCloned.groupId = group.getGroupId();\n        }\n        return defCloned;\n    };\n    ColumnDefFactory.prototype.createDefFromColumn = function (col, rowGroupColumns, pivotColumns) {\n        var colDefCloned = deepCloneDefinition(col.getColDef());\n        colDefCloned.colId = col.getColId();\n        colDefCloned.width = col.getActualWidth();\n        colDefCloned.rowGroup = col.isRowGroupActive();\n        colDefCloned.rowGroupIndex = col.isRowGroupActive() ? rowGroupColumns.indexOf(col) : null;\n        colDefCloned.pivot = col.isPivotActive();\n        colDefCloned.pivotIndex = col.isPivotActive() ? pivotColumns.indexOf(col) : null;\n        colDefCloned.aggFunc = col.isValueActive() ? col.getAggFunc() : null;\n        colDefCloned.hide = col.isVisible() ? undefined : true;\n        colDefCloned.pinned = col.isPinned() ? col.getPinned() : null;\n        colDefCloned.sort = col.getSort() ? col.getSort() : null;\n        colDefCloned.sortIndex = col.getSortIndex() != null ? col.getSortIndex() : null;\n        return colDefCloned;\n    };\n    ColumnDefFactory = __decorate([\n        Bean('columnDefFactory')\n    ], ColumnDefFactory);\n    return ColumnDefFactory;\n}());\nexport { ColumnDefFactory };\n"]},"metadata":{},"sourceType":"module"}