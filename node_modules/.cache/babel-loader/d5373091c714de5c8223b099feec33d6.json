{"ast":null,"code":"var _jsxFileName = \"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { fromLonLat, get } from \"ol/proj\"; //import \"./SmokerMap.css\";\n\nimport Map from \"ol/Map\"; //import Feature from \"ol/Feature\";\n\nimport View from \"ol/View\"; //import { Point, Style, Circle, Fill, Feature } from \"ol\";\n\nimport TileLayer from \"ol/layer/Tile\"; //import TileWMS from 'ol/source/TileWMS';\n\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport { Fill, Stroke, Style } from 'ol/style';\nimport { metadata } from './metadata.js';\nimport countyData from './countyline.geojson';\nimport Dropdown from './dropdown.js';\nimport Whitesmoker from '../data/whitesmoker.json';\nimport { Context } from \"./context.js\";\nimport { useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction context() {\n  _s();\n\n  const linkContext = useContext(Context);\n  console.log(\"linkcontext\", linkContext);\n}\n\n_s(context, \"HIf7SsGB1Y3m/XNlq85gzqpJ8lY=\");\n\nexport default class SmokerMap extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setLayerVisibility = viewed => {\n      this.state.countyOutline.setVisible(viewed === 'County');\n      this.state.smokerlayer.setVisible(viewed === 'County');\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (prevProps.viewed !== this.props.viewed) {\n        this.setLayerVisibility(this.props.viewed);\n      } //var checkAndLoad = (name) =>  this.checkAndLoad(prevProps, name)\n      //checkAndLoad('county')\n\n    };\n\n    this.state = {\n      smokerSource: null,\n      smokerlayer: false,\n      countyOutlineSource: null,\n      countyOutline: false,\n      countyReady: false\n    }; // console.log(this.props);\n  }\n\n  componentDidMount() {\n    // get the current value in UsersContext through the hook\n    //const { users, selectedUser, setSelectedUser } = usersContext\n    var basemap = new TileLayer({\n      source: new OSM()\n    });\n    var smokerSource = new VectorSource({\n      url: linkContext,\n      //metadata[1].geojson_url,\n      format: new GeoJSON()\n    });\n    console.log(\"url\", Context.state); // use usestate to update the url base on \n\n    /*var smokerSource = new VectorSource({\n      url: Dropdown.attribute.value,\n    \n       format: new GeoJSON()\n    })\n    */\n\n    var countyOutlineSource = new VectorSource({\n      url: countyData,\n      format: new GeoJSON()\n    });\n    var countyBorder = new Style({\n      stroke: new Stroke({\n        color: 'black',\n        width: 1\n      })\n    });\n    var countyOutline = new VectorLayer({\n      opacity: 1,\n      //visible: this.props.viewed === 'County',\n      source: countyOutlineSource,\n      style: countyBorder\n    });\n\n    var stylefunction = function (feature) {\n      var style; //console.log(Whitesmoker);\n      //console.log(Whitesmoker.features[].properties);\n      //var value=feature.get('brfss_smoker');\n      //var geojson1={geoid:23,value:16},{geoid:50,value:25}\n      //var geojson2={geoid:27,value:55},{geoid:55,value:25},{geoid:63,value:16},{geoid:23,value:25},{geoid:99,value:16},{geoid:50,value:65}\n      //var county=feature.get('county');\n      //var value = feature.get('brfss_smoker');\n\n      var geoid = feature.get('geo_id'); //console.log(geoid);\n      //console.log(value);\n      //console.log(Object.keys(geoid));\n      // const newgeoid = Whitesmoker.map((id)=> {\n      // var white=Whitesmoker.get('geo_id');\n      //console.log(white);\n\n      for (var i = 0; i < Whitesmoker.features.length; i++) {\n        var newgeoid = Whitesmoker.features[i].properties.geo_id; //console.log(newgeoid);\n\n        if (newgeoid === geoid) {\n          var value = Whitesmoker.features[i].properties.brfss_smoker;\n        }\n\n        ;\n      } //console.log(value)\n      //compare geoid with the next json\n      // mapping function or a for loop to find the matching value\n      // return value from geojson2 and assign to var value \n      // assign color to each break from metadata.js\n      //console.log(county,value)\n\n\n      for (let i = 0; i < metadata[1]['break'].length; i++) {\n        if (value > metadata[1]['break'][i]) {\n          style = new Style({\n            fill: new Fill({\n              color: metadata[1]['color'][i]\n            }),\n            stroke: new Stroke({\n              color: 'black',\n              width: 0.3\n            })\n          });\n        }\n\n        ;\n      }\n\n      return style;\n    };\n\n    var smokerlayer = new VectorLayer({\n      source: smokerSource,\n      style: stylefunction //showLegend:true\n\n    });\n    var olmap = new Map({\n      layers: [basemap, countyOutline, smokerlayer],\n      target: \"mapContainer\",\n      view: new View({\n        center: fromLonLat([-94.6859, 46.7296]),\n        zoom: 6\n      })\n    });\n    this.setState({\n      olmap: olmap,\n      countyOutlineSource: countyOutlineSource,\n      countyOutline: countyOutline,\n      smokerlayer: smokerlayer,\n      smokerSource: smokerSource\n    }); // when the geographic county data is loaded in add it to state of react object\n\n    countyOutlineSource.on('change', evt => {\n      var countyOutlineSource = evt.target;\n\n      if (countyOutlineSource.getState() === 'ready') {\n        // note that brackets are needed for dynamic names\n        this.setState({\n          countyData: countyOutlineSource.getFeatures()\n        });\n      }\n    });\n  }\n\n  render() {\n    console.log(\"-> render App\");\n    console.log(Context);\n    return (//console.log(this.state),\n\n      /*#__PURE__*/\n      _jsxDEV(Context.Consumer, {\n        children: context => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: context.state.season\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"mapContainer\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 7\n      }, this) //console.log(this.state)\n\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js"],"names":["React","fromLonLat","get","Map","View","TileLayer","VectorLayer","VectorSource","GeoJSON","OSM","Fill","Stroke","Style","metadata","countyData","Dropdown","Whitesmoker","Context","useContext","context","linkContext","console","log","SmokerMap","Component","constructor","props","setLayerVisibility","viewed","state","countyOutline","setVisible","smokerlayer","componentDidUpdate","prevProps","prevState","smokerSource","countyOutlineSource","countyReady","componentDidMount","basemap","source","url","format","countyBorder","stroke","color","width","opacity","style","stylefunction","feature","geoid","i","features","length","newgeoid","properties","geo_id","value","brfss_smoker","fill","olmap","layers","target","view","center","zoom","setState","on","evt","getState","getFeatures","render","season","height"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { fromLonLat, get } from \"ol/proj\";\n//import \"./SmokerMap.css\";\nimport Map from \"ol/Map\";\n//import Feature from \"ol/Feature\";\nimport View from \"ol/View\";\n//import { Point, Style, Circle, Fill, Feature } from \"ol\";\nimport TileLayer from \"ol/layer/Tile\";\n//import TileWMS from 'ol/source/TileWMS';\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport {Fill, Stroke, Style} from 'ol/style';\nimport {metadata} from './metadata.js';\nimport countyData from './countyline.geojson';\nimport Dropdown from './dropdown.js';\nimport Whitesmoker from '../data/whitesmoker.json';\nimport {Context} from \"./context.js\";\nimport { useContext } from \"react\";\n\nfunction context(){\n  const linkContext = useContext(Context);\n  console.log(\"linkcontext\",linkContext)\n}\nexport default class SmokerMap extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n     \n      smokerSource : null,\n      smokerlayer: false,\n      countyOutlineSource: null,\n      countyOutline: false,\n      countyReady: false\n      \n  };\n   // console.log(this.props);\n  }\n\n  \n\n\n  componentDidMount(){\n    // get the current value in UsersContext through the hook\n  \n  \n  //const { users, selectedUser, setSelectedUser } = usersContext\n\n    var basemap =new TileLayer({\n      source: new OSM()\n    })\n\n    \n    var smokerSource = new VectorSource({\n      url: linkContext,//metadata[1].geojson_url,\n      \n      format: new GeoJSON()\n    })\n    console.log(\"url\",Context.state)\n    \n\n    // use usestate to update the url base on \n    /*var smokerSource = new VectorSource({\n      url: Dropdown.attribute.value,\n    \n\n      format: new GeoJSON()\n    })\n    */\n\n    var countyOutlineSource = new VectorSource({\n      url: countyData,\n      format: new GeoJSON()\n\n    })\n    var countyBorder = new Style({\n      stroke: new Stroke({\n          color: 'black',\n          width: 1\n      })\n  });\n    var countyOutline = new VectorLayer({\n      opacity: 1,\n      //visible: this.props.viewed === 'County',\n      source: countyOutlineSource,\n      style: countyBorder\n    })\n\n    \n  \n    var stylefunction = function(feature){\n        var style;\n        //console.log(Whitesmoker);\n        //console.log(Whitesmoker.features[].properties);\n        \n        //var value=feature.get('brfss_smoker');\n        //var geojson1={geoid:23,value:16},{geoid:50,value:25}\n        //var geojson2={geoid:27,value:55},{geoid:55,value:25},{geoid:63,value:16},{geoid:23,value:25},{geoid:99,value:16},{geoid:50,value:65}\n\n        //var county=feature.get('county');\n        //var value = feature.get('brfss_smoker');\n        var geoid=feature.get('geo_id');\n       //console.log(geoid);\n        //console.log(value);\n        //console.log(Object.keys(geoid));\n       // const newgeoid = Whitesmoker.map((id)=> {\n         // var white=Whitesmoker.get('geo_id');\n          //console.log(white);\n        for (var i=0; i<Whitesmoker.features.length;i++){\n            var newgeoid=Whitesmoker.features[i].properties.geo_id;\n            //console.log(newgeoid);\n            if (newgeoid===geoid ){\n              var value= Whitesmoker.features[i].properties.brfss_smoker;\n             };\n          }\n        //console.log(value)\n        \n        \n        \n        \n        //compare geoid with the next json\n        // mapping function or a for loop to find the matching value\n        // return value from geojson2 and assign to var value \n        \n        // assign color to each break from metadata.js\n        //console.log(county,value)\n        for (let i =0;i<metadata[1]['break'].length;i++){\n          if(value>metadata[1]['break'][i]){\n          style= new Style({\n            fill: new Fill({\n              color: metadata[1]['color'][i]\n            }),\n            stroke: new Stroke({\n              color:'black',\n              width:0.3\n            })\n          })\n        };\n      }\n\n        return style;\n\n    };\n\n    var smokerlayer = new VectorLayer({\n\n       source: smokerSource,\n       style: stylefunction,\n       //showLegend:true\n\n       })\n\n    var olmap=new Map({\n      layers: [basemap,countyOutline,smokerlayer],\n      target: \"mapContainer\",\n      view :new View({\n        center:fromLonLat([-94.6859,46.7296]),\n        zoom: 6\n      })\n\n\n\n    });\n\n    this.setState({\n      \n      olmap: olmap,\n      countyOutlineSource:countyOutlineSource,\n      countyOutline: countyOutline,\n      smokerlayer: smokerlayer,\n      smokerSource:smokerSource\n  })\n\n  // when the geographic county data is loaded in add it to state of react object\n  countyOutlineSource.on('change', (evt) => {\n    var countyOutlineSource=evt.target;\n    if (countyOutlineSource.getState() === 'ready'){\n        // note that brackets are needed for dynamic names\n        this.setState({countyData: countyOutlineSource.getFeatures()});\n    }\n})\n\n\n  }\n\n  setLayerVisibility = viewed => {\n\n    this.state.countyOutline.setVisible(viewed === 'County')\n    this.state.smokerlayer.setVisible(viewed === 'County')\n  }\n  \ncomponentDidUpdate = (prevProps, prevState) => {\n  if (prevProps.viewed !== this.props.viewed) {\n      this.setLayerVisibility(this.props.viewed)\n  }\n  //var checkAndLoad = (name) =>  this.checkAndLoad(prevProps, name)\n  \n  //checkAndLoad('county')\n}\n\n\n  \n\n  \n  render() {\n    console.log(\"-> render App\");\n    console.log(Context)\n    return (\n      //console.log(this.state),\n      <Context.Consumer>\n\n        {(context)=>(\n\n          <p>{context.state.season}</p>\n        )}\n      \n      </Context.Consumer>,\n      \n      <div id=\"mapContainer\" style={{ width: \"100%\",height: \"500px\"}}></div>\n      //console.log(this.state)\n      \n\n    );\n    \n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}