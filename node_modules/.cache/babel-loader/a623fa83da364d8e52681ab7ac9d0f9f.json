{"ast":null,"code":"var _jsxFileName = \"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js\";\nimport React from \"react\";\nimport { fromLonLat, get } from \"ol/proj\"; //import \"./SmokerMap.css\";\n\nimport Map from \"ol/Map\"; //import Feature from \"ol/Feature\";\n\nimport View from \"ol/View\"; //import { Point, Style, Circle, Fill, Feature } from \"ol\";\n\nimport TileLayer from \"ol/layer/Tile\"; //import TileWMS from 'ol/source/TileWMS';\n\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport { Fill, Stroke, Style } from 'ol/style';\nimport { metadata } from './metadata.js';\nimport countyData from './countyline.geojson';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SmokerMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      smokerSource: null,\n      smokerlayer: false,\n      countyOutlineSource: null,\n      countyOutline: false\n    }; //console.log(this.props);\n  }\n\n  componentDidMount() {\n    var basemap = new TileLayer({\n      source: new OSM()\n    }); // use usestate to update the url base on \n\n    var smokerSource = new VectorSource({\n      url: metadata[1]['geojson_url'],\n      format: new GeoJSON()\n    });\n    var countyOutlineSource = new VectorSource({\n      url: countyData,\n      format: new GeoJSON()\n    });\n    var countyBorder = new Style({\n      stroke: new Stroke({\n        color: 'black',\n        width: 1\n      })\n    });\n    var countyOutline = new VectorLayer({\n      opacity: 1,\n      //visible: this.props.viewed === 'County',\n      source: countyOutlineSource,\n      style: countyBorder\n    });\n\n    var stylefunction = function (feature) {\n      var style;\n      var value = feature.get('brfss_smoker'); //var county=feature.get('county');\n      // assign color to each break from metadata.js\n      //console.log(county,value)\n\n      for (let i = 0; i < metadata[1]['break'].length; i++) {\n        if (value > metadata[1]['break'][i]) {\n          style = new Style({\n            fill: new Fill({\n              color: metadata[1]['color'][i]\n            }),\n            stroke: new Stroke({\n              color: 'black',\n              width: 0.3\n            })\n          });\n        }\n\n        ;\n      }\n\n      return style;\n    };\n\n    var smokerlayer = new VectorLayer({\n      source: smokerSource,\n      style: stylefunction //showLegend:true\n\n    });\n    var olmap = new Map({\n      layers: [basemap, countyOutline],\n      target: \"mapContainer\",\n      view: new View({\n        center: fromLonLat([-94.6859, 46.7296]),\n        zoom: 6\n      })\n    });\n    this.setState({\n      olmap: olmap,\n      countyOutline: countyOutline,\n      smokerlayer: smokerlayer\n    });\n  }\n\n  render() {\n    console.log(\"-> render App\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mapContainer\",\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js"],"names":["React","fromLonLat","get","Map","View","TileLayer","VectorLayer","VectorSource","GeoJSON","OSM","Fill","Stroke","Style","metadata","countyData","SmokerMap","Component","constructor","props","state","smokerSource","smokerlayer","countyOutlineSource","countyOutline","componentDidMount","basemap","source","url","format","countyBorder","stroke","color","width","opacity","style","stylefunction","feature","value","i","length","fill","olmap","layers","target","view","center","zoom","setState","render","console","log","height"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { fromLonLat, get } from \"ol/proj\";\n//import \"./SmokerMap.css\";\nimport Map from \"ol/Map\";\n//import Feature from \"ol/Feature\";\nimport View from \"ol/View\";\n//import { Point, Style, Circle, Fill, Feature } from \"ol\";\nimport TileLayer from \"ol/layer/Tile\";\n//import TileWMS from 'ol/source/TileWMS';\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport {Fill, Stroke, Style} from 'ol/style';\nimport {metadata} from './metadata.js';\nimport countyData from './countyline.geojson'\n\n\nexport default class SmokerMap extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n     \n      smokerSource : null,\n      smokerlayer: false,\n      countyOutlineSource: null,\n      countyOutline: false,\n      \n  };\n    //console.log(this.props);\n  }\n\n\n  componentDidMount(){\n\n    var basemap =new TileLayer({\n      source: new OSM()\n    })\n    \n\n    // use usestate to update the url base on \n    var smokerSource = new VectorSource({\n      url:metadata[1]['geojson_url'],\n\n      format: new GeoJSON()\n    })\n    \n\n    var countyOutlineSource = new VectorSource({\n      url: countyData,\n      format: new GeoJSON()\n\n    })\n    var countyBorder = new Style({\n      stroke: new Stroke({\n          color: 'black',\n          width: 1\n      })\n  });\n    var countyOutline = new VectorLayer({\n      opacity: 1,\n      //visible: this.props.viewed === 'County',\n      source: countyOutlineSource,\n      style: countyBorder\n    })\n  \n    var stylefunction = function(feature){\n        var style;\n        \n        var value=feature.get('brfss_smoker');\n        //var county=feature.get('county');\n        \n        // assign color to each break from metadata.js\n        //console.log(county,value)\n        for (let i =0;i<metadata[1]['break'].length;i++){\n          if(value>metadata[1]['break'][i]){\n          style= new Style({\n            fill: new Fill({\n              color: metadata[1]['color'][i]\n            }),\n            stroke: new Stroke({\n              color:'black',\n              width:0.3\n            })\n          })\n        };\n      }\n\n        return style;\n\n    };\n\n    var smokerlayer = new VectorLayer({\n\n       source: smokerSource,\n       style: stylefunction,\n       //showLegend:true\n\n       })\n\n    var olmap=new Map({\n      layers: [basemap,countyOutline],\n      target: \"mapContainer\",\n      view :new View({\n        center:fromLonLat([-94.6859,46.7296]),\n        zoom: 6\n      })\n\n\n\n    });\n\n    this.setState({\n      \n      olmap: olmap,\n      countyOutline: countyOutline,\n      smokerlayer: smokerlayer\n  })\n\n\n\n  }\n\n  \n  render() {\n    console.log(\"-> render App\");\n    return (\n\n\n      <div id=\"mapContainer\" style={{ width: \"100%\",height: \"500px\"}}></div>\n      \n\n\n    );\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}