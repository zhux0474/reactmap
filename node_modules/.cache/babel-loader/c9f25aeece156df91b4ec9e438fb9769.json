{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nexport function fuzzyCheckStrings(inputValues, validValues, allSuggestions) {\n  var fuzzyMatches = {};\n  var invalidInputs = inputValues.filter(function (inputValue) {\n    return !validValues.some(function (validValue) {\n      return validValue === inputValue;\n    });\n  });\n\n  if (invalidInputs.length > 0) {\n    invalidInputs.forEach(function (invalidInput) {\n      return fuzzyMatches[invalidInput] = fuzzySuggestions(invalidInput, allSuggestions);\n    });\n  }\n\n  return fuzzyMatches;\n}\n/**\n *\n * @param {String} inputValue The value to be compared against a list of strings\n * @param allSuggestions The list of strings to be compared against\n * @param hideIrrelevant By default, fuzzy suggestions will just sort the allSuggestions list, set this to true\n *        to filter out the irrelevant values\n * @param weighted Set this to true, to make letters matched in the order they were typed have priority in the results.\n */\n\nexport function fuzzySuggestions(inputValue, allSuggestions, hideIrrelevant, weighted) {\n  var search = weighted ? string_weighted_distances : string_distances;\n  var thisSuggestions = allSuggestions.map(function (text) {\n    return {\n      value: text,\n      relevance: search(inputValue.toLowerCase(), text.toLocaleLowerCase())\n    };\n  });\n  thisSuggestions.sort(function (a, b) {\n    return b.relevance - a.relevance;\n  });\n\n  if (hideIrrelevant) {\n    thisSuggestions = thisSuggestions.filter(function (suggestion) {\n      return suggestion.relevance !== 0;\n    });\n  }\n\n  return thisSuggestions.map(function (suggestion) {\n    return suggestion.value;\n  });\n}\n/**\n * Algorithm to do fuzzy search\n * from https://stackoverflow.com/questions/23305000/javascript-fuzzy-search-that-makes-sense\n * @param {string} from\n * @return {[]}\n */\n\nexport function get_bigrams(from) {\n  var s = from.toLowerCase();\n  var v = new Array(s.length - 1);\n  var i;\n  var j;\n  var ref;\n\n  for (i = j = 0, ref = v.length; j <= ref; i = j += 1) {\n    v[i] = s.slice(i, i + 2);\n  }\n\n  return v;\n}\nexport function string_distances(str1, str2) {\n  if (str1.length === 0 && str2.length === 0) {\n    return 0;\n  }\n\n  var pairs1 = get_bigrams(str1);\n  var pairs2 = get_bigrams(str2);\n  var union = pairs1.length + pairs2.length;\n  var hit_count = 0;\n  var j;\n  var len;\n\n  for (j = 0, len = pairs1.length; j < len; j++) {\n    var x = pairs1[j];\n    var k = void 0;\n    var len1 = void 0;\n\n    for (k = 0, len1 = pairs2.length; k < len1; k++) {\n      var y = pairs2[k];\n\n      if (x === y) {\n        hit_count++;\n      }\n    }\n  }\n\n  return hit_count > 0 ? 2 * hit_count / union : 0;\n}\nexport function string_weighted_distances(str1, str2) {\n  var a = str1.replace(/\\s/g, '');\n  var b = str2.replace(/\\s/g, '');\n  var weight = 0;\n  var lastIndex = 0;\n\n  for (var i = 0; i < a.length; i++) {\n    var idx = b.indexOf(a[i], lastIndex);\n\n    if (idx === -1) {\n      continue;\n    }\n\n    lastIndex = idx;\n    weight += 100 - lastIndex * 100 / 10000 * 100;\n  }\n\n  return weight;\n}","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/utils/fuzzyMatch.js"],"names":["fuzzyCheckStrings","inputValues","validValues","allSuggestions","fuzzyMatches","invalidInputs","filter","inputValue","some","validValue","length","forEach","invalidInput","fuzzySuggestions","hideIrrelevant","weighted","search","string_weighted_distances","string_distances","thisSuggestions","map","text","value","relevance","toLowerCase","toLocaleLowerCase","sort","a","b","suggestion","get_bigrams","from","s","v","Array","i","j","ref","slice","str1","str2","pairs1","pairs2","union","hit_count","len","x","k","len1","y","replace","weight","lastIndex","idx","indexOf"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nexport function fuzzyCheckStrings(inputValues, validValues, allSuggestions) {\n    var fuzzyMatches = {};\n    var invalidInputs = inputValues.filter(function (inputValue) {\n        return !validValues.some(function (validValue) { return validValue === inputValue; });\n    });\n    if (invalidInputs.length > 0) {\n        invalidInputs.forEach(function (invalidInput) {\n            return fuzzyMatches[invalidInput] = fuzzySuggestions(invalidInput, allSuggestions);\n        });\n    }\n    return fuzzyMatches;\n}\n/**\n *\n * @param {String} inputValue The value to be compared against a list of strings\n * @param allSuggestions The list of strings to be compared against\n * @param hideIrrelevant By default, fuzzy suggestions will just sort the allSuggestions list, set this to true\n *        to filter out the irrelevant values\n * @param weighted Set this to true, to make letters matched in the order they were typed have priority in the results.\n */\nexport function fuzzySuggestions(inputValue, allSuggestions, hideIrrelevant, weighted) {\n    var search = weighted ? string_weighted_distances : string_distances;\n    var thisSuggestions = allSuggestions.map(function (text) { return ({\n        value: text,\n        relevance: search(inputValue.toLowerCase(), text.toLocaleLowerCase())\n    }); });\n    thisSuggestions.sort(function (a, b) { return b.relevance - a.relevance; });\n    if (hideIrrelevant) {\n        thisSuggestions = thisSuggestions.filter(function (suggestion) { return suggestion.relevance !== 0; });\n    }\n    return thisSuggestions.map(function (suggestion) { return suggestion.value; });\n}\n/**\n * Algorithm to do fuzzy search\n * from https://stackoverflow.com/questions/23305000/javascript-fuzzy-search-that-makes-sense\n * @param {string} from\n * @return {[]}\n */\nexport function get_bigrams(from) {\n    var s = from.toLowerCase();\n    var v = new Array(s.length - 1);\n    var i;\n    var j;\n    var ref;\n    for (i = j = 0, ref = v.length; j <= ref; i = j += 1) {\n        v[i] = s.slice(i, i + 2);\n    }\n    return v;\n}\nexport function string_distances(str1, str2) {\n    if (str1.length === 0 && str2.length === 0) {\n        return 0;\n    }\n    var pairs1 = get_bigrams(str1);\n    var pairs2 = get_bigrams(str2);\n    var union = pairs1.length + pairs2.length;\n    var hit_count = 0;\n    var j;\n    var len;\n    for (j = 0, len = pairs1.length; j < len; j++) {\n        var x = pairs1[j];\n        var k = void 0;\n        var len1 = void 0;\n        for (k = 0, len1 = pairs2.length; k < len1; k++) {\n            var y = pairs2[k];\n            if (x === y) {\n                hit_count++;\n            }\n        }\n    }\n    return hit_count > 0 ? (2 * hit_count) / union : 0;\n}\nexport function string_weighted_distances(str1, str2) {\n    var a = str1.replace(/\\s/g, '');\n    var b = str2.replace(/\\s/g, '');\n    var weight = 0;\n    var lastIndex = 0;\n    for (var i = 0; i < a.length; i++) {\n        var idx = b.indexOf(a[i], lastIndex);\n        if (idx === -1) {\n            continue;\n        }\n        lastIndex = idx;\n        weight += (100 - (lastIndex * 100 / 10000) * 100);\n    }\n    return weight;\n}\n"]},"metadata":{},"sourceType":"module"}