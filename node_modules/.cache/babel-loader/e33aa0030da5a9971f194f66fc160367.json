{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Column } from \"./column\";\nimport { EventService } from \"../eventService\";\nimport { Autowired } from \"../context/context\";\nimport { last } from \"../utils/array\";\n\nvar ColumnGroup =\n/** @class */\nfunction () {\n  function ColumnGroup(originalColumnGroup, groupId, instanceId, pinned) {\n    // depends on the open/closed state of the group, only displaying columns are stored here\n    this.displayedChildren = [];\n    this.localEventService = new EventService();\n    this.groupId = groupId;\n    this.instanceId = instanceId;\n    this.originalColumnGroup = originalColumnGroup;\n    this.pinned = pinned;\n  } // this is static, a it is used outside of this class\n\n\n  ColumnGroup.createUniqueId = function (groupId, instanceId) {\n    return groupId + '_' + instanceId;\n  }; // as the user is adding and removing columns, the groups are recalculated.\n  // this reset clears out all children, ready for children to be added again\n\n\n  ColumnGroup.prototype.reset = function () {\n    this.parent = null;\n    this.children = null;\n    this.displayedChildren = null;\n  };\n\n  ColumnGroup.prototype.getParent = function () {\n    return this.parent;\n  };\n\n  ColumnGroup.prototype.setParent = function (parent) {\n    this.parent = parent;\n  };\n\n  ColumnGroup.prototype.getUniqueId = function () {\n    return ColumnGroup.createUniqueId(this.groupId, this.instanceId);\n  };\n\n  ColumnGroup.prototype.isEmptyGroup = function () {\n    return this.displayedChildren.length === 0;\n  };\n\n  ColumnGroup.prototype.isMoving = function () {\n    var allLeafColumns = this.getOriginalColumnGroup().getLeafColumns();\n\n    if (!allLeafColumns || allLeafColumns.length === 0) {\n      return false;\n    }\n\n    return allLeafColumns.every(function (col) {\n      return col.isMoving();\n    });\n  };\n\n  ColumnGroup.prototype.checkLeft = function () {\n    // first get all children to setLeft, as it impacts our decision below\n    this.displayedChildren.forEach(function (child) {\n      if (child instanceof ColumnGroup) {\n        child.checkLeft();\n      }\n    }); // set our left based on first displayed column\n\n    if (this.displayedChildren.length > 0) {\n      if (this.gridOptionsWrapper.isEnableRtl()) {\n        var lastChild = last(this.displayedChildren);\n        var lastChildLeft = lastChild.getLeft();\n        this.setLeft(lastChildLeft);\n      } else {\n        var firstChildLeft = this.displayedChildren[0].getLeft();\n        this.setLeft(firstChildLeft);\n      }\n    } else {\n      // this should never happen, as if we have no displayed columns, then\n      // this groups should not even exist.\n      this.setLeft(null);\n    }\n  };\n\n  ColumnGroup.prototype.getLeft = function () {\n    return this.left;\n  };\n\n  ColumnGroup.prototype.getOldLeft = function () {\n    return this.oldLeft;\n  };\n\n  ColumnGroup.prototype.setLeft = function (left) {\n    this.oldLeft = left;\n\n    if (this.left !== left) {\n      this.left = left;\n      this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));\n    }\n  };\n\n  ColumnGroup.prototype.getPinned = function () {\n    return this.pinned;\n  };\n\n  ColumnGroup.prototype.createAgEvent = function (type) {\n    return {\n      type: type\n    };\n  };\n\n  ColumnGroup.prototype.addEventListener = function (eventType, listener) {\n    this.localEventService.addEventListener(eventType, listener);\n  };\n\n  ColumnGroup.prototype.removeEventListener = function (eventType, listener) {\n    this.localEventService.removeEventListener(eventType, listener);\n  };\n\n  ColumnGroup.prototype.getGroupId = function () {\n    return this.groupId;\n  };\n\n  ColumnGroup.prototype.getInstanceId = function () {\n    return this.instanceId;\n  };\n\n  ColumnGroup.prototype.isChildInThisGroupDeepSearch = function (wantedChild) {\n    var result = false;\n    this.children.forEach(function (foundChild) {\n      if (wantedChild === foundChild) {\n        result = true;\n      }\n\n      if (foundChild instanceof ColumnGroup) {\n        if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {\n          result = true;\n        }\n      }\n    });\n    return result;\n  };\n\n  ColumnGroup.prototype.getActualWidth = function () {\n    var groupActualWidth = 0;\n\n    if (this.displayedChildren) {\n      this.displayedChildren.forEach(function (child) {\n        groupActualWidth += child.getActualWidth();\n      });\n    }\n\n    return groupActualWidth;\n  };\n\n  ColumnGroup.prototype.isResizable = function () {\n    if (!this.displayedChildren) {\n      return false;\n    } // if at least one child is resizable, then the group is resizable\n\n\n    var result = false;\n    this.displayedChildren.forEach(function (child) {\n      if (child.isResizable()) {\n        result = true;\n      }\n    });\n    return result;\n  };\n\n  ColumnGroup.prototype.getMinWidth = function () {\n    var result = 0;\n    this.displayedChildren.forEach(function (groupChild) {\n      result += groupChild.getMinWidth() || 0;\n    });\n    return result;\n  };\n\n  ColumnGroup.prototype.addChild = function (child) {\n    if (!this.children) {\n      this.children = [];\n    }\n\n    this.children.push(child);\n  };\n\n  ColumnGroup.prototype.getDisplayedChildren = function () {\n    return this.displayedChildren;\n  };\n\n  ColumnGroup.prototype.getLeafColumns = function () {\n    var result = [];\n    this.addLeafColumns(result);\n    return result;\n  };\n\n  ColumnGroup.prototype.getDisplayedLeafColumns = function () {\n    var result = [];\n    this.addDisplayedLeafColumns(result);\n    return result;\n  }; // why two methods here doing the same thing?\n\n\n  ColumnGroup.prototype.getDefinition = function () {\n    return this.originalColumnGroup.getColGroupDef();\n  };\n\n  ColumnGroup.prototype.getColGroupDef = function () {\n    return this.originalColumnGroup.getColGroupDef();\n  };\n\n  ColumnGroup.prototype.isPadding = function () {\n    return this.originalColumnGroup.isPadding();\n  };\n\n  ColumnGroup.prototype.isExpandable = function () {\n    return this.originalColumnGroup.isExpandable();\n  };\n\n  ColumnGroup.prototype.isExpanded = function () {\n    return this.originalColumnGroup.isExpanded();\n  };\n\n  ColumnGroup.prototype.setExpanded = function (expanded) {\n    this.originalColumnGroup.setExpanded(expanded);\n  };\n\n  ColumnGroup.prototype.addDisplayedLeafColumns = function (leafColumns) {\n    this.displayedChildren.forEach(function (child) {\n      if (child instanceof Column) {\n        leafColumns.push(child);\n      } else if (child instanceof ColumnGroup) {\n        child.addDisplayedLeafColumns(leafColumns);\n      }\n    });\n  };\n\n  ColumnGroup.prototype.addLeafColumns = function (leafColumns) {\n    this.children.forEach(function (child) {\n      if (child instanceof Column) {\n        leafColumns.push(child);\n      } else if (child instanceof ColumnGroup) {\n        child.addLeafColumns(leafColumns);\n      }\n    });\n  };\n\n  ColumnGroup.prototype.getChildren = function () {\n    return this.children;\n  };\n\n  ColumnGroup.prototype.getColumnGroupShow = function () {\n    return this.originalColumnGroup.getColumnGroupShow();\n  };\n\n  ColumnGroup.prototype.getOriginalColumnGroup = function () {\n    return this.originalColumnGroup;\n  };\n\n  ColumnGroup.prototype.getPaddingLevel = function () {\n    var parent = this.getParent();\n\n    if (!this.isPadding() || !parent || !parent.isPadding()) {\n      return 0;\n    }\n\n    return 1 + parent.getPaddingLevel();\n  };\n\n  ColumnGroup.prototype.calculateDisplayedColumns = function () {\n    var _this = this; // clear out last time we calculated\n\n\n    this.displayedChildren = []; // find the column group that is controlling expandable. this is relevant when we have padding (empty)\n    // groups, where the expandable is actually the first parent that is not a padding group.\n\n    var parentWithExpansion = this;\n\n    while (parentWithExpansion != null && parentWithExpansion.isPadding()) {\n      parentWithExpansion = parentWithExpansion.getParent();\n    }\n\n    var isExpandable = parentWithExpansion ? parentWithExpansion.originalColumnGroup.isExpandable() : false; // it not expandable, everything is visible\n\n    if (!isExpandable) {\n      this.displayedChildren = this.children;\n      this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n      return;\n    } // Add cols based on columnGroupShow\n    // Note - the below also adds padding groups, these are always added because they never have\n    // colDef.columnGroupShow set.\n\n\n    this.children.forEach(function (child) {\n      // never add empty groups\n      var emptyGroup = child instanceof ColumnGroup && (!child.displayedChildren || !child.displayedChildren.length);\n\n      if (emptyGroup) {\n        return;\n      }\n\n      var headerGroupShow = child.getColumnGroupShow();\n\n      switch (headerGroupShow) {\n        case ColumnGroup.HEADER_GROUP_SHOW_OPEN:\n          // when set to open, only show col if group is open\n          if (parentWithExpansion.originalColumnGroup.isExpanded()) {\n            _this.displayedChildren.push(child);\n          }\n\n          break;\n\n        case ColumnGroup.HEADER_GROUP_SHOW_CLOSED:\n          // when set to open, only show col if group is open\n          if (!parentWithExpansion.originalColumnGroup.isExpanded()) {\n            _this.displayedChildren.push(child);\n          }\n\n          break;\n\n        default:\n          _this.displayedChildren.push(child);\n\n          break;\n      }\n    });\n    this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n  };\n\n  ColumnGroup.HEADER_GROUP_SHOW_OPEN = 'open';\n  ColumnGroup.HEADER_GROUP_SHOW_CLOSED = 'closed';\n  ColumnGroup.EVENT_LEFT_CHANGED = 'leftChanged';\n  ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED = 'displayedChildrenChanged';\n\n  __decorate([Autowired('gridOptionsWrapper')], ColumnGroup.prototype, \"gridOptionsWrapper\", void 0);\n\n  return ColumnGroup;\n}();\n\nexport { ColumnGroup };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/entities/columnGroup.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","Column","EventService","Autowired","last","ColumnGroup","originalColumnGroup","groupId","instanceId","pinned","displayedChildren","localEventService","createUniqueId","prototype","reset","parent","children","getParent","setParent","getUniqueId","isEmptyGroup","isMoving","allLeafColumns","getOriginalColumnGroup","getLeafColumns","every","col","checkLeft","forEach","child","gridOptionsWrapper","isEnableRtl","lastChild","lastChildLeft","getLeft","setLeft","firstChildLeft","left","getOldLeft","oldLeft","dispatchEvent","createAgEvent","EVENT_LEFT_CHANGED","getPinned","type","addEventListener","eventType","listener","removeEventListener","getGroupId","getInstanceId","isChildInThisGroupDeepSearch","wantedChild","result","foundChild","getActualWidth","groupActualWidth","isResizable","getMinWidth","groupChild","addChild","push","getDisplayedChildren","addLeafColumns","getDisplayedLeafColumns","addDisplayedLeafColumns","getDefinition","getColGroupDef","isPadding","isExpandable","isExpanded","setExpanded","expanded","leafColumns","getChildren","getColumnGroupShow","getPaddingLevel","calculateDisplayedColumns","_this","parentWithExpansion","EVENT_DISPLAYED_CHILDREN_CHANGED","emptyGroup","headerGroupShow","HEADER_GROUP_SHOW_OPEN","HEADER_GROUP_SHOW_CLOSED"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Column } from \"./column\";\nimport { EventService } from \"../eventService\";\nimport { Autowired } from \"../context/context\";\nimport { last } from \"../utils/array\";\nvar ColumnGroup = /** @class */ (function () {\n    function ColumnGroup(originalColumnGroup, groupId, instanceId, pinned) {\n        // depends on the open/closed state of the group, only displaying columns are stored here\n        this.displayedChildren = [];\n        this.localEventService = new EventService();\n        this.groupId = groupId;\n        this.instanceId = instanceId;\n        this.originalColumnGroup = originalColumnGroup;\n        this.pinned = pinned;\n    }\n    // this is static, a it is used outside of this class\n    ColumnGroup.createUniqueId = function (groupId, instanceId) {\n        return groupId + '_' + instanceId;\n    };\n    // as the user is adding and removing columns, the groups are recalculated.\n    // this reset clears out all children, ready for children to be added again\n    ColumnGroup.prototype.reset = function () {\n        this.parent = null;\n        this.children = null;\n        this.displayedChildren = null;\n    };\n    ColumnGroup.prototype.getParent = function () {\n        return this.parent;\n    };\n    ColumnGroup.prototype.setParent = function (parent) {\n        this.parent = parent;\n    };\n    ColumnGroup.prototype.getUniqueId = function () {\n        return ColumnGroup.createUniqueId(this.groupId, this.instanceId);\n    };\n    ColumnGroup.prototype.isEmptyGroup = function () {\n        return this.displayedChildren.length === 0;\n    };\n    ColumnGroup.prototype.isMoving = function () {\n        var allLeafColumns = this.getOriginalColumnGroup().getLeafColumns();\n        if (!allLeafColumns || allLeafColumns.length === 0) {\n            return false;\n        }\n        return allLeafColumns.every(function (col) { return col.isMoving(); });\n    };\n    ColumnGroup.prototype.checkLeft = function () {\n        // first get all children to setLeft, as it impacts our decision below\n        this.displayedChildren.forEach(function (child) {\n            if (child instanceof ColumnGroup) {\n                child.checkLeft();\n            }\n        });\n        // set our left based on first displayed column\n        if (this.displayedChildren.length > 0) {\n            if (this.gridOptionsWrapper.isEnableRtl()) {\n                var lastChild = last(this.displayedChildren);\n                var lastChildLeft = lastChild.getLeft();\n                this.setLeft(lastChildLeft);\n            }\n            else {\n                var firstChildLeft = this.displayedChildren[0].getLeft();\n                this.setLeft(firstChildLeft);\n            }\n        }\n        else {\n            // this should never happen, as if we have no displayed columns, then\n            // this groups should not even exist.\n            this.setLeft(null);\n        }\n    };\n    ColumnGroup.prototype.getLeft = function () {\n        return this.left;\n    };\n    ColumnGroup.prototype.getOldLeft = function () {\n        return this.oldLeft;\n    };\n    ColumnGroup.prototype.setLeft = function (left) {\n        this.oldLeft = left;\n        if (this.left !== left) {\n            this.left = left;\n            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));\n        }\n    };\n    ColumnGroup.prototype.getPinned = function () {\n        return this.pinned;\n    };\n    ColumnGroup.prototype.createAgEvent = function (type) {\n        return { type: type };\n    };\n    ColumnGroup.prototype.addEventListener = function (eventType, listener) {\n        this.localEventService.addEventListener(eventType, listener);\n    };\n    ColumnGroup.prototype.removeEventListener = function (eventType, listener) {\n        this.localEventService.removeEventListener(eventType, listener);\n    };\n    ColumnGroup.prototype.getGroupId = function () {\n        return this.groupId;\n    };\n    ColumnGroup.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n    ColumnGroup.prototype.isChildInThisGroupDeepSearch = function (wantedChild) {\n        var result = false;\n        this.children.forEach(function (foundChild) {\n            if (wantedChild === foundChild) {\n                result = true;\n            }\n            if (foundChild instanceof ColumnGroup) {\n                if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {\n                    result = true;\n                }\n            }\n        });\n        return result;\n    };\n    ColumnGroup.prototype.getActualWidth = function () {\n        var groupActualWidth = 0;\n        if (this.displayedChildren) {\n            this.displayedChildren.forEach(function (child) {\n                groupActualWidth += child.getActualWidth();\n            });\n        }\n        return groupActualWidth;\n    };\n    ColumnGroup.prototype.isResizable = function () {\n        if (!this.displayedChildren) {\n            return false;\n        }\n        // if at least one child is resizable, then the group is resizable\n        var result = false;\n        this.displayedChildren.forEach(function (child) {\n            if (child.isResizable()) {\n                result = true;\n            }\n        });\n        return result;\n    };\n    ColumnGroup.prototype.getMinWidth = function () {\n        var result = 0;\n        this.displayedChildren.forEach(function (groupChild) {\n            result += groupChild.getMinWidth() || 0;\n        });\n        return result;\n    };\n    ColumnGroup.prototype.addChild = function (child) {\n        if (!this.children) {\n            this.children = [];\n        }\n        this.children.push(child);\n    };\n    ColumnGroup.prototype.getDisplayedChildren = function () {\n        return this.displayedChildren;\n    };\n    ColumnGroup.prototype.getLeafColumns = function () {\n        var result = [];\n        this.addLeafColumns(result);\n        return result;\n    };\n    ColumnGroup.prototype.getDisplayedLeafColumns = function () {\n        var result = [];\n        this.addDisplayedLeafColumns(result);\n        return result;\n    };\n    // why two methods here doing the same thing?\n    ColumnGroup.prototype.getDefinition = function () {\n        return this.originalColumnGroup.getColGroupDef();\n    };\n    ColumnGroup.prototype.getColGroupDef = function () {\n        return this.originalColumnGroup.getColGroupDef();\n    };\n    ColumnGroup.prototype.isPadding = function () {\n        return this.originalColumnGroup.isPadding();\n    };\n    ColumnGroup.prototype.isExpandable = function () {\n        return this.originalColumnGroup.isExpandable();\n    };\n    ColumnGroup.prototype.isExpanded = function () {\n        return this.originalColumnGroup.isExpanded();\n    };\n    ColumnGroup.prototype.setExpanded = function (expanded) {\n        this.originalColumnGroup.setExpanded(expanded);\n    };\n    ColumnGroup.prototype.addDisplayedLeafColumns = function (leafColumns) {\n        this.displayedChildren.forEach(function (child) {\n            if (child instanceof Column) {\n                leafColumns.push(child);\n            }\n            else if (child instanceof ColumnGroup) {\n                child.addDisplayedLeafColumns(leafColumns);\n            }\n        });\n    };\n    ColumnGroup.prototype.addLeafColumns = function (leafColumns) {\n        this.children.forEach(function (child) {\n            if (child instanceof Column) {\n                leafColumns.push(child);\n            }\n            else if (child instanceof ColumnGroup) {\n                child.addLeafColumns(leafColumns);\n            }\n        });\n    };\n    ColumnGroup.prototype.getChildren = function () {\n        return this.children;\n    };\n    ColumnGroup.prototype.getColumnGroupShow = function () {\n        return this.originalColumnGroup.getColumnGroupShow();\n    };\n    ColumnGroup.prototype.getOriginalColumnGroup = function () {\n        return this.originalColumnGroup;\n    };\n    ColumnGroup.prototype.getPaddingLevel = function () {\n        var parent = this.getParent();\n        if (!this.isPadding() || !parent || !parent.isPadding()) {\n            return 0;\n        }\n        return 1 + parent.getPaddingLevel();\n    };\n    ColumnGroup.prototype.calculateDisplayedColumns = function () {\n        var _this = this;\n        // clear out last time we calculated\n        this.displayedChildren = [];\n        // find the column group that is controlling expandable. this is relevant when we have padding (empty)\n        // groups, where the expandable is actually the first parent that is not a padding group.\n        var parentWithExpansion = this;\n        while (parentWithExpansion != null && parentWithExpansion.isPadding()) {\n            parentWithExpansion = parentWithExpansion.getParent();\n        }\n        var isExpandable = parentWithExpansion ? parentWithExpansion.originalColumnGroup.isExpandable() : false;\n        // it not expandable, everything is visible\n        if (!isExpandable) {\n            this.displayedChildren = this.children;\n            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n            return;\n        }\n        // Add cols based on columnGroupShow\n        // Note - the below also adds padding groups, these are always added because they never have\n        // colDef.columnGroupShow set.\n        this.children.forEach(function (child) {\n            // never add empty groups\n            var emptyGroup = child instanceof ColumnGroup && (!child.displayedChildren || !child.displayedChildren.length);\n            if (emptyGroup) {\n                return;\n            }\n            var headerGroupShow = child.getColumnGroupShow();\n            switch (headerGroupShow) {\n                case ColumnGroup.HEADER_GROUP_SHOW_OPEN:\n                    // when set to open, only show col if group is open\n                    if (parentWithExpansion.originalColumnGroup.isExpanded()) {\n                        _this.displayedChildren.push(child);\n                    }\n                    break;\n                case ColumnGroup.HEADER_GROUP_SHOW_CLOSED:\n                    // when set to open, only show col if group is open\n                    if (!parentWithExpansion.originalColumnGroup.isExpanded()) {\n                        _this.displayedChildren.push(child);\n                    }\n                    break;\n                default:\n                    _this.displayedChildren.push(child);\n                    break;\n            }\n        });\n        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n    };\n    ColumnGroup.HEADER_GROUP_SHOW_OPEN = 'open';\n    ColumnGroup.HEADER_GROUP_SHOW_CLOSED = 'closed';\n    ColumnGroup.EVENT_LEFT_CHANGED = 'leftChanged';\n    ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED = 'displayedChildrenChanged';\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], ColumnGroup.prototype, \"gridOptionsWrapper\", void 0);\n    return ColumnGroup;\n}());\nexport { ColumnGroup };\n"]},"metadata":{},"sourceType":"module"}