{"ast":null,"code":"/**\n * @module ol/source/TileWMS\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { DEFAULT_WMS_VERSION } from './common.js';\nimport TileImage from './TileImage.js';\nimport WMSServerType from './WMSServerType.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { buffer, createEmpty } from '../extent.js';\nimport { buffer as bufferSize, scale as scaleSize, toSize } from '../size.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { compareVersions } from '../string.js';\nimport { get as getProjection, transform, transformExtent } from '../proj.js';\nimport { modulo } from '../math.js';\nimport { hash as tileCoordHash } from '../tilecoord.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used..\n * @property {import(\"./WMSServerType.js\").default|string} [serverType]\n * The type of the remote WMS server. Currently only used when `hidpi` is\n * `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\n\nvar TileWMS =\n/** @class */\nfunction (_super) {\n  __extends(TileWMS, _super);\n  /**\n   * @param {Options} [opt_options] Tile WMS options.\n   */\n\n\n  function TileWMS(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options :\n    /** @type {Options} */\n    {};\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    var params = options.params || {};\n    var transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: interpolate,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    _this.params_ = params;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.v13_ = true;\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n\n    _this.serverType_ =\n    /** @type {import(\"./WMSServerType.js\").default|undefined} */\n    options.serverType;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    _this.tmpExtent_ = createEmpty();\n\n    _this.updateV13_();\n\n    _this.setKey(_this.getKeyForParams_());\n\n    return _this;\n  }\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n\n\n  TileWMS.prototype.getFeatureInfoUrl = function (coordinate, resolution, projection, params) {\n    var projectionObj = getProjection(projection);\n    var sourceProjectionObj = this.getProjection();\n    var tileGrid = this.getTileGrid();\n\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n\n    var z = tileGrid.getZForResolution(resolution, this.zDirection);\n    var tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    var tileResolution = tileGrid.getResolution(tileCoord[0]);\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    var gutter = this.gutter_;\n\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);\n      tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    assign(baseParams, this.params_, params);\n    var x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    var y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, 1, sourceProjectionObj || projectionObj, baseParams);\n  };\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n\n\n  TileWMS.prototype.getLegendUrl = function (resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png'\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      var layers = this.params_.LAYERS;\n      var isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n\n      if (!isSingleLayer) {\n        return undefined;\n      }\n\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      var mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;\n      var pixelSize = 0.00028;\n      baseParams['SCALE'] = resolution * mpu / pixelSize;\n    }\n\n    assign(baseParams, params);\n    return appendParams(\n    /** @type {string} */\n    this.urls[0], baseParams);\n  };\n  /**\n   * @return {number} Gutter.\n   */\n\n\n  TileWMS.prototype.getGutter = function () {\n    return this.gutter_;\n  };\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  TileWMS.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n\n\n  TileWMS.prototype.getRequestUrl_ = function (tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n    var urls = this.urls;\n\n    if (!urls) {\n      return undefined;\n    }\n\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          var dpi = 90 * pixelRatio + 0.5 | 0;\n\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n\n          break;\n\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n\n        default:\n          assert(false, 52); // Unknown `serverType` configured\n\n          break;\n      }\n    }\n\n    var axisOrientation = projection.getAxisOrientation();\n    var bbox = tileExtent;\n\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      var tmp = void 0;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n\n    params['BBOX'] = bbox.join(',');\n    var url;\n\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      var index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    return appendParams(url, params);\n  };\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n\n\n  TileWMS.prototype.getTilePixelRatio = function (pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  };\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n\n\n  TileWMS.prototype.getKeyForParams_ = function () {\n    var i = 0;\n    var res = [];\n\n    for (var key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n\n    return res.join('/');\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  TileWMS.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  };\n  /**\n   * @private\n   */\n\n\n  TileWMS.prototype.updateV13_ = function () {\n    var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n\n\n  TileWMS.prototype.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n    var tileGrid = this.getTileGrid();\n\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    var tileResolution = tileGrid.getResolution(tileCoord[0]);\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    var gutter = this.gutter_;\n\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    assign(baseParams, this.params_);\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);\n  };\n\n  return TileWMS;\n}(TileImage);\n\nexport default TileWMS;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/ol/src/source/TileWMS.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @module ol/source/TileWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\n\nimport TileImage from './TileImage.js';\nimport WMSServerType from './WMSServerType.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {assign} from '../obj.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {buffer as bufferSize, scale as scaleSize, toSize} from '../size.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {compareVersions} from '../string.js';\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\nimport {modulo} from '../math.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used..\n * @property {import(\"./WMSServerType.js\").default|string} [serverType]\n * The type of the remote WMS server. Currently only used when `hidpi` is\n * `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nclass TileWMS extends TileImage {\n  /**\n   * @param {Options} [opt_options] Tile WMS options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : /** @type {Options} */ ({});\n\n    let interpolate =\n      options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    const params = options.params || {};\n\n    const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: interpolate,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n    this.serverType_ =\n      /** @type {import(\"./WMSServerType.js\").default|undefined} */ (\n        options.serverType\n      );\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n\n    const z = tileGrid.getZForResolution(resolution, this.zDirection);\n    const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    let tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        tileResolution\n      );\n      tileExtent = transformExtent(\n        tileExtent,\n        projectionObj,\n        sourceProjectionObj\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    assign(baseParams, this.params_, params);\n\n    const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.urls[0]), baseParams);\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(\n    tileCoord,\n    tileSize,\n    tileExtent,\n    pixelRatio,\n    projection,\n    params\n  ) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          const dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default:\n          assert(false, 52); // Unknown `serverType` configured\n          break;\n      }\n    }\n\n    const axisOrientation = projection.getAxisOrientation();\n    const bbox = tileExtent;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      let tmp;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n    return appendParams(url, params);\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n    };\n    assign(baseParams, this.params_);\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      pixelRatio,\n      projection,\n      baseParams\n    );\n  }\n}\n\nexport default TileWMS;\n"]},"metadata":{},"sourceType":"module"}