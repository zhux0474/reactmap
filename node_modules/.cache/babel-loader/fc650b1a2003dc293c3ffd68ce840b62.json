{"ast":null,"code":"/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, { createOrUpdate as createOrUpdateTileRange } from '../TileRange.js';\nimport { DEFAULT_TILE_SIZE } from './common.js';\nimport { assert } from '../asserts.js';\nimport { ceil, clamp, floor } from '../math.js';\nimport { createOrUpdate, getTopLeft } from '../extent.js';\nimport { createOrUpdate as createOrUpdateTileCoord } from '../tilecoord.js';\nimport { isSorted, linearFindNearest } from '../array.js';\nimport { toSize } from '../size.js';\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\n\nvar tmpTileCoord = [0, 0, 0];\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\n\nvar DECIMALS = 5;\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\n\nvar TileGrid =\n/** @class */\nfunction () {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  function TileGrid(options) {\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n\n    this.resolutions_ = options.resolutions;\n    assert(isSorted(this.resolutions_, function (a, b) {\n      return b - a;\n    }, true), 17); // `resolutions` must be sorted in descending order\n    // check if we've got a consistent zoom factor and origin\n\n    var zoomFactor;\n\n    if (!options.origins) {\n      for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n\n    this.zoomFactor_ = zoomFactor;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    this.maxZoom = this.resolutions_.length - 1;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n\n    this.origins_ = null;\n\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\n    }\n\n    var extent = options.extent;\n\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n\n    assert(!this.origin_ && this.origins_ || this.origin_ && !this.origins_, 18); // Either `origin` or `origins` must be configured, never both\n\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n\n    this.tileSizes_ = null;\n\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\n    }\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n\n\n    this.tileSize_ = options.tileSize !== undefined ? options.tileSize : !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;\n    assert(!this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_, 22); // Either `tileSize` or `tileSizes` must be configured, never both\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.extent_ = extent !== undefined ? extent : null;\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n\n    this.fullTileRanges_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.tmpSize_ = [0, 0];\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.tmpExtent_ = [0, 0, 0, 0];\n\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map(function (size, z) {\n        var tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n\n        if (extent) {\n          var restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n\n        return tileRange;\n      }, this);\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n\n\n  TileGrid.prototype.forEachTileCoord = function (extent, zoom, callback) {\n    var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n\n    for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */\n\n\n  TileGrid.prototype.forEachTileCoordParentTileRange = function (tileCoord, callback, opt_tileRange, opt_extent) {\n    var tileRange, x, y;\n    var tileCoordExtent = null;\n    var z = tileCoord[0] - 1;\n\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n    }\n\n    while (z >= this.minZoom) {\n      if (this.zoomFactor_ === 2) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, opt_tileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n      }\n\n      if (callback(z, tileRange)) {\n        return true;\n      }\n\n      --z;\n    }\n\n    return false;\n  };\n  /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  TileGrid.prototype.getExtent = function () {\n    return this.extent_;\n  };\n  /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */\n\n\n  TileGrid.prototype.getMaxZoom = function () {\n    return this.maxZoom;\n  };\n  /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */\n\n\n  TileGrid.prototype.getMinZoom = function () {\n    return this.minZoom;\n  };\n  /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */\n\n\n  TileGrid.prototype.getOrigin = function (z) {\n    if (this.origin_) {\n      return this.origin_;\n    } else {\n      return this.origins_[z];\n    }\n  };\n  /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */\n\n\n  TileGrid.prototype.getResolution = function (z) {\n    return this.resolutions_[z];\n  };\n  /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */\n\n\n  TileGrid.prototype.getResolutions = function () {\n    return this.resolutions_;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n\n\n  TileGrid.prototype.getTileCoordChildTileRange = function (tileCoord, opt_tileRange, opt_extent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        var minX = tileCoord[1] * 2;\n        var minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(minX, minX + 1, minY, minY + 1, opt_tileRange);\n      }\n\n      var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent || this.tmpExtent_);\n      return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, opt_tileRange);\n    }\n\n    return null;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n\n\n  TileGrid.prototype.getTileRangeForTileCoordAndZ = function (tileCoord, z, opt_tileRange) {\n    if (z > this.maxZoom || z < this.minZoom) {\n      return null;\n    }\n\n    var tileCoordZ = tileCoord[0];\n    var tileCoordX = tileCoord[1];\n    var tileCoordY = tileCoord[2];\n\n    if (z === tileCoordZ) {\n      return createOrUpdateTileRange(tileCoordX, tileCoordY, tileCoordX, tileCoordY, opt_tileRange);\n    }\n\n    if (this.zoomFactor_) {\n      var factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n      var minX = Math.floor(tileCoordX * factor);\n      var minY = Math.floor(tileCoordY * factor);\n\n      if (z < tileCoordZ) {\n        return createOrUpdateTileRange(minX, minX, minY, minY, opt_tileRange);\n      }\n\n      var maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n      var maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, opt_tileRange);\n    }\n\n    var tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n  };\n  /**\n   * Get the extent for a tile range.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n\n\n  TileGrid.prototype.getTileRangeExtent = function (z, tileRange, opt_extent) {\n    var origin = this.getOrigin(z);\n    var resolution = this.getResolution(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n    var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n    var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n    var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  };\n  /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n\n\n  TileGrid.prototype.getTileRangeForExtentAndZ = function (extent, z, opt_tileRange) {\n    var tileCoord = tmpTileCoord;\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);\n    var minX = tileCoord[1];\n    var minY = tileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);\n    return createOrUpdateTileRange(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */\n\n\n  TileGrid.prototype.getTileCoordCenter = function (tileCoord) {\n    var origin = this.getOrigin(tileCoord[0]);\n    var resolution = this.getResolution(tileCoord[0]);\n    var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution, origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution];\n  };\n  /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  TileGrid.prototype.getTileCoordExtent = function (tileCoord, opt_extent) {\n    var origin = this.getOrigin(tileCoord[0]);\n    var resolution = this.getResolution(tileCoord[0]);\n    var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    var minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    var maxX = minX + tileSize[0] * resolution;\n    var maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  };\n  /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n\n\n  TileGrid.prototype.getTileCoordForCoordAndResolution = function (coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n  };\n  /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n\n\n  TileGrid.prototype.getTileCoordForXYAndResolution_ = function (x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n    var z = this.getZForResolution(resolution);\n    var scale = resolution / this.getResolution(z);\n    var origin = this.getOrigin(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var tileCoordX = scale * (x - origin[0]) / resolution / tileSize[0];\n    var tileCoordY = scale * (origin[1] - y) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  };\n  /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n\n\n  TileGrid.prototype.getTileCoordForXYAndZ_ = function (x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    var origin = this.getOrigin(z);\n    var resolution = this.getResolution(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n    var tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  };\n  /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Zoom level.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n\n\n  TileGrid.prototype.getTileCoordForCoordAndZ = function (coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */\n\n\n  TileGrid.prototype.getTileCoordResolution = function (tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  };\n  /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an `import(\"../size.js\").Size`, run the result through `import(\"../size.js\").Size.toSize()`.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */\n\n\n  TileGrid.prototype.getTileSize = function (z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    } else {\n      return this.tileSizes_[z];\n    }\n  };\n  /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n   */\n\n\n  TileGrid.prototype.getFullTileRange = function (z) {\n    if (!this.fullTileRanges_) {\n      return this.extent_ ? this.getTileRangeForExtentAndZ(this.extent_, z) : null;\n    } else {\n      return this.fullTileRanges_[z];\n    }\n  };\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n   *     If 0, the nearest resolution will be used.\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n   *\n   * For example to change tile Z at the midpoint of zoom levels\n   * ```js\n   * function(value, high, low) {\n   *   return value - low * Math.sqrt(high / low);\n   * }\n   * ```\n   * @return {number} Z.\n   * @api\n   */\n\n\n  TileGrid.prototype.getZForResolution = function (resolution, opt_direction) {\n    var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);\n    return clamp(z, this.minZoom, this.maxZoom);\n  };\n  /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */\n\n\n  TileGrid.prototype.calculateTileRanges_ = function (extent) {\n    var length = this.resolutions_.length;\n    var fullTileRanges = new Array(length);\n\n    for (var z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n\n    this.fullTileRanges_ = fullTileRanges;\n  };\n\n  return TileGrid;\n}();\n\nexport default TileGrid;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/ol/src/tilegrid/TileGrid.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, {\n  createOrUpdate as createOrUpdateTileRange,\n} from '../TileRange.js';\nimport {DEFAULT_TILE_SIZE} from './common.js';\nimport {assert} from '../asserts.js';\nimport {ceil, clamp, floor} from '../math.js';\nimport {createOrUpdate, getTopLeft} from '../extent.js';\nimport {createOrUpdate as createOrUpdateTileCoord} from '../tilecoord.js';\nimport {isSorted, linearFindNearest} from '../array.js';\nimport {toSize} from '../size.js';\n\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\nconst tmpTileCoord = [0, 0, 0];\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nconst DECIMALS = 5;\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nclass TileGrid {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  constructor(options) {\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n    this.resolutions_ = options.resolutions;\n    assert(\n      isSorted(\n        this.resolutions_,\n        function (a, b) {\n          return b - a;\n        },\n        true\n      ),\n      17\n    ); // `resolutions` must be sorted in descending order\n\n    // check if we've got a consistent zoom factor and origin\n    let zoomFactor;\n    if (!options.origins) {\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zoomFactor_ = zoomFactor;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxZoom = this.resolutions_.length - 1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n    this.origins_ = null;\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\n    }\n\n    const extent = options.extent;\n\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n\n    assert(\n      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),\n      18\n    ); // Either `origin` or `origins` must be configured, never both\n\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n    this.tileSizes_ = null;\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\n    }\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.tileSize_ =\n      options.tileSize !== undefined\n        ? options.tileSize\n        : !this.tileSizes_\n        ? DEFAULT_TILE_SIZE\n        : null;\n    assert(\n      (!this.tileSize_ && this.tileSizes_) ||\n        (this.tileSize_ && !this.tileSizes_),\n      22\n    ); // Either `tileSize` or `tileSizes` must be configured, never both\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent !== undefined ? extent : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n    this.fullTileRanges_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = [0, 0, 0, 0];\n\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map(function (size, z) {\n        const tileRange = new TileRange(\n          Math.min(0, size[0]),\n          Math.max(size[0] - 1, -1),\n          Math.min(0, size[1]),\n          Math.max(size[1] - 1, -1)\n        );\n        if (extent) {\n          const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n        return tileRange;\n      }, this);\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n  forEachTileCoord(extent, zoom, callback) {\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */\n  forEachTileCoordParentTileRange(\n    tileCoord,\n    callback,\n    opt_tileRange,\n    opt_extent\n  ) {\n    let tileRange, x, y;\n    let tileCoordExtent = null;\n    let z = tileCoord[0] - 1;\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n    }\n    while (z >= this.minZoom) {\n      if (this.zoomFactor_ === 2) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, opt_tileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(\n          tileCoordExtent,\n          z,\n          opt_tileRange\n        );\n      }\n      if (callback(z, tileRange)) {\n        return true;\n      }\n      --z;\n    }\n    return false;\n  }\n\n  /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */\n  getMaxZoom() {\n    return this.maxZoom;\n  }\n\n  /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */\n  getMinZoom() {\n    return this.minZoom;\n  }\n\n  /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */\n  getOrigin(z) {\n    if (this.origin_) {\n      return this.origin_;\n    } else {\n      return this.origins_[z];\n    }\n  }\n\n  /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */\n  getResolution(z) {\n    return this.resolutions_[z];\n  }\n\n  /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  getTileCoordChildTileRange(tileCoord, opt_tileRange, opt_extent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        const minX = tileCoord[1] * 2;\n        const minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(\n          minX,\n          minX + 1,\n          minY,\n          minY + 1,\n          opt_tileRange\n        );\n      }\n      const tileCoordExtent = this.getTileCoordExtent(\n        tileCoord,\n        opt_extent || this.tmpExtent_\n      );\n      return this.getTileRangeForExtentAndZ(\n        tileCoordExtent,\n        tileCoord[0] + 1,\n        opt_tileRange\n      );\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  getTileRangeForTileCoordAndZ(tileCoord, z, opt_tileRange) {\n    if (z > this.maxZoom || z < this.minZoom) {\n      return null;\n    }\n\n    const tileCoordZ = tileCoord[0];\n    const tileCoordX = tileCoord[1];\n    const tileCoordY = tileCoord[2];\n\n    if (z === tileCoordZ) {\n      return createOrUpdateTileRange(\n        tileCoordX,\n        tileCoordY,\n        tileCoordX,\n        tileCoordY,\n        opt_tileRange\n      );\n    }\n\n    if (this.zoomFactor_) {\n      const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n      const minX = Math.floor(tileCoordX * factor);\n      const minY = Math.floor(tileCoordY * factor);\n      if (z < tileCoordZ) {\n        return createOrUpdateTileRange(minX, minX, minY, minY, opt_tileRange);\n      }\n\n      const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n      const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, opt_tileRange);\n    }\n\n    const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n  }\n\n  /**\n   * Get the extent for a tile range.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  getTileRangeExtent(z, tileRange, opt_extent) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    const minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n    const maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n    const minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n    const maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  }\n\n  /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  getTileRangeForExtentAndZ(extent, z, opt_tileRange) {\n    const tileCoord = tmpTileCoord;\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);\n    const minX = tileCoord[1];\n    const minY = tileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);\n    return createOrUpdateTileRange(\n      minX,\n      tileCoord[1],\n      minY,\n      tileCoord[2],\n      opt_tileRange\n    );\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */\n  getTileCoordCenter(tileCoord) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [\n      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n      origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,\n    ];\n  }\n\n  /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getTileCoordExtent(tileCoord, opt_extent) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    const maxX = minX + tileSize[0] * resolution;\n    const maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  }\n\n  /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(\n      coordinate[0],\n      coordinate[1],\n      resolution,\n      false,\n      opt_tileCoord\n    );\n  }\n\n  /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndResolution_(\n    x,\n    y,\n    resolution,\n    reverseIntersectionPolicy,\n    opt_tileCoord\n  ) {\n    const z = this.getZForResolution(resolution);\n    const scale = resolution / this.getResolution(z);\n    const origin = this.getOrigin(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    let tileCoordX = (scale * (x - origin[0])) / resolution / tileSize[0];\n    let tileCoordY = (scale * (origin[1] - y)) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n    let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Zoom level.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(\n      coordinate[0],\n      coordinate[1],\n      z,\n      false,\n      opt_tileCoord\n    );\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */\n  getTileCoordResolution(tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  }\n\n  /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an `import(\"../size.js\").Size`, run the result through `import(\"../size.js\").Size.toSize()`.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */\n  getTileSize(z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    } else {\n      return this.tileSizes_[z];\n    }\n  }\n\n  /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n   */\n  getFullTileRange(z) {\n    if (!this.fullTileRanges_) {\n      return this.extent_\n        ? this.getTileRangeForExtentAndZ(this.extent_, z)\n        : null;\n    } else {\n      return this.fullTileRanges_[z];\n    }\n  }\n\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n   *     If 0, the nearest resolution will be used.\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n   *\n   * For example to change tile Z at the midpoint of zoom levels\n   * ```js\n   * function(value, high, low) {\n   *   return value - low * Math.sqrt(high / low);\n   * }\n   * ```\n   * @return {number} Z.\n   * @api\n   */\n  getZForResolution(resolution, opt_direction) {\n    const z = linearFindNearest(\n      this.resolutions_,\n      resolution,\n      opt_direction || 0\n    );\n    return clamp(z, this.minZoom, this.maxZoom);\n  }\n\n  /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */\n  calculateTileRanges_(extent) {\n    const length = this.resolutions_.length;\n    const fullTileRanges = new Array(length);\n    for (let z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n    this.fullTileRanges_ = fullTileRanges;\n  }\n}\n\nexport default TileGrid;\n"]},"metadata":{},"sourceType":"module"}