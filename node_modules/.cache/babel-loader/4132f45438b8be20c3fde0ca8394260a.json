{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Constants } from \"./constants/constants\";\nimport { missing } from \"./utils/generic\";\nimport { last } from \"./utils/array\";\nimport { KeyCode } from './constants/keyCode';\n\nvar CellNavigationService =\n/** @class */\nfunction (_super) {\n  __extends(CellNavigationService, _super);\n\n  function CellNavigationService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  } // returns null if no cell to focus on, ie at the end of the grid\n\n\n  CellNavigationService.prototype.getNextCellToFocus = function (key, lastCellToFocus) {\n    // starting with the provided cell, we keep moving until we find a cell we can\n    // focus on.\n    var pointer = lastCellToFocus;\n    var finished = false; // finished will be true when either:\n    // a) cell found that we can focus on\n    // b) run out of cells (ie the method returns null)\n\n    while (!finished) {\n      switch (key) {\n        case KeyCode.UP:\n          pointer = this.getCellAbove(pointer);\n          break;\n\n        case KeyCode.DOWN:\n          pointer = this.getCellBelow(pointer);\n          break;\n\n        case KeyCode.RIGHT:\n          if (this.gridOptionsWrapper.isEnableRtl()) {\n            pointer = this.getCellToLeft(pointer);\n          } else {\n            pointer = this.getCellToRight(pointer);\n          }\n\n          break;\n\n        case KeyCode.LEFT:\n          if (this.gridOptionsWrapper.isEnableRtl()) {\n            pointer = this.getCellToRight(pointer);\n          } else {\n            pointer = this.getCellToLeft(pointer);\n          }\n\n          break;\n\n        default:\n          pointer = null;\n          console.warn('AG Grid: unknown key for navigation ' + key);\n          break;\n      }\n\n      if (pointer) {\n        finished = this.isCellGoodToFocusOn(pointer);\n      } else {\n        finished = true;\n      }\n    }\n\n    return pointer;\n  };\n\n  CellNavigationService.prototype.isCellGoodToFocusOn = function (gridCell) {\n    var column = gridCell.column;\n    var rowNode;\n\n    switch (gridCell.rowPinned) {\n      case Constants.PINNED_TOP:\n        rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);\n        break;\n\n      case Constants.PINNED_BOTTOM:\n        rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);\n        break;\n\n      default:\n        rowNode = this.rowModel.getRow(gridCell.rowIndex);\n        break;\n    }\n\n    if (!rowNode) {\n      return false;\n    }\n\n    var suppressNavigable = column.isSuppressNavigable(rowNode);\n    return !suppressNavigable;\n  };\n\n  CellNavigationService.prototype.getCellToLeft = function (lastCell) {\n    if (!lastCell) {\n      return null;\n    }\n\n    var colToLeft = this.columnModel.getDisplayedColBefore(lastCell.column);\n\n    if (!colToLeft) {\n      return null;\n    }\n\n    return {\n      rowIndex: lastCell.rowIndex,\n      column: colToLeft,\n      rowPinned: lastCell.rowPinned\n    };\n  };\n\n  CellNavigationService.prototype.getCellToRight = function (lastCell) {\n    if (!lastCell) {\n      return null;\n    }\n\n    var colToRight = this.columnModel.getDisplayedColAfter(lastCell.column); // if already on right, do nothing\n\n    if (!colToRight) {\n      return null;\n    }\n\n    return {\n      rowIndex: lastCell.rowIndex,\n      column: colToRight,\n      rowPinned: lastCell.rowPinned\n    };\n  };\n\n  CellNavigationService.prototype.getRowBelow = function (rowPosition) {\n    // if already on top row, do nothing\n    var index = rowPosition.rowIndex;\n    var pinned = rowPosition.rowPinned;\n\n    if (this.isLastRowInContainer(rowPosition)) {\n      switch (pinned) {\n        case Constants.PINNED_BOTTOM:\n          // never any rows after pinned bottom\n          return null;\n\n        case Constants.PINNED_TOP:\n          // if on last row of pinned top, then next row is main body (if rows exist),\n          // otherwise it's the pinned bottom\n          if (this.rowModel.isRowsToRender()) {\n            return {\n              rowIndex: this.paginationProxy.getPageFirstRow(),\n              rowPinned: null\n            };\n          }\n\n          if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {\n            return {\n              rowIndex: 0,\n              rowPinned: Constants.PINNED_BOTTOM\n            };\n          }\n\n          return null;\n\n        default:\n          // if in the main body, then try pinned bottom, otherwise return nothing\n          if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {\n            return {\n              rowIndex: 0,\n              rowPinned: Constants.PINNED_BOTTOM\n            };\n          }\n\n          return null;\n      }\n    }\n\n    return {\n      rowIndex: index + 1,\n      rowPinned: pinned\n    };\n  };\n\n  CellNavigationService.prototype.getCellBelow = function (lastCell) {\n    if (!lastCell) {\n      return null;\n    }\n\n    var rowBelow = this.getRowBelow(lastCell);\n\n    if (rowBelow) {\n      return {\n        rowIndex: rowBelow.rowIndex,\n        column: lastCell.column,\n        rowPinned: rowBelow.rowPinned\n      };\n    }\n\n    return null;\n  };\n\n  CellNavigationService.prototype.isLastRowInContainer = function (rowPosition) {\n    var pinned = rowPosition.rowPinned;\n    var index = rowPosition.rowIndex;\n\n    if (pinned === Constants.PINNED_TOP) {\n      var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n      return lastTopIndex <= index;\n    }\n\n    if (pinned === Constants.PINNED_BOTTOM) {\n      var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;\n      return lastBottomIndex <= index;\n    }\n\n    var lastBodyIndex = this.paginationProxy.getPageLastRow();\n    return lastBodyIndex <= index;\n  };\n\n  CellNavigationService.prototype.getRowAbove = function (rowPosition) {\n    // if already on top row, do nothing\n    var index = rowPosition.rowIndex;\n    var pinned = rowPosition.rowPinned;\n    var isFirstRow = pinned ? index === 0 : index === this.paginationProxy.getPageFirstRow(); // if already on top row, do nothing\n\n    if (isFirstRow) {\n      if (pinned === Constants.PINNED_TOP) {\n        return null;\n      }\n\n      if (!pinned) {\n        if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {\n          return this.getLastFloatingTopRow();\n        }\n\n        return null;\n      } // last floating bottom\n\n\n      if (this.rowModel.isRowsToRender()) {\n        return this.getLastBodyCell();\n      }\n\n      if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {\n        return this.getLastFloatingTopRow();\n      }\n\n      return null;\n    }\n\n    return {\n      rowIndex: index - 1,\n      rowPinned: pinned\n    };\n  };\n\n  CellNavigationService.prototype.getCellAbove = function (lastCell) {\n    if (!lastCell) {\n      return null;\n    }\n\n    var rowAbove = this.getRowAbove({\n      rowIndex: lastCell.rowIndex,\n      rowPinned: lastCell.rowPinned\n    });\n\n    if (rowAbove) {\n      return {\n        rowIndex: rowAbove.rowIndex,\n        column: lastCell.column,\n        rowPinned: rowAbove.rowPinned\n      };\n    }\n\n    return null;\n  };\n\n  CellNavigationService.prototype.getLastBodyCell = function () {\n    var lastBodyRow = this.paginationProxy.getPageLastRow();\n    return {\n      rowIndex: lastBodyRow,\n      rowPinned: null\n    };\n  };\n\n  CellNavigationService.prototype.getLastFloatingTopRow = function () {\n    var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n    return {\n      rowIndex: lastFloatingRow,\n      rowPinned: Constants.PINNED_TOP\n    };\n  };\n\n  CellNavigationService.prototype.getNextTabbedCell = function (gridCell, backwards) {\n    if (backwards) {\n      return this.getNextTabbedCellBackwards(gridCell);\n    }\n\n    return this.getNextTabbedCellForwards(gridCell);\n  };\n\n  CellNavigationService.prototype.getNextTabbedCellForwards = function (gridCell) {\n    var displayedColumns = this.columnModel.getAllDisplayedColumns();\n    var newRowIndex = gridCell.rowIndex;\n    var newFloating = gridCell.rowPinned; // move along to the next cell\n\n    var newColumn = this.columnModel.getDisplayedColAfter(gridCell.column); // check if end of the row, and if so, go forward a row\n\n    if (!newColumn) {\n      newColumn = displayedColumns[0];\n      var rowBelow = this.getRowBelow(gridCell);\n\n      if (missing(rowBelow)) {\n        return null;\n      } // If we are tabbing and there is a paging panel present, tabbing should go\n      // to the paging panel instead of loading the next page.\n\n\n      if (!rowBelow.rowPinned && !this.paginationProxy.isRowInPage(rowBelow)) {\n        return null;\n      }\n\n      newRowIndex = rowBelow ? rowBelow.rowIndex : null;\n      newFloating = rowBelow ? rowBelow.rowPinned : null;\n    }\n\n    return {\n      rowIndex: newRowIndex,\n      column: newColumn,\n      rowPinned: newFloating\n    };\n  };\n\n  CellNavigationService.prototype.getNextTabbedCellBackwards = function (gridCell) {\n    var displayedColumns = this.columnModel.getAllDisplayedColumns();\n    var newRowIndex = gridCell.rowIndex;\n    var newFloating = gridCell.rowPinned; // move along to the next cell\n\n    var newColumn = this.columnModel.getDisplayedColBefore(gridCell.column); // check if end of the row, and if so, go forward a row\n\n    if (!newColumn) {\n      newColumn = last(displayedColumns);\n      var rowAbove = this.getRowAbove({\n        rowIndex: gridCell.rowIndex,\n        rowPinned: gridCell.rowPinned\n      });\n\n      if (missing(rowAbove)) {\n        return null;\n      } // If we are tabbing and there is a paging panel present, tabbing should go\n      // to the paging panel instead of loading the next page.\n\n\n      if (!rowAbove.rowPinned && !this.paginationProxy.isRowInPage(rowAbove)) {\n        return null;\n      }\n\n      newRowIndex = rowAbove ? rowAbove.rowIndex : null;\n      newFloating = rowAbove ? rowAbove.rowPinned : null;\n    }\n\n    return {\n      rowIndex: newRowIndex,\n      column: newColumn,\n      rowPinned: newFloating\n    };\n  };\n\n  __decorate([Autowired('columnModel')], CellNavigationService.prototype, \"columnModel\", void 0);\n\n  __decorate([Autowired('rowModel')], CellNavigationService.prototype, \"rowModel\", void 0);\n\n  __decorate([Autowired('pinnedRowModel')], CellNavigationService.prototype, \"pinnedRowModel\", void 0);\n\n  __decorate([Autowired('paginationProxy')], CellNavigationService.prototype, \"paginationProxy\", void 0);\n\n  CellNavigationService = __decorate([Bean('cellNavigationService')], CellNavigationService);\n  return CellNavigationService;\n}(BeanStub);\n\nexport { CellNavigationService };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/cellNavigationService.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Autowired","Bean","BeanStub","Constants","missing","last","KeyCode","CellNavigationService","_super","apply","getNextCellToFocus","lastCellToFocus","pointer","finished","UP","getCellAbove","DOWN","getCellBelow","RIGHT","gridOptionsWrapper","isEnableRtl","getCellToLeft","getCellToRight","LEFT","console","warn","isCellGoodToFocusOn","gridCell","column","rowNode","rowPinned","PINNED_TOP","pinnedRowModel","getPinnedTopRow","rowIndex","PINNED_BOTTOM","getPinnedBottomRow","rowModel","getRow","suppressNavigable","isSuppressNavigable","lastCell","colToLeft","columnModel","getDisplayedColBefore","colToRight","getDisplayedColAfter","getRowBelow","rowPosition","index","pinned","isLastRowInContainer","isRowsToRender","paginationProxy","getPageFirstRow","rowBelow","lastTopIndex","getPinnedTopRowData","lastBottomIndex","getPinnedBottomRowData","lastBodyIndex","getPageLastRow","getRowAbove","isFirstRow","getLastFloatingTopRow","getLastBodyCell","rowAbove","lastBodyRow","lastFloatingRow","getNextTabbedCell","backwards","getNextTabbedCellBackwards","getNextTabbedCellForwards","displayedColumns","getAllDisplayedColumns","newRowIndex","newFloating","newColumn","isRowInPage"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Constants } from \"./constants/constants\";\nimport { missing } from \"./utils/generic\";\nimport { last } from \"./utils/array\";\nimport { KeyCode } from './constants/keyCode';\nvar CellNavigationService = /** @class */ (function (_super) {\n    __extends(CellNavigationService, _super);\n    function CellNavigationService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // returns null if no cell to focus on, ie at the end of the grid\n    CellNavigationService.prototype.getNextCellToFocus = function (key, lastCellToFocus) {\n        // starting with the provided cell, we keep moving until we find a cell we can\n        // focus on.\n        var pointer = lastCellToFocus;\n        var finished = false;\n        // finished will be true when either:\n        // a) cell found that we can focus on\n        // b) run out of cells (ie the method returns null)\n        while (!finished) {\n            switch (key) {\n                case KeyCode.UP:\n                    pointer = this.getCellAbove(pointer);\n                    break;\n                case KeyCode.DOWN:\n                    pointer = this.getCellBelow(pointer);\n                    break;\n                case KeyCode.RIGHT:\n                    if (this.gridOptionsWrapper.isEnableRtl()) {\n                        pointer = this.getCellToLeft(pointer);\n                    }\n                    else {\n                        pointer = this.getCellToRight(pointer);\n                    }\n                    break;\n                case KeyCode.LEFT:\n                    if (this.gridOptionsWrapper.isEnableRtl()) {\n                        pointer = this.getCellToRight(pointer);\n                    }\n                    else {\n                        pointer = this.getCellToLeft(pointer);\n                    }\n                    break;\n                default:\n                    pointer = null;\n                    console.warn('AG Grid: unknown key for navigation ' + key);\n                    break;\n            }\n            if (pointer) {\n                finished = this.isCellGoodToFocusOn(pointer);\n            }\n            else {\n                finished = true;\n            }\n        }\n        return pointer;\n    };\n    CellNavigationService.prototype.isCellGoodToFocusOn = function (gridCell) {\n        var column = gridCell.column;\n        var rowNode;\n        switch (gridCell.rowPinned) {\n            case Constants.PINNED_TOP:\n                rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);\n                break;\n            case Constants.PINNED_BOTTOM:\n                rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);\n                break;\n            default:\n                rowNode = this.rowModel.getRow(gridCell.rowIndex);\n                break;\n        }\n        if (!rowNode) {\n            return false;\n        }\n        var suppressNavigable = column.isSuppressNavigable(rowNode);\n        return !suppressNavigable;\n    };\n    CellNavigationService.prototype.getCellToLeft = function (lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        var colToLeft = this.columnModel.getDisplayedColBefore(lastCell.column);\n        if (!colToLeft) {\n            return null;\n        }\n        return {\n            rowIndex: lastCell.rowIndex,\n            column: colToLeft,\n            rowPinned: lastCell.rowPinned\n        };\n    };\n    CellNavigationService.prototype.getCellToRight = function (lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        var colToRight = this.columnModel.getDisplayedColAfter(lastCell.column);\n        // if already on right, do nothing\n        if (!colToRight) {\n            return null;\n        }\n        return {\n            rowIndex: lastCell.rowIndex,\n            column: colToRight,\n            rowPinned: lastCell.rowPinned\n        };\n    };\n    CellNavigationService.prototype.getRowBelow = function (rowPosition) {\n        // if already on top row, do nothing\n        var index = rowPosition.rowIndex;\n        var pinned = rowPosition.rowPinned;\n        if (this.isLastRowInContainer(rowPosition)) {\n            switch (pinned) {\n                case Constants.PINNED_BOTTOM:\n                    // never any rows after pinned bottom\n                    return null;\n                case Constants.PINNED_TOP:\n                    // if on last row of pinned top, then next row is main body (if rows exist),\n                    // otherwise it's the pinned bottom\n                    if (this.rowModel.isRowsToRender()) {\n                        return { rowIndex: this.paginationProxy.getPageFirstRow(), rowPinned: null };\n                    }\n                    if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {\n                        return { rowIndex: 0, rowPinned: Constants.PINNED_BOTTOM };\n                    }\n                    return null;\n                default:\n                    // if in the main body, then try pinned bottom, otherwise return nothing\n                    if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {\n                        return { rowIndex: 0, rowPinned: Constants.PINNED_BOTTOM };\n                    }\n                    return null;\n            }\n        }\n        return { rowIndex: index + 1, rowPinned: pinned };\n    };\n    CellNavigationService.prototype.getCellBelow = function (lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        var rowBelow = this.getRowBelow(lastCell);\n        if (rowBelow) {\n            return {\n                rowIndex: rowBelow.rowIndex,\n                column: lastCell.column,\n                rowPinned: rowBelow.rowPinned\n            };\n        }\n        return null;\n    };\n    CellNavigationService.prototype.isLastRowInContainer = function (rowPosition) {\n        var pinned = rowPosition.rowPinned;\n        var index = rowPosition.rowIndex;\n        if (pinned === Constants.PINNED_TOP) {\n            var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n            return lastTopIndex <= index;\n        }\n        if (pinned === Constants.PINNED_BOTTOM) {\n            var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;\n            return lastBottomIndex <= index;\n        }\n        var lastBodyIndex = this.paginationProxy.getPageLastRow();\n        return lastBodyIndex <= index;\n    };\n    CellNavigationService.prototype.getRowAbove = function (rowPosition) {\n        // if already on top row, do nothing\n        var index = rowPosition.rowIndex;\n        var pinned = rowPosition.rowPinned;\n        var isFirstRow = pinned ? index === 0 : index === this.paginationProxy.getPageFirstRow();\n        // if already on top row, do nothing\n        if (isFirstRow) {\n            if (pinned === Constants.PINNED_TOP) {\n                return null;\n            }\n            if (!pinned) {\n                if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {\n                    return this.getLastFloatingTopRow();\n                }\n                return null;\n            }\n            // last floating bottom\n            if (this.rowModel.isRowsToRender()) {\n                return this.getLastBodyCell();\n            }\n            if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {\n                return this.getLastFloatingTopRow();\n            }\n            return null;\n        }\n        return { rowIndex: index - 1, rowPinned: pinned };\n    };\n    CellNavigationService.prototype.getCellAbove = function (lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        var rowAbove = this.getRowAbove({ rowIndex: lastCell.rowIndex, rowPinned: lastCell.rowPinned });\n        if (rowAbove) {\n            return {\n                rowIndex: rowAbove.rowIndex,\n                column: lastCell.column,\n                rowPinned: rowAbove.rowPinned\n            };\n        }\n        return null;\n    };\n    CellNavigationService.prototype.getLastBodyCell = function () {\n        var lastBodyRow = this.paginationProxy.getPageLastRow();\n        return { rowIndex: lastBodyRow, rowPinned: null };\n    };\n    CellNavigationService.prototype.getLastFloatingTopRow = function () {\n        var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n        return { rowIndex: lastFloatingRow, rowPinned: Constants.PINNED_TOP };\n    };\n    CellNavigationService.prototype.getNextTabbedCell = function (gridCell, backwards) {\n        if (backwards) {\n            return this.getNextTabbedCellBackwards(gridCell);\n        }\n        return this.getNextTabbedCellForwards(gridCell);\n    };\n    CellNavigationService.prototype.getNextTabbedCellForwards = function (gridCell) {\n        var displayedColumns = this.columnModel.getAllDisplayedColumns();\n        var newRowIndex = gridCell.rowIndex;\n        var newFloating = gridCell.rowPinned;\n        // move along to the next cell\n        var newColumn = this.columnModel.getDisplayedColAfter(gridCell.column);\n        // check if end of the row, and if so, go forward a row\n        if (!newColumn) {\n            newColumn = displayedColumns[0];\n            var rowBelow = this.getRowBelow(gridCell);\n            if (missing(rowBelow)) {\n                return null;\n            }\n            // If we are tabbing and there is a paging panel present, tabbing should go\n            // to the paging panel instead of loading the next page.\n            if (!rowBelow.rowPinned && !this.paginationProxy.isRowInPage(rowBelow)) {\n                return null;\n            }\n            newRowIndex = rowBelow ? rowBelow.rowIndex : null;\n            newFloating = rowBelow ? rowBelow.rowPinned : null;\n        }\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };\n    };\n    CellNavigationService.prototype.getNextTabbedCellBackwards = function (gridCell) {\n        var displayedColumns = this.columnModel.getAllDisplayedColumns();\n        var newRowIndex = gridCell.rowIndex;\n        var newFloating = gridCell.rowPinned;\n        // move along to the next cell\n        var newColumn = this.columnModel.getDisplayedColBefore(gridCell.column);\n        // check if end of the row, and if so, go forward a row\n        if (!newColumn) {\n            newColumn = last(displayedColumns);\n            var rowAbove = this.getRowAbove({ rowIndex: gridCell.rowIndex, rowPinned: gridCell.rowPinned });\n            if (missing(rowAbove)) {\n                return null;\n            }\n            // If we are tabbing and there is a paging panel present, tabbing should go\n            // to the paging panel instead of loading the next page.\n            if (!rowAbove.rowPinned && !this.paginationProxy.isRowInPage(rowAbove)) {\n                return null;\n            }\n            newRowIndex = rowAbove ? rowAbove.rowIndex : null;\n            newFloating = rowAbove ? rowAbove.rowPinned : null;\n        }\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };\n    };\n    __decorate([\n        Autowired('columnModel')\n    ], CellNavigationService.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('rowModel')\n    ], CellNavigationService.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('pinnedRowModel')\n    ], CellNavigationService.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        Autowired('paginationProxy')\n    ], CellNavigationService.prototype, \"paginationProxy\", void 0);\n    CellNavigationService = __decorate([\n        Bean('cellNavigationService')\n    ], CellNavigationService);\n    return CellNavigationService;\n}(BeanStub));\nexport { CellNavigationService };\n"]},"metadata":{},"sourceType":"module"}