{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { KeyCode } from '../../../constants/keyCode';\nimport { Autowired } from \"../../../context/context\";\nimport { DragAndDropService, DragSourceType } from \"../../../dragAndDrop/dragAndDropService\";\nimport { Column } from \"../../../entities/column\";\nimport { ProvidedColumnGroup } from \"../../../entities/providedColumnGroup\";\nimport { SetLeftFeature } from \"../../../rendering/features/setLeftFeature\";\nimport { removeFromArray } from \"../../../utils/array\";\nimport { ManagedFocusFeature } from \"../../../widgets/managedFocusFeature\";\nimport { TooltipFeature } from \"../../../widgets/tooltipFeature\";\nimport { AbstractHeaderCellCtrl } from \"../abstractCell/abstractHeaderCellCtrl\";\nimport { CssClassApplier } from \"../cssClassApplier\";\nimport { HoverFeature } from \"../hoverFeature\";\nimport { GroupResizeFeature } from \"./groupResizeFeature\";\nimport { GroupWidthFeature } from \"./groupWidthFeature\";\n\nvar HeaderGroupCellCtrl =\n/** @class */\nfunction (_super) {\n  __extends(HeaderGroupCellCtrl, _super);\n\n  function HeaderGroupCellCtrl(columnGroup, parentRowCtrl) {\n    var _this = _super.call(this, columnGroup, parentRowCtrl) || this;\n\n    _this.columnGroup = columnGroup;\n    return _this;\n  }\n\n  HeaderGroupCellCtrl.prototype.setComp = function (comp, eGui, eResize) {\n    _super.prototype.setGui.call(this, eGui);\n\n    this.comp = comp;\n    this.displayName = this.columnModel.getDisplayNameForColumnGroup(this.columnGroup, 'header');\n    this.addClasses();\n    this.addAttributes();\n    this.setupMovingCss();\n    this.setupExpandable();\n    this.setupTooltip();\n    this.setupUserComp();\n    var pinned = this.getParentRowCtrl().getPinned();\n    var leafCols = this.columnGroup.getOriginalColumnGroup().getLeafColumns();\n    this.createManagedBean(new HoverFeature(leafCols, eGui));\n    this.createManagedBean(new SetLeftFeature(this.columnGroup, eGui, this.beans));\n    this.createManagedBean(new GroupResizeFeature(comp, eResize, pinned, this.columnGroup));\n    this.createManagedBean(new GroupWidthFeature(comp, this.columnGroup));\n    this.createManagedBean(new ManagedFocusFeature(eGui, {\n      shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),\n      onTabKeyDown: function () {\n        return undefined;\n      },\n      handleKeyDown: this.handleKeyDown.bind(this),\n      onFocusIn: this.onFocusIn.bind(this)\n    }));\n  };\n\n  HeaderGroupCellCtrl.prototype.setupUserComp = function () {\n    var _this = this;\n\n    var displayName = this.displayName;\n    var params = {\n      displayName: this.displayName,\n      columnGroup: this.columnGroup,\n      setExpanded: function (expanded) {\n        _this.columnModel.setColumnGroupOpened(_this.columnGroup.getOriginalColumnGroup(), expanded, \"gridInitializing\");\n      },\n      api: this.gridApi,\n      columnApi: this.columnApi,\n      context: this.gridOptionsWrapper.getContext()\n    };\n\n    if (!displayName) {\n      var columnGroup = this.columnGroup;\n      var leafCols = columnGroup.getLeafColumns(); // find the top most column group that represents the same columns. so if we are dragging a group, we also\n      // want to visually show the parent groups dragging for the same column set. for example imaging 5 levels\n      // of grouping, with each group only containing the next group, and the last group containing three columns,\n      // then when you move any group (even the lowest level group) you are in-fact moving all the groups, as all\n      // the groups represent the same column set.\n\n      while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {\n        columnGroup = columnGroup.getParent();\n      }\n\n      var colGroupDef = columnGroup.getColGroupDef();\n\n      if (colGroupDef) {\n        displayName = colGroupDef.headerName;\n      }\n\n      if (!displayName) {\n        displayName = leafCols ? this.columnModel.getDisplayNameForColumn(leafCols[0], 'header', true) : '';\n      }\n    }\n\n    var compDetails = this.userComponentFactory.getHeaderGroupCompDetails(params);\n    this.comp.setUserCompDetails(compDetails);\n  };\n\n  HeaderGroupCellCtrl.prototype.setupTooltip = function () {\n    var _this = this;\n\n    var colGroupDef = this.columnGroup.getColGroupDef();\n    var tooltipCtrl = {\n      getColumn: function () {\n        return _this.columnGroup;\n      },\n      getGui: function () {\n        return _this.eGui;\n      },\n      getLocation: function () {\n        return 'headerGroup';\n      },\n      getTooltipValue: function () {\n        return colGroupDef && colGroupDef.headerTooltip;\n      }\n    };\n\n    if (colGroupDef) {\n      tooltipCtrl.getColDef = function () {\n        return colGroupDef;\n      };\n    }\n\n    var tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));\n    tooltipFeature.setComp(this.comp);\n  };\n\n  HeaderGroupCellCtrl.prototype.setupExpandable = function () {\n    var providedColGroup = this.columnGroup.getOriginalColumnGroup();\n    this.refreshExpanded();\n    this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.refreshExpanded.bind(this));\n    this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.refreshExpanded.bind(this));\n  };\n\n  HeaderGroupCellCtrl.prototype.refreshExpanded = function () {\n    var column = this.columnGroup;\n    this.expandable = column.isExpandable();\n    var expanded = column.isExpanded();\n\n    if (this.expandable) {\n      this.comp.setAriaExpanded(expanded ? 'true' : 'false');\n    } else {\n      this.comp.setAriaExpanded(undefined);\n    }\n  };\n\n  HeaderGroupCellCtrl.prototype.addAttributes = function () {\n    this.comp.setColId(this.columnGroup.getUniqueId());\n  };\n\n  HeaderGroupCellCtrl.prototype.addClasses = function () {\n    var _this = this;\n\n    var colGroupDef = this.columnGroup.getColGroupDef();\n    var classes = CssClassApplier.getHeaderClassesFromColDef(colGroupDef, this.gridOptionsWrapper, null, this.columnGroup); // having different classes below allows the style to not have a bottom border\n    // on the group header, if no group is specified\n\n    classes.push(this.columnGroup.isPadding() ? \"ag-header-group-cell-no-group\" : \"ag-header-group-cell-with-group\");\n    classes.forEach(function (c) {\n      return _this.comp.addOrRemoveCssClass(c, true);\n    });\n  };\n\n  HeaderGroupCellCtrl.prototype.setupMovingCss = function () {\n    var _this = this;\n\n    var providedColumnGroup = this.columnGroup.getOriginalColumnGroup();\n    var leafColumns = providedColumnGroup.getLeafColumns(); // this function adds or removes the moving css, based on if the col is moving.\n    // this is what makes the header go dark when it is been moved (gives impression to\n    // user that the column was picked up).\n\n    var listener = function () {\n      return _this.comp.addOrRemoveCssClass('ag-header-cell-moving', _this.columnGroup.isMoving());\n    };\n\n    leafColumns.forEach(function (col) {\n      _this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, listener);\n    });\n    listener();\n  };\n\n  HeaderGroupCellCtrl.prototype.onFocusIn = function (e) {\n    if (!this.eGui.contains(e.relatedTarget)) {\n      var rowIndex = this.getRowIndex();\n      this.beans.focusService.setFocusedHeader(rowIndex, this.columnGroup);\n    }\n  };\n\n  HeaderGroupCellCtrl.prototype.handleKeyDown = function (e) {\n    var activeEl = document.activeElement;\n    var wrapperHasFocus = activeEl === this.eGui;\n\n    if (!this.expandable || !wrapperHasFocus) {\n      return;\n    }\n\n    if (e.keyCode === KeyCode.ENTER) {\n      var column = this.columnGroup;\n      var newExpandedValue = !column.isExpanded();\n      this.columnModel.setColumnGroupOpened(column.getOriginalColumnGroup(), newExpandedValue, \"uiColumnExpanded\");\n    }\n  }; // unlike columns, this will only get called once, as we don't react on props on column groups\n  // (we will always destroy and recreate this comp if something changes)\n\n\n  HeaderGroupCellCtrl.prototype.setDragSource = function (eHeaderGroup) {\n    var _this = this;\n\n    if (this.isSuppressMoving()) {\n      return;\n    }\n\n    var allLeafColumns = this.columnGroup.getOriginalColumnGroup().getLeafColumns();\n    var dragSource = {\n      type: DragSourceType.HeaderCell,\n      eElement: eHeaderGroup,\n      defaultIconName: DragAndDropService.ICON_HIDE,\n      dragItemName: this.displayName,\n      // we add in the original group leaf columns, so we move both visible and non-visible items\n      getDragItem: this.getDragItemForGroup.bind(this),\n      onDragStarted: function () {\n        return allLeafColumns.forEach(function (col) {\n          return col.setMoving(true, \"uiColumnDragged\");\n        });\n      },\n      onDragStopped: function () {\n        return allLeafColumns.forEach(function (col) {\n          return col.setMoving(false, \"uiColumnDragged\");\n        });\n      }\n    };\n    this.dragAndDropService.addDragSource(dragSource, true);\n    this.addDestroyFunc(function () {\n      return _this.dragAndDropService.removeDragSource(dragSource);\n    });\n  }; // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,\n  // and in the order they are currently in the screen.\n\n\n  HeaderGroupCellCtrl.prototype.getDragItemForGroup = function () {\n    var allColumnsOriginalOrder = this.columnGroup.getOriginalColumnGroup().getLeafColumns(); // capture visible state, used when re-entering grid to dictate which columns should be visible\n\n    var visibleState = {};\n    allColumnsOriginalOrder.forEach(function (column) {\n      return visibleState[column.getId()] = column.isVisible();\n    });\n    var allColumnsCurrentOrder = [];\n    this.columnModel.getAllDisplayedColumns().forEach(function (column) {\n      if (allColumnsOriginalOrder.indexOf(column) >= 0) {\n        allColumnsCurrentOrder.push(column);\n        removeFromArray(allColumnsOriginalOrder, column);\n      }\n    }); // we are left with non-visible columns, stick these in at the end\n\n    allColumnsOriginalOrder.forEach(function (column) {\n      return allColumnsCurrentOrder.push(column);\n    }); // create and return dragItem\n\n    return {\n      columns: allColumnsCurrentOrder,\n      visibleState: visibleState\n    };\n  };\n\n  HeaderGroupCellCtrl.prototype.isSuppressMoving = function () {\n    // if any child is fixed, then don't allow moving\n    var childSuppressesMoving = false;\n    this.columnGroup.getLeafColumns().forEach(function (column) {\n      if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {\n        childSuppressesMoving = true;\n      }\n    });\n    var result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();\n    return result;\n  };\n\n  __decorate([Autowired('beans')], HeaderGroupCellCtrl.prototype, \"beans\", void 0);\n\n  __decorate([Autowired('columnModel')], HeaderGroupCellCtrl.prototype, \"columnModel\", void 0);\n\n  __decorate([Autowired('dragAndDropService')], HeaderGroupCellCtrl.prototype, \"dragAndDropService\", void 0);\n\n  __decorate([Autowired('userComponentFactory')], HeaderGroupCellCtrl.prototype, \"userComponentFactory\", void 0);\n\n  __decorate([Autowired('gridApi')], HeaderGroupCellCtrl.prototype, \"gridApi\", void 0);\n\n  __decorate([Autowired('columnApi')], HeaderGroupCellCtrl.prototype, \"columnApi\", void 0);\n\n  return HeaderGroupCellCtrl;\n}(AbstractHeaderCellCtrl);\n\nexport { HeaderGroupCellCtrl };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/headerRendering/cells/columnGroup/headerGroupCellCtrl.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","KeyCode","Autowired","DragAndDropService","DragSourceType","Column","ProvidedColumnGroup","SetLeftFeature","removeFromArray","ManagedFocusFeature","TooltipFeature","AbstractHeaderCellCtrl","CssClassApplier","HoverFeature","GroupResizeFeature","GroupWidthFeature","HeaderGroupCellCtrl","_super","columnGroup","parentRowCtrl","_this","call","setComp","comp","eGui","eResize","setGui","displayName","columnModel","getDisplayNameForColumnGroup","addClasses","addAttributes","setupMovingCss","setupExpandable","setupTooltip","setupUserComp","pinned","getParentRowCtrl","getPinned","leafCols","getOriginalColumnGroup","getLeafColumns","createManagedBean","beans","shouldStopEventPropagation","bind","onTabKeyDown","undefined","handleKeyDown","onFocusIn","params","setExpanded","expanded","setColumnGroupOpened","api","gridApi","columnApi","context","gridOptionsWrapper","getContext","getParent","colGroupDef","getColGroupDef","headerName","getDisplayNameForColumn","compDetails","userComponentFactory","getHeaderGroupCompDetails","setUserCompDetails","tooltipCtrl","getColumn","getGui","getLocation","getTooltipValue","headerTooltip","getColDef","tooltipFeature","providedColGroup","refreshExpanded","addManagedListener","EVENT_EXPANDABLE_CHANGED","EVENT_EXPANDED_CHANGED","column","expandable","isExpandable","isExpanded","setAriaExpanded","setColId","getUniqueId","classes","getHeaderClassesFromColDef","push","isPadding","forEach","addOrRemoveCssClass","providedColumnGroup","leafColumns","listener","isMoving","col","EVENT_MOVING_CHANGED","e","contains","relatedTarget","rowIndex","getRowIndex","focusService","setFocusedHeader","activeEl","document","activeElement","wrapperHasFocus","keyCode","ENTER","newExpandedValue","setDragSource","eHeaderGroup","isSuppressMoving","allLeafColumns","dragSource","type","HeaderCell","eElement","defaultIconName","ICON_HIDE","dragItemName","getDragItem","getDragItemForGroup","onDragStarted","setMoving","onDragStopped","dragAndDropService","addDragSource","addDestroyFunc","removeDragSource","allColumnsOriginalOrder","visibleState","getId","isVisible","allColumnsCurrentOrder","getAllDisplayedColumns","indexOf","columns","childSuppressesMoving","suppressMovable","lockPosition","result","isSuppressMovableColumns"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { KeyCode } from '../../../constants/keyCode';\nimport { Autowired } from \"../../../context/context\";\nimport { DragAndDropService, DragSourceType } from \"../../../dragAndDrop/dragAndDropService\";\nimport { Column } from \"../../../entities/column\";\nimport { ProvidedColumnGroup } from \"../../../entities/providedColumnGroup\";\nimport { SetLeftFeature } from \"../../../rendering/features/setLeftFeature\";\nimport { removeFromArray } from \"../../../utils/array\";\nimport { ManagedFocusFeature } from \"../../../widgets/managedFocusFeature\";\nimport { TooltipFeature } from \"../../../widgets/tooltipFeature\";\nimport { AbstractHeaderCellCtrl } from \"../abstractCell/abstractHeaderCellCtrl\";\nimport { CssClassApplier } from \"../cssClassApplier\";\nimport { HoverFeature } from \"../hoverFeature\";\nimport { GroupResizeFeature } from \"./groupResizeFeature\";\nimport { GroupWidthFeature } from \"./groupWidthFeature\";\nvar HeaderGroupCellCtrl = /** @class */ (function (_super) {\n    __extends(HeaderGroupCellCtrl, _super);\n    function HeaderGroupCellCtrl(columnGroup, parentRowCtrl) {\n        var _this = _super.call(this, columnGroup, parentRowCtrl) || this;\n        _this.columnGroup = columnGroup;\n        return _this;\n    }\n    HeaderGroupCellCtrl.prototype.setComp = function (comp, eGui, eResize) {\n        _super.prototype.setGui.call(this, eGui);\n        this.comp = comp;\n        this.displayName = this.columnModel.getDisplayNameForColumnGroup(this.columnGroup, 'header');\n        this.addClasses();\n        this.addAttributes();\n        this.setupMovingCss();\n        this.setupExpandable();\n        this.setupTooltip();\n        this.setupUserComp();\n        var pinned = this.getParentRowCtrl().getPinned();\n        var leafCols = this.columnGroup.getOriginalColumnGroup().getLeafColumns();\n        this.createManagedBean(new HoverFeature(leafCols, eGui));\n        this.createManagedBean(new SetLeftFeature(this.columnGroup, eGui, this.beans));\n        this.createManagedBean(new GroupResizeFeature(comp, eResize, pinned, this.columnGroup));\n        this.createManagedBean(new GroupWidthFeature(comp, this.columnGroup));\n        this.createManagedBean(new ManagedFocusFeature(eGui, {\n            shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),\n            onTabKeyDown: function () { return undefined; },\n            handleKeyDown: this.handleKeyDown.bind(this),\n            onFocusIn: this.onFocusIn.bind(this)\n        }));\n    };\n    HeaderGroupCellCtrl.prototype.setupUserComp = function () {\n        var _this = this;\n        var displayName = this.displayName;\n        var params = {\n            displayName: this.displayName,\n            columnGroup: this.columnGroup,\n            setExpanded: function (expanded) {\n                _this.columnModel.setColumnGroupOpened(_this.columnGroup.getOriginalColumnGroup(), expanded, \"gridInitializing\");\n            },\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            context: this.gridOptionsWrapper.getContext()\n        };\n        if (!displayName) {\n            var columnGroup = this.columnGroup;\n            var leafCols = columnGroup.getLeafColumns();\n            // find the top most column group that represents the same columns. so if we are dragging a group, we also\n            // want to visually show the parent groups dragging for the same column set. for example imaging 5 levels\n            // of grouping, with each group only containing the next group, and the last group containing three columns,\n            // then when you move any group (even the lowest level group) you are in-fact moving all the groups, as all\n            // the groups represent the same column set.\n            while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {\n                columnGroup = columnGroup.getParent();\n            }\n            var colGroupDef = columnGroup.getColGroupDef();\n            if (colGroupDef) {\n                displayName = colGroupDef.headerName;\n            }\n            if (!displayName) {\n                displayName = leafCols ? this.columnModel.getDisplayNameForColumn(leafCols[0], 'header', true) : '';\n            }\n        }\n        var compDetails = this.userComponentFactory.getHeaderGroupCompDetails(params);\n        this.comp.setUserCompDetails(compDetails);\n    };\n    HeaderGroupCellCtrl.prototype.setupTooltip = function () {\n        var _this = this;\n        var colGroupDef = this.columnGroup.getColGroupDef();\n        var tooltipCtrl = {\n            getColumn: function () { return _this.columnGroup; },\n            getGui: function () { return _this.eGui; },\n            getLocation: function () { return 'headerGroup'; },\n            getTooltipValue: function () { return colGroupDef && colGroupDef.headerTooltip; }\n        };\n        if (colGroupDef) {\n            tooltipCtrl.getColDef = function () { return colGroupDef; };\n        }\n        var tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));\n        tooltipFeature.setComp(this.comp);\n    };\n    HeaderGroupCellCtrl.prototype.setupExpandable = function () {\n        var providedColGroup = this.columnGroup.getOriginalColumnGroup();\n        this.refreshExpanded();\n        this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.refreshExpanded.bind(this));\n        this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.refreshExpanded.bind(this));\n    };\n    HeaderGroupCellCtrl.prototype.refreshExpanded = function () {\n        var column = this.columnGroup;\n        this.expandable = column.isExpandable();\n        var expanded = column.isExpanded();\n        if (this.expandable) {\n            this.comp.setAriaExpanded(expanded ? 'true' : 'false');\n        }\n        else {\n            this.comp.setAriaExpanded(undefined);\n        }\n    };\n    HeaderGroupCellCtrl.prototype.addAttributes = function () {\n        this.comp.setColId(this.columnGroup.getUniqueId());\n    };\n    HeaderGroupCellCtrl.prototype.addClasses = function () {\n        var _this = this;\n        var colGroupDef = this.columnGroup.getColGroupDef();\n        var classes = CssClassApplier.getHeaderClassesFromColDef(colGroupDef, this.gridOptionsWrapper, null, this.columnGroup);\n        // having different classes below allows the style to not have a bottom border\n        // on the group header, if no group is specified\n        classes.push(this.columnGroup.isPadding() ? \"ag-header-group-cell-no-group\" : \"ag-header-group-cell-with-group\");\n        classes.forEach(function (c) { return _this.comp.addOrRemoveCssClass(c, true); });\n    };\n    HeaderGroupCellCtrl.prototype.setupMovingCss = function () {\n        var _this = this;\n        var providedColumnGroup = this.columnGroup.getOriginalColumnGroup();\n        var leafColumns = providedColumnGroup.getLeafColumns();\n        // this function adds or removes the moving css, based on if the col is moving.\n        // this is what makes the header go dark when it is been moved (gives impression to\n        // user that the column was picked up).\n        var listener = function () { return _this.comp.addOrRemoveCssClass('ag-header-cell-moving', _this.columnGroup.isMoving()); };\n        leafColumns.forEach(function (col) {\n            _this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, listener);\n        });\n        listener();\n    };\n    HeaderGroupCellCtrl.prototype.onFocusIn = function (e) {\n        if (!this.eGui.contains(e.relatedTarget)) {\n            var rowIndex = this.getRowIndex();\n            this.beans.focusService.setFocusedHeader(rowIndex, this.columnGroup);\n        }\n    };\n    HeaderGroupCellCtrl.prototype.handleKeyDown = function (e) {\n        var activeEl = document.activeElement;\n        var wrapperHasFocus = activeEl === this.eGui;\n        if (!this.expandable || !wrapperHasFocus) {\n            return;\n        }\n        if (e.keyCode === KeyCode.ENTER) {\n            var column = this.columnGroup;\n            var newExpandedValue = !column.isExpanded();\n            this.columnModel.setColumnGroupOpened(column.getOriginalColumnGroup(), newExpandedValue, \"uiColumnExpanded\");\n        }\n    };\n    // unlike columns, this will only get called once, as we don't react on props on column groups\n    // (we will always destroy and recreate this comp if something changes)\n    HeaderGroupCellCtrl.prototype.setDragSource = function (eHeaderGroup) {\n        var _this = this;\n        if (this.isSuppressMoving()) {\n            return;\n        }\n        var allLeafColumns = this.columnGroup.getOriginalColumnGroup().getLeafColumns();\n        var dragSource = {\n            type: DragSourceType.HeaderCell,\n            eElement: eHeaderGroup,\n            defaultIconName: DragAndDropService.ICON_HIDE,\n            dragItemName: this.displayName,\n            // we add in the original group leaf columns, so we move both visible and non-visible items\n            getDragItem: this.getDragItemForGroup.bind(this),\n            onDragStarted: function () { return allLeafColumns.forEach(function (col) { return col.setMoving(true, \"uiColumnDragged\"); }); },\n            onDragStopped: function () { return allLeafColumns.forEach(function (col) { return col.setMoving(false, \"uiColumnDragged\"); }); }\n        };\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource); });\n    };\n    // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,\n    // and in the order they are currently in the screen.\n    HeaderGroupCellCtrl.prototype.getDragItemForGroup = function () {\n        var allColumnsOriginalOrder = this.columnGroup.getOriginalColumnGroup().getLeafColumns();\n        // capture visible state, used when re-entering grid to dictate which columns should be visible\n        var visibleState = {};\n        allColumnsOriginalOrder.forEach(function (column) { return visibleState[column.getId()] = column.isVisible(); });\n        var allColumnsCurrentOrder = [];\n        this.columnModel.getAllDisplayedColumns().forEach(function (column) {\n            if (allColumnsOriginalOrder.indexOf(column) >= 0) {\n                allColumnsCurrentOrder.push(column);\n                removeFromArray(allColumnsOriginalOrder, column);\n            }\n        });\n        // we are left with non-visible columns, stick these in at the end\n        allColumnsOriginalOrder.forEach(function (column) { return allColumnsCurrentOrder.push(column); });\n        // create and return dragItem\n        return {\n            columns: allColumnsCurrentOrder,\n            visibleState: visibleState\n        };\n    };\n    HeaderGroupCellCtrl.prototype.isSuppressMoving = function () {\n        // if any child is fixed, then don't allow moving\n        var childSuppressesMoving = false;\n        this.columnGroup.getLeafColumns().forEach(function (column) {\n            if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {\n                childSuppressesMoving = true;\n            }\n        });\n        var result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();\n        return result;\n    };\n    __decorate([\n        Autowired('beans')\n    ], HeaderGroupCellCtrl.prototype, \"beans\", void 0);\n    __decorate([\n        Autowired('columnModel')\n    ], HeaderGroupCellCtrl.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('dragAndDropService')\n    ], HeaderGroupCellCtrl.prototype, \"dragAndDropService\", void 0);\n    __decorate([\n        Autowired('userComponentFactory')\n    ], HeaderGroupCellCtrl.prototype, \"userComponentFactory\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], HeaderGroupCellCtrl.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], HeaderGroupCellCtrl.prototype, \"columnApi\", void 0);\n    return HeaderGroupCellCtrl;\n}(AbstractHeaderCellCtrl));\nexport { HeaderGroupCellCtrl };\n"]},"metadata":{},"sourceType":"module"}