{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Component } from '../../../widgets/component';\nimport { SimpleFilter } from '../../provided/simpleFilter';\nimport { OptionsFactory } from '../../provided/optionsFactory';\n\nvar SimpleFloatingFilter =\n/** @class */\nfunction (_super) {\n  __extends(SimpleFloatingFilter, _super);\n\n  function SimpleFloatingFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SimpleFloatingFilter.prototype.getDefaultDebounceMs = function () {\n    return 0;\n  }; // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n\n\n  SimpleFloatingFilter.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n  }; // used by:\n  // 1) NumberFloatingFilter & TextFloatingFilter: Always, for both when editable and read only.\n  // 2) DateFloatingFilter: Only when read only (as we show text rather than a date picker when read only)\n\n\n  SimpleFloatingFilter.prototype.getTextFromModel = function (model) {\n    if (!model) {\n      return null;\n    }\n\n    var isCombined = model.operator != null;\n\n    if (isCombined) {\n      var combinedModel = model;\n\n      var _a = combinedModel || {},\n          condition1 = _a.condition1,\n          condition2 = _a.condition2;\n\n      var customOption1 = this.optionsFactory.getCustomOption(condition1.type);\n      var customOption2 = this.optionsFactory.getCustomOption(condition2.type);\n      return [this.conditionToString(condition1, customOption1), combinedModel.operator, this.conditionToString(condition2, customOption2)].join(' ');\n    } else {\n      var condition = model;\n      var customOption = this.optionsFactory.getCustomOption(condition.type); // For custom filter options we display the Name of the filter instead\n      // of displaying the `from` value, as it wouldn't be relevant\n\n      var _b = customOption || {},\n          displayKey = _b.displayKey,\n          displayName = _b.displayName,\n          numberOfInputs = _b.numberOfInputs;\n\n      if (displayKey && displayName && numberOfInputs === 0) {\n        this.gridOptionsWrapper.getLocaleTextFunc()(displayKey, displayName);\n        return displayName;\n      }\n\n      return this.conditionToString(condition, customOption);\n    }\n  };\n\n  SimpleFloatingFilter.prototype.isEventFromFloatingFilter = function (event) {\n    return event && event.afterFloatingFilter;\n  };\n\n  SimpleFloatingFilter.prototype.getLastType = function () {\n    return this.lastType;\n  };\n\n  SimpleFloatingFilter.prototype.isReadOnly = function () {\n    return this.readOnly;\n  };\n\n  SimpleFloatingFilter.prototype.setLastTypeFromModel = function (model) {\n    // if no model provided by the parent filter use default\n    if (!model) {\n      this.lastType = this.optionsFactory.getDefaultOption();\n      return;\n    }\n\n    var isCombined = model.operator;\n    var condition;\n\n    if (isCombined) {\n      var combinedModel = model;\n      condition = combinedModel.condition1;\n    } else {\n      condition = model;\n    }\n\n    this.lastType = condition.type;\n  };\n\n  SimpleFloatingFilter.prototype.canWeEditAfterModelFromParentFilter = function (model) {\n    if (!model) {\n      // if no model, then we can edit as long as the lastType is something we can edit, as this\n      // is the type we will provide to the parent filter if the user decides to use the floating filter.\n      return this.isTypeEditable(this.lastType);\n    } // never allow editing if the filter is combined (ie has two parts)\n\n\n    var isCombined = model.operator;\n\n    if (isCombined) {\n      return false;\n    }\n\n    var simpleModel = model;\n    return this.isTypeEditable(simpleModel.type);\n  };\n\n  SimpleFloatingFilter.prototype.init = function (params) {\n    this.optionsFactory = new OptionsFactory();\n    this.optionsFactory.init(params.filterParams, this.getDefaultFilterOptions());\n    this.lastType = this.optionsFactory.getDefaultOption(); // readOnly is a property of IProvidedFilterParams - we need to find a better (type-safe)\n    // way to support reading this in the future.\n\n    this.readOnly = !!params.filterParams.readOnly; // we are editable if:\n    // 1) there is a type (user has configured filter wrong if not type)\n    //  AND\n    // 2) the default type is not 'in range'\n\n    var editable = this.isTypeEditable(this.lastType);\n    this.setEditable(editable);\n  };\n\n  SimpleFloatingFilter.prototype.doesFilterHaveSingleInput = function (filterType) {\n    var customFilterOption = this.optionsFactory.getCustomOption(filterType);\n    var numberOfInputs = (customFilterOption || {}).numberOfInputs;\n    return numberOfInputs == null || numberOfInputs == 1;\n  };\n\n  SimpleFloatingFilter.prototype.isTypeEditable = function (type) {\n    return !!type && !this.isReadOnly() && this.doesFilterHaveSingleInput(type) && type !== SimpleFilter.IN_RANGE && type !== SimpleFilter.EMPTY;\n  };\n\n  return SimpleFloatingFilter;\n}(Component);\n\nexport { SimpleFloatingFilter };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/filter/floating/provided/simpleFloatingFilter.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Component","SimpleFilter","OptionsFactory","SimpleFloatingFilter","_super","apply","arguments","getDefaultDebounceMs","destroy","call","getTextFromModel","model","isCombined","operator","combinedModel","_a","condition1","condition2","customOption1","optionsFactory","getCustomOption","type","customOption2","conditionToString","join","condition","customOption","_b","displayKey","displayName","numberOfInputs","gridOptionsWrapper","getLocaleTextFunc","isEventFromFloatingFilter","event","afterFloatingFilter","getLastType","lastType","isReadOnly","readOnly","setLastTypeFromModel","getDefaultOption","canWeEditAfterModelFromParentFilter","isTypeEditable","simpleModel","init","params","filterParams","getDefaultFilterOptions","editable","setEditable","doesFilterHaveSingleInput","filterType","customFilterOption","IN_RANGE","EMPTY"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Component } from '../../../widgets/component';\nimport { SimpleFilter } from '../../provided/simpleFilter';\nimport { OptionsFactory } from '../../provided/optionsFactory';\nvar SimpleFloatingFilter = /** @class */ (function (_super) {\n    __extends(SimpleFloatingFilter, _super);\n    function SimpleFloatingFilter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SimpleFloatingFilter.prototype.getDefaultDebounceMs = function () {\n        return 0;\n    };\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    SimpleFloatingFilter.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n    };\n    // used by:\n    // 1) NumberFloatingFilter & TextFloatingFilter: Always, for both when editable and read only.\n    // 2) DateFloatingFilter: Only when read only (as we show text rather than a date picker when read only)\n    SimpleFloatingFilter.prototype.getTextFromModel = function (model) {\n        if (!model) {\n            return null;\n        }\n        var isCombined = model.operator != null;\n        if (isCombined) {\n            var combinedModel = model;\n            var _a = combinedModel || {}, condition1 = _a.condition1, condition2 = _a.condition2;\n            var customOption1 = this.optionsFactory.getCustomOption(condition1.type);\n            var customOption2 = this.optionsFactory.getCustomOption(condition2.type);\n            return [\n                this.conditionToString(condition1, customOption1),\n                combinedModel.operator,\n                this.conditionToString(condition2, customOption2),\n            ].join(' ');\n        }\n        else {\n            var condition = model;\n            var customOption = this.optionsFactory.getCustomOption(condition.type);\n            // For custom filter options we display the Name of the filter instead\n            // of displaying the `from` value, as it wouldn't be relevant\n            var _b = customOption || {}, displayKey = _b.displayKey, displayName = _b.displayName, numberOfInputs = _b.numberOfInputs;\n            if (displayKey && displayName && numberOfInputs === 0) {\n                this.gridOptionsWrapper.getLocaleTextFunc()(displayKey, displayName);\n                return displayName;\n            }\n            return this.conditionToString(condition, customOption);\n        }\n    };\n    SimpleFloatingFilter.prototype.isEventFromFloatingFilter = function (event) {\n        return event && event.afterFloatingFilter;\n    };\n    SimpleFloatingFilter.prototype.getLastType = function () {\n        return this.lastType;\n    };\n    SimpleFloatingFilter.prototype.isReadOnly = function () {\n        return this.readOnly;\n    };\n    SimpleFloatingFilter.prototype.setLastTypeFromModel = function (model) {\n        // if no model provided by the parent filter use default\n        if (!model) {\n            this.lastType = this.optionsFactory.getDefaultOption();\n            return;\n        }\n        var isCombined = model.operator;\n        var condition;\n        if (isCombined) {\n            var combinedModel = model;\n            condition = combinedModel.condition1;\n        }\n        else {\n            condition = model;\n        }\n        this.lastType = condition.type;\n    };\n    SimpleFloatingFilter.prototype.canWeEditAfterModelFromParentFilter = function (model) {\n        if (!model) {\n            // if no model, then we can edit as long as the lastType is something we can edit, as this\n            // is the type we will provide to the parent filter if the user decides to use the floating filter.\n            return this.isTypeEditable(this.lastType);\n        }\n        // never allow editing if the filter is combined (ie has two parts)\n        var isCombined = model.operator;\n        if (isCombined) {\n            return false;\n        }\n        var simpleModel = model;\n        return this.isTypeEditable(simpleModel.type);\n    };\n    SimpleFloatingFilter.prototype.init = function (params) {\n        this.optionsFactory = new OptionsFactory();\n        this.optionsFactory.init(params.filterParams, this.getDefaultFilterOptions());\n        this.lastType = this.optionsFactory.getDefaultOption();\n        // readOnly is a property of IProvidedFilterParams - we need to find a better (type-safe)\n        // way to support reading this in the future.\n        this.readOnly = !!params.filterParams.readOnly;\n        // we are editable if:\n        // 1) there is a type (user has configured filter wrong if not type)\n        //  AND\n        // 2) the default type is not 'in range'\n        var editable = this.isTypeEditable(this.lastType);\n        this.setEditable(editable);\n    };\n    SimpleFloatingFilter.prototype.doesFilterHaveSingleInput = function (filterType) {\n        var customFilterOption = this.optionsFactory.getCustomOption(filterType);\n        var numberOfInputs = (customFilterOption || {}).numberOfInputs;\n        return numberOfInputs == null || numberOfInputs == 1;\n    };\n    SimpleFloatingFilter.prototype.isTypeEditable = function (type) {\n        return !!type &&\n            !this.isReadOnly() &&\n            this.doesFilterHaveSingleInput(type) &&\n            type !== SimpleFilter.IN_RANGE &&\n            type !== SimpleFilter.EMPTY;\n    };\n    return SimpleFloatingFilter;\n}(Component));\nexport { SimpleFloatingFilter };\n"]},"metadata":{},"sourceType":"module"}