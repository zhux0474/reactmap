{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isString_js_1 = __importDefault(require(\"lodash/isString.js\"));\n/**\n * Helper Class for Strings\n */\n\n\nvar StringUtil =\n/** @class */\nfunction () {\n  function StringUtil() {}\n  /**\n   * Replaces any occurrence of a link-like text with an `<a>`-tag.\n   *\n   * @param {string} text The string context to replace.\n   * @return {string} The urlified string.\n   */\n\n\n  StringUtil.urlify = function (text) {\n    var urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n    return text.replace(urlRegex, \"<a href=\\\"$1\\\" target=\\\"_blank\\\">$1</a>\");\n  };\n  /**\n   * This coerces the value of a string by casting it to the most plausible\n   * datatype, guessed by the value itself.\n   *\n   * @param {string} str The input string to coerce.\n   * @return {*} The coerced value.\n   */\n\n\n  StringUtil.coerce = function (str) {\n    if (!isString_js_1.default(str)) {\n      return str;\n    }\n\n    var isFloatRegex = /^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$/;\n\n    if (str.toLowerCase() === 'true') {\n      return true;\n    } else if (str.toLowerCase() === 'false') {\n      return false;\n    } else if (isFloatRegex.test(str)) {\n      return parseFloat(str);\n    } else if (str.startsWith('[')) {\n      return JSON.parse(str).map(function (a) {\n        return StringUtil.coerce(a);\n      });\n    } else if (str.startsWith('{')) {\n      var parsedObj_1 = JSON.parse(str);\n      var coercedObj_1 = {};\n      Object.keys(parsedObj_1).forEach(function (key) {\n        coercedObj_1[key] = StringUtil.coerce(parsedObj_1[key]);\n      });\n      return coercedObj_1;\n    } else {\n      return str;\n    }\n  };\n  /**\n   * Returns a string that is wrapped: every ~`width` chars a space is\n   * replaced with the passed `spaceReplacer`.\n   *\n   * See https://stackoverflow.com/questions/14484787/wrap-text-in-javascript\n   *\n   * @param {string} str The string to wrap.\n   * @param {number} width The width of a line (number of characters).\n   * @param {string} spaceReplacer The string to replace spaces with.\n   * @return {string} The 'wrapped' string.\n   */\n\n\n  StringUtil.stringDivider = function (str, width, spaceReplacer) {\n    var startIndex = 0;\n    var stopIndex = width;\n\n    if (str.length > width) {\n      var p = width;\n      var left = void 0;\n      var right = void 0;\n\n      while (p > 0 && str[p] !== ' ' && str[p] !== '-') {\n        p--;\n      }\n\n      if (p > 0) {\n        if (str.substring(p, p + 1) === '-') {\n          left = str.substring(0, p + 1);\n        } else {\n          left = str.substring(0, p);\n        }\n\n        right = str.substring(p + 1);\n        return left + spaceReplacer + StringUtil.stringDivider(right, width, spaceReplacer);\n      } else {\n        // no whitespace or - found,\n        // splitting hard on the width length\n        left = str.substring(startIndex, stopIndex + 1) + '-';\n        right = str.substring(stopIndex + 1);\n        startIndex = stopIndex;\n        stopIndex += width;\n        return left + spaceReplacer + StringUtil.stringDivider(right, width, spaceReplacer);\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Returns the displayed text of an string with html text.\n   *\n   * @param {string} htmlString A string containing html.\n   * @return {string} The stripped Text.\n   */\n\n\n  StringUtil.stripHTMLTags = function (htmlString) {\n    var stripped;\n\n    if (DOMParser) {\n      // Inspired by https://stackoverflow.com/a/47140708\n      var doc = new DOMParser().parseFromString(htmlString, 'text/html');\n      stripped = doc.body.textContent || '';\n    }\n\n    return stripped;\n  };\n  /**\n   * Removes duplicated forward slashes as well as trailing slash\n   * and returns normalized URL string.\n   *\n   * @param {string} url Original URL string.\n   * @return {string} Sanitized URL string.\n   */\n\n\n  StringUtil.sanitizeUrl = function (url) {\n    return url.replace(/([^:]\\/)\\/+/g, '$1').replace(/\\/+$/, '');\n  };\n\n  return StringUtil;\n}();\n\nexports.default = StringUtil;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@terrestris/base-util/dist/StringUtil/StringUtil.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","isString_js_1","require","StringUtil","urlify","text","urlRegex","replace","coerce","str","default","isFloatRegex","toLowerCase","test","parseFloat","startsWith","JSON","parse","map","a","parsedObj_1","coercedObj_1","keys","forEach","key","stringDivider","width","spaceReplacer","startIndex","stopIndex","length","p","left","right","substring","stripHTMLTags","htmlString","stripped","DOMParser","doc","parseFromString","body","textContent","sanitizeUrl","url"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isString_js_1 = __importDefault(require(\"lodash/isString.js\"));\n/**\n * Helper Class for Strings\n */\nvar StringUtil = /** @class */ (function () {\n    function StringUtil() {\n    }\n    /**\n     * Replaces any occurrence of a link-like text with an `<a>`-tag.\n     *\n     * @param {string} text The string context to replace.\n     * @return {string} The urlified string.\n     */\n    StringUtil.urlify = function (text) {\n        var urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n        return text.replace(urlRegex, \"<a href=\\\"$1\\\" target=\\\"_blank\\\">$1</a>\");\n    };\n    /**\n     * This coerces the value of a string by casting it to the most plausible\n     * datatype, guessed by the value itself.\n     *\n     * @param {string} str The input string to coerce.\n     * @return {*} The coerced value.\n     */\n    StringUtil.coerce = function (str) {\n        if (!isString_js_1.default(str)) {\n            return str;\n        }\n        var isFloatRegex = /^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$/;\n        if (str.toLowerCase() === 'true') {\n            return true;\n        }\n        else if (str.toLowerCase() === 'false') {\n            return false;\n        }\n        else if (isFloatRegex.test(str)) {\n            return parseFloat(str);\n        }\n        else if (str.startsWith('[')) {\n            return JSON.parse(str).map(function (a) { return StringUtil.coerce(a); });\n        }\n        else if (str.startsWith('{')) {\n            var parsedObj_1 = JSON.parse(str);\n            var coercedObj_1 = {};\n            Object.keys(parsedObj_1).forEach(function (key) {\n                coercedObj_1[key] = StringUtil.coerce(parsedObj_1[key]);\n            });\n            return coercedObj_1;\n        }\n        else {\n            return str;\n        }\n    };\n    /**\n     * Returns a string that is wrapped: every ~`width` chars a space is\n     * replaced with the passed `spaceReplacer`.\n     *\n     * See https://stackoverflow.com/questions/14484787/wrap-text-in-javascript\n     *\n     * @param {string} str The string to wrap.\n     * @param {number} width The width of a line (number of characters).\n     * @param {string} spaceReplacer The string to replace spaces with.\n     * @return {string} The 'wrapped' string.\n     */\n    StringUtil.stringDivider = function (str, width, spaceReplacer) {\n        var startIndex = 0;\n        var stopIndex = width;\n        if (str.length > width) {\n            var p = width;\n            var left = void 0;\n            var right = void 0;\n            while (p > 0 && (str[p] !== ' ' && str[p] !== '-')) {\n                p--;\n            }\n            if (p > 0) {\n                if (str.substring(p, p + 1) === '-') {\n                    left = str.substring(0, p + 1);\n                }\n                else {\n                    left = str.substring(0, p);\n                }\n                right = str.substring(p + 1);\n                return left + spaceReplacer + StringUtil.stringDivider(right, width, spaceReplacer);\n            }\n            else {\n                // no whitespace or - found,\n                // splitting hard on the width length\n                left = str.substring(startIndex, stopIndex + 1) + '-';\n                right = str.substring(stopIndex + 1);\n                startIndex = stopIndex;\n                stopIndex += width;\n                return left + spaceReplacer + StringUtil.stringDivider(right, width, spaceReplacer);\n            }\n        }\n        return str;\n    };\n    /**\n     * Returns the displayed text of an string with html text.\n     *\n     * @param {string} htmlString A string containing html.\n     * @return {string} The stripped Text.\n     */\n    StringUtil.stripHTMLTags = function (htmlString) {\n        var stripped;\n        if (DOMParser) {\n            // Inspired by https://stackoverflow.com/a/47140708\n            var doc = (new DOMParser()).parseFromString(htmlString, 'text/html');\n            stripped = doc.body.textContent || '';\n        }\n        return stripped;\n    };\n    /**\n     * Removes duplicated forward slashes as well as trailing slash\n     * and returns normalized URL string.\n     *\n     * @param {string} url Original URL string.\n     * @return {string} Sanitized URL string.\n     */\n    StringUtil.sanitizeUrl = function (url) {\n        return url.replace(/([^:]\\/)\\/+/g, '$1').replace(/\\/+$/, '');\n    };\n    return StringUtil;\n}());\nexports.default = StringUtil;\n"]},"metadata":{},"sourceType":"script"}