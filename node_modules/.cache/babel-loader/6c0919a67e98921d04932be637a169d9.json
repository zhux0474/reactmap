{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { ColumnGroup } from \"./columnGroup\";\nimport { Column } from \"./column\";\nimport { EventService } from \"../eventService\";\n\nvar ProvidedColumnGroup =\n/** @class */\nfunction () {\n  function ProvidedColumnGroup(colGroupDef, groupId, padding, level) {\n    this.localEventService = new EventService();\n    this.expandable = false;\n    this.colGroupDef = colGroupDef;\n    this.groupId = groupId;\n    this.expanded = !!colGroupDef && !!colGroupDef.openByDefault;\n    this.padding = padding;\n    this.level = level;\n  }\n\n  ProvidedColumnGroup.prototype.setOriginalParent = function (originalParent) {\n    this.originalParent = originalParent;\n  };\n\n  ProvidedColumnGroup.prototype.getOriginalParent = function () {\n    return this.originalParent;\n  };\n\n  ProvidedColumnGroup.prototype.getLevel = function () {\n    return this.level;\n  };\n\n  ProvidedColumnGroup.prototype.isVisible = function () {\n    // return true if at least one child is visible\n    if (this.children) {\n      return this.children.some(function (child) {\n        return child.isVisible();\n      });\n    }\n\n    return false;\n  };\n\n  ProvidedColumnGroup.prototype.isPadding = function () {\n    return this.padding;\n  };\n\n  ProvidedColumnGroup.prototype.setExpanded = function (expanded) {\n    this.expanded = expanded === undefined ? false : expanded;\n    var event = {\n      type: ProvidedColumnGroup.EVENT_EXPANDED_CHANGED\n    };\n    this.localEventService.dispatchEvent(event);\n  };\n\n  ProvidedColumnGroup.prototype.isExpandable = function () {\n    return this.expandable;\n  };\n\n  ProvidedColumnGroup.prototype.isExpanded = function () {\n    return this.expanded;\n  };\n\n  ProvidedColumnGroup.prototype.getGroupId = function () {\n    return this.groupId;\n  };\n\n  ProvidedColumnGroup.prototype.getId = function () {\n    return this.getGroupId();\n  };\n\n  ProvidedColumnGroup.prototype.setChildren = function (children) {\n    this.children = children;\n  };\n\n  ProvidedColumnGroup.prototype.getChildren = function () {\n    return this.children;\n  };\n\n  ProvidedColumnGroup.prototype.getColGroupDef = function () {\n    return this.colGroupDef;\n  };\n\n  ProvidedColumnGroup.prototype.getLeafColumns = function () {\n    var result = [];\n    this.addLeafColumns(result);\n    return result;\n  };\n\n  ProvidedColumnGroup.prototype.addLeafColumns = function (leafColumns) {\n    if (!this.children) {\n      return;\n    }\n\n    this.children.forEach(function (child) {\n      if (child instanceof Column) {\n        leafColumns.push(child);\n      } else if (child instanceof ProvidedColumnGroup) {\n        child.addLeafColumns(leafColumns);\n      }\n    });\n  };\n\n  ProvidedColumnGroup.prototype.getColumnGroupShow = function () {\n    var colGroupDef = this.colGroupDef;\n\n    if (!colGroupDef) {\n      return;\n    }\n\n    return colGroupDef.columnGroupShow;\n  }; // need to check that this group has at least one col showing when both expanded and contracted.\n  // if not, then we don't allow expanding and contracting on this group\n\n\n  ProvidedColumnGroup.prototype.setupExpandable = function () {\n    var _this = this;\n\n    this.setExpandable(); // note - we should be removing this event listener\n\n    this.getLeafColumns().forEach(function (col) {\n      return col.addEventListener(Column.EVENT_VISIBLE_CHANGED, _this.onColumnVisibilityChanged.bind(_this));\n    });\n  };\n\n  ProvidedColumnGroup.prototype.setExpandable = function () {\n    if (this.isPadding()) {\n      return;\n    } // want to make sure the group doesn't disappear when it's open\n\n\n    var atLeastOneShowingWhenOpen = false; // want to make sure the group doesn't disappear when it's closed\n\n    var atLeastOneShowingWhenClosed = false; // want to make sure the group has something to show / hide\n\n    var atLeastOneChangeable = false;\n    var children = this.findChildrenRemovingPadding();\n\n    for (var i = 0, j = children.length; i < j; i++) {\n      var abstractColumn = children[i];\n\n      if (!abstractColumn.isVisible()) {\n        continue;\n      } // if the abstractColumn is a grid generated group, there will be no colDef\n\n\n      var headerGroupShow = abstractColumn.getColumnGroupShow();\n\n      if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_OPEN) {\n        atLeastOneShowingWhenOpen = true;\n        atLeastOneChangeable = true;\n      } else if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_CLOSED) {\n        atLeastOneShowingWhenClosed = true;\n        atLeastOneChangeable = true;\n      } else {\n        atLeastOneShowingWhenOpen = true;\n        atLeastOneShowingWhenClosed = true;\n      }\n    }\n\n    var expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;\n\n    if (this.expandable !== expandable) {\n      this.expandable = expandable;\n      var event_1 = {\n        type: ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED\n      };\n      this.localEventService.dispatchEvent(event_1);\n    }\n  };\n\n  ProvidedColumnGroup.prototype.findChildrenRemovingPadding = function () {\n    var res = [];\n\n    var process = function (items) {\n      items.forEach(function (item) {\n        // if padding, we add this children instead of the padding\n        var skipBecausePadding = item instanceof ProvidedColumnGroup && item.isPadding();\n\n        if (skipBecausePadding) {\n          process(item.children);\n        } else {\n          res.push(item);\n        }\n      });\n    };\n\n    process(this.children);\n    return res;\n  };\n\n  ProvidedColumnGroup.prototype.onColumnVisibilityChanged = function () {\n    this.setExpandable();\n  };\n\n  ProvidedColumnGroup.prototype.addEventListener = function (eventType, listener) {\n    this.localEventService.addEventListener(eventType, listener);\n  };\n\n  ProvidedColumnGroup.prototype.removeEventListener = function (eventType, listener) {\n    this.localEventService.removeEventListener(eventType, listener);\n  };\n\n  ProvidedColumnGroup.EVENT_EXPANDED_CHANGED = 'expandedChanged';\n  ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED = 'expandableChanged';\n  return ProvidedColumnGroup;\n}();\n\nexport { ProvidedColumnGroup };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/entities/providedColumnGroup.js"],"names":["ColumnGroup","Column","EventService","ProvidedColumnGroup","colGroupDef","groupId","padding","level","localEventService","expandable","expanded","openByDefault","prototype","setOriginalParent","originalParent","getOriginalParent","getLevel","isVisible","children","some","child","isPadding","setExpanded","undefined","event","type","EVENT_EXPANDED_CHANGED","dispatchEvent","isExpandable","isExpanded","getGroupId","getId","setChildren","getChildren","getColGroupDef","getLeafColumns","result","addLeafColumns","leafColumns","forEach","push","getColumnGroupShow","columnGroupShow","setupExpandable","_this","setExpandable","col","addEventListener","EVENT_VISIBLE_CHANGED","onColumnVisibilityChanged","bind","atLeastOneShowingWhenOpen","atLeastOneShowingWhenClosed","atLeastOneChangeable","findChildrenRemovingPadding","i","j","length","abstractColumn","headerGroupShow","HEADER_GROUP_SHOW_OPEN","HEADER_GROUP_SHOW_CLOSED","event_1","EVENT_EXPANDABLE_CHANGED","res","process","items","item","skipBecausePadding","eventType","listener","removeEventListener"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { ColumnGroup } from \"./columnGroup\";\nimport { Column } from \"./column\";\nimport { EventService } from \"../eventService\";\nvar ProvidedColumnGroup = /** @class */ (function () {\n    function ProvidedColumnGroup(colGroupDef, groupId, padding, level) {\n        this.localEventService = new EventService();\n        this.expandable = false;\n        this.colGroupDef = colGroupDef;\n        this.groupId = groupId;\n        this.expanded = !!colGroupDef && !!colGroupDef.openByDefault;\n        this.padding = padding;\n        this.level = level;\n    }\n    ProvidedColumnGroup.prototype.setOriginalParent = function (originalParent) {\n        this.originalParent = originalParent;\n    };\n    ProvidedColumnGroup.prototype.getOriginalParent = function () {\n        return this.originalParent;\n    };\n    ProvidedColumnGroup.prototype.getLevel = function () {\n        return this.level;\n    };\n    ProvidedColumnGroup.prototype.isVisible = function () {\n        // return true if at least one child is visible\n        if (this.children) {\n            return this.children.some(function (child) { return child.isVisible(); });\n        }\n        return false;\n    };\n    ProvidedColumnGroup.prototype.isPadding = function () {\n        return this.padding;\n    };\n    ProvidedColumnGroup.prototype.setExpanded = function (expanded) {\n        this.expanded = expanded === undefined ? false : expanded;\n        var event = {\n            type: ProvidedColumnGroup.EVENT_EXPANDED_CHANGED\n        };\n        this.localEventService.dispatchEvent(event);\n    };\n    ProvidedColumnGroup.prototype.isExpandable = function () {\n        return this.expandable;\n    };\n    ProvidedColumnGroup.prototype.isExpanded = function () {\n        return this.expanded;\n    };\n    ProvidedColumnGroup.prototype.getGroupId = function () {\n        return this.groupId;\n    };\n    ProvidedColumnGroup.prototype.getId = function () {\n        return this.getGroupId();\n    };\n    ProvidedColumnGroup.prototype.setChildren = function (children) {\n        this.children = children;\n    };\n    ProvidedColumnGroup.prototype.getChildren = function () {\n        return this.children;\n    };\n    ProvidedColumnGroup.prototype.getColGroupDef = function () {\n        return this.colGroupDef;\n    };\n    ProvidedColumnGroup.prototype.getLeafColumns = function () {\n        var result = [];\n        this.addLeafColumns(result);\n        return result;\n    };\n    ProvidedColumnGroup.prototype.addLeafColumns = function (leafColumns) {\n        if (!this.children) {\n            return;\n        }\n        this.children.forEach(function (child) {\n            if (child instanceof Column) {\n                leafColumns.push(child);\n            }\n            else if (child instanceof ProvidedColumnGroup) {\n                child.addLeafColumns(leafColumns);\n            }\n        });\n    };\n    ProvidedColumnGroup.prototype.getColumnGroupShow = function () {\n        var colGroupDef = this.colGroupDef;\n        if (!colGroupDef) {\n            return;\n        }\n        return colGroupDef.columnGroupShow;\n    };\n    // need to check that this group has at least one col showing when both expanded and contracted.\n    // if not, then we don't allow expanding and contracting on this group\n    ProvidedColumnGroup.prototype.setupExpandable = function () {\n        var _this = this;\n        this.setExpandable();\n        // note - we should be removing this event listener\n        this.getLeafColumns().forEach(function (col) { return col.addEventListener(Column.EVENT_VISIBLE_CHANGED, _this.onColumnVisibilityChanged.bind(_this)); });\n    };\n    ProvidedColumnGroup.prototype.setExpandable = function () {\n        if (this.isPadding()) {\n            return;\n        }\n        // want to make sure the group doesn't disappear when it's open\n        var atLeastOneShowingWhenOpen = false;\n        // want to make sure the group doesn't disappear when it's closed\n        var atLeastOneShowingWhenClosed = false;\n        // want to make sure the group has something to show / hide\n        var atLeastOneChangeable = false;\n        var children = this.findChildrenRemovingPadding();\n        for (var i = 0, j = children.length; i < j; i++) {\n            var abstractColumn = children[i];\n            if (!abstractColumn.isVisible()) {\n                continue;\n            }\n            // if the abstractColumn is a grid generated group, there will be no colDef\n            var headerGroupShow = abstractColumn.getColumnGroupShow();\n            if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_OPEN) {\n                atLeastOneShowingWhenOpen = true;\n                atLeastOneChangeable = true;\n            }\n            else if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_CLOSED) {\n                atLeastOneShowingWhenClosed = true;\n                atLeastOneChangeable = true;\n            }\n            else {\n                atLeastOneShowingWhenOpen = true;\n                atLeastOneShowingWhenClosed = true;\n            }\n        }\n        var expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;\n        if (this.expandable !== expandable) {\n            this.expandable = expandable;\n            var event_1 = {\n                type: ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED\n            };\n            this.localEventService.dispatchEvent(event_1);\n        }\n    };\n    ProvidedColumnGroup.prototype.findChildrenRemovingPadding = function () {\n        var res = [];\n        var process = function (items) {\n            items.forEach(function (item) {\n                // if padding, we add this children instead of the padding\n                var skipBecausePadding = item instanceof ProvidedColumnGroup && item.isPadding();\n                if (skipBecausePadding) {\n                    process(item.children);\n                }\n                else {\n                    res.push(item);\n                }\n            });\n        };\n        process(this.children);\n        return res;\n    };\n    ProvidedColumnGroup.prototype.onColumnVisibilityChanged = function () {\n        this.setExpandable();\n    };\n    ProvidedColumnGroup.prototype.addEventListener = function (eventType, listener) {\n        this.localEventService.addEventListener(eventType, listener);\n    };\n    ProvidedColumnGroup.prototype.removeEventListener = function (eventType, listener) {\n        this.localEventService.removeEventListener(eventType, listener);\n    };\n    ProvidedColumnGroup.EVENT_EXPANDED_CHANGED = 'expandedChanged';\n    ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED = 'expandableChanged';\n    return ProvidedColumnGroup;\n}());\nexport { ProvidedColumnGroup };\n"]},"metadata":{},"sourceType":"module"}