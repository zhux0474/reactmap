{"ast":null,"code":"var _jsxFileName = \"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js\";\nimport React from \"react\";\nimport { fromLonLat, get } from \"ol/proj\"; //import \"./SmokerMap.css\";\n\nimport Map from \"ol/Map\"; //import Feature from \"ol/Feature\";\n\nimport View from \"ol/View\"; //import { Point, Style, Circle, Fill, Feature } from \"ol\";\n\nimport TileLayer from \"ol/layer/Tile\"; //import TileWMS from 'ol/source/TileWMS';\n\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport { Fill, Stroke, Style } from 'ol/style';\nimport { metadata } from './metadata.js';\nimport countyData from './countyline.geojson';\nimport Dropdown from './dropdown.js';\nimport Whitesmoker from '../data/whitesmoker.json';\nimport { Context } from \"./context\";\nimport { useContext } from \"react\"; //import {ccontext} from \"./context\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SmokerMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      smokerSource: null,\n      smokerlayer: false,\n      countyOutlineSource: null,\n      countyOutline: false,\n      countyReady: false\n    }; // console.log(this.props);\n  }\n\n  componentDidMount() {\n    const context = this.context;\n    console.log(context); // get the current value in UsersContext through the hook\n\n    var basemap = new TileLayer({\n      source: new OSM()\n    });\n    var smokerSource = new VectorSource({\n      url: context.state.attribute,\n      //metadata[1].geojson_url,\n      format: new GeoJSON()\n    });\n    console.log(\"source is:\", context.state.attribute);\n    var countyOutlineSource = new VectorSource({\n      url: countyData,\n      format: new GeoJSON()\n    });\n    var countyBorder = new Style({\n      stroke: new Stroke({\n        color: 'black',\n        width: 1\n      })\n    });\n    var countyOutline = new VectorLayer({\n      opacity: 1,\n      //visible: this.props.viewed === 'County',\n      source: countyOutlineSource,\n      style: countyBorder\n    });\n\n    var stylefunction = function (feature) {\n      var style;\n      console.log(feature); //console.log(Whitesmoker.features[].properties);\n      //var value=feature.get('brfss_smoker');\n      //var geojson1={geoid:23,value:16},{geoid:50,value:25}\n      //var geojson2={geoid:27,value:55},{geoid:55,value:25},{geoid:63,value:16},{geoid:23,value:25},{geoid:99,value:16},{geoid:50,value:65}\n      //var county=feature.get('county');\n      //var value = feature.get('brfss_smoker');\n\n      var geoid = feature.get('geo_id'); //console.log(\"geoid\",geoid);\n      //console.log(value);\n      //console.log(Object.keys(geoid));\n      // const newgeoid = Whitesmoker.map((id)=> {\n      // var white=Whitesmoker.get('geo_id');\n      //console.log(white);\n\n      for (var i = 0; i < Whitesmoker.features.length; i++) {\n        var newgeoid = Whitesmoker.features[i].properties.geo_id; //console.log(newgeoid);\n\n        if (newgeoid === geoid) {\n          var value = Whitesmoker.features[i].properties.brfss_smoker;\n        }\n\n        ;\n      } //console.log(value)\n      //compare geoid with the next json\n      // mapping function or a for loop to find the matching value\n      // return value from geojson2 and assign to var value \n      // assign color to each break from metadata.js\n      //console.log(county,value)\n\n\n      for (let i = 0; i < metadata[1]['break'].length; i++) {\n        if (value > metadata[1]['break'][i]) {\n          style = new Style({\n            fill: new Fill({\n              color: metadata[1]['color'][i]\n            }),\n            stroke: new Stroke({\n              color: 'black',\n              width: 0.3\n            })\n          });\n        }\n\n        ;\n      }\n\n      return style;\n    };\n\n    var smokerlayer = new VectorLayer({\n      source: smokerSource,\n      style: stylefunction //showLegend:true\n\n    });\n    var olmap = new Map({\n      layers: [basemap, countyOutline, smokerlayer],\n      target: \"mapContainer\",\n      view: new View({\n        center: fromLonLat([-94.6859, 46.7296]),\n        zoom: 6\n      })\n    });\n    this.setState({\n      olmap: olmap,\n      countyOutlineSource: countyOutlineSource,\n      countyOutline: countyOutline,\n      smokerlayer: smokerlayer,\n      smokerSource: smokerSource\n    });\n  }\n\n  componentDidUpdate() {\n    const context = this.context;\n    console.log(\"update:\", context);\n  }\n\n  render() {\n    console.log(\"-> render App\"); //console.log(\"before return\",this.state)\n\n    return console.log(\"after return\", this.state),\n    /*#__PURE__*/\n    //{context},\n    _jsxDEV(Context.Consumer, {\n      children: context => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: context.state.season\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mapContainer\",\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this) //console.log(this.state)\n    ;\n  }\n\n}\nSmokerMap.contextType = Context;","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/src/components/SmokerMap.js"],"names":["React","fromLonLat","get","Map","View","TileLayer","VectorLayer","VectorSource","GeoJSON","OSM","Fill","Stroke","Style","metadata","countyData","Dropdown","Whitesmoker","Context","useContext","SmokerMap","Component","constructor","props","state","smokerSource","smokerlayer","countyOutlineSource","countyOutline","countyReady","componentDidMount","context","console","log","basemap","source","url","attribute","format","countyBorder","stroke","color","width","opacity","style","stylefunction","feature","geoid","i","features","length","newgeoid","properties","geo_id","value","brfss_smoker","fill","olmap","layers","target","view","center","zoom","setState","componentDidUpdate","render","season","height","contextType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { fromLonLat, get } from \"ol/proj\";\n//import \"./SmokerMap.css\";\nimport Map from \"ol/Map\";\n//import Feature from \"ol/Feature\";\nimport View from \"ol/View\";\n//import { Point, Style, Circle, Fill, Feature } from \"ol\";\nimport TileLayer from \"ol/layer/Tile\";\n//import TileWMS from 'ol/source/TileWMS';\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport GeoJSON from 'ol/format/GeoJSON';\nimport OSM from \"ol/source/OSM\";\nimport {Fill, Stroke, Style} from 'ol/style';\nimport {metadata} from './metadata.js';\nimport countyData from './countyline.geojson';\nimport Dropdown from './dropdown.js';\nimport Whitesmoker from '../data/whitesmoker.json';\nimport {Context} from \"./context\";\nimport { useContext } from \"react\";\n//import {ccontext} from \"./context\";\n\n\nexport default class SmokerMap extends React.Component{\n\n  static contextType = Context;\n  \n  constructor(props){\n    super(props);\n    this.state = {\n     \n      smokerSource : null,\n      smokerlayer: false,\n      countyOutlineSource: null,\n      countyOutline: false,\n      countyReady: false\n      \n  };\n   // console.log(this.props);\n  }\n\n  \n\n\n  \n  componentDidMount(){\n  \n    const context=this.context;\n    console.log(context);\n    // get the current value in UsersContext through the hook\n    var basemap =new TileLayer({\n      source: new OSM()\n    })\n    var smokerSource = new VectorSource({\n      url: context.state.attribute,//metadata[1].geojson_url,\n      \n      format: new GeoJSON()\n    })\n    console.log(\"source is:\",context.state.attribute)\n   \n\n    var countyOutlineSource = new VectorSource({\n      url: countyData,\n      format: new GeoJSON()\n\n    })\n    var countyBorder = new Style({\n      stroke: new Stroke({\n          color: 'black',\n          width: 1\n      })\n  });\n    var countyOutline = new VectorLayer({\n      opacity: 1,\n      //visible: this.props.viewed === 'County',\n      source: countyOutlineSource,\n      style: countyBorder\n    })\n\n    \n  \n    var stylefunction = function(feature){\n        var style;\n        console.log(feature);\n        //console.log(Whitesmoker.features[].properties);\n        \n        //var value=feature.get('brfss_smoker');\n        //var geojson1={geoid:23,value:16},{geoid:50,value:25}\n        //var geojson2={geoid:27,value:55},{geoid:55,value:25},{geoid:63,value:16},{geoid:23,value:25},{geoid:99,value:16},{geoid:50,value:65}\n\n        //var county=feature.get('county');\n        //var value = feature.get('brfss_smoker');\n        var geoid=feature.get('geo_id');\n       //console.log(\"geoid\",geoid);\n        //console.log(value);\n        //console.log(Object.keys(geoid));\n       // const newgeoid = Whitesmoker.map((id)=> {\n         // var white=Whitesmoker.get('geo_id');\n          //console.log(white);\n        for (var i=0; i<Whitesmoker.features.length;i++){\n            var newgeoid=Whitesmoker.features[i].properties.geo_id;\n            //console.log(newgeoid);\n            if (newgeoid===geoid ){\n              var value= Whitesmoker.features[i].properties.brfss_smoker;\n             };\n          }\n        //console.log(value)\n        \n        \n        \n        \n        //compare geoid with the next json\n        // mapping function or a for loop to find the matching value\n        // return value from geojson2 and assign to var value \n        \n        // assign color to each break from metadata.js\n        //console.log(county,value)\n        for (let i =0;i<metadata[1]['break'].length;i++){\n          if(value>metadata[1]['break'][i]){\n          style= new Style({\n            fill: new Fill({\n              color: metadata[1]['color'][i]\n            }),\n            stroke: new Stroke({\n              color:'black',\n              width:0.3\n            })\n          })\n        };\n      }\n\n        return style;\n\n    };\n\n    var smokerlayer = new VectorLayer({\n\n       source: smokerSource,\n       style: stylefunction,\n       //showLegend:true\n\n       })\n\n    var olmap=new Map({\n      layers: [basemap,countyOutline,smokerlayer],\n      target: \"mapContainer\",\n      view :new View({\n        center:fromLonLat([-94.6859,46.7296]),\n        zoom: 6\n      })\n\n\n\n    });\n\n    this.setState({\n      \n      olmap: olmap,\n      countyOutlineSource:countyOutlineSource,\n      countyOutline: countyOutline,\n      smokerlayer: smokerlayer,\n      smokerSource:smokerSource\n  })\n\n  \n  \n\n}\n\n\n  componentDidUpdate(){\n    const context=this.context;\n    console.log(\"update:\",context)\n  }\n\n  \n\n  \n  render() {\n    console.log(\"-> render App\");\n    //console.log(\"before return\",this.state)\n    return (\n      console.log(\"after return\",this.state),\n      //{context},\n      <Context.Consumer>\n\n        {(context)=>(\n\n          <p>{context.state.season}</p>\n        )}\n      \n      </Context.Consumer>,\n      \n      <div id=\"mapContainer\" style={{ width: \"100%\",height: \"500px\"}}></div>\n      //console.log(this.state)\n      \n\n    );\n    \n  }\n\n\n}"]},"metadata":{},"sourceType":"module"}