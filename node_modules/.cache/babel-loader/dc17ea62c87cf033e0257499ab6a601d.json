{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { containsClass, addCssClass } from \"../utils/dom\";\n\nvar AutoWidthCalculator =\n/** @class */\nfunction (_super) {\n  __extends(AutoWidthCalculator, _super);\n\n  function AutoWidthCalculator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AutoWidthCalculator.prototype.postConstruct = function () {\n    var _this = this;\n\n    this.ctrlsService.whenReady(function (p) {\n      _this.centerRowContainerCon = p.centerRowContainerCtrl;\n    });\n  }; // this is the trick: we create a dummy container and clone all the cells\n  // into the dummy, then check the dummy's width. then destroy the dummy\n  // as we don't need it any more.\n  // drawback: only the cells visible on the screen are considered\n\n\n  AutoWidthCalculator.prototype.getPreferredWidthForColumn = function (column, skipHeader) {\n    var eHeaderCell = this.getHeaderCellForColumn(column); // cell isn't visible\n\n    if (!eHeaderCell) {\n      return -1;\n    }\n\n    var eDummyContainer = document.createElement('span'); // position fixed, so it isn't restricted to the boundaries of the parent\n\n    eDummyContainer.style.position = 'fixed'; // we put the dummy into the body container, so it will inherit all the\n    // css styles that the real cells are inheriting\n\n    var eBodyContainer = this.centerRowContainerCon.getContainerElement();\n    eBodyContainer.appendChild(eDummyContainer); // get all the cells that are currently displayed (this only brings back\n    // rendered cells, rows not rendered due to row visualisation will not be here)\n\n    this.putRowCellsIntoDummyContainer(column, eDummyContainer);\n\n    if (!skipHeader) {\n      // we only consider the lowest level cell, not the group cell. in 99% of the time, this\n      // will be enough. if we consider groups, then it gets too complicated for what it's worth,\n      // as the groups can span columns and this class only considers one column at a time.\n      this.cloneItemIntoDummy(eHeaderCell, eDummyContainer);\n    } // at this point, all the clones are lined up vertically with natural widths. the dummy\n    // container will have a width wide enough just to fit the largest.\n\n\n    var dummyContainerWidth = eDummyContainer.offsetWidth; // we are finished with the dummy container, so get rid of it\n\n    eBodyContainer.removeChild(eDummyContainer); // we add padding as I found sometimes the gui still put '...' after some of the texts. so the\n    // user can configure the grid to add a few more pixels after the calculated width\n\n    var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();\n    return dummyContainerWidth + autoSizePadding;\n  };\n\n  AutoWidthCalculator.prototype.getHeaderCellForColumn = function (column) {\n    var element = null;\n    this.ctrlsService.getHeaderRowContainerCtrls().forEach(function (container) {\n      var res = container.getHtmlElementForColumnHeader(column);\n\n      if (res != null) {\n        element = res;\n      }\n    });\n    return element;\n  };\n\n  AutoWidthCalculator.prototype.putRowCellsIntoDummyContainer = function (column, eDummyContainer) {\n    var _this = this;\n\n    var eCellElements = this.rowRenderer.getAllCellsForColumn(column);\n    eCellElements.forEach(function (eCell) {\n      return _this.cloneItemIntoDummy(eCell, eDummyContainer);\n    });\n  };\n\n  AutoWidthCalculator.prototype.cloneItemIntoDummy = function (eCell, eDummyContainer) {\n    // make a deep clone of the cell\n    var eCellClone = eCell.cloneNode(true); // the original has a fixed width, we remove this to allow the natural width based on content\n\n    eCellClone.style.width = ''; // the original has position = absolute, we need to remove this so it's positioned normally\n\n    eCellClone.style.position = 'static';\n    eCellClone.style.left = ''; // we put the cell into a containing div, as otherwise the cells would just line up\n    // on the same line, standard flow layout, by putting them into divs, they are laid\n    // out one per line\n\n    var eCloneParent = document.createElement('div');\n\n    if (containsClass(eCellClone, 'ag-header-cell')) {\n      addCssClass(eCloneParent, 'ag-header');\n      addCssClass(eCloneParent, 'ag-header-row');\n      eCloneParent.style.position = 'static';\n    } else {\n      addCssClass(eCloneParent, 'ag-row');\n    } // find parent using classes (headers have ag-header-cell, rows have ag-row), and copy classes from it.\n    // if we didn't do this, things like ag-row-level-2 would be missing if present, which sets indents\n    // onto group items.\n\n\n    var pointer = eCell.parentElement;\n\n    while (pointer) {\n      if (pointer.classList.contains('ag-header-row') || pointer.classList.contains('ag-row')) {\n        for (var i = 0; i < pointer.classList.length; i++) {\n          var item = pointer.classList[i]; // we skip ag-row-position-absolute, as this has structural CSS applied that stops the\n          // element from fitting into it's parent, and we need the element to stretch the parent\n          // as we are measuring the parents width\n\n          if (item != 'ag-row-position-absolute') {\n            addCssClass(eCloneParent, item);\n          }\n        }\n\n        break;\n      }\n\n      pointer = pointer.parentElement;\n    } // table-row, so that each cell is on a row. i also tried display='block', but this\n    // didn't work in IE\n\n\n    eCloneParent.style.display = 'table-row'; // the twig on the branch, the branch on the tree, the tree in the hole,\n    // the hole in the bog, the bog in the clone, the clone in the parent,\n    // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....\n\n    eCloneParent.appendChild(eCellClone);\n    eDummyContainer.appendChild(eCloneParent);\n  };\n\n  __decorate([Autowired('rowRenderer')], AutoWidthCalculator.prototype, \"rowRenderer\", void 0);\n\n  __decorate([Autowired('ctrlsService')], AutoWidthCalculator.prototype, \"ctrlsService\", void 0);\n\n  __decorate([Autowired('rowCssClassCalculator')], AutoWidthCalculator.prototype, \"rowCssClassCalculator\", void 0);\n\n  __decorate([PostConstruct], AutoWidthCalculator.prototype, \"postConstruct\", null);\n\n  AutoWidthCalculator = __decorate([Bean('autoWidthCalculator')], AutoWidthCalculator);\n  return AutoWidthCalculator;\n}(BeanStub);\n\nexport { AutoWidthCalculator };","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/node_modules/@ag-grid-community/core/dist/es6/rendering/autoWidthCalculator.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Autowired","Bean","PostConstruct","BeanStub","containsClass","addCssClass","AutoWidthCalculator","_super","apply","postConstruct","_this","ctrlsService","whenReady","centerRowContainerCon","centerRowContainerCtrl","getPreferredWidthForColumn","column","skipHeader","eHeaderCell","getHeaderCellForColumn","eDummyContainer","document","createElement","style","position","eBodyContainer","getContainerElement","appendChild","putRowCellsIntoDummyContainer","cloneItemIntoDummy","dummyContainerWidth","offsetWidth","removeChild","autoSizePadding","gridOptionsWrapper","getAutoSizePadding","element","getHeaderRowContainerCtrls","forEach","container","res","getHtmlElementForColumnHeader","eCellElements","rowRenderer","getAllCellsForColumn","eCell","eCellClone","cloneNode","width","left","eCloneParent","pointer","parentElement","classList","contains","item","display"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.2.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { containsClass, addCssClass } from \"../utils/dom\";\nvar AutoWidthCalculator = /** @class */ (function (_super) {\n    __extends(AutoWidthCalculator, _super);\n    function AutoWidthCalculator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AutoWidthCalculator.prototype.postConstruct = function () {\n        var _this = this;\n        this.ctrlsService.whenReady(function (p) {\n            _this.centerRowContainerCon = p.centerRowContainerCtrl;\n        });\n    };\n    // this is the trick: we create a dummy container and clone all the cells\n    // into the dummy, then check the dummy's width. then destroy the dummy\n    // as we don't need it any more.\n    // drawback: only the cells visible on the screen are considered\n    AutoWidthCalculator.prototype.getPreferredWidthForColumn = function (column, skipHeader) {\n        var eHeaderCell = this.getHeaderCellForColumn(column);\n        // cell isn't visible\n        if (!eHeaderCell) {\n            return -1;\n        }\n        var eDummyContainer = document.createElement('span');\n        // position fixed, so it isn't restricted to the boundaries of the parent\n        eDummyContainer.style.position = 'fixed';\n        // we put the dummy into the body container, so it will inherit all the\n        // css styles that the real cells are inheriting\n        var eBodyContainer = this.centerRowContainerCon.getContainerElement();\n        eBodyContainer.appendChild(eDummyContainer);\n        // get all the cells that are currently displayed (this only brings back\n        // rendered cells, rows not rendered due to row visualisation will not be here)\n        this.putRowCellsIntoDummyContainer(column, eDummyContainer);\n        if (!skipHeader) {\n            // we only consider the lowest level cell, not the group cell. in 99% of the time, this\n            // will be enough. if we consider groups, then it gets too complicated for what it's worth,\n            // as the groups can span columns and this class only considers one column at a time.\n            this.cloneItemIntoDummy(eHeaderCell, eDummyContainer);\n        }\n        // at this point, all the clones are lined up vertically with natural widths. the dummy\n        // container will have a width wide enough just to fit the largest.\n        var dummyContainerWidth = eDummyContainer.offsetWidth;\n        // we are finished with the dummy container, so get rid of it\n        eBodyContainer.removeChild(eDummyContainer);\n        // we add padding as I found sometimes the gui still put '...' after some of the texts. so the\n        // user can configure the grid to add a few more pixels after the calculated width\n        var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();\n        return dummyContainerWidth + autoSizePadding;\n    };\n    AutoWidthCalculator.prototype.getHeaderCellForColumn = function (column) {\n        var element = null;\n        this.ctrlsService.getHeaderRowContainerCtrls().forEach(function (container) {\n            var res = container.getHtmlElementForColumnHeader(column);\n            if (res != null) {\n                element = res;\n            }\n        });\n        return element;\n    };\n    AutoWidthCalculator.prototype.putRowCellsIntoDummyContainer = function (column, eDummyContainer) {\n        var _this = this;\n        var eCellElements = this.rowRenderer.getAllCellsForColumn(column);\n        eCellElements.forEach(function (eCell) { return _this.cloneItemIntoDummy(eCell, eDummyContainer); });\n    };\n    AutoWidthCalculator.prototype.cloneItemIntoDummy = function (eCell, eDummyContainer) {\n        // make a deep clone of the cell\n        var eCellClone = eCell.cloneNode(true);\n        // the original has a fixed width, we remove this to allow the natural width based on content\n        eCellClone.style.width = '';\n        // the original has position = absolute, we need to remove this so it's positioned normally\n        eCellClone.style.position = 'static';\n        eCellClone.style.left = '';\n        // we put the cell into a containing div, as otherwise the cells would just line up\n        // on the same line, standard flow layout, by putting them into divs, they are laid\n        // out one per line\n        var eCloneParent = document.createElement('div');\n        if (containsClass(eCellClone, 'ag-header-cell')) {\n            addCssClass(eCloneParent, 'ag-header');\n            addCssClass(eCloneParent, 'ag-header-row');\n            eCloneParent.style.position = 'static';\n        }\n        else {\n            addCssClass(eCloneParent, 'ag-row');\n        }\n        // find parent using classes (headers have ag-header-cell, rows have ag-row), and copy classes from it.\n        // if we didn't do this, things like ag-row-level-2 would be missing if present, which sets indents\n        // onto group items.\n        var pointer = eCell.parentElement;\n        while (pointer) {\n            if (pointer.classList.contains('ag-header-row') || pointer.classList.contains('ag-row')) {\n                for (var i = 0; i < pointer.classList.length; i++) {\n                    var item = pointer.classList[i];\n                    // we skip ag-row-position-absolute, as this has structural CSS applied that stops the\n                    // element from fitting into it's parent, and we need the element to stretch the parent\n                    // as we are measuring the parents width\n                    if (item != 'ag-row-position-absolute') {\n                        addCssClass(eCloneParent, item);\n                    }\n                }\n                break;\n            }\n            pointer = pointer.parentElement;\n        }\n        // table-row, so that each cell is on a row. i also tried display='block', but this\n        // didn't work in IE\n        eCloneParent.style.display = 'table-row';\n        // the twig on the branch, the branch on the tree, the tree in the hole,\n        // the hole in the bog, the bog in the clone, the clone in the parent,\n        // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....\n        eCloneParent.appendChild(eCellClone);\n        eDummyContainer.appendChild(eCloneParent);\n    };\n    __decorate([\n        Autowired('rowRenderer')\n    ], AutoWidthCalculator.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        Autowired('ctrlsService')\n    ], AutoWidthCalculator.prototype, \"ctrlsService\", void 0);\n    __decorate([\n        Autowired('rowCssClassCalculator')\n    ], AutoWidthCalculator.prototype, \"rowCssClassCalculator\", void 0);\n    __decorate([\n        PostConstruct\n    ], AutoWidthCalculator.prototype, \"postConstruct\", null);\n    AutoWidthCalculator = __decorate([\n        Bean('autoWidthCalculator')\n    ], AutoWidthCalculator);\n    return AutoWidthCalculator;\n}(BeanStub));\nexport { AutoWidthCalculator };\n"]},"metadata":{},"sourceType":"module"}