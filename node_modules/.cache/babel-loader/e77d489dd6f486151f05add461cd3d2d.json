{"ast":null,"code":"var _jsxFileName = \"/Users/rongxuan/Desktop/reactmap/reactmap/src/components/dropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { metadata } from './metadata.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Array of objects containing data\n  var attributes = [];\n\n  for (var i = 0; i < metadata.length; i++) {\n    attributes.push({\n      label: metadata['totalsmoker']['attributename'][i],\n      value: metadata['totalsmoker']['geojson_url'][i]\n    });\n  } // Using state to keep track of selection\n\n\n  var [attribute, setAttribute] = useState(\"Select an attribute\");\n  console.log(attribute); // Using this function to update the state \n  // whenever a new option is selected from the dropdown\n\n  var handleAttributeChange = e => {\n    setAttribute(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Dropdown\",\n    children: [attribute, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleAttributeChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \" Select an attribute\",\n        children: \" -- Select an attribute -- \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }, this), attributes.map(attribute => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: attribute.value,\n        children: [\" \", attribute.label]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 38\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6kzKkGDaXqM1jQvpmj1VKbp8TkE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/rongxuan/Desktop/reactmap/reactmap/src/components/dropdown.js"],"names":["React","useState","metadata","App","attributes","i","length","push","label","value","attribute","setAttribute","console","log","handleAttributeChange","e","target","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,QAAR,QAAuB,eAAvB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,MAAIC,UAAU,GAAG,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAE,CAAZ,EAAeA,CAAC,GAACH,QAAQ,CAACI,MAA1B,EAAiCD,CAAC,EAAlC,EAAsC;AACpCD,IAAAA,UAAU,CAACG,IAAX,CAAiB;AAAEC,MAAAA,KAAK,EAAEN,QAAQ,CAAC,aAAD,CAAR,CAAwB,eAAxB,EAAyCG,CAAzC,CAAT;AAAsDI,MAAAA,KAAK,EAAEP,QAAQ,CAAC,aAAD,CAAR,CAAwB,aAAxB,EAAuCG,CAAvC;AAA7D,KAAjB;AACD,GALY,CAQf;;;AACA,MAAI,CAACK,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,qBAAD,CAAxC;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ,EAVe,CAYf;AACA;;AACA,MAAII,qBAAqB,GAAIC,CAAD,IAAO;AACjCJ,IAAAA,YAAY,CAACI,CAAC,CAACC,MAAF,CAASP,KAAV,CAAZ;AACD,GAFD;;AAIE,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,eACCC,SADD,eAEA;AAAA;AAAA;AAAA;AAAA,YAFA,eAIA;AAAQ,MAAA,QAAQ,EAAEI,qBAAlB;AAAA,8BACE;AAAQ,QAAA,KAAK,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAGGV,UAAU,CAACa,GAAX,CAAgBP,SAAD,iBAAe;AAAQ,QAAA,KAAK,EAAEA,SAAS,CAACD,KAAzB;AAAA,wBAAkCC,SAAS,CAACF,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,cAA9B,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,YAJA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA9BQL,G;;KAAAA,G;AAgCT,eAAeA,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport {metadata} from './metadata.js';\n\nfunction App() {\n  // Array of objects containing data\n  var attributes = []\n  for (var i =0; i<metadata.length;i++) {\n    attributes.push( { label: metadata['totalsmoker']['attributename'][i], value: metadata['totalsmoker']['geojson_url'][i]}); \n  }\n  \n\n// Using state to keep track of selection\nvar [attribute, setAttribute] = useState(\"Select an attribute\")\nconsole.log(attribute)\n\n// Using this function to update the state \n// whenever a new option is selected from the dropdown\nvar handleAttributeChange = (e) => {\n  setAttribute(e.target.value)\n}\n\n  return (\n    <div className=\"Dropdown\">\n    {attribute}\n    <br />\n\n    <select onChange={handleAttributeChange}> \n      <option value=\" Select an attribute\"> -- Select an attribute -- </option>\n      \n      {attributes.map((attribute) => <option value={attribute.value}> {attribute.label}</option>)}\n    </select>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}