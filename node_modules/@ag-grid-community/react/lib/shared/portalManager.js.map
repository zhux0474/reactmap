{"version":3,"sources":["shared/portalManager.ts"],"names":[],"mappings":"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","file":"portalManager.js","sourcesContent":["import { Component, ReactPortal } from \"react\";\nimport { ReactComponent } from \"./reactComponent\";\n\nexport class PortalManager {\n\n    private static MAX_COMPONENT_CREATION_TIME_IN_MS: number = 1000; // a second should be more than enough to instantiate a component\n\n    private parent: Component;\n    private wrappingElement: string;\n    private destroyed = false;\n\n    private portals: ReactPortal[] = [];\n    private hasPendingPortalUpdate = false;\n\n    private maxComponentCreationTimeMs: number;\n\n    constructor(parent: Component, wrappingElement?: string, maxComponentCreationTimeMs?: number) {\n        this.wrappingElement = wrappingElement ? wrappingElement : 'div';\n        this.parent = parent;\n        this.maxComponentCreationTimeMs = maxComponentCreationTimeMs ? maxComponentCreationTimeMs : PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS;\n    }\n\n    public getPortals(): ReactPortal[] {\n        return this.portals;\n    }\n\n    public destroy(): void {\n        this.destroyed = true;\n    }\n\n    public destroyPortal(portal: ReactPortal): void {\n        this.portals = this.portals.filter(curPortal => curPortal !== portal);\n        this.batchUpdate();\n    }\n\n    public getComponentWrappingElement(): string | undefined {\n        return this.wrappingElement;\n    }\n\n    public mountReactPortal(portal: ReactPortal, reactComponent: ReactComponent, resolve: (value: any) => void): void {\n        this.portals = [...this.portals, portal];\n        this.waitForInstance(reactComponent, resolve);\n        this.batchUpdate();\n    }\n\n    public updateReactPortal(oldPortal: ReactPortal, newPortal: ReactPortal): void {\n        this.portals[this.portals.indexOf(oldPortal)] = newPortal;\n        this.batchUpdate();\n    }\n\n    private batchUpdate(): void {\n        if (this.hasPendingPortalUpdate) {\n            return;\n        }\n\n        setTimeout(() => {\n            if (!this.destroyed) { // destroyed?\n                this.parent.forceUpdate(() => {\n                    this.hasPendingPortalUpdate = false;\n                });\n            }\n        });\n\n        this.hasPendingPortalUpdate = true;\n    }\n\n    waitForInstance(reactComponent: ReactComponent, resolve: (value: any) => void, startTime = Date.now()): void {\n        // if the grid has been destroyed in the meantime just resolve\n        if (this.destroyed) {\n            resolve(null);\n            return;\n        }\n\n        if (reactComponent.rendered()) {\n            resolve(reactComponent);\n        } else {\n            if (Date.now() - startTime >= this.maxComponentCreationTimeMs! && !this.hasPendingPortalUpdate) {\n                // last check - we check if this is a null value being rendered - we do this last as using SSR to check the value\n                // can mess up contexts\n                if (reactComponent.isNullValue()) {\n                    resolve(reactComponent);\n                    return;\n                }\n\n                console.error(`AG Grid: React Component '${reactComponent.getReactComponentName()}' not created within ${this.maxComponentCreationTimeMs}ms`);\n                return;\n            }\n\n            window.setTimeout(() => {\n                this.waitForInstance(reactComponent, resolve, startTime);\n            });\n        }\n    }\n}"]}