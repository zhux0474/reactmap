{"version":3,"sources":["reactUi/cellRenderer/detailCellRenderer.tsx"],"names":[],"mappings":"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","file":"detailCellRenderer.js","sourcesContent":["import React, { memo, useState, useMemo, useRef, useEffect, useContext, useCallback, forwardRef, Ref, useImperativeHandle } from \"react\";\nimport { CssClasses } from \"../utils\";\nimport { IDetailCellRenderer, IDetailCellRendererCtrl, IDetailCellRendererParams, GridOptions, GridApi, ColumnApi } from \"@ag-grid-community/core\";\nimport { BeansContext } from \"../beansContext\";\nimport { AgGridReactUi } from \"../agGridReactUi\";\n\nconst DetailCellRenderer = (props: IDetailCellRendererParams, ref: any) => {\n\n    const {ctrlsFactory, context, gridOptionsWrapper, resizeObserverService, clientSideRowModel, serverSideRowModel} = useContext(BeansContext);\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(new CssClasses());\n    const [gridCssClasses, setGridCssClasses] = useState<CssClasses>(new CssClasses());\n    const [detailGridOptions, setDetailGridOptions] = useState<GridOptions>();\n    const [detailRowData, setDetailRowData] = useState<any[]>();\n\n    const ctrlRef = useRef<IDetailCellRendererCtrl>();\n    const eGuiRef = useRef<HTMLDivElement>(null);\n\n    const topClassName = useMemo( ()=> cssClasses.toString() + ' ag-details-row', [cssClasses]);\n    const gridClassName = useMemo( ()=> gridCssClasses.toString() + ' ag-details-grid', [gridCssClasses]);\n\n    if (ref) {\n        useImperativeHandle(ref, ()=> ({\n            refresh() {return ctrlRef.current!.refresh();}\n        }));    \n    }\n    \n    useEffect( ()=> {\n        if (props.template) {\n            console.warn('AG Grid: detailCellRendererParams.template is not supported by React UI - this only works with frameworks that work against String templates. To change the template, please provide your own React Detail Cell Renderer.');\n        }\n    }, []);\n\n    useEffect( ()=> {\n        const compProxy: IDetailCellRenderer = {\n            addOrRemoveCssClass: (name: string, on: boolean) => setCssClasses(prev => prev.setClass(name, on)),\n            addOrRemoveDetailGridCssClass: (name: string, on: boolean) => setGridCssClasses(prev => prev.setClass(name, on)),\n            setDetailGrid: gridOptions => setDetailGridOptions(gridOptions),\n            setRowData: rowData => setDetailRowData(rowData)\n        };\n\n        const ctrl = ctrlsFactory.getInstance('detailCellRenderer') as IDetailCellRendererCtrl;\n        if (!ctrl) { return; } // should never happen, means master/detail module not loaded\n        context.createBean(ctrl);\n\n        ctrl.init(compProxy, props);\n\n        ctrlRef.current = ctrl;\n\n\n\n        let resizeObserverDestroyFunc: ()=>void;\n\n        if (gridOptionsWrapper.isDetailRowAutoHeight()) {\n            const checkRowSizeFunc = () => {\n                const clientHeight = eGuiRef.current!.clientHeight;\n    \n                // if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur\n                // as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means\n                // it's not possible for have 0 as auto-height, however this is an improbable use case, as even an\n                // empty detail grid would still have some styling around it giving at least a few pixels.\n                if (clientHeight != null && clientHeight > 0) {\n                    // we do the update in a timeout, to make sure we are not calling from inside the grid\n                    // doing another update\n                    const updateRowHeightFunc = () => {\n                        props.node.setRowHeight(clientHeight);\n                        if (clientSideRowModel) {\n                            clientSideRowModel.onRowHeightChanged();\n                        } else if (serverSideRowModel) {\n                            serverSideRowModel.onRowHeightChanged();\n                        }\n                    };\n                    setTimeout(updateRowHeightFunc, 0);\n                }\n            };\n    \n            resizeObserverDestroyFunc = resizeObserverService.observeResize(eGuiRef.current!, checkRowSizeFunc);\n            checkRowSizeFunc();\n        }\n\n\n\n\n        \n        return () => {\n            context.destroyBean(ctrl);\n        };\n    }, []);\n\n    const setGridApi = useCallback( (api: GridApi, columnApi: ColumnApi) => {\n        ctrlRef.current!.registerDetailWithMaster(api, columnApi)\n    }, []);\n\n    return (\n        <div className={topClassName} ref={eGuiRef}>\n            { \n                detailGridOptions && \n                <AgGridReactUi className={gridClassName} {...detailGridOptions} rowData={detailRowData} setGridApi={ setGridApi }></AgGridReactUi> \n            }\n        </div>\n    );\n};\n\nexport default forwardRef(DetailCellRenderer);\n"]}