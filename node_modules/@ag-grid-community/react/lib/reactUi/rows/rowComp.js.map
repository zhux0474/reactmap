{"version":3,"sources":["reactUi/rows/rowComp.tsx"],"names":[],"mappings":"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","file":"rowComp.js","sourcesContent":["import React, { useEffect, useRef, useState, useMemo, memo, useContext } from 'react';\nimport { CellCtrl, IRowComp, RowCtrl, UserCompDetails, _, ICellRenderer } from '@ag-grid-community/core';\nimport { showJsComp } from '../jsComp';\nimport { CssClasses, isComponentStateless } from '../utils';\nimport { BeansContext } from '../beansContext';\nimport CellComp from '../cells/cellComp';\n\ninterface CellCtrls {\n    list: CellCtrl[],\n    instanceIdMap: Map<string, CellCtrl>\n}\n\nconst maintainOrderOnColumns = (prev: CellCtrls, next: CellCtrl[], domOrder: boolean): CellCtrls => {\n    if (domOrder) {\n        const res: CellCtrls = { list: next, instanceIdMap: new Map() };\n        next.forEach(c => res.instanceIdMap.set(c.getInstanceId(), c));\n\n        return res;\n    }\n\n    // if dom order not important, we don't want to change the order\n    // of the elements in the dom, as this would break transition styles\n    const oldCellCtrls: CellCtrl[] = [];\n    const newCellCtrls: CellCtrl[] = [];\n    const newInstanceIdMap: Map<string, CellCtrl> = new Map();\n    const tempMap: Map<string, CellCtrl> = new Map();\n\n    next.forEach(c => tempMap.set(c.getInstanceId(), c));\n\n    prev.list.forEach(c => {\n        const instanceId = c.getInstanceId();\n        if (tempMap.has(instanceId)) {\n            oldCellCtrls.push(c);\n            newInstanceIdMap.set(instanceId, c);\n        }\n    });\n\n    next.forEach(c => {\n        const instanceId = c.getInstanceId();\n        if (!prev.instanceIdMap.has(instanceId)) {\n            newCellCtrls.push(c);\n            newInstanceIdMap.set(instanceId, c);\n        }\n    });\n\n    const res: CellCtrls = {\n        list: [...oldCellCtrls, ...newCellCtrls],\n        instanceIdMap: newInstanceIdMap\n    };\n\n    return res;\n}\n\nconst RowComp = (params: {rowCtrl: RowCtrl, pinned: string | null}) => {\n\n    const {context} = useContext(BeansContext);\n\n    const { rowCtrl, pinned } = params;\n\n    const [height, setHeight] = useState<string>();\n    const [top, setTop] = useState<string | undefined>(rowCtrl.getInitialRowTop());\n    const [transform, setTransform] = useState<string | undefined>(rowCtrl.getInitialTransform());\n    const [cssClasses, setCssClasses] = useState<CssClasses>(new CssClasses());\n    const [rowIndex, setRowIndex] = useState<string>();\n    const [rowId, setRowId] = useState<string>();\n    const [role, setRole] = useState<string>();\n    const [rowBusinessKey, setRowBusinessKey] = useState<string>();\n    const [tabIndex, setTabIndex] = useState<number>();\n    const [ariaRowIndex, setAriaRowIndex] = useState<number>();\n    const [ariaExpanded, setAriaExpanded] = useState<boolean>();\n    const [ariaLabel, setAriaLabel] = useState<string>();\n    const [ariaSelected, setAriaSelected] = useState<boolean>();\n    const [userStyles, setUserStyles] = useState<any>();\n    const [cellCtrls, setCellCtrls] = useState<CellCtrls>({ list: [], instanceIdMap: new Map() });\n    const [fullWidthCompDetails, setFullWidthCompDetails] = useState<UserCompDetails>();\n    const [domOrder, setDomOrder] = useState<boolean>(false);\n    const [display, setDisplay] = useState<string>();\n\n    const eGui = useRef<HTMLDivElement>(null);\n    const fullWidthCompRef = useRef<ICellRenderer>();\n\n    useEffect(() => {\n        const compProxy: IRowComp = {\n            setDisplay: value => setDisplay(value),\n            setDomOrder: domOrder => setDomOrder(domOrder),\n            setHeight: value => setHeight(value),\n            setTop: value => setTop(value),\n            setTransform: value => setTransform(value),\n            addOrRemoveCssClass: (name, on) => setCssClasses( prev => prev.setClass(name, on) ),\n            setRowIndex: value => setRowIndex(value),\n            setAriaRowIndex: value => setAriaRowIndex(value),\n            setAriaExpanded: value => setAriaExpanded(value),\n            setAriaLabel: value => setAriaLabel(value),\n            setRowId: value => setRowId(value),\n            setRowBusinessKey: value => setRowBusinessKey(value),\n            setTabIndex: value => setTabIndex(value),\n            setUserStyles: styles => setUserStyles(styles),\n            setAriaSelected: value => setAriaSelected(value),\n            setRole: value => setRole(value),\n            // if we don't maintain the order, then cols will be ripped out and into the dom\n            // when cols reordered, which would stop the CSS transitions from working\n            setCellCtrls: next => setCellCtrls(prev => maintainOrderOnColumns(prev, next, domOrder)),\n            showFullWidth: compDetails => setFullWidthCompDetails(compDetails),\n            getFullWidthCellRenderer: ()=> fullWidthCompRef.current,\n        };\n        rowCtrl.setComp(compProxy, eGui.current!, pinned);\n    }, []);\n\n    useEffect(() => {\n        return showJsComp(fullWidthCompDetails, context, eGui.current!, fullWidthCompRef);\n    }, [fullWidthCompDetails]);\n\n    const rowStyles = useMemo(() => {\n        const res = {\n            height,\n            top,\n            transform,\n            display\n        };\n        _.assign(res, userStyles);\n        return res;\n    }, [height, top, transform, userStyles, display]);\n\n    const className = useMemo( ()=> cssClasses.toString(), [cssClasses]);\n\n    const showFullWidthFramework = fullWidthCompDetails && fullWidthCompDetails.componentFromFramework;\n    const showCells = cellCtrls != null;\n    \n    const reactFullWidthCellRendererStateless = useMemo( ()=> {\n        const res = fullWidthCompDetails \n                    && fullWidthCompDetails.componentFromFramework \n                    && isComponentStateless(fullWidthCompDetails.componentClass);\n        return !!res;\n    }, [fullWidthCompDetails]);\n\n    const showCellsJsx = () => cellCtrls.list.map(cellCtrl =>\n        (\n            <CellComp cellCtrl={ cellCtrl }\n                        editingRow={ rowCtrl.isEditing() } printLayout={ rowCtrl.isPrintLayout() }\n                        key={ cellCtrl.getInstanceId() }/>\n        ));\n\n    const showFullWidthFrameworkJsx = () => {\n        const FullWidthComp = fullWidthCompDetails!.componentClass;\n        return (\n            <>\n                {\n                    reactFullWidthCellRendererStateless \n                    && <FullWidthComp  { ...fullWidthCompDetails!.params } />\n                }\n                {\n                    !reactFullWidthCellRendererStateless \n                    && <FullWidthComp  { ...fullWidthCompDetails!.params } ref={ fullWidthCompRef } />\n                }\n            </>\n        );\n    };\n\n    return (\n        <div ref={ eGui } role={ role } className={ className } style={ rowStyles } row-index={ rowIndex }\n             aria-rowindex={ ariaRowIndex } aria-expanded={ ariaExpanded } aria-label={ ariaLabel }\n             aria-selected={ ariaSelected } row-id={ rowId } row-business-key={ rowBusinessKey } tabIndex={ tabIndex }>\n            {\n                showCells && showCellsJsx()\n            }\n            {\n                showFullWidthFramework && showFullWidthFrameworkJsx() \n            }\n        </div>\n    );\n};\n\nexport default memo(RowComp);\n"]}