{"version":3,"sources":["reactUi/cells/showJsRenderer.tsx"],"names":[],"mappings":"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","file":"showJsRenderer.js","sourcesContent":["import { ICellRendererComp } from '@ag-grid-community/core';\nimport { MutableRefObject, useCallback, useContext, useEffect } from 'react';\nimport { BeansContext } from '../beansContext';\nimport { RenderDetails } from './cellComp';\n\nconst useJsCellRenderer = (\n    showDetails: RenderDetails | undefined,\n    showTools: boolean,\n    toolsValueSpan: HTMLElement | undefined,\n    jsCellRendererRef: MutableRefObject<ICellRendererComp|undefined>,\n    eGui: MutableRefObject<any>) => {\n\n        const {context, userComponentFactory} = useContext(BeansContext);\n\n        const destroyCellRenderer = useCallback(() => {\n            const comp = jsCellRendererRef.current;\n            if (!comp) { return; }\n\n            const compGui = comp.getGui();\n\n            if (compGui && compGui.parentElement) {\n                compGui.parentElement.removeChild(compGui);\n            }\n\n            context.destroyBean(comp);\n            jsCellRendererRef.current = undefined;\n        }, []);\n\n        // create or refresh JS cell renderer\n        useEffect(() => {\n            const showValue = showDetails != null;\n            const jsCompDetails = showDetails && showDetails.compDetails && !showDetails.compDetails.componentFromFramework;\n            const waitingForToolsSetup = showTools && toolsValueSpan == null;\n            const showComp = showValue && jsCompDetails && !waitingForToolsSetup;\n\n            // if not showing comp, destroy any existing one and return\n            if (!showComp) {\n                destroyCellRenderer();\n                return;\n            }\n\n            const compDetails = showDetails!.compDetails;\n\n            if (jsCellRendererRef.current) {\n                // attempt refresh if refresh method exists\n                const comp = jsCellRendererRef.current;\n                const attemptRefresh = comp.refresh != null && showDetails!.force == false;\n                const refreshResult = attemptRefresh ? comp.refresh(compDetails!.params) : false;\n                const refreshWorked = refreshResult === true || refreshResult === undefined;\n\n                // if refresh worked, nothing else to do\n                if (refreshWorked) { return; }\n\n                // if refresh didn't work, we destroy it and continue, so new cell renderer created below\n                destroyCellRenderer();\n            }\n\n            const promise = compDetails!.newAgStackInstance();;\n            if (!promise) { return; }\n\n            const comp = promise.resolveNow(null, x => x); // js comps are never async\n            if (!comp) { return; }\n\n            const compGui = comp.getGui();\n            const parent = showTools ? toolsValueSpan! : eGui.current!;\n            parent.appendChild(compGui);\n\n            jsCellRendererRef.current = comp;\n\n        }, [showDetails, showTools, toolsValueSpan]);\n\n        // this effect makes sure destroyCellRenderer gets called when the\n        // component is destroyed. as the other effect only updates when there\n        // is a change in state\n        useEffect(() => {\n            return destroyCellRenderer;\n        }, []);\n}\n\nexport default useJsCellRenderer;\n"]}