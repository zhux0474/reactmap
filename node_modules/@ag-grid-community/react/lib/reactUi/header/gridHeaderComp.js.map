{"version":3,"sources":["reactUi/header/gridHeaderComp.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,6CAAsF;AACtF,gDAA+C;AAC/C,gDAEiC;AACjC,kCAAsC;AACtC,oFAA8D;AAG9D,IAAM,cAAc,GAAG;IAEb,IAAA,+CAAoE,EAAnE,kBAAU,EAAE,qBAAuD,CAAC;IACrE,IAAA,uBAAwC,EAAvC,cAAM,EAAE,iBAA+B,CAAC;IAExC,IAAA,iEAAO,CAA6B;IAC3C,IAAM,IAAI,GAAG,cAAM,CAAiB,IAAI,CAAC,CAAC;IAE1C,iBAAS,CAAC;QAEN,IAAM,SAAS,GAAoB;YAC/B,mBAAmB,EAAE,UAAC,IAAI,EAAE,EAAE,IAAK,OAAA,aAAa,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,EAAvB,CAAuB,CAAC,EAA9C,CAA8C;YACjF,qBAAqB,EAAE,UAAA,MAAM,IAAI,OAAA,SAAS,CAAC,MAAM,CAAC,EAAjB,CAAiB;SACrD,CAAC;QAEF,IAAM,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,qBAAc,EAAE,CAAC,CAAC;QACtD,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,OAAQ,EAAE,IAAI,CAAC,OAAQ,CAAC,CAAC;QAEtD,OAAO;YACH,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC,CAAC;IAEN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,SAAS,GAAG,eAAO,CAAE;QACvB,IAAI,GAAG,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;QAChC,OAAO,YAAY,GAAG,GAAG,CAAC;IAC9B,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,IAAM,KAAK,GAAG,eAAO,CAAE,cAAK,OAAA,CAAC;QACzB,MAAM,EAAE,MAAM;QACd,SAAS,EAAE,MAAM;KACpB,CAAC,EAH0B,CAG1B,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAEd,OAAO,CACH,uCAAK,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAC,cAAc,EAAC,YAAY,EAAC,IAAI;QACrF,8BAAC,gCAAsB,IAAC,MAAM,EAAE,gBAAS,CAAC,WAAW,GAAG;QACxD,8BAAC,gCAAsB,IAAC,MAAM,EAAE,IAAI,GAAG;QACvC,8BAAC,gCAAsB,IAAC,MAAM,EAAE,gBAAS,CAAC,YAAY,GAAG,CACvD,CACT,CAAC;AACN,CAAC,CAAC;AAEF,kBAAe,YAAI,CAAC,cAAc,CAAC,CAAC","file":"gridHeaderComp.js","sourcesContent":["import React, { memo, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { BeansContext } from '../beansContext';\nimport {\n    IGridHeaderComp, GridHeaderCtrl, Constants\n} from '@ag-grid-community/core';\nimport { CssClasses } from '../utils';\nimport HeaderRowContainerComp from './headerRowContainerComp';\n\n\nconst GridHeaderComp = () => {\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(new CssClasses());\n    const [height, setHeight] = useState<string>();\n\n    const {context} = useContext(BeansContext);\n    const eGui = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n\n        const compProxy: IGridHeaderComp = {\n            addOrRemoveCssClass: (name, on) => setCssClasses(prev => prev.setClass(name, on)),\n            setHeightAndMinHeight: height => setHeight(height)\n        };\n\n        const ctrl = context.createBean(new GridHeaderCtrl());\n        ctrl.setComp(compProxy, eGui.current!, eGui.current!);\n\n        return () => {\n            context.destroyBean(ctrl);\n        };\n\n    }, []);\n\n    const className = useMemo( ()=> {\n        let res = cssClasses.toString();\n        return 'ag-header ' + res;\n    }, [cssClasses]);\n\n    const style = useMemo( ()=> ({\n        height: height,\n        minHeight: height\n    }), [height]);\n\n    return (\n        <div ref={eGui} className={className} style={style} role=\"presentation\" unselectable=\"on\">\n            <HeaderRowContainerComp pinned={Constants.PINNED_LEFT}/>\n            <HeaderRowContainerComp pinned={null}/>\n            <HeaderRowContainerComp pinned={Constants.PINNED_RIGHT}/>\n        </div>\n    );\n};\n\nexport default memo(GridHeaderComp);\n"]}