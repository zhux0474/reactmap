{"version":3,"sources":["reactUi/utils.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAa,QAAA,WAAW,GAAG;IAAC,cAAsC;SAAtC,UAAsC,EAAtC,qBAAsC,EAAtC,IAAsC;QAAtC,yBAAsC;;IAC9D,IAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAE,UAAA,CAAC,IAAI,OAAA,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE,EAArB,CAAqB,CAAC,CAAC;IAE1D,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC9B,CAAC,CAAA;AAED;IAAA;QAEY,eAAU,GAA8B,EAAE,CAAC;IAmBvD,CAAC;IAjBU,6BAAQ,GAAf,UAAgB,SAAiB,EAAE,EAAW;QAC1C,gEAAgE;QAChE,sDAAsD;QACtD,IAAM,iBAAiB,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QAC7D,IAAI,iBAAiB,EAAE;YAAE,OAAO,IAAI,CAAC;SAAE;QAEvC,IAAM,GAAG,GAAG,IAAI,UAAU,EAAE,CAAC;QAC7B,GAAG,CAAC,UAAU,gBAAO,IAAI,CAAC,UAAU,CAAC,CAAC;QACtC,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;QAC/B,OAAO,GAAG,CAAC;IACf,CAAC;IAEM,6BAAQ,GAAf;QAAA,iBAGC;QAFG,IAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAApB,CAAoB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACvF,OAAO,GAAG,CAAC;IACf,CAAC;IAEL,iBAAC;AAAD,CArBA,AAqBC,IAAA;AArBY,gCAAU;AAuBV,QAAA,oBAAoB,GAAG,UAAC,SAAc;IAC/C,IAAM,SAAS,GAAG,cAAM,OAAA,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAA1C,CAA0C,CAAC;IACnE,IAAM,WAAW,GAAG,cAAM,OAAA,SAAS,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,EAA/C,CAA+C,CAAC;IAE1E,OAAO,CACC,OAAO,SAAS,KAAK,UAAU,IAAI,CAAC,CAAC,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC,gBAAgB,CAAC,CACpG,IAAI,CAAC,OAAO,SAAS,KAAK,QAAQ,IAAI,SAAS,CAAC,QAAQ,KAAK,WAAW,EAAE,CAAC,CAAC;AACrF,CAAC,CAAA","file":"utils.js","sourcesContent":["export const classesList = (...list: (string | null | undefined)[]): string => {\n    const filtered = list.filter( s => s != null && s !== '');\n\n    return filtered.join(' ');\n}\n\nexport class CssClasses {\n\n    private classesMap: {[name: string]: boolean} = {};\n\n    public setClass(className: string, on: boolean): CssClasses {\n        // important to not make a copy if nothing has changed, so react\n        // won't trigger a render cycle on new object instance\n        const nothingHasChanged = !!this.classesMap[className] == on;\n        if (nothingHasChanged) { return this; }\n\n        const res = new CssClasses();\n        res.classesMap = {...this.classesMap};\n        res.classesMap[className] = on;\n        return res;\n    }\n\n    public toString(): string {\n        const res = Object.keys(this.classesMap).filter(key => this.classesMap[key]).join(' ');\n        return res;\n    }\n\n}\n\nexport const isComponentStateless = (Component: any) => {\n    const hasSymbol = () => typeof Symbol === 'function' && Symbol.for;\n    const getMemoType = () => hasSymbol() ? Symbol.for('react.memo') : 0xead3;\n\n    return (\n            typeof Component === 'function' && !(Component.prototype && Component.prototype.isReactComponent)\n        ) || (typeof Component === 'object' && Component.$$typeof === getMemoType());\n}"]}