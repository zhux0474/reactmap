{"version":3,"sources":["../../src/ts/rendering/cell/cellKeyboardListenerFeature.ts"],"names":[],"mappings":"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","file":"cellKeyboardListenerFeature.js","sourcesContent":["import { BeanStub } from \"../../context/beanStub\";\nimport { CellCtrl, ICellComp } from \"./cellCtrl\";\nimport { Beans } from \"../beans\";\nimport { Column } from \"../../entities/column\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { KeyCode } from \"../../constants/keyCode\";\nimport { RowCtrl } from \"../row/rowCtrl\";\nimport { getTarget } from \"../../utils/event\";\nimport { isEventFromPrintableCharacter } from \"../../utils/keyboard\";\n\nexport class CellKeyboardListenerFeature extends BeanStub {\n\n    private readonly cellCtrl: CellCtrl;\n    private readonly beans: Beans;\n    private readonly column: Column;\n    private readonly rowNode: RowNode;\n    private readonly rowCtrl: RowCtrl;\n\n    private eGui: HTMLElement;\n\n    constructor(ctrl: CellCtrl, beans: Beans, column: Column, rowNode: RowNode, scope: any, rowCtrl: RowCtrl) {\n        super();\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n        this.column = column;\n        this.rowNode = rowNode;\n        this.rowCtrl = rowCtrl;\n    }\n\n    public setComp(eGui: HTMLElement): void {\n        this.eGui = eGui;\n    }\n\n    public onKeyDown(event: KeyboardEvent): void {\n        const key = event.which || event.keyCode;\n\n        switch (key) {\n            case KeyCode.ENTER:\n                this.onEnterKeyDown(event);\n                break;\n            case KeyCode.F2:\n                this.onF2KeyDown();\n                break;\n            case KeyCode.ESCAPE:\n                this.onEscapeKeyDown();\n                break;\n            case KeyCode.TAB:\n                this.onTabKeyDown(event);\n                break;\n            case KeyCode.BACKSPACE:\n            case KeyCode.DELETE:\n                this.onBackspaceOrDeleteKeyPressed(key);\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n            case KeyCode.RIGHT:\n            case KeyCode.LEFT:\n                this.onNavigationKeyPressed(event, key);\n                break;\n        }\n    }\n\n    private onNavigationKeyPressed(event: KeyboardEvent, key: number): void {\n        if (this.cellCtrl.isEditing()) { return; }\n\n        if (event.shiftKey && this.cellCtrl.isRangeSelectionEnabled()) {\n            this.onShiftRangeSelect(key);\n        } else {\n            this.beans.navigationService.navigateToNextCell(event, key, this.cellCtrl.getCellPosition(), true);\n        }\n\n        // if we don't prevent default, the grid will scroll with the navigation keys\n        event.preventDefault();\n    }\n\n    private onShiftRangeSelect(key: number): void {\n        if (!this.beans.rangeService) { return; }\n\n        const endCell = this.beans.rangeService.extendLatestRangeInDirection(key);\n\n        if (endCell) {\n            this.beans.navigationService.ensureCellVisible(endCell);\n        }\n    }\n\n    private onTabKeyDown(event: KeyboardEvent): void {\n        this.beans.navigationService.onTabKeyDown(this.cellCtrl, event);\n    }\n\n    private onBackspaceOrDeleteKeyPressed(key: number): void {\n        if (!this.cellCtrl.isEditing()) {\n            this.cellCtrl.startRowOrCellEdit(key);\n        }\n    }\n\n    private onEnterKeyDown(e: KeyboardEvent): void {\n        if (this.cellCtrl.isEditing() || this.rowCtrl.isEditing()) {\n            this.cellCtrl.stopEditingAndFocus();\n        } else {\n            if (this.beans.gridOptionsWrapper.isEnterMovesDown()) {\n                this.beans.navigationService.navigateToNextCell(null, KeyCode.DOWN, this.cellCtrl.getCellPosition(), false);\n            } else {\n                this.cellCtrl.startRowOrCellEdit(KeyCode.ENTER);\n                if (this.cellCtrl.isEditing()) {\n                    // if we started editing, then we need to prevent default, otherwise the Enter action can get\n                    // applied to the cell editor. this happened, for example, with largeTextCellEditor where not\n                    // preventing default results in a 'new line' character getting inserted in the text area\n                    // when the editing was started\n                    e.preventDefault();\n                }\n            }\n        }\n    }\n\n    private onF2KeyDown(): void {\n        if (!this.cellCtrl.isEditing()) {\n            this.cellCtrl.startRowOrCellEdit(KeyCode.F2);\n        }\n    }\n\n    private onEscapeKeyDown(): void {\n        if (this.cellCtrl.isEditing()) {\n            this.cellCtrl.stopRowOrCellEdit(true);\n            this.cellCtrl.focusCell(true);\n        }\n    }\n\n    public onKeyPress(event: KeyboardEvent): void {\n        // check this, in case focus is on a (for example) a text field inside the cell,\n        // in which cse we should not be listening for these key pressed\n        const eventTarget = getTarget(event);\n        const eventOnChildComponent = eventTarget !== this.eGui;\n\n        if (eventOnChildComponent || this.cellCtrl.isEditing()) { return; }\n\n        const pressedChar = String.fromCharCode(event.charCode);\n        if (pressedChar === ' ') {\n            this.onSpaceKeyPressed(event);\n        } else if (isEventFromPrintableCharacter(event)) {\n            this.cellCtrl.startRowOrCellEdit(null, pressedChar);\n            // if we don't prevent default, then the keypress also gets applied to the text field\n            // (at least when doing the default editor), but we need to allow the editor to decide\n            // what it wants to do. we only do this IF editing was started - otherwise it messes\n            // up when the use is not doing editing, but using rendering with text fields in cellRenderer\n            // (as it would block the the user from typing into text fields).\n            event.preventDefault();\n        }\n    }\n\n    private onSpaceKeyPressed(event: KeyboardEvent): void {\n        const { gridOptionsWrapper } = this.beans;\n\n        if (!this.cellCtrl.isEditing() && gridOptionsWrapper.isRowSelection()) {\n            const currentSelection = this.rowNode.isSelected();\n            const newSelection = !currentSelection;\n            if (newSelection || !gridOptionsWrapper.isSuppressRowDeselection()) {\n                const groupSelectsFiltered = this.beans.gridOptionsWrapper.isGroupSelectsFiltered();\n                const updatedCount = this.rowNode.setSelectedParams({\n                    newValue: newSelection,\n                    rangeSelect: event.shiftKey,\n                    groupSelectsFiltered: groupSelectsFiltered\n                });\n                if (currentSelection === undefined && updatedCount === 0) {\n                    this.rowNode.setSelectedParams({\n                        newValue: false,\n                        rangeSelect: event.shiftKey,\n                        groupSelectsFiltered: groupSelectsFiltered\n                    });\n                }\n            }\n        }\n\n        // prevent default as space key, by default, moves browser scroll down\n        event.preventDefault();\n    }\n\n    public destroy(): void {\n    }\n\n}"]}