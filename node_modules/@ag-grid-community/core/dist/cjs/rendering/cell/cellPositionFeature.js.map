{"version":3,"sources":["../../src/ts/rendering/cell/cellPositionFeature.ts"],"names":[],"mappings":"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","file":"cellPositionFeature.js","sourcesContent":["import { CellCtrl, ICellComp } from \"./cellCtrl\";\nimport { Column } from \"../../entities/column\";\nimport { areEqual, last } from \"../../utils/array\";\nimport { Events } from \"../../eventKeys\";\nimport { missing } from \"../../utils/generic\";\nimport { Constants } from \"../../constants/constants\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Beans } from \"../beans\";\nimport { RowNode } from \"../../entities/rowNode\";\n\n/**\n * Takes care of:\n *  #) Cell Width (including when doing cell spanning, which makes width cover many columns)\n *  #) Cell Height (when doing row span, otherwise we don't touch the height as it's just row height)\n *  #) Cell Left (the horizontal positioning of the cell, the vertical positioning is on the row)\n */\nexport class CellPositionFeature extends BeanStub {\n\n    private cellCtrl: CellCtrl;\n    private cellComp: ICellComp;\n\n    private readonly column: Column;\n    private readonly rowNode: RowNode;\n\n    private colsSpanning: Column[];\n    private rowSpan: number;\n\n    private beans: Beans;\n\n    constructor(ctrl: CellCtrl, beans: Beans) {\n        super();\n\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n\n        this.column = ctrl.getColumn();\n        this.rowNode = ctrl.getRowNode();\n\n        this.setupColSpan();\n        this.setupRowSpan();\n    }\n\n    private setupRowSpan(): void {\n        this.rowSpan = this.column.getRowSpan(this.rowNode);\n    }\n\n    public setComp(comp: ICellComp): void {\n        this.cellComp = comp;\n        this.onLeftChanged();\n        this.onWidthChanged();\n        this.applyRowSpan();\n    }\n\n    private onDisplayColumnsChanged(): void {\n        const colsSpanning: Column[] = this.getColSpanningList();\n\n        if (!areEqual(this.colsSpanning, colsSpanning)) {\n            this.colsSpanning = colsSpanning;\n            this.onWidthChanged();\n            this.onLeftChanged(); // left changes when doing RTL\n        }\n    }\n\n    private setupColSpan(): void {\n        // if no col span is active, then we don't set it up, as it would be wasteful of CPU\n        if (this.column.getColDef().colSpan == null) { return; }\n\n        this.colsSpanning = this.getColSpanningList();\n\n        // because we are col spanning, a reorder of the cols can change what cols we are spanning over\n        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));\n        // because we are spanning over multiple cols, we check for width any time any cols width changes.\n        // this is expensive - really we should be explicitly checking only the cols we are spanning over\n        // instead of every col, however it would be tricky code to track the cols we are spanning over, so\n        // because hardly anyone will be using colSpan, am favouring this easier way for more maintainable code.\n        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));\n    }\n\n    public onWidthChanged(): void {\n        if (!this.cellComp) { return; }\n        const width = this.getCellWidth();\n        this.cellComp.setWidth(`${width}px`);\n    }\n\n    private getCellWidth(): number {\n        if (!this.colsSpanning) {\n            return this.column.getActualWidth();\n        }\n\n        return this.colsSpanning.reduce((width, col) => width + col.getActualWidth(), 0);\n    }\n\n    public getColSpanningList(): Column[] {\n        const colSpan = this.column.getColSpan(this.rowNode);\n        const colsSpanning: Column[] = [];\n\n        // if just one col, the col span is just the column we are in\n        if (colSpan === 1) {\n            colsSpanning.push(this.column);\n        } else {\n            let pointer: Column | null = this.column;\n            const pinned = this.column.getPinned();\n            for (let i = 0; pointer && i < colSpan; i++) {\n                colsSpanning.push(pointer);\n                pointer = this.beans.columnModel.getDisplayedColAfter(pointer);\n                if (!pointer || missing(pointer)) {\n                    break;\n                }\n                // we do not allow col spanning to span outside of pinned areas\n                if (pinned !== pointer.getPinned()) {\n                    break;\n                }\n            }\n        }\n\n        return colsSpanning;\n    }\n\n    public onLeftChanged(): void {\n        if (!this.cellComp) { return; }\n        const left = this.modifyLeftForPrintLayout(this.getCellLeft());\n        this.cellComp.setLeft(left + 'px');\n    }\n\n    private getCellLeft(): number | null {\n        let mostLeftCol: Column;\n\n        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {\n            mostLeftCol = last(this.colsSpanning);\n        } else {\n            mostLeftCol = this.column;\n        }\n\n        return mostLeftCol.getLeft();\n    }\n\n    private modifyLeftForPrintLayout(leftPosition: number | null): number | null {\n        if (!this.cellCtrl.isPrintLayout() || this.column.getPinned() === Constants.PINNED_LEFT) {\n            return leftPosition;\n        }\n\n        const leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();\n\n        if (this.column.getPinned() === Constants.PINNED_RIGHT) {\n            const bodyWidth = this.beans.columnModel.getBodyContainerWidth();\n            return leftWidth + bodyWidth + (leftPosition || 0);\n        }\n\n        // is in body\n        return leftWidth + (leftPosition || 0);\n    }\n\n    private applyRowSpan(): void {\n\n        if (this.rowSpan === 1) { return; }\n\n        const singleRowHeight = this.beans.gridOptionsWrapper.getRowHeightAsNumber();\n        const totalRowHeight = singleRowHeight * this.rowSpan;\n\n        this.cellComp.setHeight(`${totalRowHeight}px`);\n        this.cellComp.setZIndex('1');\n    }\n\n    // overriding to make public, as we don't dispose this bean via context\n    public destroy() {\n        super.destroy();\n    }\n}"]}