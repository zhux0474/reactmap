{"version":3,"sources":["../../src/ts/rendering/row/rowDragComp.ts"],"names":[],"mappings":"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","file":"rowDragComp.js","sourcesContent":["import { Component } from \"../../widgets/component\";\nimport { Autowired, PostConstruct, PreDestroy } from \"../../context/context\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { DragItem, DragSource, DragSourceType } from \"../../dragAndDrop/dragAndDropService\";\nimport { Events } from \"../../eventKeys\";\nimport { Beans } from \"../beans\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Column } from \"../../entities/column\";\nimport { createIconNoSpan } from \"../../utils/icon\";\nimport { doOnce, isFunction } from \"../../utils/function\";\n\nexport interface IRowDragItem extends DragItem {\n    /** The default text that would be applied to this Drag Element */\n    defaultTextValue: string;\n}\n\nexport class RowDragComp extends Component {\n\n    private dragSource: DragSource | null = null;\n\n    @Autowired('beans') private readonly beans: Beans;\n\n    constructor(\n        private readonly cellValueFn: () => string,\n        private readonly rowNode: RowNode,\n        private readonly column?: Column,\n        private readonly customGui?: HTMLElement,\n        private readonly dragStartPixels?: number,\n        private readonly suppressVisibilityChange?: boolean\n    ) { super(); }\n\n    public isCustomGui(): boolean {\n        return this.customGui != null;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (!this.customGui) {\n            this.setTemplate(/* html */ `<div class=\"ag-drag-handle ag-row-drag\" aria-hidden=\"true\"></div>`);\n            this.getGui().appendChild(createIconNoSpan('rowDrag', this.beans.gridOptionsWrapper, null)!);\n            this.addDragSource();\n        } else {\n            this.setDragElement(this.customGui, this.dragStartPixels);\n        }\n\n        this.checkCompatibility();\n\n        if (!this.suppressVisibilityChange) {\n            const strategy = this.beans.gridOptionsWrapper.isRowDragManaged() ?\n                new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) :\n                new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);\n\n            this.createManagedBean(strategy, this.beans.context);\n        }\n    }\n\n    public setDragElement(dragElement: HTMLElement, dragStartPixels?: number) {\n        this.setTemplateFromElement(dragElement);\n        this.addDragSource(dragStartPixels);\n    }\n\n    private getSelectedCount(): number {\n        const isRowDragMultiRow = this.beans.gridOptionsWrapper.isRowDragMultiRow();\n        if (!isRowDragMultiRow) { return 1; }\n\n        const selection = this.beans.selectionService.getSelectedNodes();\n\n        return selection.indexOf(this.rowNode) !== -1 ? selection.length : 1;\n    }\n\n    // returns true if all compatibility items work out\n    private checkCompatibility(): void {\n        const managed = this.beans.gridOptionsWrapper.isRowDragManaged();\n        const treeData = this.beans.gridOptionsWrapper.isTreeData();\n\n        if (treeData && managed) {\n            doOnce(() =>\n                console.warn('AG Grid: If using row drag with tree data, you cannot have rowDragManaged=true'),\n                'RowDragComp.managedAndTreeData'\n            );\n        }\n    }\n\n    private addDragSource(dragStartPixels: number = 4): void {\n        // if this is changing the drag element, delete the previous dragSource\n        if (this.dragSource) { this.removeDragSource(); }\n\n        const dragItem: IRowDragItem = {\n            rowNode: this.rowNode,\n            columns: this.column ? [this.column] : undefined,\n            defaultTextValue: this.cellValueFn(),\n        };\n\n        const rowDragText = this.column && this.column.getColDef().rowDragText;\n\n        this.dragSource = {\n            type: DragSourceType.RowDrag,\n            eElement: this.getGui(),\n            dragItemName: () => {\n                const dragItemCount = this.getSelectedCount();\n                if (rowDragText) {\n                    return rowDragText(dragItem, dragItemCount);\n                }\n\n                return dragItemCount === 1 ? this.cellValueFn() : `${dragItemCount} rows`;\n            },\n            getDragItem: () => dragItem,\n            dragStartPixels,\n            dragSourceDomDataKey: this.beans.gridOptionsWrapper.getDomDataKey()\n        };\n\n        this.addMouseDownListenerIfNeeded();\n\n        this.beans.dragAndDropService.addDragSource(this.dragSource, true);\n    }\n\n    private addMouseDownListenerIfNeeded(): void {\n        if (this.customGui || !this.column || !this.gridOptionsWrapper.isEnableCellTextSelect()) {\n            return;\n        }\n\n        // mouse down needs to be prevented when enableCellTextSelect\n        // is true so text doesn't get selected while dragging rows\n        this.addManagedListener(this.getGui(), 'mousedown', (e: MouseEvent) => {\n            e.preventDefault();\n            this.beans.focusService.setFocusedCell(\n                this.rowNode.rowIndex!,\n                this.column!,\n                this.rowNode.rowPinned,\n                true\n            );\n        });\n    }\n\n    @PreDestroy\n    private removeDragSource() {\n        if (this.dragSource) {\n            this.beans.dragAndDropService.removeDragSource(this.dragSource);\n        }\n        this.dragSource = null;\n    }\n}\n\nclass VisibilityStrategy extends BeanStub {\n    private readonly parent: RowDragComp;\n    private readonly column: Column | undefined;\n    protected readonly rowNode: RowNode;\n\n    constructor(parent: RowDragComp, rowNode: RowNode, column?: Column) {\n        super();\n        this.parent = parent;\n        this.rowNode = rowNode;\n        this.column = column;\n    }\n\n    protected setDisplayedOrVisible(neverDisplayed: boolean): void {\n        if (neverDisplayed) {\n            this.parent.setDisplayed(false);\n        } else {\n            let shown: boolean = true;\n            let isShownSometimes: boolean = false;\n\n            if (this.column) {\n                shown = this.column.isRowDrag(this.rowNode) || this.parent.isCustomGui();\n                isShownSometimes = isFunction(this.column.getColDef().rowDrag);\n            }\n\n            // if shown sometimes, them some rows can have drag handle while other don't,\n            // so we use setVisible to keep the handles horizontally aligned (as setVisible\n            // keeps the empty space, whereas setDisplayed looses the space)\n            if (isShownSometimes) {\n                this.parent.setDisplayed(true);\n                this.parent.setVisible(shown);\n            } else {\n                this.parent.setDisplayed(shown);\n                this.parent.setVisible(true);\n            }\n        }\n    }\n}\n\n// when non managed, the visibility depends on suppressRowDrag property only\nclass NonManagedVisibilityStrategy extends VisibilityStrategy {\n    private readonly beans: Beans;\n\n    constructor(parent: RowDragComp, beans: Beans, rowNode: RowNode, column?: Column) {\n        super(parent, rowNode, column);\n        this.beans = beans;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));\n\n        // in case data changes, then we need to update visibility of drag item\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));\n\n        this.workOutVisibility();\n    }\n\n    private onSuppressRowDrag(): void {\n        this.workOutVisibility();\n    }\n\n    private workOutVisibility(): void {\n        // only show the drag if both sort and filter are not present\n        const neverDisplayed = this.beans.gridOptionsWrapper.isSuppressRowDrag();\n        this.setDisplayedOrVisible(neverDisplayed);\n    }\n}\n\n// when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property\nclass ManagedVisibilityStrategy extends VisibilityStrategy {\n\n    private readonly beans: Beans;\n\n    constructor(parent: RowDragComp, beans: Beans, rowNode: RowNode, column?: Column) {\n        super(parent, rowNode, column);\n        this.beans = beans;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        // we do not show the component if sort, filter or grouping is active\n\n        this.addManagedListener(this.beans.eventService, Events.EVENT_SORT_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_FILTER_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));\n\n        // in case data changes, then we need to update visibility of drag item\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n\n        this.addManagedListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));\n\n        this.workOutVisibility();\n    }\n\n    private onSuppressRowDrag(): void {\n        this.workOutVisibility();\n    }\n\n    private workOutVisibility(): void {\n        // only show the drag if both sort and filter are not present\n        const gridBodyCon = this.beans.ctrlsService.getGridBodyCtrl();\n        const rowDragFeature = gridBodyCon.getRowDragFeature();\n        const shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();\n        const suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();\n        const hasExternalDropZones = this.beans.dragAndDropService.hasExternalDropZones();\n        const neverDisplayed = (shouldPreventRowMove && !hasExternalDropZones) || suppressRowDrag;\n\n        this.setDisplayedOrVisible(neverDisplayed);\n    }\n}\n"]}