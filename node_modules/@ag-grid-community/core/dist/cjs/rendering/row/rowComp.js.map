{"version":3,"sources":["../../src/ts/rendering/row/rowComp.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,qDAAoD;AAGpD,uCAAuE;AACvE,qCAAuD;AACvD,6CAA4C;AAC5C,6CAAkE;AAClE,yCAAgH;AAIhH;IAA6B,2BAAS;IAWlC,iBAAY,IAAa,EAAE,KAAY,EAAE,MAAqB;QAA9D,YACI,iBAAO,SAyCV;QA5CO,eAAS,GAAwC,EAAE,CAAC;QAKxD,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAEpB,KAAI,CAAC,WAAW,CAAC,UAAU,CAAA,oBAAiB,KAAI,CAAC,SAAS,EAAE,mBAAY,KAAI,CAAC,eAAe,EAAE,SAAK,CAAC,CAAC;QAErG,IAAM,IAAI,GAAG,KAAI,CAAC,MAAM,EAAE,CAAC;QAC3B,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAEzB,IAAM,SAAS,GAAa;YACxB,UAAU,EAAE,UAAA,KAAK;gBACb,IAAI,KAAK,IAAI,IAAI,EAAE;oBACf,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;iBACnC;qBAAM;oBACH,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;iBACxC;YACL,CAAC;YACD,WAAW,EAAE,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,QAAQ,GAAG,QAAQ,EAAxB,CAAwB;YACjD,YAAY,EAAE,UAAA,SAAS,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAA5B,CAA4B;YACvD,aAAa,EAAE,UAAA,WAAW,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAA/B,CAA+B;YAC7D,wBAAwB,EAAE,cAAM,OAAA,KAAI,CAAC,wBAAwB,EAAE,EAA/B,CAA+B;YAC/D,mBAAmB,EAAE,UAAC,IAAI,EAAE,EAAE,IAAK,OAAA,KAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,EAAE,CAAC,EAAlC,CAAkC;YACrE,eAAe,EAAE,UAAA,EAAE,IAAI,OAAA,sBAAe,CAAC,IAAI,EAAE,EAAE,CAAC,EAAzB,CAAyB;YAChD,aAAa,EAAE,UAAA,MAAM,IAAI,OAAA,wBAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,EAAhC,CAAgC;YACzD,eAAe,EAAE,UAAA,KAAK,IAAI,OAAA,sBAAe,CAAC,IAAI,EAAE,KAAK,CAAC,EAA5B,CAA4B;YACtD,YAAY,EAAE,UAAA,KAAK;gBACf,mBAAY,CAAC,IAAI,EAAE,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YACnD,CAAC;YACD,SAAS,EAAE,UAAA,MAAM,IAAI,OAAA,KAAK,CAAC,MAAM,GAAG,MAAM,EAArB,CAAqB;YAC1C,MAAM,EAAE,UAAA,GAAG,IAAI,OAAA,KAAK,CAAC,GAAG,GAAG,GAAG,EAAf,CAAe;YAC9B,YAAY,EAAE,UAAA,SAAS,IAAI,OAAA,KAAK,CAAC,SAAS,GAAG,SAAS,EAA3B,CAA2B;YACtD,WAAW,EAAE,UAAA,QAAQ,IAAI,OAAA,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,QAAQ,CAAC,EAAxC,CAAwC;YACjE,OAAO,EAAE,UAAA,IAAI,IAAI,OAAA,kBAAW,CAAC,IAAI,EAAE,IAAI,CAAC,EAAvB,CAAuB;YACxC,eAAe,EAAE,UAAA,QAAQ,IAAI,OAAA,sBAAe,CAAC,KAAI,CAAC,MAAM,EAAE,EAAE,QAAQ,CAAC,EAAxC,CAAwC;YACrE,QAAQ,EAAE,UAAC,KAAa,IAAK,OAAA,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAlC,CAAkC;YAC/D,iBAAiB,EAAE,UAAA,WAAW,IAAI,OAAA,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,WAAW,CAAC,EAAlD,CAAkD;YACpF,WAAW,EAAE,UAAA,QAAQ,IAAI,OAAA,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,EAAlD,CAAkD;SAC9E,CAAC;QAEF,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAI,CAAC,MAAM,EAAE,EAAE,MAAM,CAAC,CAAC;;IACnD,CAAC;IAEO,iCAAe,GAAvB;QACI,IAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,CAAC;QACrD,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAC5C,OAAO,SAAS,CAAC,CAAC,CAAC,gBAAc,SAAW,CAAC,CAAC,CAAC,UAAQ,GAAK,CAAC;IACjE,CAAC;IAEO,+BAAa,GAArB,UAAsB,WAA4B;QAAlD,iBAoBC;QAnBG,IAAM,QAAQ,GAAG,UAAC,YAA+B;YAC7C,IAAI,KAAI,CAAC,OAAO,EAAE,EAAE;gBAChB,IAAM,IAAI,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC;gBACnC,KAAI,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBAChC,IAAI,KAAI,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,iBAAO,CAAC,eAAe,EAAE;oBACvD,KAAI,CAAC,OAAO,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;iBAC/C;gBACD,KAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;aAC1C;iBAAM;gBACH,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;aAChD;QACL,CAAC,CAAC;QAEF,kCAAkC;QAClC,IAAM,GAAG,GAAG,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,4BAA4B,EAAE,CAAC,CAAC;QAExF,IAAI,CAAC,GAAG,EAAE;YAAE,OAAO;SAAE;QAErB,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvB,CAAC;IAEO,8BAAY,GAApB,UAAqB,SAAqB;QAA1C,iBAmBC;QAlBG,IAAM,aAAa,GAAG,eAAM,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAEjD,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;YACtB,IAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,EAAE,CAAC;YACrC,IAAM,gBAAgB,GAAG,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAE7C,IAAI,gBAAgB,IAAI,IAAI,EAAE;gBAC1B,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;aAC9B;iBAAM;gBACH,aAAa,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;aAC7B;QACL,CAAC,CAAC,CAAC;QAEH,IAAM,iBAAiB,GAAG,6BAAoB,CAAC,aAAa,CAAC;aACxD,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,IAAI,IAAI,EAAhB,CAAgB,CAAE,CAAC;QAE3C,IAAI,CAAC,YAAY,CAAC,iBAA+B,CAAC,CAAC;QACnD,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAEO,gCAAc,GAAtB,UAAuB,SAAqB;QAA5C,iBAYC;QAXG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAAE,OAAO;SAAE;QAE/B,IAAM,eAAe,GAAkB,EAAE,CAAC;QAC1C,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;YACtB,IAAM,QAAQ,GAAG,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,CAAC;YAC1D,IAAI,QAAQ,EAAE;gBACV,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;aAC3C;QACL,CAAC,CAAC,CAAC;QAEH,sBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,eAAe,CAAC,CAAC;IACrD,CAAC;IAEO,6BAAW,GAAnB,UAAoB,QAAkB;QAClC,IAAM,QAAQ,GAAG,IAAI,mBAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,EACvE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;QAClF,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,GAAG,QAAQ,CAAC;QACpD,IAAI,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;IACjD,CAAC;IAEM,yBAAO,GAAd;QACI,iBAAM,OAAO,WAAE,CAAC;QAChB,IAAI,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IAEO,iCAAe,GAAvB;QACI,IAAM,cAAc,GAAG,6BAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,IAAI,IAAI,EAAV,CAAU,CAAC,CAAC;QACrF,IAAI,CAAC,YAAY,CAAC,cAA4B,CAAC,CAAC;IACpD,CAAC;IAEO,qCAAmB,GAA3B,UAA4B,qBAAwC;QAApE,iBASC;QARG,IAAI,IAAI,CAAC,qBAAqB,EAAE;YAC5B,OAAO,CAAC,KAAK,CAAC,6DAA6D,CAAC,CAAC;SAChF;QAED,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QACnD,IAAI,CAAC,cAAc,CAAC;YAChB,KAAI,CAAC,qBAAqB,GAAG,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,KAAI,CAAC,qBAAqB,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,0CAAwB,GAAhC;QACI,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACtC,CAAC;IAEO,8BAAY,GAApB,UAAqB,SAAqB;QAA1C,iBAcC;QAbG,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;YAEtB,0CAA0C;YAC1C,IAAI,CAAC,QAAQ,EAAE;gBAAE,OAAO;aAAE;YAE1B,2CAA2C;YAC3C,IAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC,aAAa,EAAE,CAAC;YACtD,IAAI,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,QAAQ,EAAE;gBAAC,OAAO;aAAE;YAEvD,QAAQ,CAAC,MAAM,EAAE,CAAC;YAClB,QAAQ,CAAC,OAAO,EAAE,CAAC;YACnB,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;QACtC,CAAC,CAAC,CAAC;IACP,CAAC;IACL,cAAC;AAAD,CArKA,AAqKC,CArK4B,qBAAS,GAqKrC;AArKY,0BAAO","file":"rowComp.js","sourcesContent":["import { Component } from \"../../widgets/component\";\nimport { ICellRendererComp } from \"../cellRenderers/iCellRenderer\";\nimport { Beans } from \"../beans\";\nimport { addStylesToElement, setDomChildOrder } from \"../../utils/dom\";\nimport { IRowComp, RowCtrl, RowType } from \"./rowCtrl\";\nimport { CellComp } from \"../cell/cellComp\";\nimport { assign, getAllValuesInObject } from \"../../utils/object\";\nimport { setAriaExpanded, setAriaLabel, setAriaRole, setAriaRowIndex, setAriaSelected } from \"../../utils/aria\";\nimport { CellCtrl } from \"../cell/cellCtrl\";\nimport { UserCompDetails } from \"../../components/framework/userComponentFactory\";\n\nexport class RowComp extends Component {\n\n    private fullWidthCellRenderer: ICellRendererComp | null | undefined;\n\n    private beans: Beans;\n\n    private rowCtrl: RowCtrl;\n\n    private domOrder: boolean;\n    private cellComps: { [key: string]: CellComp | null; } = {};\n\n    constructor(ctrl: RowCtrl, beans: Beans, pinned: string | null) {\n        super();\n\n        this.beans = beans;\n        this.rowCtrl = ctrl;\n\n        this.setTemplate(/* html */`<div comp-id=\"${this.getCompId()}\" style=\"${this.getInitialStyle()}\"/>`);\n\n        const eGui = this.getGui();\n        const style = eGui.style;\n\n        const compProxy: IRowComp = {\n            setDisplay: value => {\n                if (value == null) {\n                    style.removeProperty('display');\n                } else {\n                    style.setProperty('display', 'none');\n                }\n            },\n            setDomOrder: domOrder => this.domOrder = domOrder,\n            setCellCtrls: cellCtrls => this.setCellCtrls(cellCtrls),\n            showFullWidth: compDetails => this.showFullWidth(compDetails),\n            getFullWidthCellRenderer: () => this.getFullWidthCellRenderer(),\n            addOrRemoveCssClass: (name, on) => this.addOrRemoveCssClass(name, on),\n            setAriaExpanded: on => setAriaExpanded(eGui, on),\n            setUserStyles: styles => addStylesToElement(eGui, styles),\n            setAriaSelected: value => setAriaSelected(eGui, value),\n            setAriaLabel: value => {\n                setAriaLabel(eGui, value == null ? '' : value);\n            },\n            setHeight: height => style.height = height,\n            setTop: top => style.top = top,\n            setTransform: transform => style.transform = transform,\n            setRowIndex: rowIndex => eGui.setAttribute('row-index', rowIndex),\n            setRole: role => setAriaRole(eGui, role),\n            setAriaRowIndex: rowIndex => setAriaRowIndex(this.getGui(), rowIndex),\n            setRowId: (rowId: string) => eGui.setAttribute('row-id', rowId),\n            setRowBusinessKey: businessKey => eGui.setAttribute('row-business-key', businessKey),\n            setTabIndex: tabIndex => eGui.setAttribute('tabindex', tabIndex.toString())\n        };\n\n        ctrl.setComp(compProxy, this.getGui(), pinned);\n    }\n\n    private getInitialStyle(): string {\n        const transform = this.rowCtrl.getInitialTransform();\n        const top = this.rowCtrl.getInitialRowTop();\n        return transform ? `transform: ${transform}` : `top: ${top}`;\n    }\n\n    private showFullWidth(compDetails: UserCompDetails): void {\n        const callback = (cellRenderer: ICellRendererComp) => {\n            if (this.isAlive()) {\n                const eGui = cellRenderer.getGui();\n                this.getGui().appendChild(eGui);\n                if (this.rowCtrl.getRowType() === RowType.FullWidthDetail) {\n                    this.rowCtrl.setupDetailRowAutoHeight(eGui);\n                }\n                this.setFullWidthRowComp(cellRenderer);\n            } else {\n                this.beans.context.destroyBean(cellRenderer);\n            }\n        };\n\n        // if not in cache, create new one\n        const res = compDetails.newAgStackInstance(this.rowCtrl.getFullWidthCellRendererType());\n\n        if (!res) { return; }\n\n        res.then(callback);\n    }\n\n    private setCellCtrls(cellCtrls: CellCtrl[]): void {\n        const cellsToRemove = assign({}, this.cellComps);\n\n        cellCtrls.forEach(cellCtrl => {\n            const key = cellCtrl.getInstanceId();\n            const existingCellComp = this.cellComps[key];\n\n            if (existingCellComp == null) {\n                this.newCellComp(cellCtrl);\n            } else {\n                cellsToRemove[key] = null;\n            }\n        });\n\n        const cellCompsToRemove = getAllValuesInObject(cellsToRemove)\n            .filter(cellComp => cellComp != null );\n\n        this.destroyCells(cellCompsToRemove as CellComp[]);\n        this.ensureDomOrder(cellCtrls);\n    }\n\n    private ensureDomOrder(cellCtrls: CellCtrl[]): void {\n        if (!this.domOrder) { return; }\n\n        const elementsInOrder: HTMLElement[] = [];\n        cellCtrls.forEach(cellCtrl => {\n            const cellComp = this.cellComps[cellCtrl.getInstanceId()];\n            if (cellComp) {\n                elementsInOrder.push(cellComp.getGui());\n            }\n        });\n\n        setDomChildOrder(this.getGui(), elementsInOrder);\n    }\n\n    private newCellComp(cellCtrl: CellCtrl): void {\n        const cellComp = new CellComp(this.rowCtrl.getScope(), this.beans, cellCtrl,\n            false, this.rowCtrl.isPrintLayout(), this.getGui(), this.rowCtrl.isEditing());\n        this.cellComps[cellCtrl.getInstanceId()] = cellComp;\n        this.getGui().appendChild(cellComp.getGui());\n    }\n\n    public destroy(): void {\n        super.destroy();\n        this.destroyAllCells();\n    }\n\n    private destroyAllCells(): void {\n        const cellsToDestroy = getAllValuesInObject(this.cellComps).filter(cp => cp != null);\n        this.destroyCells(cellsToDestroy as CellComp[]);\n    }\n\n    private setFullWidthRowComp(fullWidthRowComponent: ICellRendererComp): void {\n        if (this.fullWidthCellRenderer) {\n            console.error('AG Grid - should not be setting fullWidthRowComponent twice');\n        }\n\n        this.fullWidthCellRenderer = fullWidthRowComponent;\n        this.addDestroyFunc(() => {\n            this.fullWidthCellRenderer = this.beans.context.destroyBean(this.fullWidthCellRenderer);\n        });\n    }\n\n    private getFullWidthCellRenderer(): ICellRendererComp | null | undefined {\n        return this.fullWidthCellRenderer;\n    }\n\n    private destroyCells(cellComps: CellComp[]): void {\n        cellComps.forEach(cellComp => {\n\n            // could be old reference, ie removed cell\n            if (!cellComp) { return; }\n\n            // check cellComp belongs in this container\n            const instanceId = cellComp.getCtrl().getInstanceId();\n            if (this.cellComps[instanceId] !== cellComp) {return; }\n\n            cellComp.detach();\n            cellComp.destroy();\n            this.cellComps[instanceId] = null;\n        });\n    }\n}\n"]}