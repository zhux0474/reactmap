{"version":3,"sources":["../../src/ts/rendering/cellRenderers/iCellRenderer.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"iCellRenderer.js","sourcesContent":["import { IComponent } from \"../../interfaces/iComponent\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { ColDef } from \"../../entities/colDef\";\nimport { Column } from \"../../entities/column\";\nimport { GridApi } from \"../../gridApi\";\nimport { ColumnApi } from \"../../columns/columnApi\";\n\nexport interface ICellRendererParams {\n    /** Value to be rendered. */\n    value: any;\n    /** Formatted value to be rendered. */\n    valueFormatted: any;\n    /** True if this is a full width row. */\n    fullWidth?: boolean;\n    /** Pinned state of the cell. */\n    pinned?: string | null;\n    /** The row's data. */\n    data: any;\n    /** The row node. */\n    node: RowNode;\n    /** The current index of the row (this changes after filter and sort). */\n    rowIndex: number;\n    /** The cell's column definition. */\n    colDef?: ColDef;\n    /** The cell's column. */\n    column?: Column;\n    /** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */\n    $scope: any;\n    api: GridApi;\n    columnApi: ColumnApi;\n    /** The context as provided on `gridOptions.context`. */\n    context: any;\n    /** The grid's cell, a DOM div element. */\n    eGridCell: HTMLElement;\n    /** The parent DOM item for the cell renderer, same as eGridCell unless using checkbox selection. */\n    eParentOfValue: HTMLElement;\n    /** Convenience function to get most recent up to date value. */\n    getValue?: () => any;\n    /** Convenience function to set the value. */\n    setValue?: (value: any) => void;\n    /** Convenience function to format a value using the column's formatter. */\n    formatValue?: (value: any) => any;\n    /** Convenience function to refresh the cell. */\n    refreshCell?: () => void;\n    /**\n     * registerRowDragger:\n     * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n     * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n     * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n     * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n     */\n    registerRowDragger: (rowDraggerElement: HTMLElement, dragStartPixels?: number, value?: string, suppressVisibilityChange?: boolean) => void;\n}\n\nexport interface ISetFilterCellRendererParams {\n    value: any;\n    valueFormatted: any;\n\n    api: GridApi;\n    /** The cell's column definition. */\n    colDef?: ColDef;\n    /** The cell's column. */\n    column?: Column;\n    columnApi: ColumnApi;\n\n    /** The context as provided on `gridOptions.context` */\n    context: any;\n}\n\nexport interface ICellRenderer {\n    /** Get the cell to refresh. Return true if successful. Return false if not (or you don't have refresh logic),\n     * then the grid will refresh the cell for you. */\n    refresh(params: ICellRendererParams): boolean;\n}\n\nexport interface ICellRendererComp extends ICellRenderer, IComponent<ICellRendererParams> { }\n\nexport interface ICellRendererFunc {\n    (params: ICellRendererParams): HTMLElement | string;\n}"]}