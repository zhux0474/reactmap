{"version":3,"sources":["../../src/ts/rendering/cellRenderers/loadingCellRenderer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qDAAoD;AAEpD,2EAAiE;AACjE,yCAAoD;AAKpD;IAAyC,uCAAS;IAW9C;eACI,kBAAM,mBAAmB,CAAC,QAAQ,CAAC;IACvC,CAAC;IAEM,kCAAI,GAAX,UAAY,MAAkC;QAC1C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;IACtE,CAAC;IAEO,yCAAW,GAAnB;QACI,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,KAAK,CAAC;IACxC,CAAC;IAEO,0CAAY,GAApB;QACI,IAAM,YAAY,GAAG,uBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;QACrF,IAAI,YAAY,EAAE;YACd,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;SAC/C;QAED,IAAM,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC;QACnE,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,cAAc,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;IAC1E,CAAC;IAEM,qCAAO,GAAd,UAAe,MAAW;QACtB,OAAO,KAAK,CAAC;IACjB,CAAC;IAjCc,4BAAQ,GACnB,gMAGO,CAAC;IAEiB;QAA5B,kCAAW,CAAC,cAAc,CAAC;6DAAmC;IAClC;QAA5B,kCAAW,CAAC,cAAc,CAAC;6DAAmC;IA2BnE,0BAAC;CApCD,AAoCC,CApCwC,qBAAS,GAoCjD;AApCY,kDAAmB","file":"loadingCellRenderer.js","sourcesContent":["import { Component } from \"../../widgets/component\";\nimport { ICellRenderer, ICellRendererParams } from \"./iCellRenderer\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { createIconNoSpan } from \"../../utils/icon\";\n\nexport interface ILoadingCellRendererParams extends ICellRendererParams {}\nexport interface ILoadingCellRenderer extends ICellRenderer {}\n\nexport class LoadingCellRenderer extends Component implements ILoadingCellRenderer {\n\n    private static TEMPLATE =\n        `<div class=\"ag-loading\">\n            <span class=\"ag-loading-icon\" ref=\"eLoadingIcon\"></span>\n            <span class=\"ag-loading-text\" ref=\"eLoadingText\"></span>\n        </div>`;\n\n    @RefSelector('eLoadingIcon') private eLoadingIcon: HTMLElement;\n    @RefSelector('eLoadingText') private eLoadingText: HTMLElement;\n\n    constructor() {\n        super(LoadingCellRenderer.TEMPLATE);\n    }\n\n    public init(params: ILoadingCellRendererParams): void {\n        params.node.failedLoad ? this.setupFailed() : this.setupLoading();\n    }\n\n    private setupFailed(): void {\n        this.eLoadingText.innerText = 'ERR';\n    }\n\n    private setupLoading(): void {\n        const eLoadingIcon = createIconNoSpan('groupLoading', this.gridOptionsWrapper, null);\n        if (eLoadingIcon) {\n            this.eLoadingIcon.appendChild(eLoadingIcon);\n        }\n\n        const localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n        this.eLoadingText.innerText = localeTextFunc('loadingOoo', 'Loading');\n    }\n\n    public refresh(params: any): boolean {\n        return false;\n    }\n}"]}