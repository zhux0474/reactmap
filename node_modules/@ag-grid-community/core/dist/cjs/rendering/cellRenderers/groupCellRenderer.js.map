{"version":3,"sources":["../../src/ts/rendering/cellRenderers/groupCellRenderer.ts"],"names":[],"mappings":"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","file":"groupCellRenderer.js","sourcesContent":["import { UserCompDetails, UserComponentFactory } from \"../../components/framework/userComponentFactory\";\nimport { Autowired } from \"../../context/context\";\nimport { setAriaRole } from \"../../utils/aria\";\nimport { addOrRemoveCssClass, setDisplayed } from \"../../utils/dom\";\nimport { Component } from \"../../widgets/component\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { GroupCellRendererCtrl, GroupCellRendererParams, IGroupCellRenderer } from \"./groupCellRendererCtrl\";\nimport { ICellRendererComp } from \"./iCellRenderer\";\n\nexport class GroupCellRenderer extends Component implements ICellRendererComp {\n\n    private static TEMPLATE = /* html */\n        `<span class=\"ag-cell-wrapper\">\n            <span class=\"ag-group-expanded\" ref=\"eExpanded\"></span>\n            <span class=\"ag-group-contracted\" ref=\"eContracted\"></span>\n            <span class=\"ag-group-checkbox ag-invisible\" ref=\"eCheckbox\"></span>\n            <span class=\"ag-group-value\" ref=\"eValue\"></span>\n            <span class=\"ag-group-child-count\" ref=\"eChildCount\"></span>\n        </span>`;\n\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n\n    @RefSelector('eExpanded') private eExpanded: HTMLElement;\n    @RefSelector('eContracted') private eContracted: HTMLElement;\n    @RefSelector('eCheckbox') private eCheckbox: HTMLElement;\n    @RefSelector('eValue') private eValue: HTMLElement;\n    @RefSelector('eChildCount') private eChildCount: HTMLElement;\n\n    // this cell renderer\n    private innerCellRenderer: ICellRendererComp;\n\n    constructor() {\n        super(GroupCellRenderer.TEMPLATE);\n    }\n\n    public init(params: GroupCellRendererParams): void {\n\n        const compProxy: IGroupCellRenderer = {\n            setInnerRenderer: (compDetails, valueToDisplay) => this.setRenderDetails(compDetails, valueToDisplay),\n            setChildCount: count => this.eChildCount.innerHTML = count,\n            addOrRemoveCssClass: (cssClass, value) => this.addOrRemoveCssClass(cssClass, value),\n            setContractedDisplayed: expanded => setDisplayed(this.eContracted, expanded),\n            setExpandedDisplayed: expanded => setDisplayed(this.eExpanded, expanded),\n            setCheckboxVisible: visible => addOrRemoveCssClass(this.eCheckbox, 'ag-invisible', !visible)\n        };\n\n        const ctrl = this.createManagedBean(new GroupCellRendererCtrl());\n        const fullWidth = !params.colDef;\n        const eGui = this.getGui();\n        ctrl.init(compProxy, eGui, this.eCheckbox, this.eExpanded, this.eContracted, this.constructor, params);\n        \n        if (fullWidth) {\n            setAriaRole(eGui, 'gridcell');\n        }\n    }\n\n    private setRenderDetails(compDetails: UserCompDetails | undefined, valueToDisplay: any): void {\n\n        if (compDetails) {\n            const componentPromise = compDetails.newAgStackInstance();\n            if (!componentPromise) { return; }\n            componentPromise.then( comp => {\n                if (!comp) { return; }\n                const destroyComp = () => this.context.destroyBean(comp);\n                if (this.isAlive()) {\n                    this.eValue.appendChild(comp.getGui());\n                    this.addDestroyFunc(destroyComp);\n                } else {\n                    destroyComp();\n                }\n            });\n        } else {\n            this.eValue.innerText = valueToDisplay;\n        }\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to have public here instead of private or protected\n    public destroy(): void {\n        this.getContext().destroyBean(this.innerCellRenderer);\n        super.destroy();\n    }\n\n    public refresh(): boolean {\n        return false;\n    }\n}\n"]}