{"version":3,"sources":["../../src/ts/rendering/rowContainerHeightService.ts"],"names":[],"mappings":"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","file":"rowContainerHeightService.js","sourcesContent":["import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, PostConstruct, Qualifier } from \"../context/context\";\nimport { Events } from \"../eventKeys\";\nimport { getMaxDivHeight } from \"../utils/browser\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { Logger, LoggerFactory } from \"../logger\";\n\n/**\n * This class solves the 'max height' problem, where the user might want to show more data than\n * the max div height actually allows.\n */\n\n@Bean('rowContainerHeightService')\nexport class RowContainerHeightService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private maxDivHeight: number;\n\n    // if false, then stretching is not active, logic in this class is not used,\n    // the pixel height of the row container matches what is actually needed,\n    // no scaling applied.\n    private stretching: boolean;\n\n    private modelHeight: number | null; // how many pixels the model needs\n    private uiContainerHeight: number | null; // how many pixels we actually have\n    private pixelsToShave: number; // the number of pixels we need to shave\n\n    // the number of pixels we add to each rowTop - depends on the scroll position\n    private divStretchOffset: number;\n\n    // the scrollY position\n    private scrollY = 0;\n    // how tall the body is\n    private uiBodyHeight = 0;\n\n    // the max scroll position\n    private maxScrollY: number;\n\n    private logger: Logger;\n\n    public agWire(@Qualifier(\"loggerFactory\") loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create(\"RowContainerHeightService\");\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.updateOffset.bind(this));\n        this.maxDivHeight = getMaxDivHeight();\n        this.logger.log('maxDivHeight = ' + this.maxDivHeight);\n    }\n\n    public isStretching(): boolean {\n        return this.stretching;\n    }\n\n    public getDivStretchOffset(): number {\n        return this.divStretchOffset;\n    }\n\n    public updateOffset(): void {\n        if (!this.stretching) { return; }\n\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const newScrollY = gridBodyCon.getScrollFeature().getVScrollPosition().top;\n        const newBodyHeight = this.getUiBodyHeight();\n\n        const atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;\n        if (atLeastOneChanged) {\n            this.scrollY = newScrollY;\n            this.uiBodyHeight = newBodyHeight;\n            this.calculateOffset();\n        }\n    }\n\n    private calculateOffset(): void {\n        this.setUiContainerHeight(this.maxDivHeight);\n        this.pixelsToShave = this.modelHeight! - this.uiContainerHeight!;\n\n        this.maxScrollY = this.uiContainerHeight! - this.uiBodyHeight;\n        const scrollPercent = this.scrollY / this.maxScrollY;\n\n        const divStretchOffset = scrollPercent * this.pixelsToShave;\n\n        this.logger.log(`Div Stretch Offset = ${divStretchOffset} (${this.pixelsToShave} * ${scrollPercent})`)\n\n        this.setDivStretchOffset(divStretchOffset);\n    }\n\n    private setUiContainerHeight(height: number | null): void {\n        if (height !== this.uiContainerHeight) {\n            this.uiContainerHeight = height;\n            this.eventService.dispatchEvent({type: Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED});\n        }\n    }\n\n    private clearOffset(): void {\n        this.setUiContainerHeight(this.modelHeight);\n        this.pixelsToShave = 0;\n        this.setDivStretchOffset(0);\n    }\n\n    private setDivStretchOffset(newOffset: number): void {\n        // because we are talking pixels, no point in confusing things with half numbers\n        const newOffsetFloor = typeof newOffset === 'number' ? Math.floor(newOffset) : null;\n        if (this.divStretchOffset === newOffsetFloor) { return; }\n\n        this.divStretchOffset = newOffsetFloor!;\n        this.eventService.dispatchEvent({type: Events.EVENT_HEIGHT_SCALE_CHANGED});\n    }\n\n    public setModelHeight(modelHeight: number | null): void {\n        this.modelHeight = modelHeight;\n        this.stretching = modelHeight != null // null happens when in print layout\n                        && this.maxDivHeight > 0\n                        && modelHeight! > this.maxDivHeight;\n        if (this.stretching) {\n            this.calculateOffset();\n        } else {\n            this.clearOffset();\n        }\n    }\n\n    public getUiContainerHeight(): number | null {\n        return this.uiContainerHeight;\n    }\n\n    public getRealPixelPosition(modelPixel: number): number {\n        return modelPixel - this.divStretchOffset;\n    }\n\n    private getUiBodyHeight(): number {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const pos = gridBodyCon.getScrollFeature().getVScrollPosition();\n        return pos.bottom - pos.top;\n    }\n\n    public getScrollPositionForPixel(rowTop: number): number {\n        if (this.pixelsToShave <= 0) { return rowTop; }\n\n        const modelMaxScroll = this.modelHeight! - this.getUiBodyHeight();\n        const scrollPercent = rowTop / modelMaxScroll;\n        const scrollPixel = this.maxScrollY * scrollPercent;\n        return scrollPixel;\n    }\n}\n"]}