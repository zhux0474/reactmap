{"version":3,"sources":["../../src/ts/rendering/columnAnimationService.ts"],"names":[],"mappings":"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","file":"columnAnimationService.js","sourcesContent":["import { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { GridBodyCtrl } from \"../gridBodyComp/gridBodyCtrl\";\nimport { CtrlsService } from \"../ctrlsService\";\n\n@Bean('columnAnimationService')\nexport class ColumnAnimationService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private executeNextFuncs: Function[] = [];\n    private executeLaterFuncs: Function[] = [];\n\n    private active = false;\n\n    private animationThreadCount = 0;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => this.gridBodyCtrl = p.gridBodyCtrl);\n    }\n\n    public isActive(): boolean {\n        return this.active;\n    }\n\n    public start(): void {\n        if (this.active) { return; }\n\n        if (this.gridOptionsWrapper.isSuppressColumnMoveAnimation()) { return; }\n\n        // if doing RTL, we don't animate open / close as due to how the pixels are inverted,\n        // the animation moves all the row the the right rather than to the left (ie it's the static\n        // columns that actually get their coordinates updated)\n        if (this.gridOptionsWrapper.isEnableRtl()) { return; }\n\n        this.ensureAnimationCssClassPresent();\n\n        this.active = true;\n    }\n\n    public finish(): void {\n        if (!this.active) { return; }\n        this.flush();\n        this.active = false;\n    }\n\n    public executeNextVMTurn(func: Function): void {\n        if (this.active) {\n            this.executeNextFuncs.push(func);\n        } else {\n            func();\n        }\n    }\n\n    public executeLaterVMTurn(func: Function): void {\n        if (this.active) {\n            this.executeLaterFuncs.push(func);\n        } else {\n            func();\n        }\n    }\n\n    private ensureAnimationCssClassPresent(): void {\n        // up the count, so we can tell if someone else has updated the count\n        // by the time the 'wait' func executes\n        this.animationThreadCount++;\n        const animationThreadCountCopy = this.animationThreadCount;\n        this.gridBodyCtrl.setColumnMovingCss(true);\n\n        this.executeLaterFuncs.push(() => {\n            // only remove the class if this thread was the last one to update it\n            if (this.animationThreadCount === animationThreadCountCopy) {\n                this.gridBodyCtrl.setColumnMovingCss(false);\n            }\n        });\n    }\n\n    public flush(): void {\n\n        const nowFuncs = this.executeNextFuncs;\n        this.executeNextFuncs = [];\n\n        const waitFuncs = this.executeLaterFuncs;\n        this.executeLaterFuncs = [];\n\n        if (nowFuncs.length === 0 && waitFuncs.length === 0) { return; }\n\n        window.setTimeout(() => nowFuncs.forEach(func => func()), 0);\n        window.setTimeout(() => waitFuncs.forEach(func => func()), 300);\n    }\n}\n"]}