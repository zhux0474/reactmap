{"version":3,"sources":["../../src/ts/rendering/checkboxSelectionComponent.ts"],"names":[],"mappings":"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","file":"checkboxSelectionComponent.js","sourcesContent":["import { AgCheckbox } from '../widgets/agCheckbox';\nimport { PostConstruct } from '../context/context';\nimport { Column } from '../entities/column';\nimport { Component } from '../widgets/component';\nimport { Events } from '../events';\nimport { RefSelector } from '../widgets/componentAnnotations';\nimport { RowNode } from '../entities/rowNode';\nimport { stopPropagationForAgGrid } from '../utils/event';\n\nexport class CheckboxSelectionComponent extends Component {\n\n    @RefSelector('eCheckbox') private eCheckbox: AgCheckbox;\n\n    private rowNode: RowNode;\n    private column: Column | undefined;\n\n    constructor() {\n        super(/* html*/`\n            <div class=\"ag-selection-checkbox\" role=\"presentation\">\n                <ag-checkbox role=\"presentation\" ref=\"eCheckbox\"></ag-checkbox>\n            </div>`\n        );\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.eCheckbox.setPassive(true);\n    }\n\n    public getCheckboxId(): string {\n        return this.eCheckbox.getInputElement().id;\n    }\n\n    private onDataChanged(): void {\n        // when rows are loaded for the second time, this can impact the selection, as a row\n        // could be loaded as already selected (if user scrolls down, and then up again).\n        this.onSelectionChanged();\n    }\n\n    private onSelectableChanged(): void {\n        this.showOrHideSelect();\n    }\n\n    private onSelectionChanged(): void {\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        const state = this.rowNode.isSelected();\n        const stateName = state === undefined\n            ? translate('ariaIndeterminate', 'indeterminate')\n            : (state === true\n                ? translate('ariaChecked', 'checked')\n                : translate('ariaUnchecked', 'unchecked')\n            );\n        const ariaLabel = translate('ariaRowToggleSelection', 'Press Space to toggle row selection');\n\n        this.eCheckbox.setValue(state, true);\n        this.eCheckbox.setInputAriaLabel(`${ariaLabel} (${stateName})`);\n    }\n\n    private onCheckedClicked(event: MouseEvent): number {\n        const groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();\n        const updatedCount = this.rowNode.setSelectedParams({ newValue: false, rangeSelect: event.shiftKey, groupSelectsFiltered: groupSelectsFiltered });\n        return updatedCount;\n    }\n\n    private onUncheckedClicked(event: MouseEvent): number {\n        const groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();\n        const updatedCount = this.rowNode.setSelectedParams({ newValue: true, rangeSelect: event.shiftKey, groupSelectsFiltered: groupSelectsFiltered });\n        return updatedCount;\n    }\n\n    public init(params: {rowNode: RowNode, column?: Column}): void {\n        this.rowNode = params.rowNode;\n        this.column = params.column;\n\n        this.onSelectionChanged();\n\n        // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row\n        // would possibly get selected twice\n        this.addGuiEventListener('click', event => stopPropagationForAgGrid(event));\n        // likewise we don't want double click on this icon to open a group\n        this.addGuiEventListener('dblclick', event => stopPropagationForAgGrid(event));\n\n        this.addManagedListener(this.eCheckbox.getInputElement(), 'click', (event) => {\n            const isSelected = this.eCheckbox.getValue();\n            const previousValue = this.eCheckbox.getPreviousValue();\n\n            if (previousValue === undefined) { // indeterminate\n                const result = this.onUncheckedClicked(event || {});\n                if (result === 0) {\n                    this.onCheckedClicked(event);\n                }\n            } else if (isSelected) {\n                this.onCheckedClicked(event);\n            } else {\n                this.onUncheckedClicked(event || {});\n            }\n        });\n\n        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));\n\n        const isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();\n        const checkboxVisibleIsDynamic = isRowSelectableFunc || this.checkboxCallbackExists();\n\n        if (checkboxVisibleIsDynamic) {\n            const showOrHideSelectListener = this.showOrHideSelect.bind(this);\n            this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, showOrHideSelectListener);\n            this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, showOrHideSelectListener);\n            this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, showOrHideSelectListener);\n            this.showOrHideSelect();\n        }\n\n        this.eCheckbox.getInputElement().setAttribute('tabindex', '-1');\n    }\n\n    private showOrHideSelect(): void {\n        // if the isRowSelectable() is not provided the row node is selectable by default\n        let selectable = this.rowNode.selectable;\n\n        // checkboxSelection callback is deemed a legacy solution however we will still consider it's result.\n        // If selectable, then also check the colDef callback. if not selectable, this it short circuits - no need\n        // to call the colDef callback.\n        if (selectable && this.checkboxCallbackExists()) {\n            selectable = this.column!.isCellCheckboxSelection(this.rowNode);\n        }\n\n        // show checkbox if both conditions are true\n        this.setVisible(selectable);\n    }\n\n    private checkboxCallbackExists(): boolean {\n        // column will be missing if groupUseEntireRow=true\n        const colDef = this.column ? this.column.getColDef() : null;\n        return !!colDef && typeof colDef.checkboxSelection === 'function';\n    }\n}\n"]}