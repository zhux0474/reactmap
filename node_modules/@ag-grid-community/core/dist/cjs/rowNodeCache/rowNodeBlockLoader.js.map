{"version":3,"sources":["../../src/ts/rowNodeCache/rowNodeBlockLoader.ts"],"names":[],"mappings":"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","file":"rowNodeBlockLoader.js","sourcesContent":["import { RowNodeBlock } from \"./rowNodeBlock\";\nimport { Bean, PostConstruct, Qualifier } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Logger, LoggerFactory } from \"../logger\";\nimport { _ } from \"../utils\";\n\n@Bean('rowNodeBlockLoader')\nexport class RowNodeBlockLoader extends BeanStub {\n\n    public static BLOCK_LOADER_FINISHED_EVENT = 'blockLoaderFinished';\n\n    private maxConcurrentRequests: number | undefined;\n    private checkBlockToLoadDebounce: () => void;\n\n    private activeBlockLoadsCount = 0;\n    private blocks: RowNodeBlock[] = [];\n    private logger: Logger;\n    private active = true;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();\n        const blockLoadDebounceMillis = this.gridOptionsWrapper.getBlockLoadDebounceMillis();\n\n        if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) {\n            this.checkBlockToLoadDebounce = _.debounce(this.performCheckBlocksToLoad.bind(this), blockLoadDebounceMillis);\n        }\n    }\n\n    private setBeans(@Qualifier('loggerFactory') loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create('RowNodeBlockLoader');\n    }\n\n    public addBlock(block: RowNodeBlock): void {\n        this.blocks.push(block);\n\n        // note that we do not remove this listener when removing the block. this is because the\n        // cache can get destroyed (and containing blocks) when a block is loading. however the loading block\n        // is still counted as an active loading block and we must decrement activeBlockLoadsCount when it finishes.\n        block.addEventListener(RowNodeBlock.EVENT_LOAD_COMPLETE, this.loadComplete.bind(this));\n\n        this.checkBlockToLoad();\n    }\n\n    public removeBlock(block: RowNodeBlock): void {\n        _.removeFromArray(this.blocks, block);\n    }\n\n    protected destroy(): void {\n        super.destroy();\n        this.active = false;\n    }\n\n    private loadComplete(): void {\n        this.activeBlockLoadsCount--;\n        this.checkBlockToLoad();\n        if (this.activeBlockLoadsCount == 0) {\n            this.dispatchEvent({type: RowNodeBlockLoader.BLOCK_LOADER_FINISHED_EVENT});\n        }\n    }\n\n    public checkBlockToLoad(): void {\n        if (this.checkBlockToLoadDebounce) {\n            this.checkBlockToLoadDebounce();\n        } else {\n            this.performCheckBlocksToLoad();\n        }\n    }\n\n    private performCheckBlocksToLoad(): void {\n        if (!this.active) { return; }\n\n        this.printCacheStatus();\n\n        if (this.maxConcurrentRequests != null && this.activeBlockLoadsCount >= this.maxConcurrentRequests) {\n            this.logger.log(`checkBlockToLoad: max loads exceeded`);\n            return;\n        }\n\n        let blockToLoad: RowNodeBlock | null = null;\n        this.blocks.forEach(block => {\n            if (block.getState() === RowNodeBlock.STATE_WAITING_TO_LOAD) {\n                blockToLoad = block;\n            }\n        });\n\n        if (blockToLoad) {\n            blockToLoad!.load();\n            this.activeBlockLoadsCount++;\n            this.printCacheStatus();\n        }\n    }\n\n    public getBlockState(): any {\n        const result: any = {};\n        this.blocks.forEach((block: RowNodeBlock) => {\n            const {id, state} = block.getBlockStateJson();\n            result[id] = state;\n        });\n        return result;\n    }\n\n    private printCacheStatus(): void {\n\n        if (this.logger.isLogging()) {\n            this.logger.log(`printCacheStatus: activePageLoadsCount = ${this.activeBlockLoadsCount},`\n                + ` blocks = ${JSON.stringify(this.getBlockState())}`);\n        }\n    }\n\n    public isLoading(): boolean {\n        return this.activeBlockLoadsCount > 0;\n    }\n}\n"]}