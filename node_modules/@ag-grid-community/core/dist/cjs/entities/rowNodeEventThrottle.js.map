{"version":3,"sources":["../../src/ts/entities/rowNodeEventThrottle.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oDAAmD;AACnD,gDAA+C;AAC/C,8CAAoE;AAOpE;IAA0C,wCAAQ;IAAlD;QAAA,qEA2CC;QApCW,YAAM,GAA0B,EAAE,CAAC;;IAoC/C,CAAC;IA/BW,4CAAa,GAArB;QACI,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAE,qBAAS,CAAC,0BAA0B,EAAE;YAC/D,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,QAA+B,CAAC;SAClE;IACL,CAAC;IAED,6EAA6E;IAC7E,8FAA8F;IAC9F,8FAA8F;IAC9F,oBAAoB;IACpB,GAAG;IACH,6FAA6F;IAC7F,6DAA6D;IAC7D,MAAM;IACN,+BAA+B;IAC/B,6FAA6F;IAC7F,kEAAkE;IAC3D,+CAAgB,GAAvB,UAAwB,KAA0B;QAAlD,iBAaC;QAXG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAExB,IAAI,IAAI,CAAC,yBAAyB,IAAE,IAAI,EAAE;YACtC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAE;gBAClE,KAAI,CAAC,kBAAkB,IAAI,KAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC;gBACtE,KAAI,CAAC,MAAM,CAAC,OAAO,CAAE,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC,EAAlC,CAAkC,CAAE,CAAC;gBAC/D,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACrB,CAAC,CAAC,CAAC;SACN;QAED,IAAI,CAAC,yBAAyB,EAAE,CAAC;IACrC,CAAC;IAxCmC;QAAnC,mBAAS,CAAC,uBAAuB,CAAC;uEAAsD;IAClE;QAAtB,mBAAS,CAAC,UAAU,CAAC;0DAA6B;IASnD;QADC,uBAAa;6DAKb;IAhBQ,oBAAoB;QADhC,cAAI,CAAC,sBAAsB,CAAC;OAChB,oBAAoB,CA2ChC;IAAD,2BAAC;CA3CD,AA2CC,CA3CyC,mBAAQ,GA2CjD;AA3CY,oDAAoB","file":"rowNodeEventThrottle.js","sourcesContent":["import { Constants } from \"../constants/constants\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { RowGroupOpenedEvent } from \"../events\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { AnimationFrameService } from \"../misc/animationFrameService\";\n\n@Bean('rowNodeEventThrottle')\nexport class RowNodeEventThrottle extends BeanStub {\n\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n    @Autowired('rowModel') private rowModel: IRowModel;\n\n    private clientSideRowModel: IClientSideRowModel;\n\n    private events: RowGroupOpenedEvent[] = [];\n\n    private dispatchExpandedDebounced: ()=>void;\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (this.rowModel.getType()==Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n    }\n\n    // because the user can call rowNode.setExpanded() many times in one VM turn,\n    // we throttle the calls to ClientSideRowModel using animationFrameService. this means for 100\n    // row nodes getting expanded, we only update the CSRM once, and then we fire all events after\n    // CSRM has updated.\n    // \n    // if we did not do this, then the user could call setExpanded on 100+ rows, causing the grid\n    // to re-render 100+ times, which would be a performance lag.\n    //    \n    // we use animationFrameService\n    // rather than _.debounce() so this will get done if anyone flushes the animationFrameService\n    // (eg user calls api.ensureRowVisible(), which in turn flushes ).\n    public dispatchExpanded(event: RowGroupOpenedEvent): void {\n\n        this.events.push(event);\n\n        if (this.dispatchExpandedDebounced==null) {\n            this.dispatchExpandedDebounced = this.animationFrameService.debounce( ()=> {\n                this.clientSideRowModel && this.clientSideRowModel.onRowGroupOpened();\n                this.events.forEach( e => this.eventService.dispatchEvent(e) );\n                this.events = [];\n            });\n        }\n\n        this.dispatchExpandedDebounced();\n    }\n}"]}