{"version":3,"sources":["../../src/ts/modules/moduleRegistry.ts"],"names":[],"mappings":";;;;;;;;AAEA,8CAA2C;AAC3C,4CAA0C;AAE1C;IAAA;IAyDA,CAAC;IAnDiB,uBAAQ,GAAtB,UAAuB,MAAc,EAAE,WAAkB;QAAlB,4BAAA,EAAA,kBAAkB;QACrD,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;QAEtD,IAAI,cAAc,CAAC,WAAW,KAAK,SAAS,EAAE;YAC1C,cAAc,CAAC,WAAW,GAAG,WAAW,CAAC;SAC5C;aAAM;YACH,IAAI,cAAc,CAAC,WAAW,KAAK,WAAW,EAAE;gBAC5C,iBAAM,CAAC;oBACH,OAAO,CAAC,IAAI,CAAC,0JAA0J,CAAC,CAAC;oBACzK,OAAO,CAAC,IAAI,CAAC,4FAA4F,CAAC,CAAC;gBAE/G,CAAC,EACG,oBAAoB,CAAC,CAAC;aAC7B;SACJ;IACL,CAAC;IAED,qCAAqC;IACvB,8BAAe,GAA7B,UAA8B,OAAiB,EAAE,WAAkB;QAAlB,4BAAA,EAAA,kBAAkB;QAC/D,IAAI,CAAC,OAAO,EAAE;YACV,OAAO;SACV;QACD,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,cAAc,CAAC,QAAQ,CAAC,MAAM,EAAE,WAAW,CAAC,EAA5C,CAA4C,CAAC,CAAC;IAC5E,CAAC;IAEa,+BAAgB,GAA9B,UAA+B,UAAuB,EAAE,MAAc;QAClE,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;YAC/B,OAAO,IAAI,CAAC;SACf;QAED,IAAM,UAAU,GAAG,MAAM,GAAG,UAAU,CAAC;QACvC,IAAM,cAAc,GAAG,4BAA0B,MAAM,mBAAc,UAAU,kFAA+E,CAAC;QAE/J,iBAAM,CAAC;YACH,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACjC,CAAC,EAAE,UAAU,CAAC,CAAC;QAEf,OAAO,KAAK,CAAC;IACjB,CAAC;IAEa,2BAAY,GAA1B,UAA2B,UAAuB;QAC9C,OAAO,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;IACnD,CAAC;IAEa,mCAAoB,GAAlC;QACI,OAAO,gBAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IAEa,6BAAc,GAA5B;QACI,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC;IACvC,CAAC;IAtDD,kEAAkE;IACnD,yBAAU,GAAgC,EAAE,CAAC;IAsDhE,qBAAC;CAzDD,AAyDC,IAAA;AAzDY,wCAAc","file":"moduleRegistry.js","sourcesContent":["import { Module } from \"../interfaces/iModule\";\nimport { ModuleNames } from \"./moduleNames\";\nimport { doOnce } from \"../utils/function\";\nimport { values } from \"../utils/generic\";\n\nexport class ModuleRegistry {\n\n    // having in a map a) removes duplicates and b) allows fast lookup\n    private static modulesMap: { [name: string]: Module; } = {};\n    private static moduleBased: boolean | undefined;\n\n    public static register(module: Module, moduleBased = true): void {\n        ModuleRegistry.modulesMap[module.moduleName] = module;\n\n        if (ModuleRegistry.moduleBased === undefined) {\n            ModuleRegistry.moduleBased = moduleBased;\n        } else {\n            if (ModuleRegistry.moduleBased !== moduleBased) {\n                doOnce(() => {\n                    console.warn(`AG Grid: You are mixing modules (i.e. @ag-grid-community/core) and packages (ag-grid-community) - you can only use one or the other of these mechanisms.`);\n                    console.warn('Please see https://www.ag-grid.com/javascript-grid/packages-modules/ for more information.');\n\n                },\n                    'ModulePackageCheck');\n            }\n        }\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    public static registerModules(modules: Module[], moduleBased = true): void {\n        if (!modules) {\n            return;\n        }\n        modules.forEach(module => ModuleRegistry.register(module, moduleBased));\n    }\n\n    public static assertRegistered(moduleName: ModuleNames, reason: string): boolean {\n        if (this.isRegistered(moduleName)) {\n            return true;\n        }\n\n        const warningKey = reason + moduleName;\n        const warningMessage = `AG Grid: unable to use ${reason} as module ${moduleName} is not present. Please see: https://www.ag-grid.com/javascript-grid/modules/`;\n\n        doOnce(() => {\n            console.warn(warningMessage);\n        }, warningKey);\n\n        return false;\n    }\n\n    public static isRegistered(moduleName: ModuleNames): boolean {\n        return !!ModuleRegistry.modulesMap[moduleName];\n    }\n\n    public static getRegisteredModules(): Module[] {\n        return values(ModuleRegistry.modulesMap);\n    }\n\n    public static isPackageBased(): boolean {\n        return !ModuleRegistry.moduleBased;\n    }\n}\n"]}