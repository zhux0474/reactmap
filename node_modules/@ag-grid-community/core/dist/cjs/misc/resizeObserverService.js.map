{"version":3,"sources":["../../src/ts/misc/resizeObserverService.ts"],"names":[],"mappings":"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","file":"resizeObserverService.js","sourcesContent":["import { Bean } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { debounce } from \"../utils/function\";\nimport { offsetHeight, offsetWidth } from \"../utils/dom\";\n\nconst DEBOUNCE_DELAY = 50;\n@Bean('resizeObserverService')\nexport class ResizeObserverService extends BeanStub {\n\n    private polyfillFunctions: (()=>void)[] = [];\n    private polyfillScheduled: boolean;\n\n    public observeResize(element: HTMLElement, callback: () => void): () => void {\n        // this gets fired too often and might cause some relayout issues\n        // so we add a debounce to the callback here to avoid the flashing effect.\n        const debouncedCallback = debounce(callback, DEBOUNCE_DELAY);\n        const useBrowserResizeObserver = () => {\n            const resizeObserver = new (window as any).ResizeObserver(debouncedCallback);\n            resizeObserver.observe(element);\n            return () => resizeObserver.disconnect();\n        };\n\n        const usePolyfill = () => {\n\n            // initialise to the current width and height, so first call will have no changes\n            let widthLastTime = offsetWidth(element);\n            let heightLastTime = offsetHeight(element);\n\n            // when finished, this gets turned to false.\n            let running = true;\n\n            const periodicallyCheckWidthAndHeight = () => {\n                if (running) {\n\n                    const newWidth = offsetWidth(element);\n                    const newHeight = offsetHeight(element);\n\n                    const changed = newWidth !== widthLastTime || newHeight !== heightLastTime;\n                    if (changed) {\n                        widthLastTime = newWidth;\n                        heightLastTime = newHeight;\n                        callback();\n                    }\n\n                    this.doNextPolyfillTurn(periodicallyCheckWidthAndHeight);\n                }\n            };\n\n            periodicallyCheckWidthAndHeight();\n\n            // the callback function we return sets running to false\n            return () => running = false;\n        };\n\n        const suppressResize = this.gridOptionsWrapper.isSuppressBrowserResizeObserver();\n        const resizeObserverExists = !!(window as any).ResizeObserver;\n\n        if (resizeObserverExists && !suppressResize) {\n            return useBrowserResizeObserver();\n        } else {\n            return usePolyfill();\n        }\n    }\n\n    private doNextPolyfillTurn(func: ()=>void): void {\n        this.polyfillFunctions.push(func);\n        this.schedulePolyfill();\n    }\n\n    private schedulePolyfill(): void {\n        if (this.polyfillScheduled) { return; }\n\n        const executeAllFuncs = () => {\n            const funcs = this.polyfillFunctions;\n\n            // make sure set scheduled to false and clear clear array\n            // before executing the funcs, as the funcs could add more funcs\n            this.polyfillScheduled = false;\n            this.polyfillFunctions = [];\n\n            funcs.forEach(f => f());\n        };\n\n        this.polyfillScheduled = true;\n        this.getFrameworkOverrides().setTimeout(executeAllFuncs, DEBOUNCE_DELAY);\n    }\n\n}\n"]}