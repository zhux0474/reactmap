{"version":3,"sources":["../../src/ts/sortController.ts"],"names":[],"mappings":"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","file":"sortController.js","sourcesContent":["import { Autowired, Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Column } from \"./entities/column\";\nimport { Constants } from \"./constants/constants\";\nimport { ColumnApi } from \"./columns/columnApi\";\nimport { ColumnModel } from \"./columns/columnModel\";\nimport { ColumnEventType, Events, SortChangedEvent } from \"./events\";\nimport { GridApi } from \"./gridApi\";\nimport { SortOption } from \"./rowNodes/rowNodeSorter\";\n\nexport interface SortModelItem {\n    colId: string;\n    sort: string;\n}\n\n@Bean('sortController')\nexport class SortController extends BeanStub {\n\n    private static DEFAULT_SORTING_ORDER = [Constants.SORT_ASC, Constants.SORT_DESC, null];\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    public progressSort(column: Column, multiSort: boolean, source: ColumnEventType = \"api\"): void {\n        const nextDirection = this.getNextSortDirection(column);\n        this.setSortForColumn(column, nextDirection, multiSort, source);\n    }\n\n    public setSortForColumn(column: Column, sort: string | null, multiSort: boolean, source: ColumnEventType = \"api\"): void {\n        // auto correct - if sort not legal value, then set it to 'no sort' (which is null)\n        if (sort !== Constants.SORT_ASC && sort !== Constants.SORT_DESC) {\n            sort = null;\n        }\n\n        // update sort on current col\n        column.setSort(sort, source);\n\n        const doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort();\n\n        // clear sort on all columns except this one, and update the icons\n        if (!doingMultiSort) {\n            this.clearSortBarThisColumn(column, source);\n        }\n\n        // sortIndex used for knowing order of cols when multi-col sort\n        this.updateSortIndex(column);\n\n        this.dispatchSortChangedEvents();\n    }\n\n    private updateSortIndex(lastColToChange: Column) {\n        // update sortIndex on all sorting cols\n        const allSortedCols = this.getColumnsWithSortingOrdered();\n        let sortIndex = 0;\n        allSortedCols.forEach(col => {\n            if (col !== lastColToChange) {\n                col.setSortIndex(sortIndex);\n                sortIndex++;\n            }\n        });\n        // last col to change always gets the last sort index, it's added to the end\n        if (lastColToChange.getSort()) {\n            lastColToChange.setSortIndex(sortIndex);\n        }\n\n        // clear sort index on all cols not sorting\n        const allCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();\n        allCols.filter(col => col.getSort() == null).forEach(col => col.setSortIndex());\n    }\n\n    // gets called by API, so if data changes, use can call this, which will end up\n    // working out the sort order again of the rows.\n    public onSortChanged(): void {\n        this.dispatchSortChangedEvents();\n    }\n\n    public isSortActive(): boolean {\n        // pull out all the columns that have sorting set\n        const allCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();\n        const sortedCols = allCols.filter(column => !!column.getSort());\n        return sortedCols && sortedCols.length > 0;\n    }\n\n    public dispatchSortChangedEvents(): void {\n        const event: SortChangedEvent = {\n            type: Events.EVENT_SORT_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private clearSortBarThisColumn(columnToSkip: Column, source: ColumnEventType): void {\n        this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach((columnToClear: Column) => {\n            // Do not clear if either holding shift, or if column in question was clicked\n            if (columnToClear !== columnToSkip) {\n                // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise\n                // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.\n                columnToClear.setSort(undefined, source);\n            }\n        });\n    }\n\n    private getNextSortDirection(column: Column): string | null {\n        let sortingOrder: (string | null)[] | null | undefined;\n\n        if (column.getColDef().sortingOrder) {\n            sortingOrder = column.getColDef().sortingOrder;\n        } else if (this.gridOptionsWrapper.getSortingOrder()) {\n            sortingOrder = this.gridOptionsWrapper.getSortingOrder();\n        } else {\n            sortingOrder = SortController.DEFAULT_SORTING_ORDER;\n        }\n\n        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {\n            console.warn(`ag-grid: sortingOrder must be an array with at least one element, currently it\\'s ${sortingOrder}`);\n            return null;\n        }\n\n        const currentIndex = sortingOrder.indexOf(column.getSort()!);\n        const notInArray = currentIndex < 0;\n        const lastItemInArray = currentIndex == sortingOrder.length - 1;\n        let result: string | null;\n\n        if (notInArray || lastItemInArray) {\n            result = sortingOrder[0];\n        } else {\n            result = sortingOrder[currentIndex + 1];\n        }\n\n        // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid\n        if (SortController.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {\n            console.warn('ag-grid: invalid sort type ' + result);\n            return null;\n        }\n\n        return result;\n    }\n\n    public getColumnsWithSortingOrdered(): Column[] {\n        // pull out all the columns that have sorting set\n        const allColumnsIncludingAuto = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();\n        const columnsWithSorting = allColumnsIncludingAuto.filter(column => !!column.getSort());\n\n        // when both cols are missing sortIndex, we use the position of the col in all cols list.\n        // this means if colDefs only have sort, but no sortIndex, we deterministically pick which\n        // cols is sorted by first.\n        const allColsIndexes: {[id:string]:number} = {};\n        allColumnsIncludingAuto.forEach((col: Column, index: number) => allColsIndexes[col.getId()] = index);\n\n        // put the columns in order of which one got sorted first\n        columnsWithSorting.sort((a: Column, b: Column) => {\n            const iA = a.getSortIndex();\n            const iB = b.getSortIndex();\n            if (iA != null && iB != null) {\n                return iA - iB; // both present, normal comparison\n            } else if (iA == null && iB == null) {\n                // both missing, compare using column positions\n                const posA = allColsIndexes[a.getId()];\n                const posB = allColsIndexes[b.getId()];\n                return posA > posB ? 1 : -1;\n            } else if (iB == null) {\n                return -1; // iB missing\n            } else {\n                return 1; // iA missing\n            }\n        });\n\n        return columnsWithSorting;\n    }\n\n    // used by server side row models, to sent sort to server\n    public getSortModel(): any[] {\n        return this.getColumnsWithSortingOrdered().map(column => ({\n            sort: column.getSort(),\n            colId: column.getId()\n        }));\n    }\n\n    public getSortOptions(): SortOption[] {\n        return this.getColumnsWithSortingOrdered().map(column => ({\n            sort: column.getSort()!,\n            column\n        }));\n    }\n}\n"]}