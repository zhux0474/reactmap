{"version":3,"sources":["../../src/ts/alignedGridsService.ts"],"names":[],"mappings":"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","file":"alignedGridsService.js","sourcesContent":["import { ColumnModel } from \"./columns/columnModel\";\nimport { Logger } from \"./logger\";\nimport { LoggerFactory } from \"./logger\";\nimport {\n    AgEvent,\n    BodyScrollEvent,\n    ColumnEvent,\n    ColumnGroupOpenedEvent,\n    ColumnMovedEvent,\n    ColumnPinnedEvent,\n    ColumnResizedEvent,\n    ColumnVisibleEvent,\n    Events\n} from \"./events\";\nimport { GridOptions } from \"./entities/gridOptions\";\nimport { Column } from \"./entities/column\";\nimport { Bean } from \"./context/context\";\nimport { Qualifier } from \"./context/context\";\nimport { Autowired } from \"./context/context\";\nimport { PostConstruct } from \"./context/context\";\nimport { ProvidedColumnGroup } from \"./entities/providedColumnGroup\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { CtrlsService } from \"./ctrlsService\";\n\n@Bean('alignedGridsService')\nexport class AlignedGridsService extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private logger: Logger;\n\n    // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master\n    // while processing a master event) we mark this if consuming an event, and if we are, then\n    // we don't fire back any events.\n    private consuming = false;\n\n    private setBeans(@Qualifier('loggerFactory') loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create('AlignedGridsService');\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));\n    }\n\n    // common logic across all the fire methods\n    private fireEvent(callback: (alignedGridService: AlignedGridsService) => void): void {\n        // if we are already consuming, then we are acting on an event from a master,\n        // so we don't cause a cyclic firing of events\n        if (this.consuming) {\n            return;\n        }\n\n        // iterate through the aligned grids, and pass each aligned grid service to the callback\n        const otherGrids = this.gridOptionsWrapper.getAlignedGrids();\n        if (otherGrids) {\n            otherGrids.forEach((otherGridOptions: GridOptions) => {\n                if (otherGridOptions.api) {\n                    const alignedGridService = otherGridOptions.api.__getAlignedGridService();\n                    callback(alignedGridService);\n                }\n            });\n        }\n    }\n\n    // common logic across all consume methods. very little common logic, however extracting\n    // guarantees consistency across the methods.\n    private onEvent(callback: () => void): void {\n        this.consuming = true;\n        callback();\n        this.consuming = false;\n    }\n\n    private fireColumnEvent(event: ColumnEvent): void {\n        this.fireEvent(alignedGridsService => {\n            alignedGridsService.onColumnEvent(event);\n        });\n    }\n\n    private fireScrollEvent(event: BodyScrollEvent): void {\n        if (event.direction !== 'horizontal') { return; }\n        this.fireEvent(alignedGridsService => {\n            alignedGridsService.onScrollEvent(event);\n        });\n    }\n\n    private onScrollEvent(event: BodyScrollEvent): void {\n        this.onEvent(() => {\n            const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            gridBodyCon.getScrollFeature().setHorizontalScrollPosition(event.left);\n        });\n    }\n\n    public getMasterColumns(event: ColumnEvent): Column[] {\n        const result: Column[] = [];\n        if (event.columns) {\n            event.columns.forEach((column: Column) => {\n                result.push(column);\n            });\n        } else if (event.column) {\n            result.push(event.column);\n        }\n        return result;\n    }\n\n    public getColumnIds(event: ColumnEvent): string[] {\n        const result: string[] = [];\n        if (event.columns) {\n            event.columns.forEach(column => {\n                result.push(column.getColId());\n            });\n        } else if (event.column) {\n            result.push(event.column.getColId());\n        }\n        return result;\n    }\n\n    public onColumnEvent(event: AgEvent): void {\n        this.onEvent(() => {\n\n            switch (event.type) {\n\n                case Events.EVENT_COLUMN_MOVED:\n                case Events.EVENT_COLUMN_VISIBLE:\n                case Events.EVENT_COLUMN_PINNED:\n                case Events.EVENT_COLUMN_RESIZED:\n                    const colEvent = event as ColumnEvent;\n                    this.processColumnEvent(colEvent);\n                    break;\n\n                case Events.EVENT_COLUMN_GROUP_OPENED:\n                    const groupOpenedEvent = event as ColumnGroupOpenedEvent;\n                    this.processGroupOpenedEvent(groupOpenedEvent);\n                    break;\n\n                case Events.EVENT_COLUMN_PIVOT_CHANGED:\n                    // we cannot support pivoting with aligned grids as the columns will be out of sync as the\n                    // grids will have columns created based on the row data of the grid.\n                    console.warn('AG Grid: pivoting is not supported with aligned grids. ' +\n                        'You can only use one of these features at a time in a grid.');\n                    break;\n            }\n\n        });\n    }\n\n    private processGroupOpenedEvent(groupOpenedEvent: ColumnGroupOpenedEvent): void {\n        // likewise for column group\n        const masterColumnGroup = groupOpenedEvent.columnGroup;\n        let otherColumnGroup: ProvidedColumnGroup | null = null;\n\n        if (masterColumnGroup) {\n            const groupId = masterColumnGroup.getGroupId();\n            otherColumnGroup = this.columnModel.getOriginalColumnGroup(groupId);\n        }\n\n        if (masterColumnGroup && !otherColumnGroup) { return; }\n\n        this.logger.log('onColumnEvent-> processing ' + groupOpenedEvent + ' expanded = ' + masterColumnGroup.isExpanded());\n        this.columnModel.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), \"alignedGridChanged\");\n    }\n\n    private processColumnEvent(colEvent: ColumnEvent): void {\n        // the column in the event is from the master grid. need to\n        // look up the equivalent from this (other) grid\n        const masterColumn = colEvent.column;\n        let otherColumn: Column | null = null;\n\n        if (masterColumn) {\n            otherColumn = this.columnModel.getPrimaryColumn(masterColumn.getColId());\n        }\n        // if event was with respect to a master column, that is not present in this\n        // grid, then we ignore the event\n        if (masterColumn && !otherColumn) { return; }\n\n        // in time, all the methods below should use the column ids, it's a more generic way\n        // of handling columns, and also allows for single or multi column events\n        const masterColumns = this.getMasterColumns(colEvent);\n\n        switch (colEvent.type) {\n            case Events.EVENT_COLUMN_MOVED:\n                // when the user moves columns via setColumnState, we can't depend on moving specific columns\n                // to an index, as there maybe be many indexes columns moved to (as wasn't result of a mouse drag).\n                // so only way to be sure is match the order of all columns using Column State.\n                {\n                    const movedEvent = colEvent as ColumnMovedEvent;\n                    const srcColState = colEvent.columnApi.getColumnState();\n                    const destColState = srcColState.map(s => ({ colId: s.colId }));\n                    this.columnModel.applyColumnState(\n                        {state: destColState, applyOrder: true}, \"alignedGridChanged\");\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} toIndex = ${movedEvent.toIndex}`);\n                }\n                break;\n            case Events.EVENT_COLUMN_VISIBLE:\n                // when the user changes visibility via setColumnState, we can't depend on visibility flag in event\n                // as there maybe be mix of true/false (as wasn't result of a mouse click to set visiblity).\n                // so only way to be sure is match the visibility of all columns using Column State.\n                {\n                    const visibleEvent = colEvent as ColumnVisibleEvent;\n                    const srcColState = colEvent.columnApi.getColumnState();\n                    const destColState = srcColState.map(s => ({ colId: s.colId, hide: s.hide }));\n                    this.columnModel.applyColumnState({state: destColState}, \"alignedGridChanged\");\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} visible = ${visibleEvent.visible}`);\n                }\n                break;\n            case Events.EVENT_COLUMN_PINNED:\n                {\n                    const pinnedEvent = colEvent as ColumnPinnedEvent;\n                    const srcColState = colEvent.columnApi.getColumnState();\n                    const destColState = srcColState.map(s => ({ colId: s.colId, pinned: s.pinned }));\n                    this.columnModel.applyColumnState({state: destColState}, \"alignedGridChanged\");\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} pinned = ${pinnedEvent.pinned}`);\n                }\n                break;\n            case Events.EVENT_COLUMN_RESIZED:\n                const resizedEvent = colEvent as ColumnResizedEvent;\n\n                masterColumns.forEach((column: Column) => {\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} actualWidth = ${column.getActualWidth()}`);\n                    const columnWidths = [{key: column.getColId(), newWidth: column.getActualWidth()}];\n                    this.columnModel.setColumnWidths(columnWidths, false, resizedEvent.finished, \"alignedGridChanged\");\n                });\n                break;\n        }\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const isVerticalScrollShowing = gridBodyCon.isVerticalScrollShowing();\n        const alignedGrids = this.gridOptionsWrapper.getAlignedGrids();\n\n        if (alignedGrids) {\n            alignedGrids.forEach((grid) => {\n                if (grid.api) {\n                    grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing);\n                }\n            });\n        }\n    }\n}\n"]}