{"version":3,"sources":["../../src/ts/valueService/valueCache.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAAyD;AAEzD,gDAA+C;AAG/C;IAAgC,8BAAQ;IAAxC;QAAA,qEAwCC;QAtCW,kBAAY,GAAG,CAAC,CAAC;;IAsC7B,CAAC;IAjCU,yBAAI,GAAX;QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;QACrD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,EAAE,CAAC;IAC3E,CAAC;IAEM,kCAAa,GAApB;QACI,IAAI,IAAI,CAAC,YAAY,EAAE;YAAE,OAAO;SAAE;QAElC,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAEM,2BAAM,GAAb;QACI,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAEM,6BAAQ,GAAf,UAAgB,OAAgB,EAAE,KAAa,EAAE,KAAU;QACvD,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,IAAI,OAAO,CAAC,cAAc,KAAK,IAAI,CAAC,YAAY,EAAE;gBAC9C,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC;gBAC3C,OAAO,CAAC,WAAW,GAAG,EAAE,CAAC;aAC5B;YAED,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;SACtC;IACL,CAAC;IAEM,6BAAQ,GAAf,UAAgB,OAAgB,EAAE,KAAa;QAC3C,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,cAAc,KAAK,IAAI,CAAC,YAAY,EAAE;YAC9D,OAAO,SAAS,CAAC;SACpB;QAED,OAAO,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAhCD;QADC,uBAAa;0CAIb;IAVQ,UAAU;QADtB,cAAI,CAAC,YAAY,CAAC;OACN,UAAU,CAwCtB;IAAD,iBAAC;CAxCD,AAwCC,CAxC+B,mBAAQ,GAwCvC;AAxCY,gCAAU","file":"valueCache.js","sourcesContent":["import { Bean, PostConstruct } from \"../context/context\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { BeanStub } from \"../context/beanStub\";\n\n@Bean('valueCache')\nexport class ValueCache extends BeanStub {\n\n    private cacheVersion = 0;\n    private active: boolean;\n    private neverExpires: boolean;\n\n    @PostConstruct\n    public init(): void {\n        this.active = this.gridOptionsWrapper.isValueCache();\n        this.neverExpires = this.gridOptionsWrapper.isValueCacheNeverExpires();\n    }\n\n    public onDataChanged(): void {\n        if (this.neverExpires) { return; }\n\n        this.expire();\n    }\n\n    public expire(): void {\n        this.cacheVersion++;\n    }\n\n    public setValue(rowNode: RowNode, colId: string, value: any): any {\n        if (this.active) {\n            if (rowNode.__cacheVersion !== this.cacheVersion) {\n                rowNode.__cacheVersion = this.cacheVersion;\n                rowNode.__cacheData = {};\n            }\n\n            rowNode.__cacheData[colId] = value;\n        }\n    }\n\n    public getValue(rowNode: RowNode, colId: string): any {\n        if (!this.active || rowNode.__cacheVersion !== this.cacheVersion) {\n            return undefined;\n        }\n\n        return rowNode.__cacheData[colId];\n    }\n}\n"]}