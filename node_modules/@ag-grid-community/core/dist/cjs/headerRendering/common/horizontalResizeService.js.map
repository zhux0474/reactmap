{"version":3,"sources":["../../src/ts/headerRendering/common/horizontalResizeService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iDAAwD;AAExD,mDAAkD;AAYlD;IAA6C,2CAAQ;IAArD;;IA4DA,CAAC;IApDU,8CAAY,GAAnB,UAAoB,MAA8B;QAAlD,iBAgBC;QAfG,IAAM,UAAU,GAAuB;YACnC,eAAe,EAAE,MAAM,CAAC,eAAe,IAAI,CAAC;YAC5C,QAAQ,EAAE,MAAM,CAAC,UAAU;YAC3B,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;YAChD,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;YAC9C,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;SACjD,CAAC;QAEF,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAEjD,wEAAwE;QACxE,qEAAqE;QACrE,IAAM,sBAAsB,GAAG,cAAM,OAAA,KAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAA7C,CAA6C,CAAC;QAEnF,OAAO,sBAAsB,CAAC;IAClC,CAAC;IAEO,6CAAW,GAAnB,UAAoB,MAA8B,EAAE,UAA8B;QAC9E,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC;QAErC,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,IAAM,QAAQ,GAAG,UAAU,YAAY,UAAU,IAAI,UAAU,CAAC,QAAQ,KAAK,IAAI,CAAC;QAClF,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAEO,gDAAc,GAAtB;QAEI,IAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;QAC7C,0GAA0G;QAC1G,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC3B,2GAA2G;QAC3G,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAEO,4CAAU,GAAlB,UAAmB,MAA8B,EAAE,UAA8B;QAC7E,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACtC,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAEO,4CAAU,GAAlB;QACI,IAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC5B,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAEO,4CAAU,GAAlB,UAAmB,MAA8B,EAAE,UAA8B;QAC7E,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;QACzD,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACzC,CAAC;IAxDyB;QAAzB,mBAAS,CAAC,aAAa,CAAC;gEAAkC;IAChC;QAA1B,mBAAS,CAAC,cAAc,CAAC;iEAAoC;IAHrD,uBAAuB;QADnC,cAAI,CAAC,yBAAyB,CAAC;OACnB,uBAAuB,CA4DnC;IAAD,8BAAC;CA5DD,AA4DC,CA5D4C,mBAAQ,GA4DpD;AA5DY,0DAAuB","file":"horizontalResizeService.js","sourcesContent":["import { Autowired, Bean } from \"../../context/context\";\nimport { DragListenerParams, DragService } from \"../../dragAndDrop/dragService\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { CtrlsService } from \"../../ctrlsService\";\n\nexport interface HorizontalResizeParams {\n    eResizeBar: HTMLElement;\n    dragStartPixels?: number;\n    onResizeStart: (shiftKey: boolean) => void;\n    onResizing: (delta: number) => void;\n    onResizeEnd: (delta: number) => void;\n}\n\n@Bean('horizontalResizeService')\nexport class HorizontalResizeService extends BeanStub {\n\n    @Autowired('dragService') private dragService: DragService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private dragStartX: number;\n    private resizeAmount: number;\n\n    public addResizeBar(params: HorizontalResizeParams): () => void {\n        const dragSource: DragListenerParams = {\n            dragStartPixels: params.dragStartPixels || 0,\n            eElement: params.eResizeBar,\n            onDragStart: this.onDragStart.bind(this, params),\n            onDragStop: this.onDragStop.bind(this, params),\n            onDragging: this.onDragging.bind(this, params)\n        };\n\n        this.dragService.addDragSource(dragSource, true);\n\n        // we pass remove func back to the caller, so call can tell us when they\n        // are finished, and then we remove the listener from the drag source\n        const finishedWithResizeFunc = () => this.dragService.removeDragSource(dragSource);\n\n        return finishedWithResizeFunc;\n    }\n\n    private onDragStart(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void {\n        this.dragStartX = mouseEvent.clientX;\n\n        this.setResizeIcons();\n\n        const shiftKey = mouseEvent instanceof MouseEvent && mouseEvent.shiftKey === true;\n        params.onResizeStart(shiftKey);\n    }\n\n    private setResizeIcons(): void {\n\n        const ctrl = this.ctrlsService.getGridCtrl();\n        // change the body cursor, so when drag moves out of the drag bar, the cursor is still 'resize' (or 'move'\n        ctrl.setResizeCursor(true);\n        // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)\n        ctrl.disableUserSelect(true);\n    }\n\n    private onDragStop(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void {\n        params.onResizeEnd(this.resizeAmount);\n        this.resetIcons();\n    }\n\n    private resetIcons(): void {\n        const ctrl = this.ctrlsService.getGridCtrl();\n        ctrl.setResizeCursor(false);\n        ctrl.disableUserSelect(false);\n    }\n\n    private onDragging(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void {\n        this.resizeAmount = mouseEvent.clientX - this.dragStartX;\n        params.onResizing(this.resizeAmount);\n    }\n\n}\n"]}