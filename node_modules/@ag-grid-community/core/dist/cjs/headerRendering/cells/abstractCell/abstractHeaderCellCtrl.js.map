{"version":3,"sources":["../../src/ts/headerRendering/cells/abstractCell/abstractHeaderCellCtrl.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sDAAqD;AACrD,oDAAqD;AAGrD,oDAA+E;AAI/E,IAAI,kBAAkB,GAAG,CAAC,CAAC;AAK3B;IAA4C,0CAAQ;IAgBhD,gCAAY,gBAA+B,EAAE,aAA4B;QAAzE,YACI,iBAAO,SAOV;QAVM,oBAAc,GAAyB,IAAI,CAAC;QAK/C,KAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,KAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QAEnC,4GAA4G;QAC5G,KAAI,CAAC,UAAU,GAAG,gBAAgB,CAAC,WAAW,EAAE,GAAG,GAAG,GAAG,kBAAkB,EAAE,CAAC;;IAClF,CAAC;IAES,2DAA0B,GAApC,UAAqC,CAAgB;QAC3C,IAAA,yCAAkE,EAAhE,kCAAc,EAAE,kBAAgD,CAAC;QAEzE,OAAO,+CAAoC,CACvC,IAAI,CAAC,kBAAkB,EACvB,CAAC,EACD,cAAc,EACd,MAAM,CACT,CAAC;IACN,CAAC;IAES,uCAAM,GAAhB,UAAiB,IAAiB;QAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAEO,2CAAU,GAAlB;QAAA,iBAIC;QAHG,IAAM,GAAG,GAAG,sBAAsB,CAAC,wBAAwB,CAAC;QAC5D,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QACzD,IAAI,CAAC,cAAc,CAAC,cAAM,OAAA,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAI,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,EAAxD,CAAwD,CAAC,CAAC;IACxF,CAAC;IAEM,sCAAK,GAAZ,UAAa,KAAqB;QAC9B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YAAE,OAAO,KAAK,CAAC;SAAE;QAEjC,IAAI,CAAC,cAAc,GAAG,KAAK,IAAI,IAAI,CAAC;QACpC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,4CAAW,GAAlB;QACI,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;IAC5C,CAAC;IAEM,iDAAgB,GAAvB;QACI,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAEM,0CAAS,GAAhB;QACI,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC;IAC1C,CAAC;IAEM,8CAAa,GAApB;QACI,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAEM,oDAAmB,GAA1B;QACI,OAAO,IAAI,CAAC,gBAAgB,CAAC;IACjC,CAAC;IAxEa,+CAAwB,GAAG,YAAY,CAAC;IAE3B;QAA1B,mBAAS,CAAC,cAAc,CAAC;gEAAsC;IAuEpE,6BAAC;CA3ED,AA2EC,CA3E2C,mBAAQ,GA2EnD;AA3EY,wDAAsB","file":"abstractHeaderCellCtrl.js","sourcesContent":["import { BeanStub } from \"../../../context/beanStub\";\nimport { Autowired } from \"../../../context/context\";\nimport { IHeaderColumn } from \"../../../entities/iHeaderColumn\";\nimport { FocusService } from \"../../../focusService\";\nimport { isUserSuppressingHeaderKeyboardEvent } from \"../../../utils/keyboard\";\nimport { HeaderRowCtrl } from \"../../row/headerRowCtrl\";\nimport { IHeaderCellComp } from \"../column/headerCellCtrl\";\n\nlet instanceIdSequence = 0;\n\nexport interface IAbstractHeaderCellComp {\n}\n\nexport class AbstractHeaderCellCtrl extends BeanStub {\n\n    public static DOM_DATA_KEY_HEADER_CTRL = 'headerCtrl';\n\n    @Autowired('focusService') protected focusService: FocusService;\n\n    private instanceId: string;\n\n    private columnGroupChild: IHeaderColumn;\n\n    private parentRowCtrl: HeaderRowCtrl;\n\n    protected eGui: HTMLElement;\n\n    public lastFocusEvent: KeyboardEvent | null = null;\n\n    constructor(columnGroupChild: IHeaderColumn, parentRowCtrl: HeaderRowCtrl) {\n        super();\n\n        this.columnGroupChild = columnGroupChild;\n        this.parentRowCtrl = parentRowCtrl;\n\n        // unique id to this instance, including the column ID to help with debugging in React as it's used in 'key'\n        this.instanceId = columnGroupChild.getUniqueId() + '-' + instanceIdSequence++;\n    }\n\n    protected shouldStopEventPropagation(e: KeyboardEvent): boolean {\n        const { headerRowIndex, column } = this.focusService.getFocusedHeader()!;\n\n        return isUserSuppressingHeaderKeyboardEvent(\n            this.gridOptionsWrapper,\n            e,\n            headerRowIndex,\n            column\n        );\n    }\n\n    protected setGui(eGui: HTMLElement): void {\n        this.eGui = eGui;\n        this.addDomData();\n    }\n\n    private addDomData(): void {\n        const key = AbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL;\n        this.gridOptionsWrapper.setDomData(this.eGui, key, this);\n        this.addDestroyFunc(() => this.gridOptionsWrapper.setDomData(this.eGui, key, null));\n    }\n\n    public focus(event?: KeyboardEvent): boolean {\n        if (!this.eGui) { return false; }\n\n        this.lastFocusEvent = event || null;\n        this.eGui.focus();\n        return true;\n    }\n\n    public getRowIndex(): number {\n        return this.parentRowCtrl.getRowIndex();\n    }\n\n    public getParentRowCtrl(): HeaderRowCtrl {\n        return this.parentRowCtrl;\n    }\n\n    public getPinned(): string | null {\n        return this.parentRowCtrl.getPinned();\n    }\n\n    public getInstanceId(): string {\n        return this.instanceId;\n    }\n\n    public getColumnGroupChild(): IHeaderColumn {\n        return this.columnGroupChild;\n    }\n}\n"]}