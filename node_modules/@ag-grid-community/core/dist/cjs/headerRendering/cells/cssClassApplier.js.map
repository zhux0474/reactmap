{"version":3,"sources":["../../src/ts/headerRendering/cells/cssClassApplier.ts"],"names":[],"mappings":";;;;;;;;AAKA,+CAA8C;AAG9C;IAAA;IAgDA,CAAC;IA9CiB,0CAA0B,GAAxC,UAAyC,cAAqC,EAAE,kBAAsC,EAAE,MAAqB,EAAE,WAA+B;QAC1K,IAAI,iBAAO,CAAC,cAAc,CAAC,EAAE;YAAE,OAAO,EAAE,CAAC;SAAE;QAC3C,OAAO,IAAI,CAAC,2BAA2B,CAAC,cAAc,CAAC,WAAW,EAAE,cAAc,EAAE,kBAAkB,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;IACjI,CAAC;IAEa,6CAA6B,GAA3C,UAA4C,cAAqC,EAAE,kBAAsC,EAAE,MAAqB,EAAE,WAAuC;QACrL,IAAI,iBAAO,CAAC,cAAc,CAAC,EAAE;YAAE,OAAO,EAAE,CAAC;SAAE;QAC3C,OAAO,IAAI,CAAC,2BAA2B,CAAC,cAAc,CAAC,cAAc,EAAE,cAAc,EAAE,kBAAkB,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;IACpI,CAAC;IAEc,2CAA2B,GAA1C,UAA2C,aAG6D,EAC9D,cAA8B,EAC9B,kBAAsC,EACtC,MAAqB,EACrB,WAAqD;QAC3F,IAAI,iBAAO,CAAC,aAAa,CAAC,EAAE;YACxB,OAAO,EAAE,CAAC;SACb;QACD,IAAI,UAA6B,CAAC;QAClC,IAAI,OAAO,aAAa,KAAK,UAAU,EAAE;YACrC,IAAM,MAAM,GAAsB;gBAC9B,yDAAyD;gBACzD,uDAAuD;gBACvD,8CAA8C;gBAC9C,MAAM,EAAE,cAAc;gBACtB,MAAM,EAAE,MAAM;gBACd,WAAW,EAAE,WAAW;gBACxB,OAAO,EAAE,kBAAkB,CAAC,UAAU,EAAE;gBACxC,GAAG,EAAE,kBAAkB,CAAC,MAAM,EAAG;aACpC,CAAC;YACF,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;SACtC;aAAM;YACH,UAAU,GAAG,aAAa,CAAC;SAC9B;QAED,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YAChC,OAAO,CAAC,UAAU,CAAC,CAAC;SACvB;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YAClC,OAAO,UAAU,CAAA;SACpB;aAAM;YACH,OAAO,EAAE,CAAC;SACb;IACL,CAAC;IACL,sBAAC;AAAD,CAhDA,AAgDC,IAAA;AAhDY,0CAAe","file":"cssClassApplier.js","sourcesContent":["import { AbstractColDef, HeaderClassParams, ToolPanelClassParams } from \"../../entities/colDef\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { Column } from \"../../entities/column\";\nimport { ProvidedColumnGroup } from \"../../entities/providedColumnGroup\";\nimport { missing } from \"../../utils/generic\";\nimport { addCssClass } from \"../../utils/dom\";\n\nexport class CssClassApplier {\n\n    public static getHeaderClassesFromColDef(abstractColDef: AbstractColDef | null, gridOptionsWrapper: GridOptionsWrapper, column: Column | null, columnGroup: ColumnGroup | null): string[] {\n        if (missing(abstractColDef)) { return []; }\n        return this.getColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, gridOptionsWrapper, column, columnGroup);\n    }\n\n    public static getToolPanelClassesFromColDef(abstractColDef: AbstractColDef | null, gridOptionsWrapper: GridOptionsWrapper, column: Column | null, columnGroup: ProvidedColumnGroup | null): string[] {\n        if (missing(abstractColDef)) { return []; }\n        return this.getColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, gridOptionsWrapper, column, columnGroup);\n    }\n\n    private static getColumnClassesFromCollDef(classesOrFunc: string \n                                                            | string[] \n                                                            | ((params: HeaderClassParams | ToolPanelClassParams) \n                                                                    => string | string[]) | null | undefined,\n                                              abstractColDef: AbstractColDef,\n                                              gridOptionsWrapper: GridOptionsWrapper,\n                                              column: Column | null,\n                                              columnGroup: ColumnGroup | ProvidedColumnGroup | null): string[] {\n        if (missing(classesOrFunc)) {\n            return [];\n        }\n        let classToUse: string | string[];\n        if (typeof classesOrFunc === 'function') {\n            const params: HeaderClassParams = {\n                // bad naming, as colDef here can be a group or a column,\n                // however most people won't appreciate the difference,\n                // so keeping it as colDef to avoid confusion.\n                colDef: abstractColDef,\n                column: column,\n                columnGroup: columnGroup,\n                context: gridOptionsWrapper.getContext(),\n                api: gridOptionsWrapper.getApi()!\n            };\n            classToUse = classesOrFunc(params);\n        } else {\n            classToUse = classesOrFunc;\n        }\n\n        if (typeof classToUse === 'string') {\n            return [classToUse];\n        } else if (Array.isArray(classToUse)) {\n            return classToUse\n        } else {\n            return [];\n        }\n    }\n}"]}