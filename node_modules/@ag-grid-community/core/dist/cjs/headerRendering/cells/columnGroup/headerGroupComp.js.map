{"version":3,"sources":["../../src/ts/headerRendering/cells/columnGroup/headerGroupComp.ts"],"names":[],"mappings":"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","file":"headerGroupComp.js","sourcesContent":["import { Component } from \"../../../widgets/component\";\nimport { IComponent } from \"../../../interfaces/iComponent\";\nimport { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { ColumnApi } from \"../../../columns/columnApi\";\nimport { ColumnModel } from \"../../../columns/columnModel\";\nimport { Autowired } from \"../../../context/context\";\nimport { TouchListener } from \"../../../widgets/touchListener\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations\";\nimport { ProvidedColumnGroup } from \"../../../entities/providedColumnGroup\";\nimport { GridApi } from \"../../../gridApi\";\nimport { escapeString } from \"../../../utils/string\";\nimport { isStopPropagationForAgGrid, stopPropagationForAgGrid } from \"../../../utils/event\";\nimport { setDisplayed } from \"../../../utils/dom\";\nimport { createIconNoSpan } from \"../../../utils/icon\";\nimport { exists } from \"../../../utils/generic\";\nimport { doOnce } from \"../../../utils/function\";\n\nexport interface IHeaderGroupParams {\n    /** The column group the header is for. */\n    columnGroup: ColumnGroup;\n    /** \n     * The text label to render.\n     * If the column is using a headerValueGetter, the displayName will take this into account.  \n     */\n    displayName: string;\n    /** Opens / closes the column group */\n    setExpanded: (expanded: boolean) => void;\n    api: GridApi;\n    columnApi: ColumnApi;\n    /** The context as provided on `gridOptions.context` */\n    context: any;\n}\n\nexport interface IHeaderGroup { }\n\nexport interface IHeaderGroupComp extends IHeaderGroup, IComponent<IHeaderGroupParams> { }\n\nexport class HeaderGroupComp extends Component implements IHeaderGroupComp {\n\n    @Autowired(\"columnModel\") private columnModel: ColumnModel;\n\n    static TEMPLATE = /* html */\n        `<div class=\"ag-header-group-cell-label\" ref=\"agContainer\" role=\"presentation\">\n            <span ref=\"agLabel\" class=\"ag-header-group-text\" role=\"presentation\"></span>\n            <span ref=\"agOpened\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded\"></span>\n            <span ref=\"agClosed\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed\"></span>\n        </div>`;\n\n    private params: IHeaderGroupParams;\n\n    @RefSelector(\"agOpened\") private eOpenIcon: HTMLElement;\n    @RefSelector(\"agClosed\") private eCloseIcon: HTMLElement;\n\n    constructor() {\n        super(HeaderGroupComp.TEMPLATE);\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IHeaderGroupParams): void {\n        this.params = params;\n\n        this.checkWarnings();\n\n        this.setupLabel();\n        this.addGroupExpandIcon();\n        this.setupExpandIcons();\n    }\n\n    private checkWarnings(): void {\n        const paramsAny = this.params as any;\n\n        if (paramsAny.template) {\n            const message = `A template was provided for Header Group Comp - templates are only supported for Header Comps (not groups)`;\n            doOnce(() => console.warn(message), 'HeaderGroupComp.templateNotSupported');\n        }\n    }\n\n    private setupExpandIcons(): void {\n        this.addInIcon(\"columnGroupOpened\", \"agOpened\");\n        this.addInIcon(\"columnGroupClosed\", \"agClosed\");\n\n        const expandAction = (event: MouseEvent) => {\n            if (isStopPropagationForAgGrid(event)) {\n                return;\n            }\n\n            const newExpandedValue = !this.params.columnGroup.isExpanded();\n            this.columnModel.setColumnGroupOpened(this.params.columnGroup.getOriginalColumnGroup(), newExpandedValue, \"uiColumnExpanded\");\n        };\n\n        this.addTouchAndClickListeners(this.eCloseIcon, expandAction);\n        this.addTouchAndClickListeners(this.eOpenIcon, expandAction);\n\n        const stopPropagationAction = (event: MouseEvent) => {\n            stopPropagationForAgGrid(event);\n        };\n\n        // adding stopPropagation to the double click for the icons prevents double click action happening\n        // when the icons are clicked. if the icons are double clicked, then the groups should open and\n        // then close again straight away. if we also listened to double click, then the group would open,\n        // close, then open, which is not what we want. double click should only action if the user double\n        // clicks outside of the icons.\n        this.addManagedListener(this.eCloseIcon, \"dblclick\", stopPropagationAction);\n        this.addManagedListener(this.eOpenIcon, \"dblclick\", stopPropagationAction);\n\n        this.addManagedListener(this.getGui(), \"dblclick\", expandAction);\n\n        this.updateIconVisibility();\n\n        const originalColumnGroup = this.params.columnGroup.getOriginalColumnGroup();\n        this.addManagedListener(originalColumnGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));\n        this.addManagedListener(originalColumnGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));\n    }\n\n    private addTouchAndClickListeners(eElement: HTMLElement, action: (event: MouseEvent) => void): void {\n        const touchListener = new TouchListener(eElement, true);\n\n        this.addManagedListener(touchListener, TouchListener.EVENT_TAP, action);\n        this.addDestroyFunc(() => touchListener.destroy());\n        this.addManagedListener(eElement, \"click\", action);\n    }\n\n    private updateIconVisibility(): void {\n        const columnGroup = this.params.columnGroup;\n        if (columnGroup.isExpandable()) {\n            const expanded = this.params.columnGroup.isExpanded();\n            setDisplayed(this.eOpenIcon, expanded);\n            setDisplayed(this.eCloseIcon, !expanded);\n        } else {\n            setDisplayed(this.eOpenIcon, false);\n            setDisplayed(this.eCloseIcon, false);\n        }\n    }\n\n    private addInIcon(iconName: string, refName: string): void {\n        const eIcon = createIconNoSpan(iconName, this.gridOptionsWrapper, null);\n        if (eIcon) {\n            this.getRefElement(refName).appendChild(eIcon);\n        }\n    }\n\n    private addGroupExpandIcon() {\n        if (!this.params.columnGroup.isExpandable()) {\n            setDisplayed(this.eOpenIcon, false);\n            setDisplayed(this.eCloseIcon, false);\n            return;\n        }\n    }\n\n    private setupLabel(): void {\n        // no renderer, default text render\n        const displayName = this.params.displayName;\n\n        if (exists(displayName)) {\n            const displayNameSanitised = escapeString(displayName);\n            this.getRefElement('agLabel').innerHTML = displayNameSanitised!;\n        }\n    }\n}\n"]}