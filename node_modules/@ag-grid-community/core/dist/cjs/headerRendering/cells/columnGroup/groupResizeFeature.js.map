{"version":3,"sources":["../../src/ts/headerRendering/cells/columnGroup/groupResizeFeature.ts"],"names":[],"mappings":"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","file":"groupResizeFeature.js","sourcesContent":["import { ColumnModel, ColumnResizeSet } from \"../../../columns/columnModel\";\nimport { Constants } from \"../../../constants/constants\";\nimport { BeanStub } from \"../../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../../context/context\";\nimport { Column } from \"../../../entities/column\";\nimport { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { HorizontalResizeService } from \"../../common/horizontalResizeService\";\nimport { IHeaderGroupCellComp } from \"./headerGroupCellCtrl\";\n\nexport class GroupResizeFeature extends BeanStub {\n\n    private eResize: HTMLElement;\n    private columnGroup: ColumnGroup;\n    private comp: IHeaderGroupCellComp;\n    private pinned: string | null;\n\n    private resizeCols: Column[];\n    private resizeStartWidth: number;\n    private resizeRatios: number[];\n\n    private resizeTakeFromCols: Column[] | null;\n    private resizeTakeFromStartWidth: number | null;\n    private resizeTakeFromRatios: number[] | null;\n\n    @Autowired('horizontalResizeService') private horizontalResizeService: HorizontalResizeService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    constructor(comp: IHeaderGroupCellComp, eResize: HTMLElement,  pinned: string | null, columnGroup: ColumnGroup) {\n        super();\n\n        this.eResize = eResize;\n        this.comp = comp;\n        this.pinned = pinned;\n        this.columnGroup = columnGroup;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n\n        if (!this.columnGroup.isResizable()) {\n            this.comp.addOrRemoveResizableCssClass('ag-hidden', true);\n            return;\n        }\n\n        const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.eResize,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this, false),\n            onResizeEnd: this.onResizing.bind(this, true)\n        });\n\n        this.addDestroyFunc(finishedWithResizeFunc);\n\n        if (!this.gridOptionsWrapper.isSuppressAutoSize()) {\n            const skipHeaderOnAutoSize = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();\n\n            this.eResize.addEventListener('dblclick', (event: MouseEvent) => {\n                // get list of all the column keys we are responsible for\n                const keys: string[] = [];\n                this.columnGroup.getDisplayedLeafColumns().forEach((column: Column) => {\n                    // not all cols in the group may be participating with auto-resize\n                    if (!column.getColDef().suppressAutoSize) {\n                        keys.push(column.getColId());\n                    }\n                });\n\n                if (keys.length > 0) {\n                    this.columnModel.autoSizeColumns(keys, skipHeaderOnAutoSize, \"uiColumnResized\");\n                }\n            });\n        }\n    }\n\n    public onResizeStart(shiftKey: boolean): void {\n        const leafCols = this.columnGroup.getDisplayedLeafColumns();\n        this.resizeCols = leafCols.filter(col => col.isResizable());\n        this.resizeStartWidth = 0;\n        this.resizeCols.forEach(col => this.resizeStartWidth += col.getActualWidth());\n        this.resizeRatios = [];\n        this.resizeCols.forEach(col => this.resizeRatios.push(col.getActualWidth() / this.resizeStartWidth));\n\n        let takeFromGroup: ColumnGroup | null = null;\n\n        if (shiftKey) {\n            takeFromGroup = this.columnModel.getDisplayedGroupAfter(this.columnGroup);\n        }\n\n        if (takeFromGroup) {\n            const takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();\n\n            this.resizeTakeFromCols = takeFromLeafCols.filter(col => col.isResizable());\n\n            this.resizeTakeFromStartWidth = 0;\n            this.resizeTakeFromCols.forEach(col => this.resizeTakeFromStartWidth! += col.getActualWidth());\n            this.resizeTakeFromRatios = [];\n            this.resizeTakeFromCols.forEach(col => this.resizeTakeFromRatios!.push(col.getActualWidth() / this.resizeTakeFromStartWidth!));\n        } else {\n            this.resizeTakeFromCols = null;\n            this.resizeTakeFromStartWidth = null;\n            this.resizeTakeFromRatios = null;\n        }\n\n        this.comp.addOrRemoveCssClass('ag-column-resizing', true);\n\n    }\n\n    public onResizing(finished: boolean, resizeAmount: any): void {\n        const resizeSets: ColumnResizeSet[] = [];\n        const resizeAmountNormalised = this.normaliseDragChange(resizeAmount);\n\n        resizeSets.push({\n            columns: this.resizeCols,\n            ratios: this.resizeRatios,\n            width: this.resizeStartWidth + resizeAmountNormalised\n        });\n\n        if (this.resizeTakeFromCols) {\n            resizeSets.push({\n                columns: this.resizeTakeFromCols,\n                ratios: this.resizeTakeFromRatios!,\n                width: this.resizeTakeFromStartWidth! - resizeAmountNormalised\n            });\n        }\n\n        this.columnModel.resizeColumnSets(resizeSets, finished, 'uiColumnDragged');\n\n        if (finished) {\n            this.comp.addOrRemoveCssClass('ag-column-resizing', false);\n        }\n    }\n\n    // optionally inverts the drag, depending on pinned and RTL\n    // note - this method is duplicated in RenderedHeaderCell - should refactor out?\n    private normaliseDragChange(dragChange: number): number {\n        let result = dragChange;\n\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            // for RTL, dragging left makes the col bigger, except when pinning left\n            if (this.pinned !== Constants.PINNED_LEFT) {\n                result *= -1;\n            }\n        } else if (this.pinned === Constants.PINNED_RIGHT) {\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n            result *= -1;\n        }\n\n        return result;\n    }\n}"]}