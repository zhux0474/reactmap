{"version":3,"sources":["../../src/ts/headerRendering/row/headerRowCtrl.ts"],"names":[],"mappings":"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","file":"headerRowCtrl.js","sourcesContent":["import { ColumnModel } from \"../../columns/columnModel\";\nimport { Constants } from \"../../constants/constants\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Autowired } from \"../../context/context\";\nimport { Column } from \"../../entities/column\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { IHeaderColumn } from \"../../entities/iHeaderColumn\";\nimport { Events } from \"../../eventKeys\";\nimport { FocusService } from \"../../focusService\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { isBrowserSafari } from \"../../utils/browser\";\nimport { find } from \"../../utils/generic\";\nimport { getAllValuesInObject, iterateObject } from \"../../utils/object\";\nimport { AbstractHeaderCellCtrl } from \"../cells/abstractCell/abstractHeaderCellCtrl\";\nimport { HeaderFilterCellCtrl } from \"../cells/floatingFilter/headerFilterCellCtrl\";\nimport { HeaderCellCtrl } from \"../cells/column/headerCellCtrl\";\nimport { HeaderGroupCellCtrl } from \"../cells/columnGroup/headerGroupCellCtrl\";\nimport { HeaderRowType } from \"./headerRowComp\";\nimport { _ } from \"../../utils\";\n\nexport interface IHeaderRowComp {\n    setTransform(transform: string): void;\n    setTop(top: string): void;\n    setHeight(height: string): void;\n    setHeaderCtrls(ctrls: AbstractHeaderCellCtrl[]): void;\n    setWidth(width: string): void;\n    setAriaRowIndex(rowIndex: number): void;\n}\n\nlet instanceIdSequence = 0;\n\nexport class HeaderRowCtrl extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('focusService') private focusService: FocusService;\n\n    private comp: IHeaderRowComp;\n    private rowIndex: number;\n    private pinned: string | null;\n    private type: HeaderRowType;\n\n    private instanceId = instanceIdSequence++;\n\n    private headerCellCtrls: { [key: string]: AbstractHeaderCellCtrl } = {};\n\n    constructor(rowIndex: number, pinned: string | null, type: HeaderRowType) {\n        super();\n        this.rowIndex = rowIndex;\n        this.pinned = pinned;\n        this.type = type;\n    }\n\n    public getInstanceId(): number {\n        return this.instanceId;\n    }\n\n    public setComp(comp: IHeaderRowComp): void {\n        this.comp = comp;\n\n        this.onRowHeightChanged();\n        this.onVirtualColumnsChanged();\n        this.setWidth();\n\n        this.addEventListeners();\n\n        if (isBrowserSafari()) {\n            // fix for a Safari rendering bug that caused the header to flicker above chart panels\n            // as you move the mouse over the header\n            this.comp.setTransform('translateZ(0)');\n        }\n\n        comp.setAriaRowIndex(this.rowIndex + 1);\n    }\n\n    private addEventListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));\n\n        // when print layout changes, it changes what columns are in what section\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDisplayedColumnsChanged.bind(this));\n\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        \n        this.addManagedListener(this.eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));\n\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.onRowHeightChanged.bind(this));\n    }\n\n    public getHtmlElementForColumnHeader(column: Column): HTMLElement | undefined {\n        if (this.type != HeaderRowType.COLUMN) { return; }\n\n        const cellCtrl = find(this.headerCellCtrls, cellCtrl => cellCtrl.getColumnGroupChild() == column);\n        if (!cellCtrl) { return; }\n\n        const res = (cellCtrl as HeaderCellCtrl).getGui();\n\n        return res;\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        this.onVirtualColumnsChanged();\n        this.setWidth();\n    }\n\n    public getType(): HeaderRowType {\n        return this.type;\n    }\n\n    private onColumnResized(): void {\n        this.setWidth();\n    }\n\n    private setWidth(): void {\n        const width = this.getWidthForRow();\n        this.comp.setWidth(width + 'px');\n    }\n\n    private getWidthForRow(): number {\n        const printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n\n        if (printLayout) {\n            const pinned = this.pinned != null;\n            if (pinned) { return 0; }\n\n            return this.columnModel.getContainerWidth(Constants.PINNED_RIGHT)\n                + this.columnModel.getContainerWidth(Constants.PINNED_LEFT)\n                + this.columnModel.getContainerWidth(null);\n        }\n\n        // if not printing, just return the width as normal\n        return this.columnModel.getContainerWidth(this.pinned);\n    }\n\n    private onRowHeightChanged(): void {\n        let headerRowCount = this.columnModel.getHeaderRowCount();\n        const sizes: number[] = [];\n\n        let numberOfFloating = 0;\n        let groupHeight: number | null | undefined;\n        let headerHeight: number | null | undefined;\n\n        if (this.columnModel.isPivotMode()) {\n            groupHeight = this.gridOptionsWrapper.getPivotGroupHeaderHeight();\n            headerHeight = this.gridOptionsWrapper.getPivotHeaderHeight();\n        } else {\n            if (this.columnModel.hasFloatingFilters()) {\n                headerRowCount++;\n                numberOfFloating = 1;\n            }\n\n            groupHeight = this.gridOptionsWrapper.getGroupHeaderHeight();\n            headerHeight = this.gridOptionsWrapper.getHeaderHeight();\n        }\n\n        const numberOfNonGroups = 1 + numberOfFloating;\n        const numberOfGroups = headerRowCount - numberOfNonGroups;\n\n        for (let i = 0; i < numberOfGroups; i++) { sizes.push(groupHeight as number); }\n\n        sizes.push(headerHeight as number);\n\n        for (let i = 0; i < numberOfFloating; i++) { sizes.push(this.gridOptionsWrapper.getFloatingFiltersHeight() as number); }\n\n        let rowHeight = 0;\n\n        for (let i = 0; i < this.rowIndex; i++) { rowHeight += sizes[i]; }\n\n        this.comp.setTop(rowHeight + 'px');\n        this.comp.setHeight(sizes[this.rowIndex] + 'px');\n    }\n\n    public getPinned(): string | null {\n        return this.pinned;\n    }\n\n    public getRowIndex(): number {\n        return this.rowIndex;\n    }\n\n    private onVirtualColumnsChanged(): void {\n        const oldCtrls = this.headerCellCtrls;\n        this.headerCellCtrls = {};\n        const columns = this.getColumnsInViewport();\n\n        columns.forEach(child => {\n            // skip groups that have no displayed children. this can happen when the group is broken,\n            // and this section happens to have nothing to display for the open / closed state.\n            // (a broken group is one that is split, ie columns in the group have a non-group column\n            // in between them)\n            if (child.isEmptyGroup()) {\n                return;\n            }\n\n            const idOfChild = child.getUniqueId();\n\n            // if we already have this cell rendered, do nothing\n            let headerCtrl: AbstractHeaderCellCtrl | undefined = oldCtrls[idOfChild];\n            delete oldCtrls[idOfChild];\n\n            // it's possible there is a new Column with the same ID, but it's for a different Column.\n            // this is common with pivoting, where the pivot cols change, but the id's are still pivot_0,\n            // pivot_1 etc. so if new col but same ID, need to remove the old col here first as we are\n            // about to replace it in the this.headerComps map.\n            const forOldColumn = headerCtrl && headerCtrl.getColumnGroupChild() != child;\n            if (forOldColumn) {\n                this.destroyBean(headerCtrl);\n                headerCtrl = undefined;\n            }\n\n            if (headerCtrl==null) {\n                switch (this.type) {\n                    case HeaderRowType.FLOATING_FILTER:\n                        headerCtrl = this.createBean(new HeaderFilterCellCtrl(child as Column, this));\n                        break;\n                    case HeaderRowType.COLUMN_GROUP:\n                        headerCtrl = this.createBean(new HeaderGroupCellCtrl(child as ColumnGroup, this));\n                        break;\n                    default:\n                        headerCtrl = this.createBean(new HeaderCellCtrl(child as Column, this));\n                        break;\n                }\n            }\n\n            this.headerCellCtrls[idOfChild] = headerCtrl;\n        });\n\n        // we want to keep columns that are focused, otherwise keyboard navigation breaks\n        const isFocusedAndDisplayed = (ctrl: HeaderCellCtrl) => {\n            const isFocused = this.focusService.isHeaderWrapperFocused(ctrl);\n            if (!isFocused) { return false; }\n            const isDisplayed = this.columnModel.isDisplayed(ctrl.getColumnGroupChild());\n            return isDisplayed;\n        };\n\n        iterateObject(oldCtrls, (id: string, oldCtrl: HeaderCellCtrl) => {\n            const keepCtrl = isFocusedAndDisplayed(oldCtrl);\n            if (keepCtrl) {\n                this.headerCellCtrls[id] = oldCtrl;\n            } else {\n                this.destroyBean(oldCtrl);\n            }\n        });\n\n        const ctrlsToDisplay = getAllValuesInObject(this.headerCellCtrls);\n        this.comp.setHeaderCtrls(ctrlsToDisplay);\n    }\n\n    private getColumnsInViewport(): IHeaderColumn[] {\n        const printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n        return printLayout ? this.getColumnsInViewportPrintLayout() : this.getColumnsInViewportNormalLayout();\n    }\n\n    private getColumnsInViewportPrintLayout(): IHeaderColumn[] {\n        // for print layout, we add all columns into the center\n        if (this.pinned != null) { return []; }\n\n        let viewportColumns: IHeaderColumn[] = [];\n        const actualDepth = this.getActualDepth();\n\n        [Constants.PINNED_LEFT, null, Constants.PINNED_RIGHT].forEach(pinned => {\n            const items = this.columnModel.getVirtualHeaderGroupRow(pinned, actualDepth);\n            viewportColumns = viewportColumns.concat(items);\n        });\n\n        return viewportColumns;\n    }\n\n    private getActualDepth(): number {\n        return this.type == HeaderRowType.FLOATING_FILTER ? this.rowIndex - 1 : this.rowIndex;\n    }\n\n    private getColumnsInViewportNormalLayout(): IHeaderColumn[] {\n        // when in normal layout, we add the columns for that container only\n        return this.columnModel.getVirtualHeaderGroupRow(this.pinned, this.getActualDepth());\n    }\n\n    public focusHeader(column: IHeaderColumn, event?: KeyboardEvent): boolean {\n        const allCtrls = getAllValuesInObject(this.headerCellCtrls);\n        const ctrl: AbstractHeaderCellCtrl = find(allCtrls, ctrl => ctrl.getColumnGroupChild()==column);\n        if (!ctrl) { return false; }\n\n        ctrl.focus(event);\n\n        return true;\n    }\n}"]}