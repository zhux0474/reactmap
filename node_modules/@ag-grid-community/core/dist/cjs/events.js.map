{"version":3,"sources":["../../src/ts/events.ts"],"names":[],"mappings":";;;;;;;;AAaA,yCAAqC;AAA5B,6BAAA,MAAM,CAAA","file":"events.js","sourcesContent":["import { RowNode } from './entities/rowNode';\nimport { Column } from './entities/column';\nimport { ColDef } from './entities/colDef';\nimport { GridApi } from './gridApi';\nimport { ColumnApi } from './columns/columnApi';\nimport { ProvidedColumnGroup } from './entities/providedColumnGroup';\nimport { FilterRequestSource } from './filter/filterManager';\nimport { ChartType } from './interfaces/iChartOptions';\nimport { IFilterComp } from './interfaces/iFilter';\nimport { CellRange, CellRangeParams } from './interfaces/IRangeService';\nimport { ServerSideTransactionResult } from \"./interfaces/serverSideTransaction\";\nimport { RowNodeTransaction } from \"./interfaces/rowNodeTransaction\";\nimport { AgChartThemeOverrides } from \"./interfaces/iAgChartOptions\";\nexport { Events } from './eventKeys';\n\nexport interface ModelUpdatedEvent extends AgGridEvent {\n    /** If true, the grid will try and animate the rows to the new positions */\n    animate: boolean | undefined;\n    /** If true, the grid has new data loaded, eg user called setRowData(), otherwise\n     * it's the same data but sorted or filtered, in which case this is true, and rows\n     * can animate around (eg rowNode id 24 is the same row node as last time). */\n    keepRenderedRows: boolean | undefined;\n    /** If true, then this update was a result of setRowData() getting called. This\n     * gets the grid to scroll to the top again. */\n    newData: boolean | undefined;\n    /** True when pagination and a new page is navigated to. */\n    newPage: boolean;\n}\n\nexport interface PaginationChangedEvent extends AgGridEvent {\n    /** True if rows were animated to new position */\n    animate?: boolean;\n    /** True if rows were kept (otherwise complete redraw) */\n    keepRenderedRows?: boolean;\n    /** True if data was new (i.e user set new data) */\n    newData?: boolean;\n    /** True if user went to a new page */\n    newPage: boolean;\n}\n\nexport interface AgEvent {\n    /** Event identifier */\n    type: string;\n}\n\nexport interface AgGridEvent extends AgEvent {\n    api: GridApi;\n    columnApi: ColumnApi;\n}\n\nexport interface ToolPanelVisibleChangedEvent extends AgGridEvent {\n    source: string | undefined;\n}\n\nexport interface ColumnPivotModeChangedEvent extends AgGridEvent { }\n\nexport interface VirtualColumnsChangedEvent extends AgGridEvent { }\n\nexport interface ColumnEverythingChangedEvent extends AgGridEvent {\n    source: string;\n}\n\nexport interface NewColumnsLoadedEvent extends AgGridEvent { }\n\nexport interface GridColumnsChangedEvent extends AgGridEvent { }\n\nexport interface DisplayedColumnsChangedEvent extends AgGridEvent { }\n\nexport interface RowDataChangedEvent extends AgGridEvent { }\n\nexport interface RowDataUpdatedEvent extends AgGridEvent { }\n\nexport interface PinnedRowDataChangedEvent extends AgGridEvent { }\n\nexport interface SelectionChangedEvent extends AgGridEvent { }\n\nexport interface FilterChangedEvent extends AgGridEvent {\n    /** True if the filter was changed as a result of data changing */\n    afterDataChange?: boolean;\n    /** True if filter was changed via floating filter */\n    afterFloatingFilter?: boolean;\n    /**\n     * Columns affected by the filter change. Array contents depend on the source of the event.\n     * \n     * - Expect 1 element for UI-driven column filter changes.\n     * - Expect 0-N elements (all affected columns) for calls to `gridOptions.api.setFilterModel()`.\n     * - Expect 0-N elements (removed columns) for calls to `gridOptions.api.setColumnDefs()`.\n     * - Expect 0 elements for quick-filters and calls to `gridOptions.api.onFilterChanged()`.\n     */\n    columns: Column[];\n}\n\nexport interface FilterModifiedEvent extends AgGridEvent {\n    filterInstance: IFilterComp;\n    column: Column;\n}\n\nexport interface FilterOpenedEvent extends AgGridEvent {\n    /** Column / OriginalColumnGroup that contains the filter */\n    column: Column | ProvidedColumnGroup;\n    /** Source of the open request */\n    source: FilterRequestSource;\n    /** Parent element of the filter */\n    eGui: HTMLElement;\n}\n\nexport interface SortChangedEvent extends AgGridEvent { }\n\nexport interface GridReadyEvent extends AgGridEvent { }\n\nexport interface DisplayedColumnsWidthChangedEvent extends AgGridEvent { } // not documented\nexport interface ColumnHoverChangedEvent extends AgGridEvent { } // not documented\nexport interface BodyHeightChangedEvent extends AgGridEvent { } // not documented\n\n// this event is 'odd one out' as it should have properties for all the properties\n// in gridOptions that can be bound by the framework. for example, the gridOptions\n// has 'rowData', so this property should have 'rowData' also, so that when the row\n// data changes via the framework bound property, this event has that attribute set.\nexport interface ComponentStateChangedEvent extends AgGridEvent { }\n\nexport interface ColumnPanelItemDragStartEvent extends AgEvent {\n    column: Column | ProvidedColumnGroup\n}\n\nexport interface ColumnPanelItemDragEndEvent extends AgEvent { }\n\nexport interface DragEvent extends AgGridEvent {\n    /** One of {'cell','row','headerCell','toolPanel'} */\n    type: string;\n    /** The DOM element that started the event. */\n    target: HTMLElement;\n}\n\nexport interface DragStartedEvent extends DragEvent { }\n\nexport interface DragStoppedEvent extends DragEvent { }\n\n// For internal use only.\n// This event allows us to detect when other inputs in the same named group are changed, so for example we can ensure\n// that only one radio button in the same group is selected at any given time.\nexport interface CheckboxChangedEvent extends AgEvent {\n    id: string;\n    name: string;\n    selected?: boolean;\n    previousValue: boolean | undefined;\n}\n\nexport interface GridSizeChangedEvent extends AgGridEvent {\n    /** The grid's DIV's clientWidth */\n    clientWidth: number;\n    /** The grid's DIV's clientHeight */\n    clientHeight: number;\n}\n\nexport interface RowDragEvent extends AgGridEvent {\n    /** Event identifier: One of rowDragEnter, rowDragMove, rowDragEnd, rowDragLeave */\n    type: string;\n    /** The row node getting dragged. Also the node that started the drag when multi-row dragging. */\n    node: RowNode;\n    /** The list of nodes being dragged. */\n    nodes: RowNode[];\n    /** The underlying mouse move event associated with the drag. */\n    event: MouseEvent;\n    /** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */\n    vDirection: string;\n    /** The row index the mouse is dragging over or -1 if over no row. */\n    overIndex: number;\n    /** The row node the mouse is dragging over or undefined if over no row. */\n    overNode?: RowNode;\n    /** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\n     * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\n     * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\n     * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?'\n     */\n    y: number;\n}\n\nexport interface RowDragEnterEvent extends RowDragEvent { }\n\nexport interface RowDragEndEvent extends RowDragEvent { }\n\nexport interface RowDragMoveEvent extends RowDragEvent { }\n\nexport interface RowDragLeaveEvent extends RowDragEvent { }\n\nexport interface PasteStartEvent extends AgGridEvent {\n    source: string;\n}\n\nexport interface PasteEndEvent extends AgGridEvent {\n    source: string;\n}\n\nexport interface FillStartEvent extends AgGridEvent {\n}\n\nexport interface FillEndEvent extends AgGridEvent {\n    initialRange: CellRange;\n    finalRange: CellRange;\n}\n\nexport interface ViewportChangedEvent extends AgGridEvent {\n    /** Index of the first rendered row */\n    firstRow: number;\n    /** Index of the last rendered row */\n    lastRow: number;\n}\n\nexport interface FirstDataRenderedEvent extends AgGridEvent {\n    /** Index of the first rendered row */\n    firstRow: number;\n    /** Index of the last rendered row */\n    lastRow: number;\n}\n\nexport interface RangeSelectionChangedEvent extends AgGridEvent {\n    id?: string;\n    /** True for the first change event, otherwise false */\n    started: boolean;\n    /** True for the last change event, otherwise false */\n    finished: boolean;\n}\n\nexport interface ChartCreated extends AgGridEvent {\n    /** Will always be `chartCreated`. */\n    type: string;\n    /** Id of the created chart. This can later be used to reference the chart via api methods. */\n    chartId: string;\n}\n\nexport interface ChartRangeSelectionChanged extends AgGridEvent {\n    /** Will always be `chartRangeSelectionChanged`. */\n    type: string;\n    /** Id of the effected chart. */\n    chartId: string;\n    /** Same as `chartId`. */\n    id: string;\n    /** New cellRange selected. */\n    cellRange: CellRangeParams;\n}\n\nexport interface ChartOptionsChanged extends AgGridEvent {\n    /** Will always be `chartOptionsChanged`. */\n    type: string;\n    /** Id of the effected chart. */\n    chartId: string;\n    /** ChartType */\n    chartType: ChartType;\n    /** Chart theme name of currently selected theme. */\n    chartThemeName: string;\n    /** Chart options.  */\n    chartOptions: AgChartThemeOverrides;\n}\n\nexport interface ChartDestroyed extends AgGridEvent {\n    /** Will always be `chartDestroyed`. */\n    type: string;\n    /** Id of the effected chart. */\n    chartId: string;\n}\n\nexport interface ColumnGroupOpenedEvent extends AgGridEvent {\n    columnGroup: ProvidedColumnGroup;\n}\n\nexport interface ItemsAddedEvent extends AgGridEvent {\n    items: RowNode[];\n}\n\nexport type ScrollDirection = 'horizontal' | 'vertical';\n\nexport interface BodyScrollEvent extends AgGridEvent {\n    direction: ScrollDirection;\n    left: number;\n    top: number;\n}\n\nexport interface BodyScrollEndEvent extends BodyScrollEvent { }\n\n// not documented\nexport interface FlashCellsEvent extends AgGridEvent {\n    cells: any;\n}\n\nexport interface PaginationPixelOffsetChangedEvent extends AgGridEvent {\n}\n\n// this does not extent CellEvent as the focus service doesn't keep a reference to\n// the rowNode.\nexport interface CellFocusedEvent extends AgGridEvent {\n    /** Row index of the focused cell */\n    rowIndex: number | null;\n    /** Column of the focused cell */\n    column: Column | null;\n    /** either 'top', 'bottom' or null / undefined (if not pinned) */\n    rowPinned?: string | null;\n    /** Whether the cell a full width cell or a regular cell */\n    isFullWidthCell: boolean;\n    /** Whether browser focus is also set (false when editing) */\n    forceBrowserFocus?: boolean;\n    // floating is for backwards compatibility, this is the same as rowPinned.\n    // this is because the focus service doesn't keep references to rowNodes\n    // as focused cell is identified by rowIndex - thus when the user re-orders\n    // or filters, the focused cell stays with the index, but the node can change.\n    floating: string | null;\n}\n\nexport interface ExpandCollapseAllEvent extends AgGridEvent {\n    source: string;\n}\n\n/**---------------*/\n/** COLUMN EVENTS */\n/**---------------*/\n\nexport type ColumnEventType =\n    \"sizeColumnsToFit\" |\n    \"autosizeColumns\" |\n    \"alignedGridChanged\" |\n    \"filterChanged\" |\n    \"filterDestroyed\" |\n    \"gridOptionsChanged\" |\n    \"gridInitializing\" |\n    \"toolPanelDragAndDrop\" |\n    \"toolPanelUi\" |\n    \"uiColumnMoved\" |\n    \"uiColumnResized\" |\n    \"uiColumnDragged\" |\n    \"uiColumnExpanded\" |\n    \"uiColumnSorted\" |\n    \"contextMenu\" |\n    \"columnMenu\" |\n    \"rowModelUpdated\" |\n    \"api\" |\n    \"flex\" |\n    \"pivotChart\";\n\nexport interface ColumnEvent extends AgGridEvent {\n    /** The impacted column, only set if action was on one column */\n    column: Column | null;\n    /** List of all impacted columns */\n    columns: Column[] | null;\n    /** String describing where the event is coming from */\n    source: ColumnEventType;\n}\n\nexport interface ColumnResizedEvent extends ColumnEvent {\n    /** Set to true for last event in a sequence of move events */\n    finished: boolean;\n    /** Any columns resized due to flex */\n    flexColumns: Column[] | null;\n}\n\nexport interface ColumnPivotChangedEvent extends ColumnEvent { }\n\nexport interface ColumnRowGroupChangedEvent extends ColumnEvent { }\n\nexport interface ColumnValueChangedEvent extends ColumnEvent { }\n\nexport interface ColumnMovedEvent extends ColumnEvent {\n    /** The position the column was moved to */\n    toIndex?: number;\n}\n\nexport interface ColumnVisibleEvent extends ColumnEvent {\n    /** True if column was set to visible, false if set to hide */\n    visible?: boolean;\n}\n\nexport interface ColumnPinnedEvent extends ColumnEvent {\n    /** Either 'left', 'right', or null (it not pinned) */\n    pinned: string | null;\n}\n\n/**------------*/\n\n/** ROW EVENTS */\n/**------------*/\nexport interface RowEvent extends AgGridEvent {\n    node: RowNode;\n    /** The user provided data for the row */\n    data: any;\n    /** The visible row index for the row */\n    rowIndex: number | null;\n    /** Either 'top', 'bottom' or null / undefined (if not set) */\n    rowPinned: string | null;\n    /** The context as provided on `gridOptions.context` */\n    context: any;\n    /** If event was due to browser event (eg click), this is the browser event */\n    event?: Event | null;\n}\n\nexport interface RowGroupOpenedEvent extends RowEvent {\n    /** True if the group is expanded. */\n    expanded: boolean;\n}\n\nexport interface RowValueChangedEvent extends RowEvent { }\n\nexport interface RowSelectedEvent extends RowEvent { }\n\nexport interface VirtualRowRemovedEvent extends RowEvent { }\n\nexport interface RowClickedEvent extends RowEvent { }\n\nexport interface RowDoubleClickedEvent extends RowEvent { }\n\nexport interface RowEditingStartedEvent extends RowEvent { }\n\nexport interface RowEditingStoppedEvent extends RowEvent { }\n\nexport interface FullWidthCellKeyDownEvent extends RowEvent { }\n\nexport interface FullWidthCellKeyPressEvent extends RowEvent { }\n\n/**------------*/\n\n/** CELL EVENTS */\n/**------------*/\nexport interface CellEvent extends RowEvent {\n    column: Column;\n    colDef: ColDef;\n    /** The value for the cell */\n    value: any;\n}\n\nexport interface CellKeyDownEvent extends CellEvent { }\n\nexport interface CellKeyPressEvent extends CellEvent { }\n\n/** Cell is clicked */\nexport interface CellClickedEvent extends CellEvent { }\n\nexport interface CellMouseDownEvent extends CellEvent { }\n\nexport interface CellDoubleClickedEvent extends CellEvent { }\n\nexport interface CellMouseOverEvent extends CellEvent { }\n\nexport interface CellMouseOutEvent extends CellEvent { }\n\nexport interface CellContextMenuEvent extends CellEvent { }\n\nexport interface CellEditingStartedEvent extends CellEvent { }\n\nexport interface CellEditingStoppedEvent extends CellEvent {\n    /** The old value before editing */\n    oldValue: any;\n    /** The new value after editing */\n    newValue: any;\n}\n\nexport interface CellValueChangedEvent extends CellEvent {\n    oldValue: any;\n    newValue: any;\n    source: string | undefined;\n}\n\nexport interface AsyncTransactionsFlushed extends AgGridEvent {\n    /**\n     * Array of result objects. for SSRM it's always list of `ServerSideTransactionResult`.\n     * For Client-Side Row Model it's a list of `RowNodeTransaction`.\n     */\n    results: (RowNodeTransaction | ServerSideTransactionResult)[];\n}\n\n// not documented, was put in for CS - more thought needed of how server side grouping / pivoting\n// is done and how these should be used before we fully document and share with the world.\nexport interface ColumnRequestEvent extends AgGridEvent {\n    columns: Column[];\n}\n\nexport interface ColumnRowGroupChangeRequestEvent extends ColumnRequestEvent { }\n\nexport interface ColumnPivotChangeRequestEvent extends ColumnRequestEvent { }\n\nexport interface ColumnValueChangeRequestEvent extends ColumnRequestEvent { }\n\nexport interface ColumnAggFuncChangeRequestEvent extends ColumnRequestEvent {\n    aggFunc: any;\n}\n\nexport interface ScrollVisibilityChangedEvent extends AgGridEvent { } // not documented\n\nexport interface StoreUpdatedEvent extends AgEvent { } // not documented\n\nexport interface LeftPinnedWidthChangedEvent extends AgEvent { } // not documented\nexport interface RightPinnedWidthChangedEvent extends AgEvent { } // not documented\n\nexport interface RowContainerHeightChanged extends AgEvent { } // not documented\n\nexport interface DisplayedRowsChangedEvent extends AgEvent { } // not documented\n"]}