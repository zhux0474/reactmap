{"version":3,"sources":["../../src/ts/undoRedo/undoRedoService.ts"],"names":[],"mappings":"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","file":"undoRedoService.js","sourcesContent":["import { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { Events } from \"../eventKeys\";\nimport { CellEditingStartedEvent, CellValueChangedEvent, FillEndEvent, RowEditingStartedEvent } from \"../events\";\nimport { FocusService } from \"../focusService\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { GridApi } from \"../gridApi\";\nimport { PinnedRowModel } from \"../pinnedRowModel/pinnedRowModel\";\nimport { CellValueChange, FillUndoRedoAction, LastFocusedCell, UndoRedoAction, UndoRedoStack } from \"./undoRedoStack\";\nimport { RowPosition, RowPositionUtils } from \"../entities/rowPosition\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Constants } from \"../constants/constants\";\nimport { ModuleNames } from \"../modules/moduleNames\";\nimport { ModuleRegistry } from \"../modules/moduleRegistry\";\nimport { CellRange, CellRangeParams } from \"../interfaces/IRangeService\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { CellPosition, CellPositionUtils } from \"../entities/cellPosition\";\n\n@Bean('undoRedoService')\nexport class UndoRedoService extends BeanStub {\n\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Autowired('cellPositionUtils') private cellPositionUtils: CellPositionUtils;\n    @Autowired('rowPositionUtils') private rowPositionUtils: RowPositionUtils;\n\n    private cellValueChanges: CellValueChange[] = [];\n\n    private undoStack: UndoRedoStack;\n    private redoStack: UndoRedoStack;\n\n    private activeCellEdit: CellPosition | null = null;\n    private activeRowEdit: RowPosition | null = null;\n\n    private isPasting = false;\n    private isFilling = false;\n\n    @PostConstruct\n    public init(): void {\n        if (!this.gridOptionsWrapper.isUndoRedoCellEditing()) { return; }\n\n        const undoRedoLimit = this.gridOptionsWrapper.getUndoRedoCellEditingLimit();\n\n        if (undoRedoLimit! <= 0) { return; }\n\n        this.undoStack = new UndoRedoStack(undoRedoLimit);\n        this.redoStack = new UndoRedoStack(undoRedoLimit);\n\n        this.addRowEditingListeners();\n        this.addCellEditingListeners();\n        this.addPasteListeners();\n        this.addFillListeners();\n\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged);\n        // undo / redo is restricted to actual editing so we clear the stacks when other operations are\n        // performed that change the order of the row / cols.\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_DRAG_END, this.clearStacks);\n    }\n\n    private onCellValueChanged = (event: CellValueChangedEvent): void => {\n        const eventCell: CellPosition = { column: event.column, rowIndex: event.rowIndex!, rowPinned: event.rowPinned };\n        const isCellEditing = this.activeCellEdit !== null && this.cellPositionUtils.equals(this.activeCellEdit, eventCell);\n        const isRowEditing = this.activeRowEdit !== null && this.rowPositionUtils.sameRow(this.activeRowEdit, eventCell);\n\n        const shouldCaptureAction = isCellEditing || isRowEditing || this.isPasting || this.isFilling;\n\n        if (!shouldCaptureAction) { return; }\n\n        const { rowPinned, rowIndex, column, oldValue, value } = event;\n\n        const cellValueChange: CellValueChange = {\n            rowPinned,\n            rowIndex: rowIndex!,\n            columnId: column.getColId(),\n            newValue: value,\n            oldValue\n        };\n\n        this.cellValueChanges.push(cellValueChange);\n    }\n\n    private clearStacks = () => {\n        this.undoStack.clear();\n        this.redoStack.clear();\n    }\n\n    public getCurrentUndoStackSize(): number {\n        return this.undoStack ? this.undoStack.getCurrentStackSize() : 0;\n    }\n\n    public getCurrentRedoStackSize(): number {\n        return this.redoStack ? this.redoStack.getCurrentStackSize() : 0;\n    }\n\n    public undo() {\n        if (!this.undoStack) { return; }\n\n        const undoAction: UndoRedoAction | undefined = this.undoStack.pop();\n\n        if (!undoAction || !undoAction.cellValueChanges) { return; }\n\n        this.processAction(undoAction, (cellValueChange: CellValueChange) => cellValueChange.oldValue);\n\n        if (undoAction instanceof FillUndoRedoAction) {\n            this.processRangeAndCellFocus(undoAction.cellValueChanges, undoAction.initialRange);\n        } else {\n            this.processRangeAndCellFocus(undoAction.cellValueChanges);\n        }\n\n        this.redoStack.push(undoAction);\n    }\n\n    public redo() {\n        if (!this.redoStack) { return; }\n\n        const redoAction: UndoRedoAction | undefined = this.redoStack.pop();\n\n        if (!redoAction || !redoAction.cellValueChanges) { return; }\n\n        this.processAction(redoAction, (cellValueChange: CellValueChange) => cellValueChange.newValue);\n\n        if (redoAction instanceof FillUndoRedoAction) {\n            this.processRangeAndCellFocus(redoAction.cellValueChanges, redoAction.finalRange);\n        } else {\n            this.processRangeAndCellFocus(redoAction.cellValueChanges);\n        }\n\n        this.undoStack.push(redoAction);\n    }\n\n    private processAction(action: UndoRedoAction, valueExtractor: (cellValueChange: CellValueChange) => any) {\n        action.cellValueChanges.forEach(cellValueChange => {\n            const { rowIndex, rowPinned, columnId } = cellValueChange;\n            const rowPosition: RowPosition = { rowIndex, rowPinned };\n            const currentRow = this.getRowNode(rowPosition);\n\n            // checks if the row has been filtered out\n            if (!currentRow!.displayed) { return; }\n\n            currentRow!.setDataValue(columnId, valueExtractor(cellValueChange));\n        });\n    }\n\n    private processRangeAndCellFocus(cellValueChanges: CellValueChange[], range?: CellRange) {\n        let lastFocusedCell: LastFocusedCell;\n\n        if (range) {\n            const startRow = range.startRow;\n            const endRow = range.endRow;\n\n            lastFocusedCell = {\n                rowPinned: startRow!.rowPinned,\n                rowIndex: startRow!.rowIndex,\n                columnId: range.startColumn.getColId()\n            };\n\n            this.setLastFocusedCell(lastFocusedCell);\n\n            const cellRangeParams: CellRangeParams = {\n                rowStartIndex: startRow!.rowIndex,\n                rowStartPinned: startRow!.rowPinned,\n                rowEndIndex: endRow!.rowIndex,\n                rowEndPinned: endRow!.rowPinned,\n                columnStart: range.startColumn,\n                columns: range.columns\n            };\n\n            this.gridApi.addCellRange(cellRangeParams);\n\n            return;\n        }\n\n        const cellValueChange = cellValueChanges[0];\n        const { rowIndex, rowPinned } = cellValueChange;\n        const rowPosition: RowPosition = { rowIndex, rowPinned };\n        const row = this.getRowNode(rowPosition);\n\n        lastFocusedCell = {\n            rowPinned: cellValueChange.rowPinned,\n            rowIndex: row!.rowIndex!,\n            columnId: cellValueChange.columnId\n        };\n\n        this.setLastFocusedCell(lastFocusedCell);\n    }\n\n    private setLastFocusedCell(lastFocusedCell: LastFocusedCell) {\n        const { rowIndex, columnId, rowPinned } = lastFocusedCell;\n\n        this.gridApi.ensureIndexVisible(rowIndex);\n        this.gridApi.ensureColumnVisible(columnId);\n\n        if (ModuleRegistry.isRegistered(ModuleNames.RangeSelectionModule)) {\n            this.gridApi.clearRangeSelection();\n        }\n\n        this.focusService.setFocusedCell(rowIndex, columnId, rowPinned, true);\n    }\n\n    private addRowEditingListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STARTED, (e: RowEditingStartedEvent) => {\n            this.activeRowEdit = { rowIndex: e.rowIndex!, rowPinned: e.rowPinned};\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STOPPED, () => {\n            const action = new UndoRedoAction(this.cellValueChanges);\n            this.pushActionsToUndoStack(action);\n            this.activeRowEdit = null;\n        });\n    }\n\n    private addCellEditingListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STARTED, (e: CellEditingStartedEvent) => {\n            this.activeCellEdit = { column: e.column, rowIndex: e.rowIndex!, rowPinned: e.rowPinned };\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STOPPED, () => {\n            this.activeCellEdit = null;\n\n            const shouldPushAction = !this.activeRowEdit && !this.isPasting && !this.isFilling;\n\n            if (shouldPushAction) {\n                const action = new UndoRedoAction(this.cellValueChanges);\n                this.pushActionsToUndoStack(action);\n            }\n        });\n    }\n\n    private addPasteListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_PASTE_START, () => {\n            this.isPasting = true;\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_PASTE_END, () => {\n            const action = new UndoRedoAction(this.cellValueChanges);\n            this.pushActionsToUndoStack(action);\n            this.isPasting = false;\n        });\n    }\n\n    private addFillListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_FILL_START, () => {\n            this.isFilling = true;\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_FILL_END, (event: FillEndEvent) => {\n            const action = new FillUndoRedoAction(this.cellValueChanges, event.initialRange, event.finalRange);\n            this.pushActionsToUndoStack(action);\n            this.isFilling = false;\n        });\n    }\n\n    private pushActionsToUndoStack(action: UndoRedoAction) {\n        this.undoStack.push(action);\n\n        this.cellValueChanges = [];\n        this.redoStack.clear();\n    }\n\n    private getRowNode(gridRow: RowPosition): RowNode | undefined {\n        switch (gridRow.rowPinned) {\n            case Constants.PINNED_TOP:\n                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n            case Constants.PINNED_BOTTOM:\n                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    }\n}\n"]}