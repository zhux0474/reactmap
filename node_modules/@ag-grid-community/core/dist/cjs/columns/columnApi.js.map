{"version":3,"sources":["../../src/ts/columns/columnApi.ts"],"names":[],"mappings":"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","file":"columnApi.js","sourcesContent":["import { ColDef, ColGroupDef } from \"../entities/colDef\";\nimport { IHeaderColumn } from \"../entities/iHeaderColumn\";\nimport { ColumnModel, ColumnState } from \"./columnModel\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { Column } from \"../entities/column\";\nimport { Autowired, Bean, PreDestroy } from \"../context/context\";\nimport { _ } from \"../utils\";\nimport { ColumnEventType } from \"../events\";\n\n@Bean('columnApi')\nexport class ColumnApi {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    /** Gets the grid to size the columns to the specified width in pixels, e.g. `sizeColumnsToFit(900)`. To have the grid fit the columns to the grid's width, use the Grid API `gridApi.sizeColumnsToFit()` instead. */\n    public sizeColumnsToFit(gridWidth: number): void {\n        // AG-3403 validate that gridWidth is provided because this method has the same name as\n        // a method on the grid API that takes no arguments, and it's easy to confuse the two\n        if (typeof gridWidth === \"undefined\") {\n            console.error('AG Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)');\n        }\n        this.columnModel.sizeColumnsToFit(gridWidth, 'api');\n    }\n    /** Call this if you want to open or close a column group. */\n    public setColumnGroupOpened(group: ProvidedColumnGroup | string, newValue: boolean): void { this.columnModel.setColumnGroupOpened(group, newValue, 'api'); }\n    /** Returns the column group with the given name. */\n    public getColumnGroup(name: string, instanceId?: number): ColumnGroup | null { return this.columnModel.getColumnGroup(name, instanceId); }\n    public getOriginalColumnGroup(name: string): ProvidedColumnGroup | null { return this.columnModel.getOriginalColumnGroup(name); }\n\n    /** Returns the display name for a column. Useful if you are doing your own header rendering and want the grid to work out if `headerValueGetter` is used, or if you are doing your own column management GUI, to know what to show as the column name. */\n    public getDisplayNameForColumn(column: Column, location: string | null): string { return this.columnModel.getDisplayNameForColumn(column, location) || ''; }\n    /** Returns the display name for a column group (when grouping columns). */\n    public getDisplayNameForColumnGroup(columnGroup: ColumnGroup, location: string): string { return this.columnModel.getDisplayNameForColumnGroup(columnGroup, location) || ''; }\n\n    /** Returns the column with the given `colKey`, which can either be the `colId` (a string) or the `colDef` (an object). */\n    public getColumn(key: any): Column | null { return this.columnModel.getPrimaryColumn(key); }\n    /** Applies the state of the columns from a previous state. Returns `false` if one or more columns could not be found. */\n    public applyColumnState(params: ApplyColumnStateParams): boolean { return this.columnModel.applyColumnState(params, 'api'); }\n    /** Gets the state of the columns. Typically used when saving column state. */\n    public getColumnState(): ColumnState[] { return this.columnModel.getColumnState(); }\n    /** Sets the state back to match the originally provided column definitions. */\n    public resetColumnState(): void { this.columnModel.resetColumnState('api'); }\n    /** Gets the state of the column groups. Typically used when saving column group state. */\n    public getColumnGroupState(): { groupId: string, open: boolean }[] { return this.columnModel.getColumnGroupState(); }\n    /** Sets the state of the column group state from a previous state. */\n    public setColumnGroupState(stateItems: ({ groupId: string, open: boolean })[]): void { this.columnModel.setColumnGroupState(stateItems, 'api'); }\n    /** Sets the state back to match the originally provided column definitions. */\n    public resetColumnGroupState(): void { this.columnModel.resetColumnGroupState('api'); }\n\n    /** Returns `true` if pinning left or right, otherwise `false`. */\n    public isPinning(): boolean { return this.columnModel.isPinningLeft() || this.columnModel.isPinningRight(); }\n    /** Returns `true` if pinning left, otherwise `false`. */\n    public isPinningLeft(): boolean { return this.columnModel.isPinningLeft(); }\n    /** Returns `true` if pinning right, otherwise `false`. */\n    public isPinningRight(): boolean { return this.columnModel.isPinningRight(); }\n    /** Returns the column to the right of the provided column, taking into consideration open / closed column groups and visible columns. This is useful if you need to know what column is beside yours e.g. if implementing your own cell navigation. */\n    public getDisplayedColAfter(col: Column): Column | null { return this.columnModel.getDisplayedColAfter(col); }\n    /** Same as `getVisibleColAfter` except gives column to the left. */\n    public getDisplayedColBefore(col: Column): Column | null { return this.columnModel.getDisplayedColBefore(col); }\n    /** Sets the visibility of a column. Key can be the column ID or `Column` object. */\n    public setColumnVisible(key: string | Column, visible: boolean): void { this.columnModel.setColumnVisible(key, visible, 'api'); }\n    /** Same as `setColumnVisible`, but provide a list of column keys. */\n    public setColumnsVisible(keys: (string | Column)[], visible: boolean): void { this.columnModel.setColumnsVisible(keys, visible, 'api'); }\n    /** Sets the column pinned / unpinned. Key can be the column ID, field, `ColDef` object or `Column` object. */\n    public setColumnPinned(key: string | Column, pinned: string): void { this.columnModel.setColumnPinned(key, pinned, 'api'); }\n    /** Same as `setColumnPinned`, but provide a list of column keys. */\n    public setColumnsPinned(keys: (string | Column)[], pinned: string): void { this.columnModel.setColumnsPinned(keys, pinned, 'api'); }\n\n    /** Returns all the columns, regardless of visible or not. */\n    public getAllColumns(): Column[] | null { return this.columnModel.getAllPrimaryColumns(); }\n    /**\n     * Returns all the grid columns, same as `getAllColumns()`, except\n     *\n     *  a) it has the order of the columns that are presented in the grid\n     *\n     *  b) it's after the 'pivot' step, so if pivoting, has the value columns for the pivot.\n     */\n    public getAllGridColumns(): Column[] { return this.columnModel.getAllGridColumns(); }\n    /** Same as `getAllDisplayedColumns` but just for the pinned left portion of the grid. */\n    public getDisplayedLeftColumns(): Column[] { return this.columnModel.getDisplayedLeftColumns(); }\n    /** Same as `getAllDisplayedColumns` but just for the center portion of the grid. */\n    public getDisplayedCenterColumns(): Column[] { return this.columnModel.getDisplayedCenterColumns(); }\n    /** Same as `getAllDisplayedColumns` but just for the pinned right portion of the grid. */\n    public getDisplayedRightColumns(): Column[] { return this.columnModel.getDisplayedRightColumns(); }\n    /** Returns all columns currently displayed (e.g. are visible and if in a group, the group is showing the columns) for the pinned left, centre and pinned right portions of the grid. */\n    public getAllDisplayedColumns(): Column[] { return this.columnModel.getAllDisplayedColumns(); }\n    /** Same as `getAllGridColumns()`, except only returns rendered columns, i.e. columns that are not within the viewport and therefore not rendered, due to column virtualisation, are not displayed. */\n    public getAllDisplayedVirtualColumns(): Column[] { return this.columnModel.getViewportColumns(); }\n\n    /** Moves a column to `toIndex`. The column is first removed, then added at the `toIndex` location, thus index locations will change to the right of the column after the removal. */\n    public moveColumn(key: string | Column, toIndex: number): void {\n        if (typeof key === 'number') {\n            // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name\n            console.warn('AG Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead');\n            this.columnModel.moveColumnByIndex(key as number, toIndex, 'api');\n        } else {\n            this.columnModel.moveColumn(key, toIndex, 'api');\n        }\n    }\n    /** Same as `moveColumn` but works on index locations. */\n    public moveColumnByIndex(fromIndex: number, toIndex: number): void { this.columnModel.moveColumnByIndex(fromIndex, toIndex, 'api'); }\n    /** Same as `moveColumn` but works on list. */\n    public moveColumns(columnsToMoveKeys: (string | Column)[], toIndex: number) { this.columnModel.moveColumns(columnsToMoveKeys, toIndex, 'api'); }\n    /** Move the column to a new position in the row grouping order. */\n    public moveRowGroupColumn(fromIndex: number, toIndex: number): void { this.columnModel.moveRowGroupColumn(fromIndex, toIndex); }\n    /** Sets the agg function for a column. `aggFunc` can be one of `'min' | 'max' | 'sum'`. */\n    public setColumnAggFunc(key: string | Column, aggFunc: string): void { this.columnModel.setColumnAggFunc(key, aggFunc); }\n    /** Sets the column width on a single column. The finished flag gets included in the resulting event and not used internally by the grid. The finished flag is intended for dragging, where a dragging action will produce many `columnWidth` events, so the consumer of events knows when it receives the last event in a stream. The finished parameter is optional, and defaults to `true`. */\n    public setColumnWidth(key: string | Column, newWidth: number, finished: boolean = true, source?: ColumnEventType): void {\n        this.columnModel.setColumnWidths([{ key, newWidth }], false, finished, source);\n    }\n    /** Sets the column widths on multiple columns. This method offers better performance than calling `setColumnWidth` multiple times. The finished flag gets included in the resulting event and not used internally by the grid. The finished flag is intended for dragging, where a dragging action will produce many `columnWidth` events, so the consumer of events knows when it receives the last event in a stream. The finished parameter is optional, and defaults to `true`. */\n    public setColumnWidths(columnWidths: { key: string | Column, newWidth: number }[], finished: boolean = true, source?: ColumnEventType): void {\n        this.columnModel.setColumnWidths(columnWidths, false, finished, source);\n    }\n    /** Set the pivot mode. */\n    public setPivotMode(pivotMode: boolean): void { this.columnModel.setPivotMode(pivotMode); }\n    /** Get the pivot mode. */\n    public isPivotMode(): boolean { return this.columnModel.isPivotMode(); }\n    /** Returns the pivot column for the given `pivotKeys` and `valueColId`. Useful to then call operations on the pivot column. */\n    public getSecondaryPivotColumn(pivotKeys: string[], valueColKey: string | Column): Column | null { return this.columnModel.getSecondaryPivotColumn(pivotKeys, valueColKey); }\n\n    public setValueColumns(colKeys: (string | Column)[]): void { this.columnModel.setValueColumns(colKeys, 'api'); }\n    /** Get value columns. */\n    public getValueColumns(): Column[] { return this.columnModel.getValueColumns(); }\n    /** Remove a value column. */\n    public removeValueColumn(colKey: (string | Column)): void { this.columnModel.removeValueColumn(colKey, 'api'); }\n    /** Same as `removeValueColumns` but provide a list. */\n    public removeValueColumns(colKeys: (string | Column)[]): void { this.columnModel.removeValueColumns(colKeys, 'api'); }\n    /** Add a value column. */\n    public addValueColumn(colKey: (string | Column)): void { this.columnModel.addValueColumn(colKey, 'api'); }\n    /** Same as `addValueColumn` but provide a list. */\n    public addValueColumns(colKeys: (string | Column)[]): void { this.columnModel.addValueColumns(colKeys, 'api'); }\n\n    /** Set the row group columns. */\n    public setRowGroupColumns(colKeys: (string | Column)[]): void { this.columnModel.setRowGroupColumns(colKeys, 'api'); }\n    /** Remove a column from the row groups. */\n    public removeRowGroupColumn(colKey: string | Column): void { this.columnModel.removeRowGroupColumn(colKey, 'api'); }\n    /** Same as `removeRowGroupColumn` but provide a list of columns. */\n    public removeRowGroupColumns(colKeys: (string | Column)[]): void { this.columnModel.removeRowGroupColumns(colKeys, 'api'); }\n    /** Add a column to the row groups. */\n    public addRowGroupColumn(colKey: string | Column): void { this.columnModel.addRowGroupColumn(colKey, 'api'); }\n    /** Same as `addRowGroupColumn` but provide a list of columns. */\n    public addRowGroupColumns(colKeys: (string | Column)[]): void { this.columnModel.addRowGroupColumns(colKeys, 'api'); }\n    /** Get row group columns. */\n    public getRowGroupColumns(): Column[] { return this.columnModel.getRowGroupColumns(); }\n\n    /** Set the pivot columns. */\n    public setPivotColumns(colKeys: (string | Column)[]): void { this.columnModel.setPivotColumns(colKeys, 'api'); }\n    /** Remove a pivot column. */\n    public removePivotColumn(colKey: string | Column): void { this.columnModel.removePivotColumn(colKey, 'api'); }\n    /** Same as `removePivotColumn` but provide a list of columns. */\n    public removePivotColumns(colKeys: (string | Column)[]): void { this.columnModel.removePivotColumns(colKeys, 'api'); }\n    /** Add a pivot column. */\n    public addPivotColumn(colKey: string | Column): void { this.columnModel.addPivotColumn(colKey, 'api'); }\n    /** Same as `addPivotColumn` but provide a list of columns. */\n    public addPivotColumns(colKeys: (string | Column)[]): void { this.columnModel.addPivotColumns(colKeys, 'api'); }\n    /** Get the pivot columns. */\n    public getPivotColumns(): Column[] { return this.columnModel.getPivotColumns(); }\n\n    /** Same as `getAllDisplayedColumnGroups` but just for the pinned left portion of the grid. */\n    public getLeftDisplayedColumnGroups(): IHeaderColumn[] { return this.columnModel.getDisplayedTreeLeft(); }\n    /** Same as `getAllDisplayedColumnGroups` but just for the center portion of the grid. */\n    public getCenterDisplayedColumnGroups(): IHeaderColumn[] { return this.columnModel.getDisplayedTreeCentre(); }\n    /** Same as `getAllDisplayedColumnGroups` but just for the pinned right portion of the grid. */\n    public getRightDisplayedColumnGroups(): IHeaderColumn[] { return this.columnModel.getDisplayedTreeRight(); }\n    /** Returns all 'root' column headers. If you are not grouping columns, these return the columns. If you are grouping, these return the top level groups - you can navigate down through each one to get the other lower level headers and finally the columns at the bottom. */\n    public getAllDisplayedColumnGroups(): IHeaderColumn[] | null { return this.columnModel.getAllDisplayedTrees(); }\n    /** Auto-sizes a column based on its contents. */\n    public autoSizeColumn(key: string | Column, skipHeader?: boolean): void { return this.columnModel.autoSizeColumn(key, skipHeader, 'api'); }\n    /** Same as `autoSizeColumn`, but provide a list of column keys. */\n    public autoSizeColumns(keys: (string | Column)[], skipHeader?: boolean): void { return this.columnModel.autoSizeColumns(keys, skipHeader, 'api'); }\n    /** Calls `autoSizeColumns` on all displayed columns. */\n    public autoSizeAllColumns(skipHeader?: boolean): void { this.columnModel.autoSizeAllColumns(skipHeader, 'api'); }\n\n    /** Set the secondary pivot columns. */\n    public setSecondaryColumns(colDefs: (ColDef | ColGroupDef)[]): void { this.columnModel.setSecondaryColumns(colDefs, 'api'); }\n    /** Returns the grid's secondary columns. */\n    public getSecondaryColumns(): Column[] | null { return this.columnModel.getSecondaryColumns(); }\n    /** Returns the grid's primary columns. */\n    public getPrimaryColumns(): Column[] | null { return this.columnModel.getAllPrimaryColumns(); }\n\n    @PreDestroy\n    private cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid(): void {\n        // some users were raising support issues with regards memory leaks. the problem was the customers applications\n        // were keeping references to the API. trying to educate them all would be difficult, easier to just remove\n        // all references in teh API so at least the core grid can be garbage collected.\n        //\n        // wait about 100ms before clearing down the references, in case user has some cleanup to do,\n        // and needs to deference the API first\n        setTimeout(_.removeAllReferences.bind(window, this, 'Column API'), 100);\n    }\n\n    // below goes through deprecated items, prints message to user, then calls the new version of the same method\n\n    // public getColumnDefs(): (ColDef | ColGroupDef)[] {\n    //     this.setColumnGroupOpened(group, newValue);\n    //     return null;\n    // }\n\n    /** @deprecated columnGroupOpened no longer exists, use setColumnGroupOpened */\n    public columnGroupOpened(group: ProvidedColumnGroup | string, newValue: boolean): void {\n        console.error('AG Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');\n        this.setColumnGroupOpened(group, newValue);\n    }\n    /** @deprecated hideColumns is deprecated, use setColumnsVisible */\n    public hideColumns(colIds: any, hide: any): void {\n        console.error('AG Grid: hideColumns is deprecated, use setColumnsVisible');\n        this.columnModel.setColumnsVisible(colIds, !hide, 'api');\n    }\n    /** @deprecated hideColumn is deprecated, use setColumnVisible */\n    public hideColumn(colId: any, hide: any): void {\n        console.error('AG Grid: hideColumn is deprecated, use setColumnVisible');\n        this.columnModel.setColumnVisible(colId, !hide, 'api');\n    }\n    /** @deprecated setState is deprecated, use setColumnState */\n    public setState(columnState: ColumnState[]): boolean {\n        console.error('AG Grid: setState is deprecated, use setColumnState');\n        return this.setColumnState(columnState);\n    }\n    /** @deprecated getState is deprecated, use getColumnState */\n    public getState(): ColumnState[] {\n        console.error('AG Grid: getState is deprecated, use getColumnState');\n        return this.getColumnState();\n    }\n    /** @deprecated resetState is deprecated, use resetColumnState */\n    public resetState(): void {\n        console.error('AG Grid: resetState is deprecated, use resetColumnState');\n        this.resetColumnState();\n    }\n\n    /** @deprecated getAggregationColumns is deprecated, use getValueColumns */\n    public getAggregationColumns(): Column[] {\n        console.error('AG Grid: getAggregationColumns is deprecated, use getValueColumns');\n        return this.columnModel.getValueColumns();\n    }\n\n    /** @deprecated removeAggregationColumn is deprecated, use removeValueColumn */\n    public removeAggregationColumn(colKey: (string | Column)): void {\n        console.error('AG Grid: removeAggregationColumn is deprecated, use removeValueColumn');\n        this.columnModel.removeValueColumn(colKey, 'api');\n    }\n    /** @deprecated removeAggregationColumns is deprecated, use removeValueColumns */\n    public removeAggregationColumns(colKeys: (string | Column)[]): void {\n        console.error('AG Grid: removeAggregationColumns is deprecated, use removeValueColumns');\n        this.columnModel.removeValueColumns(colKeys, 'api');\n    }\n    /** @deprecated addAggregationColumn is deprecated, use addValueColumn */\n    public addAggregationColumn(colKey: (string | Column)): void {\n        console.error('AG Grid: addAggregationColumn is deprecated, use addValueColumn');\n        this.columnModel.addValueColumn(colKey, 'api');\n    }\n    /** @deprecated addAggregationColumns is deprecated, use addValueColumns */\n    public addAggregationColumns(colKeys: (string | Column)[]): void {\n        console.error('AG Grid: addAggregationColumns is deprecated, use addValueColumns');\n        this.columnModel.addValueColumns(colKeys, 'api');\n    }\n    /** @deprecated setColumnAggFunction is deprecated, use setColumnAggFunc */\n    public setColumnAggFunction(column: Column, aggFunc: string): void {\n        console.error('AG Grid: setColumnAggFunction is deprecated, use setColumnAggFunc');\n        this.columnModel.setColumnAggFunc(column, aggFunc, 'api');\n    }\n    /** @deprecated getDisplayNameForCol is deprecated, use getDisplayNameForColumn */\n    public getDisplayNameForCol(column: any): string {\n        console.error('AG Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn');\n        return this.getDisplayNameForColumn(column, null);\n    }\n\n    /** @deprecated setColumnState is deprecated, use applyColumnState. */\n    public setColumnState(columnState: ColumnState[]): boolean {\n        console.error('AG Grid: setColumnState is deprecated, use applyColumnState');\n        return this.columnModel.applyColumnState({ state: columnState, applyOrder: true }, 'api');\n    }\n\n}\n\nexport interface ApplyColumnStateParams {\n    /** The state from `getColumnState` */\n    state?: ColumnState[];\n    /** Whether column order should be applied */\n    applyOrder?: boolean;\n    /** State to apply to columns where state is missing for those columns */\n    defaultState?: ColumnState;\n}\n"]}