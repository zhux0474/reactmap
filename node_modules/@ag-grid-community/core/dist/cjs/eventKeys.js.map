{"version":3,"sources":["../../src/ts/eventKeys.ts"],"names":[],"mappings":"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","file":"eventKeys.js","sourcesContent":["export class Events {\n\n    /** Everything has changed with the columns. Either complete new set of columns set, or user called setState() */\n    /** @deprecated - grid no longer uses this, and setSate() also fires individual events */\n    public static EVENT_COLUMN_EVERYTHING_CHANGED = 'columnEverythingChanged';\n\n    /** User has set in new columns. */\n    public static EVENT_NEW_COLUMNS_LOADED = 'newColumnsLoaded';\n\n    /** The pivot mode flag was changed */\n    public static EVENT_COLUMN_PIVOT_MODE_CHANGED = 'columnPivotModeChanged';\n\n    /** A row group column was added, removed or order changed. */\n    public static EVENT_COLUMN_ROW_GROUP_CHANGED = 'columnRowGroupChanged';\n\n    /** expandAll / collapseAll was called from the api. */\n    public static EVENT_EXPAND_COLLAPSE_ALL = 'expandOrCollapseAll';\n\n    /** A pivot column was added, removed or order changed. */\n    public static EVENT_COLUMN_PIVOT_CHANGED = 'columnPivotChanged';\n\n    /** The list of grid columns has changed. */\n    public static EVENT_GRID_COLUMNS_CHANGED = 'gridColumnsChanged';\n\n    /** A value column was added, removed or agg function was changed. */\n    public static EVENT_COLUMN_VALUE_CHANGED = 'columnValueChanged';\n\n    /** A column was moved */\n    public static EVENT_COLUMN_MOVED = 'columnMoved';\n\n    /** One or more columns was shown / hidden */\n    public static EVENT_COLUMN_VISIBLE = 'columnVisible';\n\n    /** One or more columns was pinned / unpinned*/\n    public static EVENT_COLUMN_PINNED = 'columnPinned';\n\n    /** A column group was opened / closed */\n    public static EVENT_COLUMN_GROUP_OPENED = 'columnGroupOpened';\n\n    /** One or more columns was resized. If just one, the column in the event is set. */\n    public static EVENT_COLUMN_RESIZED = 'columnResized';\n\n    /** The list of displayed columns has changed, can result from columns open / close, column move, pivot, group, etc */\n    public static EVENT_DISPLAYED_COLUMNS_CHANGED = 'displayedColumnsChanged';\n\n    /** The list of virtual columns has changed, results from viewport changing */\n    public static EVENT_VIRTUAL_COLUMNS_CHANGED = 'virtualColumnsChanged';\n\n    /** Async Transactions Executed */\n    public static EVENT_ASYNC_TRANSACTIONS_FLUSHED = 'asyncTransactionsFlushed';\n\n    /** A row group was opened / closed */\n    public static EVENT_ROW_GROUP_OPENED = 'rowGroupOpened';\n\n    /** The client has set new data into the grid */\n    public static EVENT_ROW_DATA_CHANGED = 'rowDataChanged';\n\n    /** The client has updated data for the grid */\n    public static EVENT_ROW_DATA_UPDATED = 'rowDataUpdated';\n\n    /** The client has set new floating data into the grid */\n    public static EVENT_PINNED_ROW_DATA_CHANGED = 'pinnedRowDataChanged';\n\n    /** Range selection has changed */\n    public static EVENT_RANGE_SELECTION_CHANGED = 'rangeSelectionChanged';\n\n    /** Chart was created */\n    public static EVENT_CHART_CREATED = 'chartCreated';\n\n    /** Chart Range selection has changed */\n    public static EVENT_CHART_RANGE_SELECTION_CHANGED = 'chartRangeSelectionChanged';\n\n    /** Chart Options have changed */\n    public static EVENT_CHART_OPTIONS_CHANGED = 'chartOptionsChanged';\n\n    /** Chart was destroyed */\n    public static EVENT_CHART_DESTROYED = 'chartDestroyed';\n\n    /** For when the tool panel is shown / hidden */\n    public static EVENT_TOOL_PANEL_VISIBLE_CHANGED = 'toolPanelVisibleChanged';\n\n    public static EVENT_COLUMN_PANEL_ITEM_DRAG_START = 'columnPanelItemDragStart';\n    public static EVENT_COLUMN_PANEL_ITEM_DRAG_END = 'columnPanelItemDragEnd';\n\n    /** Model was updated - grid updates the drawn rows when this happens */\n    public static EVENT_MODEL_UPDATED = 'modelUpdated';\n\n    public static EVENT_PASTE_START = 'pasteStart';\n    public static EVENT_PASTE_END = 'pasteEnd';\n\n    public static EVENT_FILL_START = 'fillStart';\n    public static EVENT_FILL_END = 'fillEnd';\n\n    public static EVENT_CELL_CLICKED = 'cellClicked';\n    public static EVENT_CELL_DOUBLE_CLICKED = 'cellDoubleClicked';\n    public static EVENT_CELL_MOUSE_DOWN = 'cellMouseDown';\n    public static EVENT_CELL_CONTEXT_MENU = 'cellContextMenu';\n    public static EVENT_CELL_VALUE_CHANGED = 'cellValueChanged';\n    public static EVENT_ROW_VALUE_CHANGED = 'rowValueChanged';\n    public static EVENT_CELL_FOCUSED = 'cellFocused';\n    public static EVENT_ROW_SELECTED = 'rowSelected';\n    public static EVENT_SELECTION_CHANGED = 'selectionChanged';\n\n    public static EVENT_CELL_KEY_DOWN = 'cellKeyDown';\n    public static EVENT_CELL_KEY_PRESS = 'cellKeyPress';\n\n    public static EVENT_CELL_MOUSE_OVER = 'cellMouseOver';\n    public static EVENT_CELL_MOUSE_OUT = 'cellMouseOut';\n\n    /** 2 events for filtering. The grid LISTENS for filterChanged and afterFilterChanged */\n    public static EVENT_FILTER_CHANGED = 'filterChanged';\n\n    /** Filter was change but not applied. Only useful if apply buttons are used in filters. */\n    public static EVENT_FILTER_MODIFIED = 'filterModified';\n    public static EVENT_FILTER_OPENED = 'filterOpened';\n\n    public static EVENT_SORT_CHANGED = 'sortChanged';\n\n    /** A row was removed from the dom, for any reason. Use to clean up resources (if any) used by the row. */\n    public static EVENT_VIRTUAL_ROW_REMOVED = 'virtualRowRemoved';\n\n    public static EVENT_ROW_CLICKED = 'rowClicked';\n    public static EVENT_ROW_DOUBLE_CLICKED = 'rowDoubleClicked';\n\n    /** Gets called once after the grid has finished initialising. */\n    public static EVENT_GRID_READY = 'gridReady';\n    /** Width of height of the main grid div has changed. Grid listens for this and does layout of grid if it's\n     * changed, so always filling the space it was given. */\n    public static EVENT_GRID_SIZE_CHANGED = 'gridSizeChanged';\n    /** The indexes of the rows rendered has changed, eg user has scrolled to a new vertical position. */\n    public static EVENT_VIEWPORT_CHANGED = 'viewportChanged';\n    /* The width of the scrollbar has been calculated */\n    public static EVENT_SCROLLBAR_WIDTH_CHANGED = 'scrollbarWidthChanged';\n    /** Rows were rendered for the first time (ie on async data load). */\n    public static EVENT_FIRST_DATA_RENDERED = 'firstDataRendered';\n    /** A column drag has started, either resizing a column or moving a column. */\n    public static EVENT_DRAG_STARTED = 'dragStarted';\n    /** A column drag has stopped */\n    public static EVENT_DRAG_STOPPED = 'dragStopped';\n\n    public static EVENT_CHECKBOX_CHANGED = 'checkboxChanged';\n\n    public static EVENT_ROW_EDITING_STARTED = 'rowEditingStarted';\n    public static EVENT_ROW_EDITING_STOPPED = 'rowEditingStopped';\n\n    public static EVENT_CELL_EDITING_STARTED = 'cellEditingStarted';\n    public static EVENT_CELL_EDITING_STOPPED = 'cellEditingStopped';\n\n    /** Main body of grid has scrolled, either horizontally or vertically */\n    public static EVENT_BODY_SCROLL = 'bodyScroll';\n\n    /** Main body of the grid has stopped scrolling, either horizontally or vertically */\n    public static EVENT_BODY_SCROLL_END = 'bodyScrollEnd';\n\n    public static EVENT_HEIGHT_SCALE_CHANGED = 'heightScaleChanged';\n\n    /** The displayed page for pagination has changed. For example the data was filtered or sorted,\n     * or the user has moved to a different page. */\n    public static EVENT_PAGINATION_CHANGED = 'paginationChanged';\n\n    /** Only used by React, Angular 2+, Web Components and VueJS AG Grid components\n     * (not used if doing plain JavaScript or Angular 1.x). If the grid receives changes due\n     * to bound properties, this event fires after the grid has finished processing the change. */\n    public static EVENT_COMPONENT_STATE_CHANGED = 'componentStateChanged';\n\n    /*****************************  INTERNAL EVENTS: START ******************************************* */\n\n    /** Please remember to add to ComponentUtil.EXCLUDED_INTERNAL_EVENTS to not have these events exposed to framework components. */\n\n    /** All items from here down are used internally by the grid, not intended for external use. */\n    // not documented, either experimental, or we just don't want users using an depending on them\n    public static EVENT_BODY_HEIGHT_CHANGED = 'bodyHeightChanged';\n    public static EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = 'displayedColumnsWidthChanged';\n    public static EVENT_SCROLL_VISIBILITY_CHANGED = 'scrollVisibilityChanged';\n    public static EVENT_COLUMN_HOVER_CHANGED = 'columnHoverChanged';\n    public static EVENT_FLASH_CELLS = 'flashCells';\n    public static EVENT_PAGINATION_PIXEL_OFFSET_CHANGED = 'paginationPixelOffsetChanged';\n    public static EVENT_DISPLAYED_ROWS_CHANGED = 'displayedRowsChanged';\n\n    public static EVENT_LEFT_PINNED_WIDTH_CHANGED = 'leftPinnedWidthChanged';\n    public static EVENT_RIGHT_PINNED_WIDTH_CHANGED = 'rightPinnedWidthChanged';\n\n    public static EVENT_ROW_CONTAINER_HEIGHT_CHANGED = 'rowContainerHeightChanged';\n\n    public static EVENT_ROW_DRAG_ENTER = 'rowDragEnter';\n    public static EVENT_ROW_DRAG_MOVE = 'rowDragMove';\n    public static EVENT_ROW_DRAG_LEAVE = 'rowDragLeave';\n    public static EVENT_ROW_DRAG_END = 'rowDragEnd';\n\n    // primarily for charts\n    public static EVENT_POPUP_TO_FRONT = 'popupToFront';\n\n    // these are used for server side group and agg - only used by CS with Viewport Row Model - intention is\n    // to design these better around server side functions and then release to general public when fully working with\n    // all the row models.\n    public static EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = 'columnRowGroupChangeRequest';\n    public static EVENT_COLUMN_PIVOT_CHANGE_REQUEST = 'columnPivotChangeRequest';\n    public static EVENT_COLUMN_VALUE_CHANGE_REQUEST = 'columnValueChangeRequest';\n    public static EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = 'columnAggFuncChangeRequest';\n\n    public static EVENT_KEYBOARD_FOCUS = 'keyboardFocus';\n    public static EVENT_MOUSE_FOCUS = 'mouseFocus';\n\n    public static EVENT_STORE_UPDATED = 'storeUpdated';\n\n    /*****************************  INTERNAL EVENTS: END ******************************************* */\n}\n"]}