{"version":3,"sources":["../../src/ts/filter/provided/providedFilter.ts"],"names":[],"mappings":"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","file":"providedFilter.js","sourcesContent":["import { IDoesFilterPassParams, IFilterComp, IFilterParams } from '../../interfaces/iFilter';\nimport { Autowired, PostConstruct } from '../../context/context';\nimport { IRowModel } from '../../interfaces/iRowModel';\nimport { Constants } from '../../constants/constants';\nimport { IAfterGuiAttachedParams } from '../../interfaces/iAfterGuiAttachedParams';\nimport { loadTemplate, addCssClass, setDisabled } from '../../utils/dom';\nimport { debounce } from '../../utils/function';\nimport { AgPromise } from '../../utils/promise';\nimport { PopupEventParams } from '../../widgets/popupService';\nimport { IFilterLocaleText, IFilterTitleLocaleText, DEFAULT_FILTER_LOCALE_TEXT } from '../filterLocaleText';\nimport { ManagedFocusFeature } from '../../widgets/managedFocusFeature';\nimport { convertToSet } from '../../utils/set';\nimport { Component } from '../../widgets/component';\nimport { RowNode } from '../../entities/rowNode';\n\ntype FilterButtonType = 'apply' | 'clear' | 'reset' | 'cancel';\n\nexport interface IProvidedFilterParams extends IFilterParams {\n    /** @deprecated */ clearButton?: boolean;\n    /** @deprecated */ resetButton?: boolean;\n    /** @deprecated */ applyButton?: boolean;\n    buttons?: FilterButtonType[];\n    closeOnApply?: boolean;\n    /** @deprecated */ newRowsAction?: string;\n    debounceMs?: number;\n    /** Defaults to false. If true, all UI inputs related to this filter are for display only, and\n     * the filter can only be affected by API calls. */\n    readOnly?: boolean;\n}\n\n/**\n * Contains common logic to all provided filters (apply button, clear button, etc).\n * All the filters that come with AG Grid extend this class. User filters do not\n * extend this class.\n * \n * @param M type of filter-model managed by the concrete sub-class that extends this type\n * @param V type of value managed by the concrete sub-class that extends this type\n */\nexport abstract class ProvidedFilter<M, V> extends Component implements IFilterComp {\n    private newRowsActionKeep: boolean;\n\n    // each level in the hierarchy will save params with the appropriate type for that level.\n    private providedFilterParams: IProvidedFilterParams;\n\n    private applyActive = false;\n    private hidePopup: ((params: PopupEventParams) => void) | null | undefined = null;\n    // a debounce of the onBtApply method\n    private onBtApplyDebounce: () => void;\n\n    // after the user hits 'apply' the model gets copied to here. this is then the model that we use for\n    // all filtering. so if user changes UI but doesn't hit apply, then the UI will be out of sync with this model.\n    // this is what we want, as the UI should only become the 'active' filter once it's applied. when apply is\n    // inactive, this model will be in sync (following the debounce ms). if the UI is not a valid filter\n    // (eg the value is missing so nothing to filter on, or for set filter all checkboxes are checked so filter\n    // not active) then this appliedModel will be null/undefined.\n    private appliedModel: M | null = null;\n\n    @Autowired('rowModel') protected readonly rowModel: IRowModel;\n\n    constructor(private readonly filterNameKey: keyof IFilterTitleLocaleText) {\n        super();\n    }\n\n    public abstract doesFilterPass(params: IDoesFilterPassParams): boolean;\n\n    protected abstract updateUiVisibility(): void;\n\n    protected abstract createBodyTemplate(): string;\n    protected abstract getCssIdentifier(): string;\n    protected abstract resetUiToDefaults(silent?: boolean): AgPromise<void>;\n\n    protected abstract setModelIntoUi(model: M): AgPromise<void>;\n    protected abstract areModelsEqual(a: M, b: M): boolean;\n\n    /** Used to get the filter type for filter models. */\n    protected abstract getFilterType(): string;\n\n    @PostConstruct\n    protected postConstruct(): void {\n        this.resetTemplate(); // do this first to create the DOM\n        this.createManagedBean(new ManagedFocusFeature(\n            this.getFocusableElement(),\n            {\n                handleKeyDown: this.handleKeyDown.bind(this)\n            }\n        ));\n    }\n\n    // override\n    protected handleKeyDown(e: KeyboardEvent): void {}\n\n    public abstract getModelFromUi(): M | null;\n\n    public getFilterTitle(): string {\n        return this.translate(this.filterNameKey);\n    }\n\n    /** @deprecated */\n    public onFilterChanged(): void {\n        console.warn(`AG Grid: you should not call onFilterChanged() directly on the filter, please call\n        gridApi.onFilterChanged() instead. onFilterChanged is not part of the exposed filter interface (it was\n        a method that existed on an old version of the filters that was not intended for public use.`);\n        this.providedFilterParams.filterChangedCallback();\n    }\n\n    public isFilterActive(): boolean {\n        // filter is active if we have a valid applied model\n        return !!this.appliedModel;\n    }\n\n    protected resetTemplate(paramsMap?: any) {\n        const templateString = /* html */`\n            <div class=\"ag-filter-wrapper\">\n                <div class=\"ag-filter-body-wrapper ag-${this.getCssIdentifier()}-body-wrapper\">\n                    ${this.createBodyTemplate()}\n                </div>\n            </div>`;\n\n        this.setTemplate(templateString, paramsMap);\n    }\n\n    protected isReadOnly(): boolean {\n        return !!this.providedFilterParams.readOnly;\n    }\n\n    public init(params: IProvidedFilterParams): void {\n        this.setParams(params);\n\n        this.resetUiToDefaults(true).then(() => {\n            this.updateUiVisibility();\n            this.setupOnBtApplyDebounce();\n        });\n    }\n\n    protected setParams(params: IProvidedFilterParams): void {\n        ProvidedFilter.checkForDeprecatedParams(params);\n\n        this.providedFilterParams = params;\n\n        if (params.newRowsAction === 'keep') {\n            this.newRowsActionKeep = true;\n        } else if (params.newRowsAction === 'clear') {\n            this.newRowsActionKeep = false;\n        } else {\n            // the default for SSRM and IRM is 'keep', for CSRM and VRM the default is 'clear'\n            const modelsForKeep = [Constants.ROW_MODEL_TYPE_SERVER_SIDE, Constants.ROW_MODEL_TYPE_INFINITE];\n            this.newRowsActionKeep = modelsForKeep.indexOf(this.rowModel.getType()) >= 0;\n        }\n\n        this.applyActive = ProvidedFilter.isUseApplyButton(params);\n\n        this.createButtonPanel();\n    }\n\n    private createButtonPanel(): void {\n        const { buttons } = this.providedFilterParams;\n\n        if (!buttons || buttons.length < 1 || this.isReadOnly()) {\n            return;\n        }\n\n        const eButtonsPanel = document.createElement('div');\n\n        addCssClass(eButtonsPanel, 'ag-filter-apply-panel');\n\n        const addButton = (type: FilterButtonType): void => {\n            let text;\n            let clickListener: (e?: Event) => void;\n\n            switch (type) {\n                case 'apply':\n                    text = this.translate('applyFilter');\n                    clickListener = (e) => this.onBtApply(false, false, e);\n                    break;\n                case 'clear':\n                    text = this.translate('clearFilter');\n                    clickListener = () => this.onBtClear();\n                    break;\n                case 'reset':\n                    text = this.translate('resetFilter');\n                    clickListener = () => this.onBtReset();\n                    break;\n                case 'cancel':\n                    text = this.translate('cancelFilter');\n                    clickListener = (e) => { this.onBtCancel(e!); };\n                    break;\n                default:\n                    console.warn('Unknown button type specified');\n                    return;\n            }\n\n            const button = loadTemplate(\n                /* html */\n                `<button\n                    type=\"button\"\n                    ref=\"${type}FilterButton\"\n                    class=\"ag-standard-button ag-filter-apply-panel-button\"\n                >${text}\n                </button>`\n            );\n\n            eButtonsPanel.appendChild(button);\n            this.addManagedListener(button, 'click', clickListener);\n        };\n\n        convertToSet(buttons).forEach(type => addButton(type));\n\n        this.getGui().appendChild(eButtonsPanel);\n    }\n\n    private static checkForDeprecatedParams(params: IProvidedFilterParams): void {\n        const buttons = params.buttons || [];\n\n        if (buttons.length > 0) { return; }\n\n        const { applyButton, resetButton, clearButton } = params;\n\n        if (clearButton) {\n            console.warn('AG Grid: as of AG Grid v23.2, filterParams.clearButton is deprecated. Please use filterParams.buttons instead');\n            buttons.push('clear');\n        }\n\n        if (resetButton) {\n            console.warn('AG Grid: as of AG Grid v23.2, filterParams.resetButton is deprecated. Please use filterParams.buttons instead');\n            buttons.push('reset');\n        }\n\n        if (applyButton) {\n            console.warn('AG Grid: as of AG Grid v23.2, filterParams.applyButton is deprecated. Please use filterParams.buttons instead');\n            buttons.push('apply');\n        }\n\n        if ((params as any).apply) {\n            console.warn('AG Grid: as of AG Grid v21, filterParams.apply is deprecated. Please use filterParams.buttons instead');\n            buttons.push('apply');\n        }\n\n        params.buttons = buttons;\n    }\n\n    // subclasses can override this to provide alternative debounce defaults\n    protected getDefaultDebounceMs(): number {\n        return 0;\n    }\n\n    private setupOnBtApplyDebounce(): void {\n        const debounceMs = ProvidedFilter.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());\n        this.onBtApplyDebounce = debounce(this.onBtApply.bind(this), debounceMs);\n    }\n\n    public getModel(): M | null {\n        return this.appliedModel;\n    }\n\n    public setModel(model: M | null): AgPromise<void> {\n        const promise = model ? this.setModelIntoUi(model) : this.resetUiToDefaults();\n\n        return promise.then(() => {\n            this.updateUiVisibility();\n\n            // we set the model from the GUI, rather than the provided model,\n            // so the model is consistent, e.g. handling of null/undefined will be the same,\n            // or if model is case insensitive, then casing is removed.\n            this.applyModel();\n        });\n    }\n\n    private onBtCancel(e: Event): void {\n        const currentModel = this.getModel();\n\n        const afterAppliedFunc = () => {\n            this.onUiChanged(false, 'prevent');\n\n            if (this.providedFilterParams.closeOnApply) {\n                this.close(e);\n            }\n        };\n\n        if (currentModel != null) {\n            this.setModelIntoUi(currentModel).then(afterAppliedFunc);\n        } else {\n            this.resetUiToDefaults().then(afterAppliedFunc);\n        }\n    }\n\n    private onBtClear(): void {\n        this.resetUiToDefaults().then(() => this.onUiChanged());\n    }\n\n    private onBtReset(): void {\n        this.onBtClear();\n        this.onBtApply();\n    }\n\n    /**\n     * Applies changes made in the UI to the filter, and returns true if the model has changed.\n     */\n    public applyModel(): boolean {\n        const newModel = this.getModelFromUi();\n\n        if (!this.isModelValid(newModel!)) { return false; }\n\n        const previousModel = this.appliedModel;\n\n        this.appliedModel = newModel;\n\n        // models can be same if user pasted same content into text field, or maybe just changed the case\n        // and it's a case insensitive filter\n        return !this.areModelsEqual(previousModel!, newModel!);\n    }\n\n    protected isModelValid(model: M): boolean {\n        return true;\n    }\n\n    protected onBtApply(afterFloatingFilter = false, afterDataChange = false, e?: Event): void {\n        if (this.applyModel()) {\n            // the floating filter uses 'afterFloatingFilter' info, so it doesn't refresh after filter changed if change\n            // came from floating filter\n            this.providedFilterParams.filterChangedCallback({ afterFloatingFilter, afterDataChange });\n        }\n\n        const { closeOnApply } = this.providedFilterParams;\n\n        // only close if an apply button is visible, otherwise we'd be closing every time a change was made!\n        if (closeOnApply && this.applyActive && !afterFloatingFilter && !afterDataChange) {\n            this.close(e);\n        }\n    }\n\n    public onNewRowsLoaded(): void {\n        if (!this.newRowsActionKeep) {\n            this.resetUiToDefaults().then(() => this.appliedModel = null);\n        }\n    }\n\n    public close(e?: Event): void {\n        if (!this.hidePopup) { return; }\n\n        const keyboardEvent = e as KeyboardEvent;\n        const key = keyboardEvent && keyboardEvent.key;\n        let params: PopupEventParams;\n\n        if (key === 'Enter' || key === 'Space') {\n            params = { keyboardEvent };\n        }\n\n        this.hidePopup(params!);\n        this.hidePopup = null;\n    }\n\n    // called by set filter\n    protected isNewRowsActionKeep(): boolean {\n        return this.newRowsActionKeep;\n    }\n\n    /**\n     * By default, if the change came from a floating filter it will be applied immediately, otherwise if there is no\n     * apply button it will be applied after a debounce, otherwise it will not be applied at all. This behaviour can\n     * be adjusted by using the apply parameter.\n     */\n    protected onUiChanged(fromFloatingFilter = false, apply?: 'immediately' | 'debounce' | 'prevent'): void {\n        this.updateUiVisibility();\n        this.providedFilterParams.filterModifiedCallback();\n\n        if (this.applyActive && !this.isReadOnly) {\n            const isValid = this.isModelValid(this.getModelFromUi()!);\n\n            setDisabled(this.getRefElement('applyFilterButton'), !isValid);\n        }\n\n        if ((fromFloatingFilter && !apply) || apply === 'immediately') {\n            this.onBtApply(fromFloatingFilter);\n        } else if ((!this.applyActive && !apply) || apply === 'debounce') {\n            this.onBtApplyDebounce();\n        }\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        if (params == null) { return; }\n\n        this.hidePopup = params.hidePopup;\n    }\n\n    // static, as used by floating filter also\n    public static getDebounceMs(params: IProvidedFilterParams, debounceDefault: number): number {\n        if (ProvidedFilter.isUseApplyButton(params)) {\n            if (params.debounceMs != null) {\n                console.warn('AG Grid: debounceMs is ignored when apply button is present');\n            }\n\n            return 0;\n        }\n\n        return params.debounceMs != null ? params.debounceMs : debounceDefault;\n    }\n\n    // static, as used by floating filter also\n    public static isUseApplyButton(params: IProvidedFilterParams): boolean {\n        ProvidedFilter.checkForDeprecatedParams(params);\n\n        return !!params.buttons && params.buttons.indexOf('apply') >= 0;\n    }\n\n    public destroy(): void {\n        this.hidePopup = null;\n\n        super.destroy();\n    }\n\n    protected translate(key: keyof IFilterLocaleText | keyof IFilterTitleLocaleText): string {\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        return translate(key, DEFAULT_FILTER_LOCALE_TEXT[key]);\n    }\n\n    protected getCellValue(rowNode: RowNode): V {\n        return this.providedFilterParams.valueGetter(rowNode);\n    }\n}\n"]}