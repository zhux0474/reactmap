{"version":3,"sources":["../../src/ts/filter/provided/optionsFactory.ts"],"names":[],"mappings":"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","file":"optionsFactory.js","sourcesContent":["import { IFilterOptionDef } from '../../interfaces/iFilter';\nimport { IScalarFilterParams } from './scalarFilter';\nimport { ISimpleFilterParams } from './simpleFilter';\nimport { every, some } from '../../utils/array';\nimport { _ } from '../../utils';\n\n/* Common logic for options, used by both filters and floating filters. */\nexport class OptionsFactory {\n    protected customFilterOptions: { [name: string]: IFilterOptionDef; } = {};\n    protected filterOptions: (IFilterOptionDef | string)[];\n    protected defaultOption: string;\n\n    public init(params: IScalarFilterParams, defaultOptions: string[]): void {\n        this.filterOptions = params.filterOptions || defaultOptions;\n        this.mapCustomOptions();\n        this.selectDefaultItem(params);\n\n        this.checkForDeprecatedParams();\n    }\n\n    private checkForDeprecatedParams(): void {\n        if (_.some(this.filterOptions, (opt) => typeof opt != 'string' && opt.test != null)) {\n            console.warn(`AG Grid: [IFilterOptionDef] since v26.2.0, test() has been replaced with predicate().`);\n        }\n        if (_.some(this.filterOptions, (opt) => typeof opt != 'string' && opt.hideFilterInput != null)) {\n            console.warn(`AG Grid: [IFilterOptionDef] since v26.2.0, useOfHideFilterInput has been replaced with numberOfInputs.`);\n        }\n    }\n\n    public getFilterOptions(): (IFilterOptionDef | string)[] {\n        return this.filterOptions;\n    }\n\n    private mapCustomOptions(): void {\n        if (!this.filterOptions) { return; }\n\n        this.filterOptions.forEach(filterOption => {\n            if (typeof filterOption === 'string') { return; }\n\n            const requiredProperties = [['displayKey'], ['displayName'], ['predicate', 'test']];\n            const propertyCheck = (keys: [keyof IFilterOptionDef]) => {\n                if (!some(keys, (key) => filterOption[key] != null)) {\n                    console.warn(`AG Grid: ignoring FilterOptionDef as it doesn't contain one of '${keys}'`);\n                    return false;\n                }\n\n                return true;\n            };\n\n            if (!every(requiredProperties, propertyCheck)) {\n                this.filterOptions = _.filter(this.filterOptions, (v) => v === filterOption) || [];\n                return;\n            }\n\n            const { test } = filterOption;\n            const mutatedFilterOptions = { ...filterOption };\n            if (test != null && filterOption.predicate == null) {\n                mutatedFilterOptions.predicate = (v: any[], cv: any) => test(v[0], cv);\n                delete mutatedFilterOptions.test;\n            }\n            if (mutatedFilterOptions.hideFilterInput && mutatedFilterOptions.numberOfInputs == null) {\n                mutatedFilterOptions.numberOfInputs = 0;\n                delete mutatedFilterOptions.hideFilterInput;\n            }\n\n            this.customFilterOptions[filterOption.displayKey] = mutatedFilterOptions;\n        });\n    }\n\n    private selectDefaultItem(params: ISimpleFilterParams): void {\n        if (params.defaultOption) {\n            this.defaultOption = params.defaultOption;\n        } else if (this.filterOptions.length >= 1) {\n            const firstFilterOption = this.filterOptions[0];\n\n            if (typeof firstFilterOption === 'string') {\n                this.defaultOption = firstFilterOption;\n            } else if (firstFilterOption.displayKey) {\n                this.defaultOption = firstFilterOption.displayKey;\n            } else {\n                console.warn(`AG Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'`);\n            }\n        } else {\n            console.warn('AG Grid: no filter options for filter');\n        }\n    }\n\n    public getDefaultOption(): string {\n        return this.defaultOption;\n    }\n\n    public getCustomOption(name?: string | null): IFilterOptionDef | undefined {\n        return this.customFilterOptions[name!];\n    }\n}\n"]}