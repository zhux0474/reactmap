{"version":3,"sources":["../../src/ts/filter/provided/text/textFilter.ts"],"names":[],"mappings":"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","file":"textFilter.js","sourcesContent":["import { RefSelector } from '../../../widgets/componentAnnotations';\nimport {\n    SimpleFilter,\n    ConditionPosition,\n    ISimpleFilterParams,\n    ISimpleFilterModel,\n    ISimpleFilterModelType,\n    Tuple\n} from '../simpleFilter';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { makeNull } from '../../../utils/generic';\nimport { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\nimport { _ } from '../../../utils';\n\nexport interface TextFilterModel extends ISimpleFilterModel {\n    /** Filter type is always `'text'` */\n    filterType?: 'text';\n    /**\n     * The text value associated with the filter.\n     * It's optional as custom filters may not have a text value.\n     * */\n    filter?: string | null;\n    /**\n     * The 2nd text value associated with the filter, if supported.\n     * */\n     filterTo?: string | null;\n    }\n\nexport interface TextComparator {\n    (filter: string | null | undefined, gridValue: any, filterText: string | null): boolean;\n}\n\nexport interface TextFormatter {\n    (from?: string | null): string | null;\n}\n\nexport interface ITextFilterParams extends ISimpleFilterParams {\n    /** \n     * Used to override how to filter based on the user input.\n     */\n    textCustomComparator?: TextComparator;\n    /** \n     * By default, text filtering is case-insensitive. Set this to `true` to make text filtering case-sensitive.\n     * Default: `false`\n     */\n    caseSensitive?: boolean;\n    /** \n     * Formats the text before applying the filter compare logic.\n     * Useful if you want to substitute accented characters, for example.\n     */\n    textFormatter?: (from: string) => string;\n\n    /**\n     * If `true`, the input that the user enters will be trimmed when the filter is applied, so any leading or trailing whitespace will be removed.\n     * If only whitespace is entered, it will be left as-is.\n     * If you enable `trimInput`, it is best to also increase the `debounceMs` to give users more time to enter text.\n     * Default: `false`\n     */\n    trimInput?: boolean;\n}\n\nexport class TextFilter extends SimpleFilter<TextFilterModel, string> {\n    public static DEFAULT_FILTER_OPTIONS = [\n        SimpleFilter.CONTAINS,\n        SimpleFilter.NOT_CONTAINS,\n        SimpleFilter.EQUALS,\n        SimpleFilter.NOT_EQUAL,\n        SimpleFilter.STARTS_WITH,\n        SimpleFilter.ENDS_WITH\n    ];\n\n    static DEFAULT_FORMATTER: TextFormatter = (from: string) => from;\n\n    static DEFAULT_LOWERCASE_FORMATTER: TextFormatter = (from: string) => from == null ? null : from.toString().toLowerCase();\n\n    static DEFAULT_COMPARATOR: TextComparator = (filter: string, value: any, filterText: string) => {\n        switch (filter) {\n            case TextFilter.CONTAINS:\n                return value.indexOf(filterText) >= 0;\n            case TextFilter.NOT_CONTAINS:\n                return value.indexOf(filterText) < 0;\n            case TextFilter.EQUALS:\n                return value === filterText;\n            case TextFilter.NOT_EQUAL:\n                return value != filterText;\n            case TextFilter.STARTS_WITH:\n                return value.indexOf(filterText) === 0;\n            case TextFilter.ENDS_WITH:\n                const index = value.lastIndexOf(filterText);\n                return index >= 0 && index === (value.length - filterText.length);\n            default:\n                return false;\n        }\n    };\n\n    @RefSelector('eValue-index0-1') private readonly eValueFrom1: AgInputTextField;\n    @RefSelector('eValue-index1-1') private readonly eValueTo1: AgInputTextField;\n\n    @RefSelector('eValue-index0-2') private readonly eValueFrom2: AgInputTextField;\n    @RefSelector('eValue-index1-2') private readonly eValueTo2: AgInputTextField;\n\n    private comparator: TextComparator;\n    private formatter: TextFormatter;\n\n    private textFilterParams: ITextFilterParams;\n\n    constructor() {\n        super('textFilter');\n    }\n\n    public static trimInput(value?: string | null): string | null | undefined {\n        const trimmedInput = value && value.trim();\n\n        // trim the input, unless it is all whitespace (this is consistent with Excel behaviour)\n        return trimmedInput === '' ? value : trimmedInput;\n    }\n\n    protected getDefaultDebounceMs(): number {\n        return 500;\n    }\n\n    protected setParams(params: ITextFilterParams): void {\n        super.setParams(params);\n\n        this.textFilterParams = params;\n        this.comparator = this.textFilterParams.textCustomComparator || TextFilter.DEFAULT_COMPARATOR;\n        this.formatter = this.textFilterParams.textFormatter ||\n            (this.textFilterParams.caseSensitive ? TextFilter.DEFAULT_FORMATTER : TextFilter.DEFAULT_LOWERCASE_FORMATTER);\n    }\n\n    protected createCondition(position: ConditionPosition): TextFilterModel {\n        const type = this.getConditionTypes()[position];\n\n        const model: TextFilterModel = {\n            filterType: this.getFilterType(),\n            type,\n        };\n\n        const values = this.getValues(position);\n        if (values.length > 0) {\n            model.filter = values[0];\n        }\n        if (values.length > 1) {\n            model.filterTo = values[1];\n        }\n\n        return model;\n    }\n\n    protected getFilterType(): 'text' {\n        return 'text';\n    }\n\n    protected areSimpleModelsEqual(aSimple: TextFilterModel, bSimple: TextFilterModel): boolean {\n        return aSimple.filter === bSimple.filter &&\n            aSimple.filterTo === bSimple.filterTo &&\n            aSimple.type === bSimple.type;\n    }\n\n    protected getInputs(): Tuple<AgInputTextField>[] {\n        return [\n            [this.eValueFrom1, this.eValueTo1],\n            [this.eValueFrom2, this.eValueTo2],\n        ];\n    }\n\n    protected getValues(position: ConditionPosition): Tuple<string> {\n        const result: Tuple<string> = [];\n        this.forEachInput((element, index, elPosition, numberOfInputs) => {\n            if (position === elPosition && index < numberOfInputs) {\n                const value = makeNull(element.getValue());\n                const cleanValue = (this.textFilterParams.trimInput ? TextFilter.trimInput(value) : value) || null;\n                result.push(cleanValue);\n                element.setValue(cleanValue, true); // ensure clean value is visible\n            }\n        });\n\n        return result;\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return TextFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected createValueTemplate(position: ConditionPosition): string {\n        const pos = position === ConditionPosition.One ? '1' : '2';\n\n        return /* html */`\n            <div class=\"ag-filter-body\" ref=\"eCondition${pos}Body\" role=\"presentation\">\n                <ag-input-text-field class=\".ag-filter-from ag-filter-filter\" ref=\"eValue-index0-${pos}\"></ag-input-text-field>\n                <ag-input-text-field class=\"ag-filter-to ag-filter-filter\" ref=\"eValue-index1-${pos}\"></ag-input-text-field>\n            </div>`;\n    }\n\n    protected mapValuesFromModel(filterModel: TextFilterModel | null): Tuple<string> {\n        const { filter, filterTo, type } = filterModel || {};\n        return [\n            filter || null,\n            filterTo || null,\n        ].slice(0, this.getNumberOfInputs(type));\n    }\n\n    protected evaluateNullValue(filterType: ISimpleFilterModelType | null) {\n        return filterType === SimpleFilter.NOT_EQUAL || filterType === SimpleFilter.NOT_CONTAINS;\n    }\n\n    protected evaluateNonNullValue(values: Tuple<string>, cellValue: string, filterModel: TextFilterModel): boolean {\n        const formattedValues = _.map(values, (v) => this.formatter(v)) || [];\n        const cellValueFormatted = this.formatter(cellValue);\n\n        return _.some(formattedValues, (v) => this.comparator(filterModel.type, cellValueFormatted, v));\n    }\n}\n"]}