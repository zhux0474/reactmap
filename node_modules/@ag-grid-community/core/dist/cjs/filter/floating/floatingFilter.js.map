{"version":3,"sources":["../../src/ts/filter/floating/floatingFilter.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"floatingFilter.js","sourcesContent":["import { IComponent } from '../../interfaces/iComponent';\nimport { Column } from '../../entities/column';\nimport { GridApi } from '../../gridApi';\nimport { ProvidedFilterModel, IFilterComp, IFilterParams } from '../../interfaces/iFilter';\nimport { FilterChangedEvent } from '../../events';\n\nexport interface IFloatingFilterParams {\n    /** The column this filter is for. */\n    column: Column;\n    /** \n     * The params object passed to the filter. \n     * This is to allow the floating filter access to the configuration of the parent filter.\n     * For example, the provided filters use debounceMs from the parent filter params. \n     * */\n    filterParams: IFilterParams;\n    /**\n     * Boolean flag to indicate if the button in the floating filter that opens the parent filter in a popup should be displayed.\n     */\n    suppressFilterButton: boolean;\n    api: GridApi;\n\n    /**\n     * This is a shortcut to invoke getModel on the parent filter.\n     * If the parent filter doesn't exist (filters are lazily created as needed)\n     * then it returns null rather than calling getModel() on the parent filter.\n     */\n    currentParentModel: () => any;\n\n    /**\n     * Gets a reference to the parent filter. The result is returned asynchronously\n     * via a callback as the parent filter may not exist yet. If it does\n     * not exist, it is created and asynchronously returned (AG Grid itself\n     * does not create components asynchronously, however if providing a framework\n     * provided filter e.g. React, it might be).\n     *\n     * The floating filter can then call any method it likes on the parent filter.\n     * The parent filter will typically provide its own method for the floating\n     * filter to call to set the filter. For example, if creating custom filter A,\n     * it should have a method your floating A can call to set the state\n     * when the user updates via the floating filter.\n     */\n    parentFilterInstance: (callback: (filterInstance: IFilterComp) => void) => void;\n    /**\n     * Shows the parent filter popup.\n     */\n    showParentFilter: () => void;\n\n    /** @deprecated in v21, use parentFilterInstance() callback instead and tell filter directly */\n    onFloatingFilterChanged: (change: any) => boolean;\n}\n\nexport interface IFloatingFilter {\n    onParentModelChanged(parentModel: any, filterChangedEvent?: FilterChangedEvent | null): void;\n}\n\nexport interface IFloatingFilterComp extends IFloatingFilter, IComponent<IFloatingFilterParams> {\n}\n\nexport interface BaseFloatingFilterChange {\n    model: ProvidedFilterModel;\n    apply: boolean;\n}\n"]}