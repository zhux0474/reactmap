{"version":3,"sources":["../../src/ts/widgets/agInputTextField.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,+DAA2E;AAC3E,wCAAsC;AACtC,4CAA0C;AAM1C;IAAsC,oCAA+D;IACjG,0BAAY,MAAwB,EAAE,SAA2B,EAAE,SAAkB;QAA/C,0BAAA,EAAA,2BAA2B;QAAE,0BAAA,EAAA,kBAAkB;eACjF,kBAAM,MAAM,EAAE,SAAS,EAAE,SAAS,CAAC;IACvC,CAAC;IAES,wCAAa,GAAvB;QACI,iBAAM,aAAa,WAAE,CAAC;QAEtB,IAAI,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE;YAChC,IAAI,CAAC,2BAA2B,EAAE,CAAC;SACtC;IACL,CAAC;IAEM,mCAAQ,GAAf,UAAgB,KAAqB,EAAE,MAAgB;QACnD,IAAM,GAAG,GAAG,iBAAM,QAAQ,YAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAE1C,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,KAAK,EAAE;YAC7B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,gBAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;SAClD;QAED,OAAO,GAAG,CAAC;IACf,CAAC;IAEO,sDAA2B,GAAnC;QACI,IAAM,OAAO,GAAG,IAAI,MAAM,CAAC,MAAI,IAAI,CAAC,MAAM,CAAC,kBAAkB,MAAG,CAAC,CAAC;QAElE,IAAM,2BAA2B,GAAG,UAAC,KAAoB;YACrD,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;gBACvC,KAAK,CAAC,cAAc,EAAE,CAAC;aAC1B;QACL,CAAC,CAAC;QAEF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,2BAA2B,CAAC,CAAC;QAE9E,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,UAAA,CAAC;YAC3C,IAAM,IAAI,GAAG,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAE7C,IAAI,YAAI,CAAC,IAAI,EAAE,UAAC,CAAS,IAAK,OAAA,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAhB,CAAgB,CAAC,EAAE;gBAC7C,CAAC,CAAC,cAAc,EAAE,CAAC;aACtB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACL,uBAAC;AAAD,CA1CA,AA0CC,CA1CqC,2CAAoB,GA0CzD;AA1CY,4CAAgB","file":"agInputTextField.js","sourcesContent":["import { AgAbstractInputField, IInputField } from './agAbstractInputField';\nimport { some } from '../utils/array';\nimport { exists } from '../utils/generic';\n\nexport interface ITextInputField extends IInputField {\n    allowedCharPattern?: string;\n}\n\nexport class AgInputTextField extends AgAbstractInputField<HTMLInputElement, string, ITextInputField> {\n    constructor(config?: ITextInputField, className = 'ag-text-field', inputType = 'text') {\n        super(config, className, inputType);\n    }\n\n    protected postConstruct() {\n        super.postConstruct();\n\n        if (this.config.allowedCharPattern) {\n            this.preventDisallowedCharacters();\n        }\n    }\n\n    public setValue(value?: string | null, silent?: boolean): this {\n        const ret = super.setValue(value, silent);\n\n        if (this.eInput.value !== value) {\n            this.eInput.value = exists(value) ? value : '';\n        }\n\n        return ret;\n    }\n\n    private preventDisallowedCharacters(): void {\n        const pattern = new RegExp(`[${this.config.allowedCharPattern}]`);\n\n        const preventDisallowedCharacters = (event: KeyboardEvent) => {\n            if (event.key && !pattern.test(event.key)) {\n                event.preventDefault();\n            }\n        };\n\n        this.addManagedListener(this.eInput, 'keypress', preventDisallowedCharacters);\n\n        this.addManagedListener(this.eInput, 'paste', e => {\n            const text = e.clipboardData.getData('text');\n\n            if (some(text, (c: string) => !pattern.test(c))) {\n                e.preventDefault();\n            }\n        });\n    }\n}\n"]}