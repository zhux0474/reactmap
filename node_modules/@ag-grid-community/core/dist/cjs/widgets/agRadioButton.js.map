{"version":3,"sources":["../../src/ts/widgets/agRadioButton.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,2CAA0C;AAC1C,0CAAsC;AAItC;IAAmC,iCAAU;IACzC,uBAAY,MAAoB;eAC5B,kBAAM,MAAM,EAAE,iBAAiB,EAAE,OAAO,CAAC;IAC7C,CAAC;IAES,kCAAU,GAApB;QACI,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;IAC/B,CAAC;IAEM,8BAAM,GAAb;QACI,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YAAE,OAAO;SAAE;QAErC,uDAAuD;QACvD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;YACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SACvB;IACL,CAAC;IAES,yCAAiB,GAA3B;QACI,iBAAM,iBAAiB,WAAE,CAAC;QAE1B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,kBAAM,CAAC,sBAAsB,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACxG,CAAC;IAED;;;;;OAKG;IACK,gCAAQ,GAAhB,UAAiB,KAA2B;QACxC,IAAI,KAAK,CAAC,QAAQ;YACd,KAAK,CAAC,IAAI;YACV,IAAI,CAAC,MAAM,CAAC,IAAI;YAChB,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;YAC/B,KAAK,CAAC,EAAE;YACR,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,EAAE;YAC7B,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SAC9B;IACL,CAAC;IACL,oBAAC;AAAD,CAxCA,AAwCC,CAxCkC,uBAAU,GAwC5C;AAxCY,sCAAa","file":"agRadioButton.js","sourcesContent":["import { AgCheckbox } from './agCheckbox';\nimport { Events } from '../eventKeys';\nimport { CheckboxChangedEvent } from '../events';\nimport { IInputField } from './agAbstractInputField';\n\nexport class AgRadioButton extends AgCheckbox {\n    constructor(config?: IInputField) {\n        super(config, 'ag-radio-button', 'radio');\n    }\n\n    protected isSelected(): boolean {\n        return this.eInput.checked;\n    }\n\n    public toggle(): void {\n        if (this.eInput.disabled) { return; }\n\n        // do not allow an active radio button to be deselected\n        if (!this.isSelected()) {\n            this.setValue(true);\n        }\n    }\n\n    protected addInputListeners() {\n        super.addInputListeners();\n\n        this.addManagedListener(this.eventService, Events.EVENT_CHECKBOX_CHANGED, this.onChange.bind(this));\n    }\n\n    /**\n     * This ensures that if another radio button in the same named group is selected, we deselect this radio button.\n     * By default the browser does this for you, but we are managing classes ourselves in order to ensure input\n     * elements are styled correctly in IE11, and the DOM 'changed' event is only fired when a button is selected,\n     * not deselected, so we need to use our own event.\n     */\n    private onChange(event: CheckboxChangedEvent) {\n        if (event.selected &&\n            event.name &&\n            this.eInput.name &&\n            this.eInput.name === event.name &&\n            event.id &&\n            this.eInput.id !== event.id) {\n            this.setValue(false, true);\n        }\n    }\n}\n"]}