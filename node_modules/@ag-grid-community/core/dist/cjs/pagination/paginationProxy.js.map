{"version":3,"sources":["../../src/ts/pagination/paginationProxy.ts"],"names":[],"mappings":"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","file":"paginationProxy.js","sourcesContent":["import { IRowModel, RowBounds } from \"../interfaces/iRowModel\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Events, ModelUpdatedEvent, PaginationChangedEvent } from \"../events\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { missing, exists } from \"../utils/generic\";\nimport { isNumeric } from \"../utils/number\";\nimport { RowPosition } from \"../entities/rowPosition\";\n\n@Bean('paginationProxy')\nexport class PaginationProxy extends BeanStub {\n\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    private active: boolean;\n    private paginateChildRows: boolean;\n\n    private pageSize: number;\n\n    private totalPages: number;\n    private currentPage = 0;\n\n    private topDisplayedRowIndex = 0;\n    private bottomDisplayedRowIndex = 0;\n    private pixelOffset = 0;\n    private topRowBounds: RowBounds;\n    private bottomRowBounds: RowBounds;\n\n    private masterRowCount: number = 0;\n\n    @PostConstruct\n    private postConstruct() {\n        this.active = this.gridOptionsWrapper.isPagination();\n        this.paginateChildRows = this.gridOptionsWrapper.isPaginateChildRows();\n\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, 'paginationPageSize', this.onPaginationPageSizeChanged.bind(this));\n\n        this.onModelUpdated();\n    }\n\n    public ensureRowHeightsValid(startPixel: number, endPixel: number, startLimitIndex: number, endLimitIndex: number): boolean {\n        const res = this.rowModel.ensureRowHeightsValid(startPixel, endPixel, this.getPageFirstRow(), this.getPageLastRow());\n        if (res) {\n            this.calculatePages();\n        }\n        return res;\n    }\n\n    private onModelUpdated(modelUpdatedEvent?: ModelUpdatedEvent): void {\n        this.calculatePages();\n        const paginationChangedEvent: PaginationChangedEvent = {\n            type: Events.EVENT_PAGINATION_CHANGED,\n            animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,\n            newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,\n            newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,\n            keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(paginationChangedEvent);\n    }\n\n    private onPaginationPageSizeChanged(): void {\n        this.calculatePages();\n        const paginationChangedEvent: PaginationChangedEvent = {\n            type: Events.EVENT_PAGINATION_CHANGED,\n            animate: false,\n            newData: false,\n            newPage: false,\n            // important to keep rendered rows, otherwise every time grid is resized,\n            // we would destroy all the rows.\n            keepRenderedRows: true,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(paginationChangedEvent);\n    }\n\n    public goToPage(page: number): void {\n        if (!this.active || this.currentPage === page) { return; }\n\n        this.currentPage = page;\n        const event: ModelUpdatedEvent = {\n            type: Events.EVENT_MODEL_UPDATED,\n            animate: false,\n            keepRenderedRows: false,\n            newData: false,\n            newPage: true,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.onModelUpdated(event);\n    }\n\n    public getPixelOffset(): number {\n        return this.pixelOffset;\n    }\n\n    public getRow(index: number): RowNode | undefined {\n        return this.rowModel.getRow(index);\n    }\n\n    public getRowNode(id: string): RowNode | undefined {\n        return this.rowModel.getRowNode(id);\n    }\n\n    public getRowIndexAtPixel(pixel: number): number {\n        return this.rowModel.getRowIndexAtPixel(pixel);\n    }\n\n    public getCurrentPageHeight(): number {\n        if (missing(this.topRowBounds) || missing(this.bottomRowBounds)) {\n            return 0;\n        }\n        return Math.max(this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop, 0);\n    }\n\n    public getCurrentPagePixelRange(): {pageFirstPixel: number, pageLastPixel: number} {\n        const pageFirstPixel = this.topRowBounds ? this.topRowBounds.rowTop : 0;\n        const pageLastPixel = this.bottomRowBounds ? this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight : 0;\n        return {pageFirstPixel, pageLastPixel};\n    }\n\n    public isRowPresent(rowNode: RowNode): boolean {\n        if (!this.rowModel.isRowPresent(rowNode)) {\n            return false;\n        }\n        const nodeIsInPage = rowNode.rowIndex! >= this.topDisplayedRowIndex && rowNode.rowIndex! <= this.bottomDisplayedRowIndex;\n        return nodeIsInPage;\n    }\n\n    public isEmpty(): boolean {\n        return this.rowModel.isEmpty();\n    }\n\n    public isRowsToRender(): boolean {\n        return this.rowModel.isRowsToRender();\n    }\n\n    public getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[] {\n        return this.rowModel.getNodesInRangeForSelection(firstInRange, lastInRange);\n    }\n\n    public forEachNode(callback: (rowNode: RowNode, index: number) => void): void {\n        return this.rowModel.forEachNode(callback);\n    }\n\n    public getType(): string {\n        return this.rowModel.getType();\n    }\n\n    public getRowBounds(index: number): RowBounds {\n        const res = this.rowModel.getRowBounds(index)!;\n        res.rowIndex = index;\n        return res;\n    }\n\n    public getPageFirstRow(): number {\n        return this.topRowBounds ? this.topRowBounds.rowIndex! : -1;\n    }\n\n    public getPageLastRow(): number {\n        return this.bottomRowBounds ? this.bottomRowBounds.rowIndex! : -1;\n    }\n\n    public getRowCount(): number {\n        return this.rowModel.getRowCount();\n    }\n\n    public getPageForIndex(index: number): number {\n        return Math.floor(index / this.pageSize);\n    }\n\n    public goToPageWithIndex(index: any): void {\n        if (!this.active) { return; }\n\n        const pageNumber = this.getPageForIndex(index);\n        this.goToPage(pageNumber);\n    }\n\n    public isRowInPage(row: RowPosition): boolean {\n        if (!this.active) { return true; }\n        const rowPage = this.getPageForIndex(row.rowIndex);\n        return rowPage === this.currentPage;\n    }\n\n    public isLastPageFound(): boolean {\n        return this.rowModel.isLastRowIndexKnown();\n    }\n\n    public getCurrentPage(): number {\n        return this.currentPage;\n    }\n\n    public goToNextPage(): void {\n        this.goToPage(this.currentPage + 1);\n    }\n\n    public goToPreviousPage(): void {\n        this.goToPage(this.currentPage - 1);\n    }\n\n    public goToFirstPage(): void {\n        this.goToPage(0);\n    }\n\n    public goToLastPage(): void {\n        const rowCount = this.rowModel.getRowCount();\n        const lastPage = Math.floor(rowCount / this.pageSize);\n        this.goToPage(lastPage);\n    }\n\n    public getPageSize(): number {\n        return this.pageSize;\n    }\n\n    public getTotalPages(): number {\n        return this.totalPages;\n    }\n\n    private setPageSize(): void {\n        // show put this into super class\n        this.pageSize = this.gridOptionsWrapper.getPaginationPageSize()!;\n        if (this.pageSize == null || this.pageSize < 1) {\n            this.pageSize = 100;\n        }\n    }\n\n    private calculatePages(): void {\n        if (this.active) {\n            this.setPageSize();\n            if (this.paginateChildRows) {\n                this.calculatePagesAllRows();\n            } else {\n                this.calculatePagesMasterRowsOnly();\n            }\n        } else {\n            this.calculatedPagesNotActive();\n        }\n\n        this.topRowBounds = this.rowModel.getRowBounds(this.topDisplayedRowIndex)!;\n        if (this.topRowBounds) {\n            this.topRowBounds.rowIndex = this.topDisplayedRowIndex;\n        }\n\n        this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomDisplayedRowIndex)!;\n        if (this.bottomRowBounds) {\n            this.bottomRowBounds.rowIndex = this.bottomDisplayedRowIndex;\n        }\n\n        this.setPixelOffset(exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0);\n    }\n\n    private setPixelOffset(value: number): void {\n        if (this.pixelOffset === value) { return; }\n\n        this.pixelOffset = value;\n        this.eventService.dispatchEvent({type: Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED});\n    }\n\n    private setZeroRows(): void {\n        this.masterRowCount = 0;\n        this.topDisplayedRowIndex = 0;\n        this.bottomDisplayedRowIndex = -1;\n        this.currentPage = 0;\n        this.totalPages = 0;\n    }\n\n    private calculatePagesMasterRowsOnly(): void {\n\n        // const csrm = <ClientSideRowModel> this.rowModel;\n        // const rootNode = csrm.getRootNode();\n        // const masterRows = rootNode.childrenAfterSort;\n\n        this.masterRowCount = this.rowModel.getTopLevelRowCount();\n\n        // we say <=0 (rather than =0) as viewport returns -1 when no rows\n        if (this.masterRowCount <= 0) {\n            this.setZeroRows();\n            return;\n        }\n\n        const masterLastRowIndex = this.masterRowCount - 1;\n\n        this.totalPages = Math.floor((masterLastRowIndex) / this.pageSize) + 1;\n\n        if (this.currentPage >= this.totalPages) {\n            this.currentPage = this.totalPages - 1;\n        }\n\n        if (!isNumeric(this.currentPage) || this.currentPage < 0) {\n            this.currentPage = 0;\n        }\n\n        const masterPageStartIndex = this.pageSize * this.currentPage;\n        let masterPageEndIndex = (this.pageSize * (this.currentPage + 1)) - 1;\n\n        if (masterPageEndIndex > masterLastRowIndex) {\n            masterPageEndIndex = masterLastRowIndex;\n        }\n\n        this.topDisplayedRowIndex = this.rowModel.getTopLevelRowDisplayedIndex(masterPageStartIndex);\n        // masterRows[masterPageStartIndex].rowIndex;\n\n        if (masterPageEndIndex === masterLastRowIndex) {\n            // if showing the last master row, then we want to show the very last row of the model\n            this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;\n        } else {\n            const firstIndexNotToShow = this.rowModel.getTopLevelRowDisplayedIndex(masterPageEndIndex + 1);\n            //masterRows[masterPageEndIndex + 1].rowIndex;\n            // this gets the index of the last child - eg current row is open, we want to display all children,\n            // the index of the last child is one less than the index of the next parent row.\n            this.bottomDisplayedRowIndex = firstIndexNotToShow - 1;\n        }\n    }\n\n    public getMasterRowCount(): number {\n        return this.masterRowCount;\n    }\n\n    private calculatePagesAllRows(): void {\n        this.masterRowCount = this.rowModel.getRowCount();\n\n        if (this.masterRowCount === 0) {\n            this.setZeroRows();\n            return;\n        }\n\n        const maxRowIndex = this.masterRowCount - 1;\n\n        this.totalPages = Math.floor((maxRowIndex) / this.pageSize) + 1;\n\n        if (this.currentPage >= this.totalPages) {\n            this.currentPage = this.totalPages - 1;\n        }\n\n        if (!isNumeric(this.currentPage) || this.currentPage < 0) {\n            this.currentPage = 0;\n        }\n\n        this.topDisplayedRowIndex = this.pageSize * this.currentPage;\n        this.bottomDisplayedRowIndex = (this.pageSize * (this.currentPage + 1)) - 1;\n\n        if (this.bottomDisplayedRowIndex > maxRowIndex) {\n            this.bottomDisplayedRowIndex = maxRowIndex;\n        }\n    }\n\n    private calculatedPagesNotActive(): void {\n        this.pageSize = this.rowModel.getRowCount();\n        this.totalPages = 1;\n        this.currentPage = 0;\n        this.topDisplayedRowIndex = 0;\n        this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;\n    }\n}\n"]}