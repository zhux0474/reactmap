{"version":3,"sources":["../../src/ts/pagination/paginationAutoPageSizeService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAA+C;AAC/C,oCAAmC;AACnC,8CAAoE;AAKpE;IAAmD,iDAAQ;IAA3D;;IA0CA,CAAC;IAnCW,qDAAa,GAArB;QADA,iBASC;QAPG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAA,CAAC;YACzB,KAAI,CAAC,qBAAqB,GAAG,CAAC,CAAC,sBAAsB,CAAC;YAEtD,KAAI,CAAC,kBAAkB,CAAC,KAAI,CAAC,YAAY,EAAE,eAAM,CAAC,yBAAyB,EAAE,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC,CAAC;YAClH,KAAI,CAAC,kBAAkB,CAAC,KAAI,CAAC,YAAY,EAAE,eAAM,CAAC,+BAA+B,EAAE,KAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC,CAAC;YAC9H,KAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,iDAAS,GAAjB;QACI,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,EAAE,CAAC;IAC/D,CAAC;IAEO,iEAAyB,GAAjC;QACI,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAEO,2DAAmB,GAA3B;QACI,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAEO,qDAAa,GAArB;QACI,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE;YAClB,OAAO;SACV;QAED,IAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,EAAE,CAAC;QACjE,IAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,CAAC,aAAa,EAAE,CAAC;QAEvF,IAAI,UAAU,GAAG,CAAC,EAAE;YAChB,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,SAAS,CAAC,CAAC;YACvD,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,oBAAoB,EAAE,WAAW,CAAC,CAAC;SAC1E;IACL,CAAC;IAvC0B;QAA1B,mBAAS,CAAC,cAAc,CAAC;uEAAoC;IAK9D;QADC,uBAAa;sEASb;IAfQ,6BAA6B;QADzC,cAAI,CAAC,+BAA+B,CAAC;OACzB,6BAA6B,CA0CzC;IAAD,oCAAC;CA1CD,AA0CC,CA1CkD,mBAAQ,GA0C1D;AA1CY,sEAA6B","file":"paginationAutoPageSizeService.js","sourcesContent":["import { BeanStub } from \"../context/beanStub\";\nimport { Events } from \"../events\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { RowContainerCtrl } from \"../gridBodyComp/rowContainer/rowContainerCtrl\";\n\n@Bean('paginationAutoPageSizeService')\nexport class PaginationAutoPageSizeService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private centerRowContainerCon: RowContainerCtrl;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            this.centerRowContainerCon = p.centerRowContainerCtrl;\n\n            this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.onBodyHeightChanged.bind(this));\n            this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n            this.checkPageSize();\n        });\n    }\n\n    private notActive(): boolean {\n        return !this.gridOptionsWrapper.isPaginationAutoPageSize();\n    }\n\n    private onScrollVisibilityChanged(): void {\n        this.checkPageSize();\n    }\n\n    private onBodyHeightChanged(): void {\n        this.checkPageSize();\n    }\n\n    private checkPageSize(): void {\n        if (this.notActive()) {\n            return;\n        }\n\n        const rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n        const bodyHeight = this.centerRowContainerCon.getViewportSizeFeature().getBodyHeight();\n\n        if (bodyHeight > 0) {\n            const newPageSize = Math.floor(bodyHeight / rowHeight);\n            this.gridOptionsWrapper.setProperty('paginationPageSize', newPageSize);\n        }\n    }\n}\n"]}