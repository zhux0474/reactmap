{"version":3,"sources":["../../src/ts/ctrlsFactory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAA8C;AAC9C,6CAAyD;AAGzD;IAAkC,gCAAQ;IAA1C;QAAA,qEAgBC;QAdW,cAAQ,GAAuC,EAAE,CAAA;;IAc7D,CAAC;IAZU,+BAAQ,GAAf,UAAgB,IAAoB;QAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;IAC9D,CAAC;IAEM,kCAAW,GAAlB,UAAmB,IAAY;QAC3B,IAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAE5C,IAAI,eAAe,IAAE,IAAI,EAAE;YAAE,OAAO,SAAS,CAAC;SAAE;QAEhD,OAAO,IAAI,eAAe,EAAE,CAAC;IACjC,CAAC;IAdQ,YAAY;QADxB,cAAI,CAAC,cAAc,CAAC;OACR,YAAY,CAgBxB;IAAD,mBAAC;CAhBD,AAgBC,CAhBiC,mBAAQ,GAgBzC;AAhBY,oCAAY","file":"ctrlsFactory.js","sourcesContent":["import { BeanStub } from \"./context/beanStub\";\nimport { Bean, ControllerMeta } from \"./context/context\";\n\n@Bean('ctrlsFactory')\nexport class CtrlsFactory extends BeanStub {\n\n    private registry: {[name: string]: new () => Object} = {}\n\n    public register(meta: ControllerMeta): void {\n        this.registry[meta.controllerName] = meta.controllerClass;\n    }\n\n    public getInstance(name: string): any {\n        const ControllerClass = this.registry[name];\n\n        if (ControllerClass==null) { return undefined; }\n\n        return new ControllerClass();\n    }\n\n}"]}