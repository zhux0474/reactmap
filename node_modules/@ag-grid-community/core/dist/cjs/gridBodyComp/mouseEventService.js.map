{"version":3,"sources":["../../src/ts/gridBodyComp/mouseEventService.ts"],"names":[],"mappings":"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","file":"mouseEventService.js","sourcesContent":["import { Bean } from \"../context/context\";\nimport { Autowired } from \"../context/context\";\nimport { CellPosition } from \"../entities/cellPosition\";\nimport { NumberSequence } from '../utils';\nimport { Constants } from \"../constants/constants\";\nimport { DraggingEvent } from \"../dragAndDrop/dragAndDropService\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { getCtrlForEvent } from \"../utils/event\";\nimport { exists } from \"../utils/generic\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { CellCtrl } from \"../rendering/cell/cellCtrl\";\n\n@Bean('mouseEventService')\nexport class MouseEventService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private static gridInstanceSequence = new NumberSequence();\n    private static GRID_DOM_KEY = '__ag_grid_instance';\n\n    private gridInstanceId = MouseEventService.gridInstanceSequence.next();\n\n    // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,\n    // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic\n    // for where this is used.\n    public stampTopLevelGridCompWithGridInstance(eGridDiv: HTMLElement): void {\n        (eGridDiv as any)[MouseEventService.GRID_DOM_KEY] = this.gridInstanceId;\n    }\n\n    public getRenderedCellForEvent(event: Event): CellCtrl | null {\n        return getCtrlForEvent<CellCtrl>(this.gridOptionsWrapper, event, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n    }\n\n    // walks the path of the event, and returns true if this grid is the first one that it finds. if doing\n    // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste\n    // getting executed on many grids at the same time.\n    public isEventFromThisGrid(event: UIEvent): boolean {\n        const res = this.isElementInThisGrid(event.target as HTMLElement);\n        return res;\n    }\n\n    public isElementInThisGrid(element: HTMLElement): boolean {\n        let pointer: HTMLElement | null = element;\n        while (pointer) {\n            const instanceId = (pointer as any)[MouseEventService.GRID_DOM_KEY];\n            if (exists(instanceId)) {\n                const eventFromThisGrid = instanceId === this.gridInstanceId;\n                return eventFromThisGrid;\n            }\n            pointer = pointer.parentElement;\n        }\n        return false;\n    }\n\n    public getCellPositionForEvent(event: MouseEvent | KeyboardEvent): CellPosition | null {\n        const cellComp = this.getRenderedCellForEvent(event);\n        return cellComp ? cellComp.getCellPosition() : null;\n    }\n\n    public getNormalisedPosition(event: MouseEvent | DraggingEvent): { x: number, y: number; } {\n        const gridPanelHasScrolls = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;\n        const e = event as MouseEvent;\n        let x: number;\n        let y: number;\n\n        if (e.clientX != null || e.clientY != null) {\n            x = e.clientX;\n            y = e.clientY;\n        } else {\n            x = e.x;\n            y = e.y;\n        }\n\n        if (gridPanelHasScrolls) {\n            const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            const vRange = gridBodyCon.getScrollFeature().getVScrollPosition();\n            const hRange = gridBodyCon.getScrollFeature().getHScrollPosition();\n            x += hRange.left;\n            y += vRange.top;\n        }\n\n        return { x, y };\n    }\n\n}\n"]}