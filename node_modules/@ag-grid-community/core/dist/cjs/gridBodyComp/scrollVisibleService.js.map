{"version":3,"sources":["../../src/ts/gridBodyComp/scrollVisibleService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAAoE;AACpE,gDAA+C;AAC/C,oCAAiE;AAWjE;IAA0C,wCAAQ;IAAlD;;IA2EA,CAAC;IAjEW,4CAAa,GAArB;QACI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,eAAM,CAAC,+BAA+B,EAAE,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9H,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,eAAM,CAAC,qCAAqC,EAAE,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAE7I,CAAC;IAEM,wDAAyB,GAAhC;QACI,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAEO,6DAA8B,GAAtC;QACI,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAEO,qCAAM,GAAd;QACI,6EAA6E;QAC7E,+EAA+E;QAC/E,4EAA4E;QAC5E,8EAA8E;QAC9E,mFAAmF;QACnF,gCAAgC;QAChC,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;IAChD,CAAC;IAEO,yCAAU,GAAlB;QACI,IAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,yBAAyB,EAAE,CAAC;QAEpE,IAAI,CAAC,aAAa,EAAE;YAAE,OAAO;SAAE;QAE/B,IAAM,MAAM,GAA4B;YACpC,uBAAuB,EAAE,aAAa,CAAC,yBAAyB,EAAE;YAClE,qBAAqB,EAAE,IAAI,CAAC,uBAAuB,EAAE;SACxD,CAAC;QAEF,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAEM,gDAAiB,GAAxB,UAAyB,MAA+B;QACpD,IAAM,mBAAmB,GACrB,IAAI,CAAC,uBAAuB,KAAK,MAAM,CAAC,uBAAuB;YAC/D,IAAI,CAAC,qBAAqB,KAAK,MAAM,CAAC,qBAAqB,CAAC;QAEhE,IAAI,mBAAmB,EAAE;YACrB,IAAI,CAAC,uBAAuB,GAAG,MAAM,CAAC,uBAAuB,CAAC;YAC9D,IAAI,CAAC,qBAAqB,GAAG,MAAM,CAAC,qBAAqB,CAAC;YAE1D,IAAM,OAAK,GAAiC;gBACxC,IAAI,EAAE,eAAM,CAAC,+BAA+B;gBAC5C,GAAG,EAAE,IAAI,CAAC,OAAO;gBACjB,SAAS,EAAE,IAAI,CAAC,SAAS;aAC5B,CAAC;YACF,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,OAAK,CAAC,CAAC;SAC1C;IACL,CAAC;IAED,mDAAmD;IAC5C,wDAAyB,GAAhC;QACI,OAAO,IAAI,CAAC,uBAAuB,CAAC;IACxC,CAAC;IAED,2BAA2B;IACpB,sDAAuB,GAA9B;QACI,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACtC,CAAC;IAxEuB;QAAvB,mBAAS,CAAC,WAAW,CAAC;2DAA8B;IAC/B;QAArB,mBAAS,CAAC,SAAS,CAAC;yDAA0B;IACpB;QAA1B,mBAAS,CAAC,cAAc,CAAC;8DAAmC;IAM7D;QADC,uBAAa;6DAKb;IAdQ,oBAAoB;QADhC,cAAI,CAAC,sBAAsB,CAAC;OAChB,oBAAoB,CA2EhC;IAAD,2BAAC;CA3ED,AA2EC,CA3EyC,mBAAQ,GA2EjD;AA3EY,oDAAoB","file":"scrollVisibleService.js","sourcesContent":["import { Bean, Autowired, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Events, ScrollVisibilityChangedEvent } from \"../events\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { CtrlsService } from \"../ctrlsService\";\n\nexport interface SetScrollsVisibleParams {\n    horizontalScrollShowing: boolean;\n    verticalScrollShowing: boolean;\n}\n\n@Bean('scrollVisibleService')\nexport class ScrollVisibleService extends BeanStub {\n\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n\n    private horizontalScrollShowing: boolean;\n    private verticalScrollShowing: boolean;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));\n\n    }\n\n    public onDisplayedColumnsChanged(): void {\n        this.update();\n    }\n\n    private onDisplayedColumnsWidthChanged(): void {\n        this.update();\n    }\n\n    private update(): void {\n        // because of column animation (which takes 200ms), we have to do this twice.\n        // eg if user removes cols anywhere except at the RHS, then the cols on the RHS\n        // will animate to the left to fill the gap. this animation means just after\n        // the cols are removed, the remaining cols are still in the original location\n        // at the start of the animation, so pre animation the H scrollbar is still needed,\n        // but post animation it is not.\n        this.updateImpl();\n        setTimeout(this.updateImpl.bind(this), 500);\n    }\n\n    private updateImpl(): void {\n        const centerRowCtrl = this.ctrlsService.getCenterRowContainerCtrl();\n\n        if (!centerRowCtrl) { return; }\n\n        const params: SetScrollsVisibleParams = {\n            horizontalScrollShowing: centerRowCtrl.isHorizontalScrollShowing(),\n            verticalScrollShowing: this.isVerticalScrollShowing()\n        };\n\n        this.setScrollsVisible(params);\n    }\n\n    public setScrollsVisible(params: SetScrollsVisibleParams): void {\n        const atLeastOneDifferent =\n            this.horizontalScrollShowing !== params.horizontalScrollShowing ||\n            this.verticalScrollShowing !== params.verticalScrollShowing;\n\n        if (atLeastOneDifferent) {\n            this.horizontalScrollShowing = params.horizontalScrollShowing;\n            this.verticalScrollShowing = params.verticalScrollShowing;\n\n            const event: ScrollVisibilityChangedEvent = {\n                type: Events.EVENT_SCROLL_VISIBILITY_CHANGED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    // used by pagination service - to know page height\n    public isHorizontalScrollShowing(): boolean {\n        return this.horizontalScrollShowing;\n    }\n\n    // used by header container\n    public isVerticalScrollShowing(): boolean {\n        return this.verticalScrollShowing;\n    }\n}\n"]}