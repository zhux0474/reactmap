{"version":3,"sources":["../../src/ts/gridBodyComp/pinnedWidthService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAA+C;AAC/C,8CAAoE;AACpE,4DAA2D;AAC3D,0CAAsC;AAEtC,oDAAmD;AAGnD;IAAwC,sCAAQ;IAAhD;;IAwCA,CAAC;IAhCW,0CAAa,GAArB;QACI,IAAM,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,kBAAM,CAAC,+BAA+B,EAAE,QAAQ,CAAC,CAAC;QAC7F,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,kBAAM,CAAC,qCAAqC,EAAE,QAAQ,CAAC,CAAC;QACnG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,kBAAkB,EAAE,uCAAkB,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;IACnG,CAAC;IAEO,iDAAoB,GAA5B;QAEI,IAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,KAAK,qBAAS,CAAC,gBAAgB,CAAC;QAE1F,IAAM,YAAY,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,4BAA4B,EAAE,CAAC;QACvF,IAAM,aAAa,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,6BAA6B,EAAE,CAAC;QAEzF,IAAI,YAAY,IAAI,IAAI,CAAC,SAAS,EAAE;YAChC,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC;YAC9B,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,EAAC,IAAI,EAAE,kBAAM,CAAC,+BAA+B,EAAC,CAAC,CAAC;SACnF;QAED,IAAI,aAAa,IAAI,IAAI,CAAC,UAAU,EAAE;YAClC,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC;YAChC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,EAAC,IAAI,EAAE,kBAAM,CAAC,gCAAgC,EAAC,CAAC,CAAC;SACpF;IACL,CAAC;IAEM,gDAAmB,GAA1B;QACI,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAEM,+CAAkB,GAAzB;QACI,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IArCyB;QAAzB,mBAAS,CAAC,aAAa,CAAC;2DAAkC;IAM3D;QADC,uBAAa;2DAMb;IAbQ,kBAAkB;QAD9B,cAAI,CAAC,oBAAoB,CAAC;OACd,kBAAkB,CAwC9B;IAAD,yBAAC;CAxCD,AAwCC,CAxCuC,mBAAQ,GAwC/C;AAxCY,gDAAkB","file":"pinnedWidthService.js","sourcesContent":["import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { Events } from \"../eventKeys\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { Constants } from \"../constants/constants\";\n\n@Bean('pinnedWidthService')\nexport class PinnedWidthService extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private leftWidth: number;\n    private rightWidth: number;\n\n    @PostConstruct\n    private postConstruct(): void {\n        const listener = this.checkContainerWidths.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, listener);\n    }\n\n    private checkContainerWidths() {\n\n        const printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n\n        const newLeftWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsLeftWidth();\n        const newRightWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsRightWidth();\n\n        if (newLeftWidth != this.leftWidth) {\n            this.leftWidth = newLeftWidth;\n            this.eventService.dispatchEvent({type: Events.EVENT_LEFT_PINNED_WIDTH_CHANGED});\n        }\n\n        if (newRightWidth != this.rightWidth) {\n            this.rightWidth = newRightWidth;\n            this.eventService.dispatchEvent({type: Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED});\n        }\n    }\n\n    public getPinnedRightWidth(): number {\n        return this.rightWidth;\n    }\n\n    public getPinnedLeftWidth(): number {\n        return this.leftWidth;\n    }\n}"]}