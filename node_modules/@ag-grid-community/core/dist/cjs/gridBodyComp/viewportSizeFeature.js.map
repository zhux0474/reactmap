{"version":3,"sources":["../../src/ts/gridBodyComp/viewportSizeFeature.ts"],"names":[],"mappings":"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","file":"viewportSizeFeature.js","sourcesContent":["import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { ScrollVisibleService, SetScrollsVisibleParams } from \"../gridBodyComp/scrollVisibleService\";\nimport { GridBodyCtrl } from \"./gridBodyCtrl\";\nimport { BodyHeightChangedEvent, Events } from \"../events\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { RowContainerCtrl } from \"./rowContainer/rowContainerCtrl\";\nimport { getInnerHeight } from \"../utils/dom\";\n\n// listens to changes in the center viewport size, for column and row virtualisation,\n// and adjusts grid as necessary. there are two viewports, one for horizontal and one for\n// vertical scrolling.\nexport class ViewportSizeFeature extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    private centerContainerCon: RowContainerCtrl;\n    private gridBodyCon: GridBodyCtrl;\n\n    private centerWidth: number;\n    private bodyHeight: number;\n\n    constructor(centerContainer: RowContainerCtrl) {\n        super();\n        this.centerContainerCon = centerContainer;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            this.listenForResize();\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));\n    }\n\n    private listenForResize(): void {\n        const listener = this.onCenterViewportResized.bind(this);\n\n        // centerContainer gets horizontal resizes\n        this.centerContainerCon.registerViewportResizeListener(listener);\n\n        // eBodyViewport gets vertical resizes\n        this.gridBodyCon.registerBodyViewportResizeListener(listener);\n    }\n\n    private onScrollbarWidthChanged() {\n        this.checkViewportAndScrolls();\n    }\n\n    private onCenterViewportResized(): void {\n        if (this.centerContainerCon.isViewportVisible()) {\n            this.checkViewportAndScrolls();\n\n            const newWidth = this.centerContainerCon.getCenterWidth();\n\n            if (newWidth !== this.centerWidth) {\n                this.centerWidth = newWidth;\n                this.columnModel.refreshFlexedColumns(\n                    { viewportWidth: this.centerWidth, updateBodyWidths: true, fireResizedEvent: true }\n                );\n            }\n        } else {\n            this.bodyHeight = 0;\n        }\n    }\n\n    // gets called every time the viewport size changes. we use this to check visibility of scrollbars\n    // in the grid panel, and also to check size and position of viewport for row and column virtualisation.\n    public checkViewportAndScrolls(): void {\n        // results in updating anything that depends on scroll showing\n        this.updateScrollVisibleService();\n\n        // fires event if height changes, used by PaginationService, HeightScalerService, RowRenderer\n        this.checkBodyHeight();\n\n        // check for virtual columns for ColumnController\n        this.onHorizontalViewportChanged();\n\n        this.gridBodyCon.getScrollFeature().checkScrollLeft();\n    }\n\n    public getBodyHeight(): number {\n        return this.bodyHeight;\n    }\n\n    private checkBodyHeight(): void {\n        const eBodyViewport = this.gridBodyCon.getBodyViewportElement();\n        const bodyHeight = getInnerHeight(eBodyViewport);\n\n        if (this.bodyHeight !== bodyHeight) {\n            this.bodyHeight = bodyHeight;\n            const event: BodyHeightChangedEvent = {\n                type: Events.EVENT_BODY_HEIGHT_CHANGED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    private updateScrollVisibleService(): void {\n        // because of column animation (which takes 200ms), we have to do this twice.\n        // eg if user removes cols anywhere except at the RHS, then the cols on the RHS\n        // will animate to the left to fill the gap. this animation means just after\n        // the cols are removed, the remaining cols are still in the original location\n        // at the start of the animation, so pre animation the H scrollbar is still needed,\n        // but post animation it is not.\n        this.updateScrollVisibleServiceImpl();\n        setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);\n    }\n\n    private updateScrollVisibleServiceImpl(): void {\n        const params: SetScrollsVisibleParams = {\n            horizontalScrollShowing: this.isHorizontalScrollShowing(),\n            verticalScrollShowing: this.gridBodyCon.isVerticalScrollShowing()\n        };\n\n        this.scrollVisibleService.setScrollsVisible(params);\n\n        // fix - gridComp should just listen to event from above\n        this.gridBodyCon.setVerticalScrollPaddingVisible(params.verticalScrollShowing);\n    }\n\n    public isHorizontalScrollShowing(): boolean {\n        const isAlwaysShowHorizontalScroll = this.gridOptionsWrapper.isAlwaysShowHorizontalScroll();\n        return isAlwaysShowHorizontalScroll || this.centerContainerCon.isViewportHScrollShowing();\n    }\n\n    // this gets called whenever a change in the viewport, so we can inform column controller it has to work\n    // out the virtual columns again. gets called from following locations:\n    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged, API (doLayout)\n    private onHorizontalViewportChanged(): void {\n        const scrollWidth = this.centerContainerCon.getCenterWidth();\n        const scrollPosition = this.centerContainerCon.getViewportScrollLeft();\n\n        this.columnModel.setViewportPosition(scrollWidth, scrollPosition);\n    }\n}"]}