{"version":3,"sources":["../../src/ts/gridBodyComp/rowContainer/rowContainerComp.ts"],"names":[],"mappings":"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","file":"rowContainerComp.js","sourcesContent":["import { Component } from \"../../widgets/component\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { Autowired, PostConstruct, PreDestroy } from \"../../context/context\";\nimport { IRowContainerComp, RowContainerCtrl, RowContainerName } from \"./rowContainerCtrl\";\nimport { ensureDomOrder, insertWithDomOrder } from \"../../utils/dom\";\nimport { RowComp } from \"../../rendering/row/rowComp\";\nimport { RowCtrl } from \"../../rendering/row/rowCtrl\";\nimport { Beans } from \"../../rendering/beans\";\nimport { getAllValuesInObject } from \"../../utils/object\";\n\nfunction templateFactory(): string {\n    const name = Component.elementGettingCreated.getAttribute('name') as RowContainerName;\n\n    const cssClasses = RowContainerCtrl.getRowContainerCssClasses(name);\n\n    let res: string;\n\n    const template1 = name === RowContainerName.CENTER;\n    const template2 = name === RowContainerName.TOP_CENTER || name === RowContainerName.BOTTOM_CENTER;\n\n    if (template1) {\n        res = /* html */\n            `<div class=\"${cssClasses.wrapper}\" ref=\"eWrapper\" role=\"presentation\" unselectable=\"on\">\n                <div class=\"${cssClasses.viewport}\" ref=\"eViewport\" role=\"presentation\">\n                    <div class=\"${cssClasses.container}\" ref=\"eContainer\" role=\"rowgroup\" unselectable=\"on\"></div>\n                </div>\n            </div>`;\n    } else if (template2) {\n        res = /* html */\n            `<div class=\"${cssClasses.viewport}\" ref=\"eViewport\" role=\"presentation\" unselectable=\"on\">\n                <div class=\"${cssClasses.container}\" ref=\"eContainer\" role=\"presentation\" unselectable=\"on\"></div>\n            </div>`;\n    } else {\n        res = /* html */\n            `<div class=\"${cssClasses.container}\" ref=\"eContainer\" role=\"presentation\" unselectable=\"on\"></div>`;\n    }\n\n    return res;\n}\n\nexport class RowContainerComp extends Component {\n\n    @Autowired('beans') private beans: Beans;\n\n    @RefSelector('eViewport') private eViewport: HTMLElement;\n    @RefSelector('eContainer') private eContainer: HTMLElement;\n    @RefSelector('eWrapper') private eWrapper: HTMLElement;\n\n    private readonly name: RowContainerName;\n\n    private rowComps: {[id: string]: RowComp} = {};\n\n    // we ensure the rows are in the dom in the order in which they appear on screen when the\n    // user requests this via gridOptions.ensureDomOrder. this is typically used for screen readers.\n    private domOrder: boolean;\n    private lastPlacedElement: HTMLElement | null;\n\n    constructor() {\n        super(templateFactory());\n        this.name = Component.elementGettingCreated.getAttribute('name') as RowContainerName;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const compProxy: IRowContainerComp = {\n            setViewportHeight: height => this.eViewport.style.height = height,\n            setRowCtrls: rowCtrls => this.setRowCtrls(rowCtrls),\n            setDomOrder: domOrder => {\n                this.domOrder = domOrder;\n            },\n            setContainerWidth: width => this.eContainer.style.width = width\n        };\n\n        const ctrl = this.createManagedBean(new RowContainerCtrl(this.name));\n        ctrl.setComp(compProxy, this.eContainer, this.eViewport, this.eWrapper);\n    }\n\n    @PreDestroy\n    private preDestroy(): void {\n        // destroys all row comps\n        this.setRowCtrls([]);\n    }\n\n    private setRowCtrls(rowCtrls: RowCtrl[]): void {\n        const oldRows = {...this.rowComps};\n        this.rowComps = {};\n\n        this.lastPlacedElement = null;\n\n        const processRow = (rowCon: RowCtrl) => {\n            const instanceId = rowCon.getInstanceId();\n            const existingRowComp = oldRows[instanceId];\n            if (existingRowComp) {\n                this.rowComps[instanceId] = existingRowComp;\n                delete oldRows[instanceId];\n                this.ensureDomOrder(existingRowComp.getGui());\n            } else {\n                const rowComp = this.newRowComp(rowCon);\n                this.rowComps[instanceId] = rowComp;\n                this.appendRow(rowComp.getGui());\n            }\n        };\n\n        rowCtrls.forEach(processRow);\n        getAllValuesInObject(oldRows).forEach(oldRowComp => {\n            this.eContainer.removeChild(oldRowComp.getGui());\n            oldRowComp.destroy();\n        });\n    }\n\n    public appendRow(element: HTMLElement) {\n        if (this.domOrder) {\n            insertWithDomOrder(this.eContainer, element, this.lastPlacedElement);\n        } else {\n            this.eContainer.appendChild(element);\n        }\n        this.lastPlacedElement = element;\n    }\n\n    private ensureDomOrder(eRow: HTMLElement): void {\n        if (this.domOrder) {\n            ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);\n            this.lastPlacedElement = eRow;\n        }\n    }\n\n    private newRowComp(rowCtrl: RowCtrl): RowComp {\n        const pinned = RowContainerCtrl.getPinned(this.name);\n        const res = new RowComp(rowCtrl, this.beans, pinned);\n        return res;\n    }\n\n}"]}