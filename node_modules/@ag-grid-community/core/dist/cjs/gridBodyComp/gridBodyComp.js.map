{"version":3,"sources":["../../src/ts/gridBodyComp/gridBodyComp.ts"],"names":[],"mappings":"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","file":"gridBodyComp.js","sourcesContent":["import { Autowired, Optional, PostConstruct } from '../context/context';\nimport { GridHeaderComp } from '../headerRendering/gridHeaderComp';\nimport { IRangeService } from '../interfaces/IRangeService';\nimport { ResizeObserverService } from '../misc/resizeObserverService';\nimport { LayoutCssClasses } from \"../styling/layoutFeature\";\nimport { setAriaColCount, setAriaMultiSelectable, setAriaRowCount } from '../utils/aria';\nimport { addOrRemoveCssClass } from '../utils/dom';\nimport { Component } from '../widgets/component';\nimport { RefSelector } from '../widgets/componentAnnotations';\nimport {\n    CSS_CLASS_CELL_SELECTABLE,\n    CSS_CLASS_COLUMN_MOVING,\n    CSS_CLASS_FORCE_VERTICAL_SCROLL,\n    GridBodyCtrl,\n    IGridBodyComp,\n    RowAnimationCssClasses\n} from \"./gridBodyCtrl\";\nimport { RowContainerName } from \"./rowContainer/rowContainerCtrl\";\n\nconst GRID_BODY_TEMPLATE = /* html */\n    `<div class=\"ag-root ag-unselectable\" role=\"grid\" unselectable=\"on\">\n        <ag-header-root ref=\"gridHeader\" unselectable=\"on\"></ag-header-root>\n        <div class=\"ag-floating-top\" ref=\"eTop\" role=\"presentation\" unselectable=\"on\">\n            <ag-row-container ref=\"topLeftContainer\" name=\"${RowContainerName.TOP_LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"topCenterContainer\" name=\"${RowContainerName.TOP_CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"topRightContainer\" name=\"${RowContainerName.TOP_RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"topFullWidthContainer\" name=\"${RowContainerName.TOP_FULL_WITH}\"></ag-row-container>\n        </div>\n        <div class=\"ag-body-viewport\" ref=\"eBodyViewport\" role=\"presentation\">\n            <ag-row-container ref=\"leftContainer\" name=\"${RowContainerName.LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"centerContainer\" name=\"${RowContainerName.CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"rightContainer\" name=\"${RowContainerName.RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"fullWidthContainer\" name=\"${RowContainerName.FULL_WIDTH}\"></ag-row-container>\n        </div>\n        <div class=\"ag-floating-bottom\" ref=\"eBottom\" role=\"presentation\" unselectable=\"on\">\n            <ag-row-container ref=\"bottomLeftContainer\" name=\"${RowContainerName.BOTTOM_LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"bottomCenterContainer\" name=\"${RowContainerName.BOTTOM_CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"bottomRightContainer\" name=\"${RowContainerName.BOTTOM_RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"bottomFullWidthContainer\" name=\"${RowContainerName.BOTTOM_FULL_WITH}\"></ag-row-container>\n        </div>\n        <ag-fake-horizontal-scroll></ag-fake-horizontal-scroll>\n        <ag-overlay-wrapper></ag-overlay-wrapper>\n    </div>`;\n\nexport class GridBodyComp extends Component {\n\n    @Autowired('resizeObserverService') private resizeObserverService: ResizeObserverService;\n\n    @Optional('rangeService') private rangeService: IRangeService;\n\n    @RefSelector('eBodyViewport') private eBodyViewport: HTMLElement;\n    @RefSelector('eTop') private eTop: HTMLElement;\n    @RefSelector('eBottom') private eBottom: HTMLElement;\n    @RefSelector('gridHeader') headerRootComp: GridHeaderComp;\n\n    private ctrl: GridBodyCtrl;\n\n    constructor() {\n        super(GRID_BODY_TEMPLATE);\n    }\n\n    @PostConstruct\n    private init() {\n\n        const setHeight = (height: number, element: HTMLElement) => {\n            const heightString = `${height}px`;\n            element.style.minHeight = heightString;\n            element.style.height = heightString;\n        };\n\n        const compProxy: IGridBodyComp = {\n            setRowAnimationCssOnBodyViewport: (cssClass, animate) => this.setRowAnimationCssOnBodyViewport(cssClass, animate),\n            setColumnCount: count => setAriaColCount(this.getGui(), count),\n            setRowCount: count => setAriaRowCount(this.getGui(), count),\n            setTopHeight: height => setHeight(height, this.eTop),\n            setBottomHeight: height => setHeight(height, this.eBottom),\n            setTopDisplay: display => this.eTop.style.display = display,\n            setBottomDisplay: display => this.eBottom.style.display = display,\n            setColumnMovingCss: (cssClass, flag) => this.addOrRemoveCssClass(CSS_CLASS_COLUMN_MOVING, flag),\n            updateLayoutClasses: (cssClass, params) => {\n                addOrRemoveCssClass(this.eBodyViewport, LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n                addOrRemoveCssClass(this.eBodyViewport, LayoutCssClasses.NORMAL, params.normal);\n                addOrRemoveCssClass(this.eBodyViewport, LayoutCssClasses.PRINT, params.print);\n\n                this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n                this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);\n                this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);\n            },\n            setAlwaysVerticalScrollClass: (cssClass, on) =>\n                addOrRemoveCssClass(this.eBodyViewport, CSS_CLASS_FORCE_VERTICAL_SCROLL, on),\n            registerBodyViewportResizeListener: listener => {\n                const unsubscribeFromResize = this.resizeObserverService.observeResize(this.eBodyViewport, listener);\n                this.addDestroyFunc(() => unsubscribeFromResize());\n            },\n            setPinnedTopBottomOverflowY: overflow => this.eTop.style.overflowY = this.eBottom.style.overflowY = overflow,\n            setCellSelectableCss: (cssClass, selectable) => {\n                [this.eTop, this.eBodyViewport, this.eBottom]\n                    .forEach(ct => addOrRemoveCssClass(ct, CSS_CLASS_CELL_SELECTABLE, selectable));\n            },\n        };\n\n        this.ctrl = this.createManagedBean(new GridBodyCtrl());\n        this.ctrl.setComp(compProxy, this.getGui(), this.eBodyViewport, this.eTop, this.eBottom);\n\n        if (this.rangeService || this.gridOptionsWrapper.isRowSelectionMulti()) {\n            setAriaMultiSelectable(this.getGui(), true);\n        }\n    }\n\n    private setRowAnimationCssOnBodyViewport(cssClass: string, animateRows: boolean): void {\n        addOrRemoveCssClass(this.eBodyViewport, RowAnimationCssClasses.ANIMATION_ON, animateRows);\n        addOrRemoveCssClass(this.eBodyViewport, RowAnimationCssClasses.ANIMATION_OFF, !animateRows);\n    }\n\n    public getFloatingTopBottom(): HTMLElement[] {\n        return [this.eTop, this.eBottom];\n    }\n}\n"]}