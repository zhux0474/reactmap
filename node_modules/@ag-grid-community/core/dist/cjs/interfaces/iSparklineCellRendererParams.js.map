{"version":3,"sources":["../../src/ts/interfaces/iSparklineCellRendererParams.ts"],"names":[],"mappings":";;;;;;;;AA2IA,IAAY,uBAKX;AALD,WAAY,uBAAuB;IAC/B,oDAAyB,CAAA;IACzB,kDAAuB,CAAA;IACvB,4CAAiB,CAAA;IACjB,oDAAyB,CAAA;AAC7B,CAAC,EALW,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAKlC","file":"iSparklineCellRendererParams.js","sourcesContent":["import { ICellRendererParams } from \"../rendering/cellRenderers/iCellRenderer\";\n\nexport interface ISparklineCellRendererParams extends ICellRendererParams {\n    sparklineOptions?: SparklineOptions;\n}\n\nexport type SparklineOptions = LineSparklineOptions | AreaSparklineOptions | ColumnSparklineOptions | BarSparklineOptions;\n\nexport interface BaseSparklineOptions {\n    /** The key to use to retrieve X values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * Default: `'x'`\n     */\n    xKey?: string;\n    /** The key to use to retrieve Y values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * Default: `'y'`\n     */\n    yKey?: string;\n    /** Configuration for the padding in pixels shown around the sparklines. */\n    padding?: PaddingOptions;\n    /** The options for the x-axis in the sparklines. */\n    axis?: SparklineAxisOptions;\n    /** The configuration for the highlighting used when the items are hovered over. */\n    highlightStyle?: HighlightStyleOptions;\n    /** Configuration for the tooltips. */\n    tooltip?: SparklineTooltipOptions;\n}\n\nexport interface LineSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'line'`. */\n    type?: 'line';\n    /** The configuration for the line. */\n    line?: SparklineLineOptions;\n    /** The configuration for the marker styles. */\n    marker?: SparklineMarkerOptions;\n}\n\nexport interface AreaSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'area'`. */\n    type?: 'area';\n    /** The CSS colour value for the fill of the area.\n     * Default: `'rgba(124, 181, 236, 0.25)'`\n     */\n    fill?: string;\n    /** The configuration for the line. */\n    line?: SparklineLineOptions;\n    /** The configuration for the marker styles. */\n    marker?: SparklineMarkerOptions;\n}\n\nexport interface ColumnSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'column'`. */\n    type?: 'column';\n    /** The CSS colour value for the fill of the columns.\n     * Default: `'rgb(124, 181, 236)'`\n     */\n    fill?: string;\n    /** The CSS colour value for the outline of the columns.\n     * Default: `'silver'`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the columns.\n     * Default: `0`\n     */\n    strokeWidth?: number;\n    /** The size of the gap between the columns as a proportion, between 0 and 1. This value is a fraction of the “step”, which is the interval between the start of a band and the start of the next band.\n     * Default: `0.1`\n     */\n    paddingInner?: number;\n    /** The padding on the outside i.e. left and right of the first and last columns, to leave some room for the axis. In association with `paddingInner`, this value can be between 0 and 1.\n     * Default: `0.2`\n     */\n    paddingOuter?: number;\n    /** User override for the automatically determined domain (based on data min and max values). Only applied to `number` axes.\n     * Used to interpolate the numeric pixel values corresponding to each data value.\n     */\n    valueAxisDomain?: [number, number];\n    /** A callback function to return format styles of type ColumnFormat, based on the data represented by individual columns. */\n    formatter?: SparklineColumnFormatter;\n    /** Configuration for the labels. */\n    label?: SparklineLabelOptions;\n}\n\nexport interface BarSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'bar'`. */\n    type?: 'bar';\n    /** The CSS colour value for the fill of the bars.\n     * Default: `'rgb(124, 181, 236)'`\n     */\n    fill?: string;\n    /** The CSS colour value for the outline of the bars.\n     * Default `'silver'`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the bars.\n     * Default: `0`\n     */\n    strokeWidth?: number;\n    /** The size of the gap between the bars as a proportion, between 0 and 1. This value is a fraction of the “step”, which is the interval between the start of a band and the start of the next band.\n     * Default: `0.1`\n     */\n    paddingInner?: number;\n    /** The padding on the outside i.e. left and right of the first and last bars, to leave some room for the axis. In association with `paddingInner`, this value can be between 0 and 1.\n     * Default: `0.2`\n     */\n    paddingOuter?: number;\n    /** User override for the automatically determined domain (based on data min and max values). Only applied to `number` axes.\n     * Used to interpolate the numeric pixel values corresponding to each data value.\n     */\n    valueAxisDomain?: [number, number];\n    /** A callback function to return format styles of type BarFormat, based on the data represented by individual bars. */\n    formatter?: SparklineBarFormatter;\n    /** Configuration for the labels. */\n    label?: SparklineLabelOptions;\n}\n\nexport interface SparklineLabelOptions {\n    /** Set to true to enable labels. */\n    enabled?: boolean;\n    /** Set size of the font. */\n    fontSize: string;\n    /** Specify the font for the label text. */\n    fontFamily: string;\n    /** Specify the font style for the label text. */\n    fontStyle?: FontStyle;\n    /** Set how thick or thin characters in label text should be displayed. */\n    fontWeight?: FontWeight;\n    /** Set the color of the label text. The color can be specified by a color name, a HEX or an RGB value. */\n    color: string;\n    /** A callback function to return the text to be displayed as the label, based on the value represented by the column or bar. By default the values are simply stringified. */\n    formatter?: (params: { value: number | undefined }) => string;\n    /** Where to render labels relative to the segments.\n    * Default: `insideEnd`\n    * */\n    placement: BarColumnLabelPlacement;\n}\n\nexport type FontStyle = 'normal' | 'italic' | 'oblique';\nexport type FontWeight = 'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\n\nexport enum BarColumnLabelPlacement {\n    InsideBase = 'insideBase',\n    InsideEnd = 'insideEnd',\n    Center = 'center',\n    OutsideEnd = 'outsideEnd',\n}\n\nexport interface PaddingOptions {\n    /** The number of pixels of padding at the top of the sparkline area.\n     * Default: `3`\n     */\n    top?: number;\n    /** The number of pixels of padding at the right of the sparkline area.\n     * Default: `3`\n     */\n    right?: number;\n    /** The number of pixels of padding at the bottom of the sparkline area.\n     * Default: `3`\n     */\n    bottom?: number;\n    /** The number of pixels of padding at the left of the sparkline area.\n     * Default\" `3`\n     */\n    left?: number;\n}\n\nexport interface SparklineAxisOptions {\n    /** The type of x-axis used to plot the data.\n     * Default: `'category'`\n     */\n    type?: AxisType;\n    /** The CSS colour value for the outline of the horizontal axis line.\n     * Default: `'rgb(204, 214, 235)'`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the horizontal axis line.\n     * Default: `1`\n     */\n    strokeWidth?: number;\n}\n\nexport type AxisType = 'number' | 'category' | 'time';\n\nexport interface SparklineTooltipOptions {\n    /** Set to false to disable tooltips. */\n    enabled?: boolean;\n    /** The element to place the tooltip into. This can be used to confine the tooltip to a specific area which may be outside of the sparkline grid cell. */\n    container?: HTMLElement;\n    /** A callback function used to create the content for the tooltips. This function should return an object or a HTML string used to render the tooltip. */\n    renderer?: SparklineTooltipRenderer;\n}\n\nexport type SparklineTooltipRenderer = (params: TooltipRendererParams) => TooltipRendererResult;\nexport interface TooltipRendererResult {\n    /** Set to false to disable individual tooltip. */\n    enabled?: boolean;\n    /** The content to display in each tooltip. */\n    content?: string;\n    /** The title of the tooltip. */\n    title?: string;\n    /** The CSS color for the title text. */\n    color?: string;\n    /** The CSS color for the background of the tooltip title. */\n    backgroundColor?: string;\n    /** The opacity of the background for the tooltip title. */\n    opacity?: number;\n}\nexport interface TooltipRendererParams {\n    /** The grid context, includes row data, giving access to data from other columns in the same row. */\n    context?: any;\n    /** The raw datum associated with the point. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n}\n\nexport interface SparklineLineOptions {\n    /** The CSS colour value for the line.\n     *  Default: `'rgb(124, 181, 236)'`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the line.\n     * Default: `1`\n     */\n    strokeWidth?: number;\n}\n\nexport interface HighlightStyleOptions {\n    /** The width in pixels of the markers when hovered over. This is only for the Line and Area sparklines as Column and Bar sparklines do not have markers.\n     * Default: `6`\n     */\n    size?: number;\n    /** The fill colour of the markers, columns or bars when hovered over. Use `undefined` for no highlight fill.\n     * Default: `'yellow'`\n     */\n    fill?: string;\n    /** The CSS colour value for the outline of the markers, columns or bars when hovered over. Use `undefined` for no highlight stroke.\n     * Default: `'silver'`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the markers, columns or bars when hovered over.\n     * Default: `1`\n     */\n    strokeWidth?: number;\n}\n\nexport type SparklineColumnFormatter = (params: ColumnFormatterParams) => ColumnFormat;\nexport type SparklineBarFormatter = (params: BarFormatterParams) => BarFormat;\nexport interface ColumnFormatterParams {\n    /** The raw data associated with the specific column. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n    /** The width of the column in pixels. */\n    width: number;\n    /** The height of the column in pixels. */\n    height: number;\n    /** Whether or not the column is a minimum point. */\n    min?: boolean;\n    /** Whether or not the column is a maximum point. */\n    max?: boolean;\n    /** Whether or not the column represents the first data point. */\n    first?: boolean;\n    /** Whether or not the column represents the last data point. */\n    last?: boolean;\n    /** The CSS colour value for the fill of the individual column. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual column. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual column. */\n    strokeWidth: number;\n    /** Whether or not the column is highlighted. */\n    highlighted: boolean;\n}\n\nexport interface ColumnFormat {\n    /** The CSS colour value for the fill of the individual column. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual column. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual column.*/\n    strokeWidth?: number;\n}\n\nexport interface BarFormatterParams {\n    /** The raw data associated with the specific bar. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n    /** The width of the bar in pixels. */\n    width: number;\n    /** The height of the bar in pixels. */\n    height: number;\n    /** Whether or not the bar is a minimum point. */\n    min?: boolean;\n    /** Whether or not the bar is a maximum point. */\n    max?: boolean;\n    /** Whether or not the bar represents the first data point. */\n    first?: boolean;\n    /** Whether or not the bar represents the last data point. */\n    last?: boolean;\n    /** The CSS colour value for the fill of the individual bar. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual bar. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual bar. */\n    strokeWidth: number;\n    /** Whether or not the bar is highlighted. */\n    highlighted: boolean;\n}\nexport interface BarFormat {\n    /** The CSS colour value for the fill of the individual bar. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual bar. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual bar.*/\n    strokeWidth?: number;\n}\n\nexport interface SparklineMarkerOptions {\n    /** By default this is set to `true` whilst marker size is set to `0`, which means the markers are present but not visible.\n     * Default: `true`\n     */\n    enabled?: boolean;\n    /** The shape of the markers.\n     * Default: `'circle'`\n     */\n    shape?: string;\n    /** The width in pixels of markers. By default this is `0`, increase the size to make markers visible.\n     * Default: `0`\n     */\n    size?: number;\n    /** The CSS colour value for the fill of the markers.\n     * Default: `'rgb(124, 181, 236)'`\n     */\n    fill?: string;\n    /** The CSS colour value for the outline of the markers.\n     * Default: `'rgb(124, 181, 236)'`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the markers.\n     * Default: `1`\n     */\n    strokeWidth?: number;\n    /** A callback function to return format styles for individual markers. */\n    formatter?: SparklineMarkerFormatter;\n}\n\nexport type SparklineMarkerFormatter = (params: MarkerFormatterParams) => MarkerFormat;\nexport interface MarkerFormatterParams {\n    /** The raw data associated with the specific marker. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n    /** Whether or not the marker is a minimum point. */\n    min?: boolean;\n    /** Whether or not the marker is a maximum point. */\n    max?: boolean;\n    /** Whether or not the marker represents the first data point. */\n    first?: boolean;\n    /** Whether or not the marker represents the last data point. */\n    last?: boolean;\n    /** The CSS colour value for the fill of the individual marker. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual marker. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual marker. */\n    strokeWidth: number;\n    /** The width in pixels of the individual marker. */\n    size: number;\n    /** Whether or not the marker is highlighted. */\n    highlighted: boolean;\n}\n\nexport interface MarkerFormat {\n    /** Set to false to make marker invisible. */\n    enabled?: boolean;\n    /** The width in pixels of the individual marker. */\n    size?: number;\n    /** The CSS colour value for the fill of the individual marker. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual marker. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual marker.*/\n    strokeWidth?: number;\n}"]}