{"version":3,"sources":["../../src/ts/interfaces/iServerSideDatasource.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"iServerSideDatasource.js","sourcesContent":["// we pass a VO of the column and not the column itself,\n// so the data is read to be be converted to JSON and thrown\n// over the wire\nimport { RowNode } from \"../entities/rowNode\";\nimport { ColumnVO } from \"./iColumnVO\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { LoadSuccessParams } from \"../rowNodeCache/rowNodeBlock\";\n\nexport interface IServerSideGetRowsRequest {\n    /** First row requested or undefined for all rows. */\n    startRow: number | undefined;\n    /** Last row requested or undefined for all rows. */\n    endRow: number | undefined;\n    /** Columns that are currently row grouped.  */\n    rowGroupCols: ColumnVO[];\n    /** Columns that have aggregations on them.  */\n    valueCols: ColumnVO[];\n    /** Columns that have pivot on them.  */\n    pivotCols: ColumnVO[];\n    /** Defines if pivot mode is on or off.  */\n    pivotMode: boolean;\n    /** What groups the user is viewing.  */\n    groupKeys: string[];\n    /** If filtering, what the filter model is.  */\n    filterModel: any;\n    /** If sorting, what the sort model is.  */\n    sortModel: any;\n}\n\nexport interface IServerSideGetRowsParams {\n    /**\n     * Details for the request. A simple object that can be converted to JSON.\n     */\n    request: IServerSideGetRowsRequest;\n\n    /**\n     * The parent row node. The RootNode (level -1) if request is top level.\n     * This is NOT part fo the request as it cannot be serialised to JSON (a rowNode has methods).\n     */\n    parentNode: RowNode;\n\n    /**\n     * @deprecated Use `success` method instead and return result as a `LoadSuccessParams` object.\n     */\n    successCallback(rowsThisPage: any[], lastRow: number): void;\n    /**     \n     * Success callback, pass the rows back to the grid that were requested.\n     */\n    success(params: LoadSuccessParams): void;\n\n    /**\n     * @deprecated Use `fail` instead.\n     */\n    failCallback(): void;\n    /**\n     * Fail callback, tell the grid the call failed so it can adjust it's state.\n     */\n    fail(): void;\n\n    api: GridApi;\n    columnApi: ColumnApi;\n}\n\n// datasource for Server Side Row Model\nexport interface IServerSideDatasource {\n    /**\n     * Grid calls `getRows` when it requires more rows as specified in the params. \n     * Params object contains callbacks for responding to the request.\n     */\n    getRows(params: IServerSideGetRowsParams): void;\n    /** Optional method, if your datasource has state it needs to clean up. */\n    destroy?(): void;\n}\n"]}