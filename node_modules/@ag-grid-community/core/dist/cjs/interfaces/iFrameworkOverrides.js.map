{"version":3,"sources":["../../src/ts/interfaces/iFrameworkOverrides.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"iFrameworkOverrides.js","sourcesContent":["import {AgPromise} from \"../utils\";\n\nexport interface IFrameworkOverrides {\n\n    /** Because Angular 2+ uses Zones, you should not use setTimeout or setInterval (as it'll keep angular constantly doing dirty checks etc\n     * So to get around this, we allow the framework to specify how to execute setTimeout. The default is to just call the browser setTimeout().\n     */\n    setTimeout(action: any, timeout?: any): void;\n    setInterval(action: any, interval?: any): AgPromise<number>;\n\n    /** Again because Angular uses Zones, we allow adding some events outside of Zone JS so that we do not kick off\n     * the Angular change detection. We do this for some events ONLY, and not all events, just events that get fired\n     * a lot (eg mouse move), but we need to make sure in AG Grid that we do NOT call any grid callbacks while processing\n     * these events, as we will be outside of ZoneJS and hence Angular2 Change Detection won't work. However it's fine\n     * for our code to result in AG Grid events (and Angular application action on these) as these go through\n     * Event Emitter's.\n     *\n     * This was done by Niall and Sean. The problematic events are mouseover, mouseout, mouseenter and mouseleave.\n     */\n    addEventListener(element: HTMLElement, type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n    dispatchEvent(eventType: string, listener: () => {}, global: boolean): void;\n\n    /*\n    * vue components are specified in the \"components\" part of the vue component - as such we need a way to deteremine if a given component is\n    * within that context - this method provides this\n    * Note: This is only really used/necessary with cellRendererSelectors\n    */\n    frameworkComponent(name: string): any;\n}\n"]}