{"version":3,"sources":["../../src/ts/interfaces/iSetFilterParams.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"iSetFilterParams.js","sourcesContent":["import { ICellRendererComp, ICellRendererFunc } from '../rendering/cellRenderers/iCellRenderer';\nimport { ColDef, ValueFormatterParams } from '../entities/colDef';\nimport { IProvidedFilterParams } from '../filter/provided/providedFilter';\nimport { Column } from '../entities/column';\nimport { GridApi } from '../gridApi';\nimport { ColumnApi } from '../columns/columnApi';\n\nexport interface SetFilterValuesFuncParams {\n    /** The function to call with the values to load into the filter once they are ready. */\n    success: (values: string[]) => void;\n    /** The column definition from which the set filter is invoked. */\n    colDef: ColDef;\n    /** Column from which the set filter is invoked. */\n    column: Column;\n    columnApi: ColumnApi;\n    api: GridApi;\n    /** The context as provided on `gridOptions.context` */\n    context: any;\n}\n\nexport type SetFilterValuesFunc = (params: SetFilterValuesFuncParams) => void;\nexport type SetFilterValues = SetFilterValuesFunc | any[];\n\nexport interface ISetFilterParams extends IProvidedFilterParams {\n    /**\n     * The values to display in the Filter List.\n     * If this is not set, the filter will takes its values from what is loaded in the table.\n     */\n    values?: SetFilterValues;\n    /**\n     * Refresh the values every time the Set filter is opened.\n     */\n    refreshValuesOnOpen?: boolean;\n    /** The height of values in the Filter List in pixels. */\n    cellHeight?: number;\n    /** \n     * If `true`, the Set Filter values will not be sorted.\n     * Use this if you are providing your own values and don't want them sorted as you are providing in the order you want.\n     * Default: `false`\n     */\n    suppressSorting?: boolean;\n    /** \n     * Similar to the Cell Renderer for the grid.\n     * Setting it separately here allows for the value to be rendered differently in the filter.\n     */\n    cellRenderer?: { new(): ICellRendererComp; } | ICellRendererFunc | string;\n    /** Set to `true` to hide the Mini Filter.\n     * Default: `false` \n     */\n    suppressMiniFilter?: boolean;\n    /** \n     * Set to `true` to apply the Set Filter immediately when the user is typing in the Mini Filter.\n     * Default: `false`\n     */\n    applyMiniFilterWhileTyping?: boolean;\n    /**\n     * Set to `true` to remove the Select All checkbox.\n     * Default: `false`\n     */\n    suppressSelectAll?: boolean;\n    /** By default, when the Set Filter is opened all values are shown selected. Set this to `true` to instead show all values as de-selected by default. */\n    defaultToNothingSelected?: boolean;\n    /** \n     * Comparator for sorting.\n     * If not provided, the Column Definition comparator is used.\n     * If Column Definition comparator is also not provided, the default (grid provided) comparator is used.\n     */\n    comparator?: (a: any, b: any) => number;\n    /**\n     * If specified, this formats the text before applying the Mini Filter compare logic, useful for instance to substitute accented characters.\n     */\n    textFormatter?: (from: string) => string;\n    valueFormatter?: (params: ValueFormatterParams) => string;\n    /** \n     * If `true`, hovering over a value in the Set Filter will show a tooltip containing the full, untruncated value.\n     * Default: `false`\n     */\n    showTooltips?: boolean;\n    /**\n     * If `true`, enables case-sensitivity in the SetFilter Mini-Filter and Filter List.\n     * Default: `false`.\n     */\n    caseSensitive?: boolean;\n    /** Changes the behaviour of the Set Filter to match that of Excel's AutoFilter. */\n    excelMode?: 'mac' | 'windows';\n    /** @deprecated */ suppressRemoveEntries?: boolean;\n    /** @deprecated */ suppressSyncValuesAfterDataChange?: boolean;\n    /** @deprecated */ selectAllOnMiniFilter?: boolean;\n    /** @deprecated */ syncValuesLikeExcel?: boolean;\n}"]}