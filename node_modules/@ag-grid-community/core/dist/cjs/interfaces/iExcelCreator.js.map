{"version":3,"sources":["../../src/ts/interfaces/iExcelCreator.ts"],"names":[],"mappings":";;;;;;;;AAoLA,eAAe;AACf,IAAY,gBAA8C;AAA1D,WAAY,gBAAgB;IAAG,uEAAY,CAAA;IAAE,qEAAW,CAAA;AAAC,CAAC,EAA9C,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAA8B","file":"iExcelCreator.js","sourcesContent":["import { Column } from \"../entities/column\";\nimport { ExportParams } from \"./exportParams\";\nimport { XmlElement } from \"./iXmlFactory\";\n\n// Excel Styles\nexport interface ExcelStyle {\n    id: string;\n    alignment?: ExcelAlignment;\n    borders?: ExcelBorders;\n    dataType?: ExcelDataType;\n    font?: ExcelFont;\n    interior?: ExcelInterior;\n    numberFormat?: ExcelNumberFormat;\n    protection?: ExcelProtection;\n    /**\n     * @deprecated Legacy property\n     */\n    name?: string;\n}\n\nexport interface ExcelAlignment {\n    horizontal?: 'Automatic' | 'Left' | 'Center' | 'Right' | 'Fill' | 'Justify' | 'CenterAcrossSelection' | 'Distributed' | 'JustifyDistributed';\n    indent?: number;\n    readingOrder?: 'RightToLeft' | 'LeftToRight' | 'Context';\n    rotate?: number;\n    shrinkToFit?: boolean;\n    vertical?: 'Automatic' | 'Top' | 'Bottom' | 'Center' | 'Justify' | 'Distributed' | 'JustifyDistributed';\n    wrapText?: boolean;\n    /**\n     * @deprecated Legacy property\n     */\n    verticalText?: boolean;\n}\n\nexport interface ExcelBorders {\n    borderBottom?: ExcelBorder;\n    borderLeft?: ExcelBorder;\n    borderRight?: ExcelBorder;\n    borderTop?: ExcelBorder;\n}\n\nexport interface ExcelBorder {\n    color?: string;\n    lineStyle?: 'None' | 'Continuous' | 'Dash' | 'Dot' | 'DashDot' | 'DashDotDot' | 'SlantDashDot' | 'Double';\n    weight?: 0 | 1 | 2 | 3;\n}\n\nexport interface ExcelFont {\n    bold?: boolean;\n    color?: string;\n    family?: string;\n    fontName?: string;\n    italic?: boolean;\n    outline?: boolean;\n    shadow?: boolean;\n    size?: number;\n    strikeThrough?: boolean;\n    underline?: 'Single' | 'Double';\n    verticalAlign?: 'Superscript' | 'Subscript';\n    /**\n     * @deprecated Legacy property\n     */\n    charSet?: number;\n}\n\nexport interface ExcelInterior {\n    color: string;\n    pattern: 'None' | 'Solid' | 'Gray75' | 'Gray50' | 'Gray25' | 'Gray125' | 'Gray0625' | 'HorzStripe' | 'VertStripe' | 'ReverseDiagStripe' | 'DiagStripe' | 'DiagCross' | 'ThickDiagCross' | 'ThinHorzStripe' | 'ThinVertStripe' | 'ThinReverseDiagStripe' | 'ThinDiagStripe' | 'ThinHorzCross' | 'ThinDiagCross';\n    patternColor: string;\n}\n\nexport interface ExcelNumberFormat {\n    format: string;\n}\n\nexport interface ExcelProtection {\n    protected: boolean;\n    hideFormula: boolean;\n}\n\n// Excel Structure\nexport interface ExcelWorksheet {\n    name: string;\n    table: ExcelTable;\n}\n\nexport interface ExcelTable {\n    columns: ExcelColumn[];\n    rows: ExcelRow[];\n}\n\nexport interface ExcelColumn {\n    min?: number;\n    max?: number;\n    width?: number;\n    s?: number;\n    hidden?: boolean;\n    bestFit?: boolean;\n}\n\nexport interface ExcelRow {\n    index?: number;\n    collapsed?: boolean;\n    hidden?: boolean;\n    height?: number;\n    outlineLevel?: number;\n    s?: number;\n    cells: ExcelCell[];\n}\n\nexport interface ExcelCell {\n    ref?: string;\n    styleId?: string;\n    data: ExcelData;\n    mergeAcross?: number;\n}\n\nexport interface ExcelImage {\n    id: string;\n    base64: string;\n    imageType: 'jpg' | 'png' | 'gif';\n    altText?: string;\n    fitCell?: boolean;\n    transparency?: number;\n    rotation?: number;\n    recolor?: 'Grayscale' | 'Sepia' | 'Washout';\n    width?: number;\n    height?: number;\n    position?: {\n        row?: number;\n        rowSpan?: number;\n        column?: number;\n        colSpan?: number;\n        offsetX?: number;\n        offsetY?: number;\n    };\n}\n\n/*\n * OOXML Data Types\n * (str): String\n * (s): Shared String\n * (f): Formula\n * (inlineStr): Inline string\n * Note: Inline strings are placed in a `is` element instead of `v`\n * (n) Number\n * (b) Boolean\n * (d) DateTime\n * (e) Error\n*/\nexport type ExcelDataType = 'String' | 'Formula' | 'Number' | 'Boolean' | 'DateTime' | 'Error';\nexport type ExcelOOXMLDataType = 'str' | 's' | 'f' | 'inlineStr' | 'n' | 'b' | 'd' | 'e' | 'empty';\n\nexport interface ExcelData {\n    type: ExcelDataType | ExcelOOXMLDataType;\n    value: string | null;\n}\n\nexport interface ExcelRelationship {\n    Id: string;\n    Type: string;\n    Target: string;\n}\n\nexport interface ExcelContentType {\n    name: 'Default' | 'Override';\n    ContentType: string;\n    Extension?: string;\n    PartName?: string;\n}\n\nexport interface ExcelXMLTemplate {\n    getTemplate(styleProperties?: ExcelStyle | ExcelWorksheet | ExcelColumn | ExcelRow | ExcelCell): XmlElement;\n}\n\nexport interface ExcelOOXMLTemplate {\n    getTemplate(config?: any, idx?: number, currentSheet?: number): XmlElement;\n    convertType?(type: string): string;\n}\n\n// Excel Export\nexport enum ExcelFactoryMode { SINGLE_SHEET, MULTI_SHEET }\n\nexport interface ColumnWidthCallbackParams {\n    column: Column | null;\n    index: number;\n}\n\nexport interface RowHeightCallbackParams {\n    rowIndex: number;\n}\n\nexport interface ExcelExportParams extends ExportParams<ExcelCell[][]> {\n    author?: string;\n    autoConvertFormulas?: boolean;\n    columnWidth?: number | ((params: ColumnWidthCallbackParams) => number);\n    exportMode?: 'xlsx' | 'xml';\n    fontSize?: number;\n    headerRowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    rowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    sheetName?: string;\n    margins?: ExcelSheetMargin;\n    pageSetup?: ExcelSheetPageSetup;\n    headerFooterConfig?: ExcelHeaderFooterConfig;\n    suppressTextAsCDATA?: boolean;\n    /** Use to export an image for the gridCell in question. */\n    addImageToCell?: (rowIndex: number, column: Column, value: string) => { image: ExcelImage, value?: string } | undefined;\n}\n\nexport interface ExcelExportMultipleSheetParams {\n    author?: string;\n    data: string[];\n    fileName?: string;\n    fontSize?: number;\n}\n\nexport interface ExcelHeaderFooterConfig {\n    all?: ExcelHeaderFooter;\n    first?: ExcelHeaderFooter;\n    even?: ExcelHeaderFooter;\n}\nexport interface ExcelHeaderFooter {\n    header?: ExcelHeaderFooterContent[];\n    footer?: ExcelHeaderFooterContent[];\n}\n\nexport interface ExcelHeaderFooterContent {\n    value: string;\n    position?: 'Left' | 'Center' | 'Right';\n    font?: ExcelFont;\n}\n\nexport interface IExcelCreator {\n    exportDataAsExcel(params?: ExcelExportParams): void;\n    getDataAsExcel(params?: ExcelExportParams): Blob | string | undefined;\n    getSheetDataForExcel(params?: ExcelExportParams): string;\n\n    getMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): Blob | undefined;\n    exportMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): void;\n\n    /** private methods */\n    setFactoryMode(factoryMode: ExcelFactoryMode, exportMode: 'xml' | 'xlsx'): void;\n    getFactoryMode(exportMode: 'xml' | 'xlsx'): ExcelFactoryMode;\n}\n\nexport interface ExcelSheetMargin {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n    header?: number;\n    footer?: number;\n}\n\nexport interface ExcelSheetPageSetup {\n    orientation?: 'Portrait' | 'Landscape';\n    pageSize?: 'Letter' | 'Letter Small' | 'Tabloid' | 'Ledger' | 'Legal' | 'Statement' | 'Executive' | 'A3' | 'A4' | 'A4 Small' | 'A5' | 'A6' | 'B4' | 'B5' | 'Folio' | 'Envelope' | 'Envelope DL' | 'Envelope C5' | 'Envelope B5' | 'Envelope C3' | 'Envelope C4' | 'Envelope C6' | 'Envelope Monarch' | 'Japanese Postcard' | 'Japanese Double Postcard';\n}\n"]}