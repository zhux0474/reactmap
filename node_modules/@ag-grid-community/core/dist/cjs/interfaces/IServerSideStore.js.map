{"version":3,"sources":["../../src/ts/interfaces/IServerSideStore.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"IServerSideStore.js","sourcesContent":["import { NumberSequence } from \"../utils\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { RowBounds } from \"./iRowModel\";\nimport { ServerSideTransaction, ServerSideTransactionResult } from \"./serverSideTransaction\";\nimport { ServerSideStoreType } from \"../entities/gridOptions\";\n\nexport interface IServerSideStore {\n    clearDisplayIndexes(): void;\n    getDisplayIndexEnd(): number | undefined;\n    isDisplayIndexInStore(displayIndex: number): boolean;\n    setDisplayIndexes(displayIndexSeq: NumberSequence, nextRowTop: { value: number }): void;\n    forEachNodeDeep(callback: (rowNode: RowNode, index: number) => void, sequence?: NumberSequence): void;\n    forEachNodeDeepAfterFilterAndSort(callback: (rowNode: RowNode, index: number) => void, sequence?: NumberSequence): void;\n    retryLoads(): void;\n    getRowUsingDisplayIndex(displayRowIndex: number, dontCreateBlock?: boolean): RowNode | undefined;\n    getRowBounds(index: number): RowBounds | null;\n    isPixelInRange(pixel: number): boolean;\n    getRowIndexAtPixel(pixel: number): number | null;\n    getChildStore(keys: string[]): IServerSideStore | null;\n    refreshAfterSort(params: StoreRefreshAfterParams): void;\n    refreshAfterFilter(params: StoreRefreshAfterParams): void;\n    applyTransaction(transaction: ServerSideTransaction): ServerSideTransactionResult;\n    refreshStore(purge: boolean): void;\n    getRowCount(): number;\n    getTopLevelRowDisplayedIndex(topLevelIndex: number): number;\n    isLastRowIndexKnown(): boolean;\n    getRowNodesInRange(firstInRange: RowNode, lastInRange: RowNode): RowNode[];\n    addStoreStates(result: ServerSideStoreState[]): void;\n}\n\nexport interface StoreRefreshAfterParams {\n    valueColChanged: boolean;\n    secondaryColChanged: boolean;\n    alwaysReset: boolean;\n    changedColumns: string[];\n}\n\nexport interface ServerSideStoreState {\n    /** Store type, `partial` or `full` */\n    type: ServerSideStoreType;\n    /** The route that identifies this store. */\n    route: string[];\n    /** How many rows the store has. This includes 'loading rows'. */\n    rowCount: number;\n    /**\n     * Partial store only.\n     * Whether the last row index is know.\n     * */\n    lastRowIndexKnown?: boolean;\n    /** Any extra info provided to the store, when data was loaded. */\n    info?: any;\n    /**\n     * Partial store only.\n     * Max blocks allowed in the store.\n     */\n    maxBlocksInCache?: number;\n    /**\n     * Partial store only.\n     * The size (number of rows) of each block.\n     */\n    cacheBlockSize?: number;\n}\n"]}