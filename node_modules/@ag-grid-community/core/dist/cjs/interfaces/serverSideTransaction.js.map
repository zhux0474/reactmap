{"version":3,"sources":["../../src/ts/interfaces/serverSideTransaction.ts"],"names":[],"mappings":";;;;;;;;AA8BA,IAAY,iCA6BX;AA7BD,WAAY,iCAAiC;IACzC,2CAA2C;IAC3C,wDAAmB,CAAA;IACnB;;;OAGG;IACH,oEAA+B,CAAA;IAC/B;;OAEG;IACH,kEAA6B,CAAA;IAC7B;;OAEG;IACH,8EAAyC,CAAA;IACzC;;OAEG;IACH,8EAAyC,CAAA;IACzC;;OAEG;IACH,sEAAiC,CAAA;IACjC;;;OAGG;IACH,4DAAuB,CAAA;AAC3B,CAAC,EA7BW,iCAAiC,GAAjC,yCAAiC,KAAjC,yCAAiC,QA6B5C","file":"serverSideTransaction.js","sourcesContent":["import { RowNode } from \"../entities/rowNode\";\n\nexport interface ServerSideTransaction {\n    /**\n     * The Row Store to apply the transaction to, ie what group level.\n     * eg ['Ireland','2002'] to update the child store found after expanding Ireland and 2002 groups. \n     * Passing in blank to empty applies the transaction to the top level.\n     */\n    route?: string[];\n    /** Index position to add at. If missing, rows will be added to the end. */\n    addIndex?: number;\n    /** Rows to add */\n    add?: any[];\n    /** Rows to remove */\n    remove?: any[];\n    /** Rows to update */\n    update?: any[];\n}\n\nexport interface ServerSideTransactionResult {\n    /** The status of applying the transaction. */\n    status: ServerSideTransactionResultStatus;\n    /** If rows were added, the newly created Row Nodes for those rows. */\n    add?: RowNode[];\n    /** If rows were removed, the deleted Row Nodes. */\n    remove?: RowNode[];\n    /** If rows were updated, the updated Row Nodes. */\n    update?: RowNode[];\n}\n\nexport enum ServerSideTransactionResultStatus {\n    /** Transaction was successfully applied */\n    Applied = 'Applied',\n    /**\n     * Store was not found, transaction not applied.\n     * Either invalid route, or the parent row has not yet been expanded.\n     */\n    StoreNotFound = 'StoreNotFound',\n    /**\n     * Store is loading, transaction not applied.\n     */\n    StoreLoading = 'StoreLoading',\n    /**\n     * Store is loading (as max loads exceeded), transaction not applied.\n     */\n    StoreWaitingToLoad = 'StoreWaitingToLoad',\n    /**\n     * Store load attempt failed, transaction not applied.\n     */\n    StoreLoadingFailed = 'StoreLoadingFailed',\n    /**\n     * Store is type Partial, which doesn't accept transactions\n     */\n    StoreWrongType = 'StoreWrongType',\n    /**\n     * Transaction was cancelled, due to grid.\n     * Callback isApplyServerSideTransaction() returning false\n     */\n    Cancelled = 'Cancelled'\n}"]}