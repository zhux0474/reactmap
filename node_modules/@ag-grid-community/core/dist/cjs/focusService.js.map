{"version":3,"sources":["../../src/ts/focusService.ts"],"names":[],"mappings":"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","file":"focusService.js","sourcesContent":["import { Autowired, Bean, Optional, PostConstruct } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Column } from \"./entities/column\";\nimport { CellFocusedEvent, Events } from \"./events\";\nimport { ColumnApi } from \"./columns/columnApi\";\nimport { ColumnModel } from \"./columns/columnModel\";\nimport { CellPosition } from \"./entities/cellPosition\";\nimport { RowNode } from \"./entities/rowNode\";\nimport { GridApi } from \"./gridApi\";\nimport { HeaderPosition } from \"./headerRendering/common/headerPosition\";\nimport { RowPositionUtils } from \"./entities/rowPosition\";\nimport { IRangeService } from \"./interfaces/IRangeService\";\nimport { RowRenderer } from \"./rendering/rowRenderer\";\nimport { HeaderNavigationService } from \"./headerRendering/common/headerNavigationService\";\nimport { ColumnGroup } from \"./entities/columnGroup\";\nimport { ManagedFocusFeature } from \"./widgets/managedFocusFeature\";\nimport { getTabIndex } from './utils/browser';\nimport { findIndex, last } from './utils/array';\nimport { makeNull } from './utils/generic';\nimport { Constants } from \"./constants/constants\";\nimport { GridCtrl } from \"./gridComp/gridCtrl\";\nimport { NavigationService } from \"./gridBodyComp/navigationService\";\nimport { RowCtrl } from \"./rendering/row/rowCtrl\";\nimport { CtrlsService } from \"./ctrlsService\";\nimport { HeaderCellCtrl } from \"./headerRendering/cells/column/headerCellCtrl\";\nimport { TabToNextHeaderParams, NavigateToNextHeaderParams } from \"./entities/gridOptions\";\nimport { AbstractHeaderCellCtrl } from \"./headerRendering/cells/abstractCell/abstractHeaderCellCtrl\";\n\n@Bean('focusService')\nexport class FocusService extends BeanStub {\n\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('headerNavigationService') private readonly headerNavigationService: HeaderNavigationService;\n    @Autowired('columnApi') private readonly columnApi: ColumnApi;\n    @Autowired('gridApi') private readonly gridApi: GridApi;\n    @Autowired('rowRenderer') private readonly rowRenderer: RowRenderer;\n    @Autowired('rowPositionUtils') private readonly rowPositionUtils: RowPositionUtils;\n    @Optional('rangeService') private readonly rangeService: IRangeService;\n    @Autowired('navigationService') public navigationService: NavigationService;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n\n    public static AG_KEYBOARD_FOCUS: string = 'ag-keyboard-focus';\n\n    private gridCtrl: GridCtrl;\n    private focusedCellPosition: CellPosition | null;\n    private focusedHeaderPosition: HeaderPosition | null;\n\n    private static keyboardModeActive: boolean = false;\n    private static instancesMonitored: Map<Document, GridCtrl[]> = new Map();\n\n    /**\n     * Adds a gridCore to the list of the gridCores monitoring Keyboard Mode\n     * in a specific HTMLDocument.\n     *\n     * @param doc {Document} - The Document containing the gridCore.\n     * @param gridCore {GridComp} - The GridCore to be monitored.\n     */\n    private static addKeyboardModeEvents(doc: Document, controller: GridCtrl): void {\n        const docControllers = FocusService.instancesMonitored.get(doc);\n\n        if (docControllers && docControllers.length > 0) {\n            if (docControllers.indexOf(controller) === -1) {\n                docControllers.push(controller);\n            }\n        } else {\n            FocusService.instancesMonitored.set(doc, [controller]);\n            doc.addEventListener('keydown', FocusService.toggleKeyboardMode);\n            doc.addEventListener('mousedown', FocusService.toggleKeyboardMode);\n        }\n    }\n\n    /**\n     * Removes a gridCore from the list of the gridCores monitoring Keyboard Mode\n     * in a specific HTMLDocument.\n     *\n     * @param doc {Document} - The Document containing the gridCore.\n     * @param gridCore {GridComp} - The GridCore to be removed.\n     */\n    private static removeKeyboardModeEvents(doc: Document, controller: GridCtrl): void {\n        const docControllers = FocusService.instancesMonitored.get(doc);\n\n        let newControllers: GridCtrl[] = [];\n\n        if (docControllers && docControllers.length) {\n            newControllers = [...docControllers].filter(\n                currentGridCore => currentGridCore !== controller\n            );\n            FocusService.instancesMonitored.set(doc, newControllers);\n        }\n\n        if (newControllers.length === 0) {\n            doc.removeEventListener('keydown', FocusService.toggleKeyboardMode);\n            doc.removeEventListener('mousedown', FocusService.toggleKeyboardMode);\n        }\n    }\n\n    /**\n     * This method will be called by `keydown` and `mousedown` events on all Documents monitoring\n     * KeyboardMode. It will then fire a KEYBOARD_FOCUS, MOUSE_FOCUS on each gridCore present in\n     * the Document allowing each gridCore to maintain a state for KeyboardMode.\n     *\n     * @param event {KeyboardEvent | MouseEvent | TouchEvent} - The event triggered.\n     */\n    private static toggleKeyboardMode(event: KeyboardEvent | MouseEvent | TouchEvent): void {\n        const isKeyboardActive = FocusService.keyboardModeActive;\n        const isKeyboardEvent = event.type === 'keydown';\n\n        if (isKeyboardEvent) {\n            // the following keys should not toggle keyboard mode.\n            if (event.ctrlKey || event.metaKey || event.altKey) { return; }\n        }\n\n        if (isKeyboardActive && isKeyboardEvent || !isKeyboardActive && !isKeyboardEvent) { return; }\n\n        FocusService.keyboardModeActive = isKeyboardEvent;\n        const doc = (event.target as HTMLElement).ownerDocument;\n\n        if (!doc) { return; }\n\n        const controllersForDoc = FocusService.instancesMonitored.get(doc);\n\n        if (controllersForDoc) {\n            controllersForDoc.forEach(controller => {\n                controller.dispatchEvent({ type: isKeyboardEvent ? Events.EVENT_KEYBOARD_FOCUS : Events.EVENT_MOUSE_FOCUS });\n            });\n        }\n    }\n\n    @PostConstruct\n    private init(): void {\n        const clearFocusedCellListener = this.clearFocusedCell.bind(this);\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, clearFocusedCellListener);\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverythingChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, clearFocusedCellListener);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, clearFocusedCellListener);\n\n        this.ctrlsService.whenReady(p => {\n            this.gridCtrl = p.gridCtrl;\n            const doc = this.gridOptionsWrapper.getDocument();\n            FocusService.addKeyboardModeEvents(doc, this.gridCtrl);\n            this.addDestroyFunc(() => this.unregisterGridCompController(this.gridCtrl));\n        });\n    }\n\n    public unregisterGridCompController(gridCompController: GridCtrl): void {\n        const doc = this.gridOptionsWrapper.getDocument();\n\n        FocusService.removeKeyboardModeEvents(doc, gridCompController);\n    }\n\n    public onColumnEverythingChanged(): void {\n        // if the columns change, check and see if this column still exists. if it does, then\n        // we can keep the focused cell. if it doesn't, then we need to drop the focused cell.\n        if (!this.focusedCellPosition) { return; }\n\n        const col = this.focusedCellPosition.column;\n        const colFromColumnModel = this.columnModel.getGridColumn(col.getId());\n\n        if (col !== colFromColumnModel) {\n            this.clearFocusedCell();\n        }\n    }\n\n    public isKeyboardMode(): boolean {\n        return FocusService.keyboardModeActive;\n    }\n\n    // we check if the browser is focusing something, and if it is, and\n    // it's the cell we think is focused, then return the cell. so this\n    // methods returns the cell if a) we think it has focus and b) the\n    // browser thinks it has focus. this then returns nothing if we\n    // first focus a cell, then second click outside the grid, as then the\n    // grid cell will still be focused as far as the grid is concerned,\n    // however the browser focus will have moved somewhere else.\n    public getFocusCellToUseAfterRefresh(): CellPosition | null {\n        if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh() || !this.focusedCellPosition) {\n            return null;\n        }\n\n        // we check that the browser is actually focusing on the grid, if it is not, then\n        // we have nothing to worry about. we check for ROW data, as this covers both focused Rows (for Full Width Rows)\n        // and Cells (covers cells as cells live in rows)\n        if (this.isDomDataMissingInHierarchy(document.activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL)) {\n            return null;\n        }\n\n        return this.focusedCellPosition;\n    }\n\n    public getFocusHeaderToUseAfterRefresh(): HeaderPosition | null {\n        if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh() || !this.focusedHeaderPosition) {\n            return null;\n        }\n\n        // we check that the browser is actually focusing on the grid, if it is not, then\n        // we have nothing to worry about\n        if (this.isDomDataMissingInHierarchy(document.activeElement, AbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL)) {\n            return null;\n        }\n\n        return this.focusedHeaderPosition;\n    }\n\n    private isDomDataMissingInHierarchy(eBrowserCell: Node | null, key: string):boolean {\n        let ePointer = eBrowserCell;\n\n        while (ePointer) {\n            const data = this.gridOptionsWrapper.getDomData(ePointer, key);\n\n            if (data) {\n                return false;\n            }\n\n            ePointer = ePointer.parentNode;\n        }\n\n        return true;\n    }\n\n    public clearFocusedCell(): void {\n        this.focusedCellPosition = null;\n        this.onCellFocused(false);\n    }\n\n    public getFocusedCell(): CellPosition | null {\n        return this.focusedCellPosition;\n    }\n\n    public setFocusedCell(rowIndex: number, colKey: string | Column, floating: string | null | undefined, forceBrowserFocus = false): void {\n        const gridColumn = this.columnModel.getGridColumn(colKey);\n\n        // if column doesn't exist, then blank the focused cell and return. this can happen when user sets new columns,\n        // and the focused cell is in a column that no longer exists. after columns change, the grid refreshes and tries\n        // to re-focus the focused cell.\n        if (!gridColumn) {\n            this.focusedCellPosition = null;\n            return;\n        }\n\n        this.focusedCellPosition = gridColumn ? { rowIndex, rowPinned: makeNull(floating), column: gridColumn } : null;\n        this.onCellFocused(forceBrowserFocus);\n    }\n\n    public isCellFocused(cellPosition: CellPosition): boolean {\n        if (this.focusedCellPosition == null) { return false; }\n\n        return this.focusedCellPosition.column === cellPosition.column &&\n            this.isRowFocused(cellPosition.rowIndex, cellPosition.rowPinned);\n    }\n\n    public isRowNodeFocused(rowNode: RowNode): boolean {\n        return this.isRowFocused(rowNode.rowIndex!, rowNode.rowPinned);\n    }\n\n    public isHeaderWrapperFocused(headerCtrl: HeaderCellCtrl): boolean {\n        if (this.focusedHeaderPosition == null) { return false; }\n\n        const column = headerCtrl.getColumnGroupChild();\n        const headerRowIndex = headerCtrl.getRowIndex();\n        const pinned = headerCtrl.getPinned();\n\n        const { column: focusedColumn, headerRowIndex: focusedHeaderRowIndex } = this.focusedHeaderPosition;\n\n        return column === focusedColumn &&\n            headerRowIndex === focusedHeaderRowIndex &&\n            pinned == focusedColumn.getPinned();\n    }\n\n    public clearFocusedHeader(): void {\n        this.focusedHeaderPosition = null;\n    }\n\n    public getFocusedHeader(): HeaderPosition | null {\n        return this.focusedHeaderPosition;\n    }\n\n    public setFocusedHeader(headerRowIndex: number, column: ColumnGroup | Column): void {\n        this.focusedHeaderPosition = { headerRowIndex, column };\n    }\n\n    public focusHeaderPosition(params: {\n        headerPosition: HeaderPosition | null;\n        direction?: 'Before' | 'After' | null;\n        fromTab?: boolean;\n        allowUserOverride?: boolean;\n        event?: KeyboardEvent;\n    }): boolean {\n        const { direction, fromTab, allowUserOverride, event } = params;\n        let { headerPosition } = params;\n\n        if (allowUserOverride) {\n            const { gridOptionsWrapper } = this;\n            const currentPosition = this.getFocusedHeader();\n            const headerRowCount = this.headerNavigationService.getHeaderRowCount();\n\n            if (fromTab) {\n                const userFunc = gridOptionsWrapper.getTabToNextHeaderFunc();\n                if (userFunc) {\n                    const params: TabToNextHeaderParams = {\n                        backwards: direction === 'Before',\n                        previousHeaderPosition: currentPosition,\n                        nextHeaderPosition: headerPosition,\n                        headerRowCount,\n                        api: gridOptionsWrapper.getApi()!,\n                        columnApi: gridOptionsWrapper.getColumnApi()!\n                    };\n                    headerPosition = userFunc(params);\n                }\n            } else {\n                const userFunc = gridOptionsWrapper.getNavigateToNextHeaderFunc();\n                if (userFunc && event) {\n                    const params: NavigateToNextHeaderParams = {\n                        key: event.key,\n                        previousHeaderPosition: currentPosition,\n                        nextHeaderPosition: headerPosition,\n                        headerRowCount,\n                        event,\n                        api: gridOptionsWrapper.getApi()!,\n                        columnApi: gridOptionsWrapper.getColumnApi()!\n                    };\n                    headerPosition = userFunc(params);\n                }\n            }\n        }\n\n        if (!headerPosition) { return false; }\n\n        if (headerPosition.headerRowIndex === -1) {\n            return this.focusGridView(headerPosition.column as Column);\n        }\n\n        this.headerNavigationService.scrollToColumn(headerPosition.column, direction);\n\n        const headerRowContainerCtrl = this.ctrlsService.getHeaderRowContainerCtrl(headerPosition.column.getPinned());\n\n        // this will automatically call the setFocusedHeader method above\n        const focusSuccess = headerRowContainerCtrl.focusHeader(headerPosition.headerRowIndex, headerPosition.column, event);\n\n        return focusSuccess;\n    }\n\n    public isAnyCellFocused(): boolean {\n        return !!this.focusedCellPosition;\n    }\n\n    public isRowFocused(rowIndex: number, floating?: string | null): boolean {\n        if (this.focusedCellPosition == null) { return false; }\n\n        return this.focusedCellPosition.rowIndex === rowIndex && this.focusedCellPosition.rowPinned === makeNull(floating);\n    }\n\n    public findFocusableElements(rootNode: HTMLElement, exclude?: string | null, onlyUnmanaged = false): HTMLElement[] {\n        const focusableString = Constants.FOCUSABLE_SELECTOR;\n        let excludeString = Constants.FOCUSABLE_EXCLUDE;\n\n        if (exclude) {\n            excludeString += ', ' + exclude;\n        }\n\n        if (onlyUnmanaged) {\n            excludeString += ', [tabindex=\"-1\"]';\n        }\n\n        const nodes = Array.prototype.slice.apply(rootNode.querySelectorAll(focusableString)) as HTMLElement[];\n        const excludeNodes = Array.prototype.slice.apply(rootNode.querySelectorAll(excludeString)) as HTMLElement[];\n\n        if (!excludeNodes.length) {\n            return nodes;\n        }\n\n        const diff = (a: HTMLElement[], b: HTMLElement[]) => a.filter(element => b.indexOf(element) === -1);\n        return diff(nodes, excludeNodes);\n    }\n\n    public focusInto(rootNode: HTMLElement, up = false, onlyUnmanaged = false): boolean {\n        const focusableElements = this.findFocusableElements(rootNode, null, onlyUnmanaged);\n        const toFocus = up ? last(focusableElements) : focusableElements[0];\n\n        if (toFocus) {\n            toFocus.focus();\n            return true;\n        }\n\n        return false;\n    }\n\n    public findNextFocusableElement(rootNode: HTMLElement, onlyManaged?: boolean | null, backwards?: boolean): HTMLElement | null {\n        const focusable = this.findFocusableElements(rootNode, onlyManaged ? ':not([tabindex=\"-1\"])' : null);\n        let currentIndex: number;\n\n        if (onlyManaged) {\n            currentIndex = findIndex(focusable, el => el.contains(document.activeElement));\n        } else {\n            currentIndex = focusable.indexOf(document.activeElement as HTMLElement);\n        }\n\n        const nextIndex = currentIndex + (backwards ? -1 : 1);\n\n        if (nextIndex < 0 || nextIndex >= focusable.length) {\n            return null;\n        }\n\n        return focusable[nextIndex];\n    }\n\n    public isFocusUnderManagedComponent(rootNode: HTMLElement): boolean {\n        const managedContainers = rootNode.querySelectorAll(`.${ManagedFocusFeature.FOCUS_MANAGED_CLASS}`);\n\n        if (!managedContainers.length) { return false; }\n\n        for (let i = 0; i < managedContainers.length; i++) {\n            if (managedContainers[i].contains(document.activeElement)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public findTabbableParent(node: HTMLElement | null, limit: number = 5): HTMLElement | null {\n        let counter = 0;\n\n        while (node && getTabIndex(node) === null && ++counter <= limit) {\n            node = node.parentElement;\n        }\n\n        if (getTabIndex(node) === null) { return null; }\n\n        return node;\n    }\n\n    private onCellFocused(forceBrowserFocus: boolean): void {\n        const event: CellFocusedEvent = {\n            type: Events.EVENT_CELL_FOCUSED,\n            forceBrowserFocus: forceBrowserFocus,\n            rowIndex: null,\n            column: null,\n            floating: null,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            rowPinned: null,\n            isFullWidthCell: false\n        };\n\n        if (this.focusedCellPosition) {\n            const rowIndex = event.rowIndex = this.focusedCellPosition.rowIndex;\n            const rowPinned = event.rowPinned = this.focusedCellPosition.rowPinned;\n\n            event.column = this.focusedCellPosition.column;\n\n            const rowCtrl = this.rowRenderer.getRowByPosition({ rowIndex, rowPinned });\n\n            if (rowCtrl) {\n                event.isFullWidthCell = rowCtrl.isFullWidth();\n            }\n        }\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public focusGridView(column?: Column, backwards?: boolean): boolean {\n        const nextRow = backwards\n            ? this.rowPositionUtils.getLastRow()\n            : this.rowPositionUtils.getFirstRow();\n\n        if (!nextRow) { return false; }\n\n        const { rowIndex, rowPinned } = nextRow;\n        const focusedHeader = this.getFocusedHeader();\n\n        if (!column && focusedHeader) {\n            column = focusedHeader.column as Column;\n        }\n\n        if (rowIndex == null || !column) { return false; }\n\n        this.navigationService.ensureCellVisible({ rowIndex, column, rowPinned });\n\n        this.setFocusedCell(rowIndex, column, makeNull(rowPinned), true);\n\n        if (this.rangeService) {\n            const cellPosition = { rowIndex, rowPinned, column };\n            this.rangeService.setRangeToCell(cellPosition);\n        }\n\n        return true;\n    }\n\n    public focusNextGridCoreContainer(backwards: boolean): boolean {\n        if (this.gridCtrl.focusNextInnerContainer(backwards)) {\n            return true;\n        }\n\n        if (!backwards) {\n            this.gridCtrl.forceFocusOutOfContainer();\n        }\n\n        return false;\n    }\n}\n"]}