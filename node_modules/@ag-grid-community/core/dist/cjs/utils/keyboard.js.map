{"version":3,"sources":["../../src/ts/utils/keyboard.ts"],"names":[],"mappings":"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","file":"keyboard.js","sourcesContent":["import { GridOptionsWrapper } from '../gridOptionsWrapper';\nimport { RowNode } from '../entities/rowNode';\nimport { Column } from '../entities/column';\nimport { SuppressHeaderKeyboardEventParams, SuppressKeyboardEventParams } from '../entities/colDef';\nimport { isBrowserEdge, isBrowserIE } from './browser';\nimport { ColumnGroup } from '../entities/columnGroup';\nimport { exists } from './generic';\n\nconst NUMPAD_DEL_NUMLOCK_ON_KEY = 'Del';\nconst NUMPAD_DEL_NUMLOCK_ON_CHARCODE = 46;\n\nexport function isKeyPressed(event: KeyboardEvent, keyToCheck: number) {\n    return (event.which || event.keyCode) === keyToCheck;\n}\n\nexport function isEventFromPrintableCharacter(event: KeyboardEvent): boolean {\n    // no allowed printable chars have alt or ctrl key combinations\n    if (event.altKey || event.ctrlKey || event.metaKey) { return false; }\n\n    // if key is length 1, eg if it is 'a' for the a key, or '2' for the '2' key.\n    // non-printable characters have names, eg 'Enter' or 'Backspace'.\n    const printableCharacter = event.key.length === 1;\n\n    // IE11 & Edge treat the numpad del key differently - with numlock on we get \"Del\" for key,\n    // so this addition checks if its IE11/Edge and handles that specific case the same was as all other browsers\n    const numpadDelWithNumlockOnForEdgeOrIe = isNumpadDelWithNumlockOnForEdgeOrIe(event);\n\n    return printableCharacter || numpadDelWithNumlockOnForEdgeOrIe;\n}\n\n/**\n * Allows user to tell the grid to skip specific keyboard events\n * @param {GridOptionsWrapper} gridOptionsWrapper\n * @param {KeyboardEvent} keyboardEvent\n * @param {RowNode} rowNode\n * @param {Column} column\n * @param {boolean} editing\n * @returns {boolean}\n */\nexport function isUserSuppressingKeyboardEvent(\n    gridOptionsWrapper: GridOptionsWrapper,\n    keyboardEvent: KeyboardEvent,\n    rowNode: RowNode,\n    column: Column,\n    editing: boolean\n): boolean {\n    const gridOptionsFunc = gridOptionsWrapper.getSuppressKeyboardEventFunc();\n    const colDefFunc = column ? column.getColDef().suppressKeyboardEvent : undefined;\n\n    // if no callbacks provided by user, then do nothing\n    if (!gridOptionsFunc && !colDefFunc) { return false; }\n\n    const params: SuppressKeyboardEventParams = {\n        event: keyboardEvent,\n        editing,\n        column,\n        api: gridOptionsWrapper.getApi()!,\n        node: rowNode,\n        data: rowNode.data,\n        colDef: column.getColDef(),\n        context: gridOptionsWrapper.getContext(),\n        columnApi: gridOptionsWrapper.getColumnApi()!\n    };\n\n    // colDef get first preference on suppressing events\n    if (colDefFunc) {\n        const colDefFuncResult = colDefFunc(params);\n        // if colDef func suppressed, then return now, no need to call gridOption func\n        if (colDefFuncResult) { return true; }\n    }\n\n    if (gridOptionsFunc) {\n        // if gridOption func, return the result\n        return gridOptionsFunc(params);\n    }\n\n    // otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions\n    return false;\n}\n\nexport function isUserSuppressingHeaderKeyboardEvent(\n    gridOptionsWrapper: GridOptionsWrapper,\n    keyboardEvent: KeyboardEvent,\n    headerRowIndex: number,\n    column: Column | ColumnGroup\n): boolean {\n    const colDef = column.getDefinition();\n    const colDefFunc = colDef && colDef.suppressHeaderKeyboardEvent;\n\n    if (!exists(colDefFunc)) { return false; }\n\n    const params: SuppressHeaderKeyboardEventParams = {\n        api: gridOptionsWrapper.getApi()!,\n        columnApi: gridOptionsWrapper.getColumnApi()!,\n        context: gridOptionsWrapper.getContext(),\n        colDef: colDef,\n        column,\n        headerRowIndex,\n        event: keyboardEvent\n    };\n\n    return !!colDefFunc(params);\n}\n\nfunction isNumpadDelWithNumlockOnForEdgeOrIe(event: KeyboardEvent) {\n    return (isBrowserEdge() || isBrowserIE()) &&\n        event.key === NUMPAD_DEL_NUMLOCK_ON_KEY &&\n        event.charCode === NUMPAD_DEL_NUMLOCK_ON_CHARCODE;\n}\n"]}