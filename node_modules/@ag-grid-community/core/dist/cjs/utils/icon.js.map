{"version":3,"sources":["../../src/ts/utils/icon.ts"],"names":[],"mappings":"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","file":"icon.js","sourcesContent":["import { GridOptionsWrapper } from '../gridOptionsWrapper';\nimport { Column } from '../entities/column';\nimport { loadTemplate, isNodeOrElement } from './dom';\nimport { setAriaRole } from './aria';\n\n//\n// IMPORTANT NOTE!\n//\n// If you change the list below, copy/paste the new content into the docs page javascript-grid-icons\n//\nexport const iconNameClassMap: { [key: string]: string; } = {\n    // header column group shown when expanded (click to contract)\n    columnGroupOpened: 'expanded',\n    // header column group shown when contracted (click to expand)\n    columnGroupClosed: 'contracted',\n    // tool panel column group contracted (click to expand)\n    columnSelectClosed: 'tree-closed',\n    // tool panel column group expanded (click to contract)\n    columnSelectOpen: 'tree-open',\n    // column tool panel header expand/collapse all button, shown when some children are expanded and\n    //     others are collapsed\n    columnSelectIndeterminate: 'tree-indeterminate',\n    // shown on ghost icon while dragging column to the side of the grid to pin\n    columnMovePin: 'pin',\n    // shown on ghost icon while dragging over part of the page that is not a drop zone\n    columnMoveHide: 'eye-slash',\n    // shown on ghost icon while dragging columns to reorder\n    columnMoveMove: 'arrows',\n    // animating icon shown when dragging a column to the right of the grid causes horizontal scrolling\n    columnMoveLeft: 'left',\n    // animating icon shown when dragging a column to the left of the grid causes horizontal scrolling\n    columnMoveRight: 'right',\n    // shown on ghost icon while dragging over Row Groups drop zone\n    columnMoveGroup: 'group',\n    // shown on ghost icon while dragging over Values drop zone\n    columnMoveValue: 'aggregation',\n    // shown on ghost icon while dragging over pivot drop zone\n    columnMovePivot: 'pivot',\n    // shown on ghost icon while dragging over drop zone that doesn't support it, e.g.\n    //     string column over aggregation drop zone\n    dropNotAllowed: 'not-allowed',\n    // shown on row group when contracted (click to expand)\n    groupContracted: 'tree-closed',\n    // shown on row group when expanded (click to contract)\n    groupExpanded: 'tree-open',\n    // context menu chart item\n    chart: 'chart',\n    // chart window title bar\n    close: 'cross',\n    // X (remove) on column 'pill' after adding it to a drop zone list\n    cancel: 'cancel',\n    // indicates the currently active pin state in the \"Pin column\" sub-menu of the column menu\n    check: 'tick',\n    // \"go to first\" button in pagination controls\n    first: 'first',\n    // \"go to previous\" button in pagination controls\n    previous: 'previous',\n    // \"go to next\" button in pagination controls\n    next: 'next',\n    // \"go to last\" button in pagination controls\n    last: 'last',\n    // shown on top right of chart when chart is linked to range data (click to unlink)\n    linked: 'linked',\n    // shown on top right of chart when chart is not linked to range data (click to link)\n    unlinked: 'unlinked',\n    // \"Choose colour\" button on chart settings tab\n    colorPicker: 'color-picker',\n    // rotating spinner shown by the loading cell renderer\n    groupLoading: 'loading',\n    // button to launch enterprise column menu\n    menu: 'menu',\n    // filter tool panel tab\n    filter: 'filter',\n    // column tool panel tab\n    columns: 'columns',\n    // button in chart regular size window title bar (click to maximise)\n    maximize: 'maximize',\n    // button in chart maximised window title bar (click to make regular size)\n    minimize: 'minimize',\n    // \"Pin column\" item in column header menu\n    menuPin: 'pin',\n    // \"Value aggregation\" column menu item (shown on numeric columns when grouping is active)\"\n    menuValue: 'aggregation',\n    // \"Group by {column-name}\" item in column header menu\n    menuAddRowGroup: 'group',\n    // \"Un-Group by {column-name}\" item in column header menu\n    menuRemoveRowGroup: 'group',\n    // context menu copy item\n    clipboardCopy: 'copy',\n    // context menu paste item\n    clipboardPaste: 'paste',\n    // identifies the pivot drop zone\n    pivotPanel: 'pivot',\n    // \"Row groups\" drop zone in column tool panel\n    rowGroupPanel: 'group',\n    // columns tool panel Values drop zone\n    valuePanel: 'aggregation',\n    // drag handle used to pick up draggable columns\n    columnDrag: 'grip',\n    // drag handle used to pick up draggable rows\n    rowDrag: 'grip',\n    // context menu export item\n    save: 'save',\n    // csv export\n    csvExport: 'csv',\n    // excel export,\n    excelExport: 'excel',\n    // icon on dropdown editors\n    smallDown: 'small-down',\n    // version of small-right used in RTL mode\n    smallLeft: 'small-left',\n    // separater between column 'pills' when you add multiple columns to the header drop zone\n    smallRight: 'small-right',\n    smallUp: 'small-up',\n    // show on column header when column is sorted ascending\n    sortAscending: 'asc',\n    // show on column header when column is sorted descending\n    sortDescending: 'desc',\n    // show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true\n    sortUnSort: 'none'\n};\n\n/**\n * If icon provided, use this (either a string, or a function callback).\n * if not, then use the default icon from the theme\n * @param {string} iconName\n * @param {GridOptionsWrapper} gridOptionsWrapper\n * @param {Column | null} [column]\n * @returns {HTMLElement}\n */\nexport function createIcon(iconName: string, gridOptionsWrapper: GridOptionsWrapper, column: Column | null): HTMLElement {\n    const iconContents = createIconNoSpan(iconName, gridOptionsWrapper, column);\n\n    if (iconContents && iconContents.className.indexOf('ag-icon') > -1) {\n        return iconContents;\n    }\n\n    const eResult = document.createElement('span');\n    eResult.appendChild(iconContents!);\n    return eResult;\n}\n\nexport function createIconNoSpan(iconName: string, gridOptionsWrapper: GridOptionsWrapper, column?: Column | null, forceCreate?: boolean): HTMLElement | undefined {\n    let userProvidedIcon: Function | string | null = null;\n\n    // check col for icon first\n    const icons: any = column && column.getColDef().icons;\n\n    if (icons) {\n        userProvidedIcon = icons[iconName];\n    }\n\n    // if not in col, try grid options\n    if (gridOptionsWrapper && !userProvidedIcon) {\n        const optionsIcons = gridOptionsWrapper.getIcons();\n        if (optionsIcons) {\n            userProvidedIcon = optionsIcons[iconName];\n        }\n    }\n\n    // now if user provided, use it\n    if (userProvidedIcon) {\n        let rendererResult: any;\n\n        if (typeof userProvidedIcon === 'function') {\n            rendererResult = userProvidedIcon();\n        } else if (typeof userProvidedIcon === 'string') {\n            rendererResult = userProvidedIcon;\n        } else {\n            throw new Error('icon from grid options needs to be a string or a function');\n        }\n\n        if (typeof rendererResult === 'string') {\n            return loadTemplate(rendererResult);\n        }\n\n        if (isNodeOrElement(rendererResult)) {\n            return rendererResult as HTMLElement;\n        }\n\n        console.warn('AG Grid: iconRenderer should return back a string or a dom object');\n    } else {\n        const span = document.createElement('span');\n        let cssClass = iconNameClassMap[iconName];\n\n        if (!cssClass) {\n            if (!forceCreate) {\n                console.warn(`AG Grid: Did not find icon ${iconName}`);\n                cssClass = '';\n            } else {\n                cssClass = iconName;\n            }\n        }\n\n        span.setAttribute('class', `ag-icon ag-icon-${cssClass}`);\n        span.setAttribute('unselectable', 'on');\n        setAriaRole(span, 'presentation');\n\n        return span;\n    }\n}\n"]}