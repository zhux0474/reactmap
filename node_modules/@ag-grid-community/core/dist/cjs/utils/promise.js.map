{"version":3,"sources":["../../src/ts/utils/promise.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAkC;AAIlC,IAAY,eAEX;AAFD,WAAY,eAAe;IACvB,mEAAW,CAAA;IAAE,6DAAQ,CAAA;AACzB,CAAC,EAFW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAE1B;AAED;IA2BI,mBAAY,QAAqC;QAAjD,iBAEC;QA5BO,WAAM,GAAoB,eAAe,CAAC,WAAW,CAAC;QACtD,eAAU,GAAa,IAAI,CAAC;QAC5B,YAAO,GAAkC,EAAE,CAAC;QAyBhD,QAAQ,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAlB,CAAkB,EAAE,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAArB,CAAqB,CAAC,CAAC;IAC3E,CAAC;IAxBM,aAAG,GAAV,UAAc,QAA+B;QACzC,OAAO,IAAI,SAAS,CAAC,UAAA,OAAO;YACxB,IAAI,kBAAkB,GAAG,QAAQ,CAAC,MAAM,CAAC;YACzC,IAAM,cAAc,GAAG,IAAI,KAAK,CAAW,kBAAkB,CAAC,CAAC;YAE/D,eAAO,CAAC,QAAQ,EAAE,UAAC,OAAO,EAAE,KAAK;gBAC7B,OAAO,CAAC,IAAI,CAAC,UAAA,KAAK;oBACd,cAAc,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;oBAC9B,kBAAkB,EAAE,CAAC;oBAErB,IAAI,kBAAkB,KAAK,CAAC,EAAE;wBAC1B,OAAO,CAAC,cAAc,CAAC,CAAC;qBAC3B;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,iBAAO,GAAd,UAAkB,KAAsB;QAAtB,sBAAA,EAAA,YAAsB;QACpC,OAAO,IAAI,SAAS,CAAI,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,EAAd,CAAc,CAAC,CAAC;IACvD,CAAC;IAMM,wBAAI,GAAX,UAAe,IAA6B;QAA5C,iBAQC;QAPG,OAAO,IAAI,SAAS,CAAC,UAAA,OAAO;YACxB,IAAI,KAAI,CAAC,MAAM,KAAK,eAAe,CAAC,QAAQ,EAAE;gBAC1C,OAAO,CAAC,IAAI,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC;aAClC;iBAAM;gBACH,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAApB,CAAoB,CAAC,CAAC;aACpD;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,8BAAU,GAAjB,UAAqB,kBAAqB,EAAE,UAAoC;QAC5E,OAAO,IAAI,CAAC,MAAM,KAAK,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC;IACvG,CAAC;IAEO,0BAAM,GAAd,UAAe,KAAe;QAC1B,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,QAAQ,CAAC;QACvC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAExB,eAAO,CAAC,IAAI,CAAC,OAAO,EAAE,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,CAAC,EAAb,CAAa,CAAC,CAAC;IACnD,CAAC;IAEO,4BAAQ,GAAhB,UAAiB,MAAW;QACxB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC;IACL,gBAAC;AAAD,CAvDA,AAuDC,IAAA;AAvDY,8BAAS","file":"promise.js","sourcesContent":["import { forEach } from './array';\n\nexport type ResolveAndRejectCallback<T> = (resolve: (value: T | null) => void, reject: (params: any) => void) => void;\n\nexport enum AgPromiseStatus {\n    IN_PROGRESS, RESOLVED\n}\n\nexport class AgPromise<T> {\n    private status: AgPromiseStatus = AgPromiseStatus.IN_PROGRESS;\n    private resolution: T | null = null;\n    private waiters: ((value: T | null) => void)[] = [];\n\n    static all<T>(promises: AgPromise<T | null>[]): AgPromise<(T | null)[]> {\n        return new AgPromise(resolve => {\n            let remainingToResolve = promises.length;\n            const combinedValues = new Array<T | null>(remainingToResolve);\n\n            forEach(promises, (promise, index) => {\n                promise.then(value => {\n                    combinedValues[index] = value;\n                    remainingToResolve--;\n\n                    if (remainingToResolve === 0) {\n                        resolve(combinedValues);\n                    }\n                });\n            });\n        });\n    }\n\n    static resolve<T>(value: T | null = null): AgPromise<T> {\n        return new AgPromise<T>(resolve => resolve(value));\n    }\n\n    constructor(callback: ResolveAndRejectCallback<T>) {\n        callback(value => this.onDone(value), params => this.onReject(params));\n    }\n\n    public then<V>(func: (result: T | null) => V): AgPromise<V> {\n        return new AgPromise(resolve => {\n            if (this.status === AgPromiseStatus.RESOLVED) {\n                resolve(func(this.resolution));\n            } else {\n                this.waiters.push(value => resolve(func(value)));\n            }\n        });\n    }\n\n    public resolveNow<Z>(ifNotResolvedValue: Z, ifResolved: (current: T | null) => Z): Z {\n        return this.status === AgPromiseStatus.RESOLVED ? ifResolved(this.resolution) : ifNotResolvedValue;\n    }\n\n    private onDone(value: T | null): void {\n        this.status = AgPromiseStatus.RESOLVED;\n        this.resolution = value;\n\n        forEach(this.waiters, waiter => waiter(value));\n    }\n\n    private onReject(params: any): void {\n        console.warn('TBI');\n    }\n}\n"]}