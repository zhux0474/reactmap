{"version":3,"sources":["../../src/ts/utils/general.ts"],"names":[],"mappings":"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","file":"general.js","sourcesContent":["import { ICellRendererComp } from '../rendering/cellRenderers/iCellRenderer';\nimport { AgPromise } from './promise';\nimport { loadTemplate } from './dom';\nimport { camelCaseToHyphen } from './string';\nimport { iterateObject } from './object';\n\n/** @deprecated */\nexport function getNameOfClass(theClass: any) {\n    const funcNameRegex = /function (.{1,})\\(/;\n    const funcAsString = theClass.toString();\n    const results = funcNameRegex.exec(funcAsString);\n\n    return results && results.length > 1 ? results[1] : \"\";\n}\n\nexport function findLineByLeastSquares(values: number[]) {\n    const len = values.length;\n    let maxDecimals = 0;\n\n    if (len <= 1) { return values; }\n\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        const splitExponent = value.toString().split('e-');\n\n        if (splitExponent.length > 1) {\n            maxDecimals = Math.max(maxDecimals, parseInt(splitExponent[1], 10));\n            continue;\n        }\n\n        if (Math.floor(value) === value) { continue; }\n\n        maxDecimals = Math.max(maxDecimals, value.toString().split('.')[1].length);\n    }\n\n    let sum_x = 0;\n    let sum_y = 0;\n    let sum_xy = 0;\n    let sum_xx = 0;\n\n    let y = 0;\n\n    for (let x = 0; x < len; x++) {\n        y = values[x];\n        sum_x += x;\n        sum_y += y;\n        sum_xx += x * x;\n        sum_xy += x * y;\n    }\n\n    const m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);\n    const b = (sum_y / len) - (m * sum_x) / len;\n\n    const result: number[] = [];\n\n    for (let x = 0; x <= len; x++) {\n        result.push(parseFloat((x * m + b).toFixed(maxDecimals)));\n    }\n\n    return result;\n}\n\n/**\n * Converts a CSS object into string\n * @param {Object} stylesToUse an object eg: {color: 'black', top: '25px'}\n * @return {string} A string like \"color: black; top: 25px;\" for html\n */\nexport function cssStyleObjectToMarkup(stylesToUse: any): string {\n    if (!stylesToUse) { return ''; }\n\n    const resParts: string[] = [];\n\n    iterateObject(stylesToUse, (styleKey: string, styleValue: string) => {\n        const styleKeyDashed = camelCaseToHyphen(styleKey);\n        resParts.push(`${styleKeyDashed}: ${styleValue};`);\n    });\n\n    return resParts.join(' ');\n}\n\n/**\n * Displays a message to the browser. this is useful in iPad, where you can't easily see the console.\n * so the javascript code can use this to give feedback. this is NOT intended to be called in production.\n * it is intended the AG Grid developer calls this to troubleshoot, but then takes out the calls before\n * checking in.\n * @param {string} msg\n */\nexport function message(msg: string): void {\n    const eMessage = document.createElement('div');\n    let eBox = document.querySelector('#__ag__message');\n\n    eMessage.innerHTML = msg;\n\n    if (!eBox) {\n        const template = `<div id=\"__ag__message\" style=\"display: inline-block; position: absolute; top: 0px; left: 0px; color: white; background-color: black; z-index: 20; padding: 2px; border: 1px solid darkred; height: 200px; overflow-y: auto;\"></div>`;\n\n        eBox = loadTemplate(template);\n\n        if (document.body) {\n            document.body.appendChild(eBox);\n        }\n    }\n\n    eBox.insertBefore(eMessage, eBox.children[0]);\n}\n\n/**\n * cell renderers are used in a few places. they bind to dom slightly differently to other cell renderes as they\n * can return back strings (instead of html elemnt) in the getGui() method. common code placed here to handle that.\n * @param {AgPromise<ICellRendererComp>} cellRendererPromise\n * @param {HTMLElement} eTarget\n */\nexport function bindCellRendererToHtmlElement(cellRendererPromise: AgPromise<ICellRendererComp>, eTarget: HTMLElement) {\n    cellRendererPromise.then(cellRenderer => {\n        const gui: HTMLElement | string = cellRenderer!.getGui();\n\n        if (gui != null) {\n            if (typeof gui === 'object') {\n                eTarget.appendChild(gui);\n            } else {\n                eTarget.innerHTML = gui;\n            }\n        }\n    });\n}\n"]}