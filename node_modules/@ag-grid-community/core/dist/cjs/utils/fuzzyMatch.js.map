{"version":3,"sources":["../../src/ts/utils/fuzzyMatch.ts"],"names":[],"mappings":"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","file":"fuzzyMatch.js","sourcesContent":["export function fuzzyCheckStrings(\n    inputValues: string[],\n    validValues: string[],\n    allSuggestions: string[]\n): { [p: string]: string[]; } {\n    const fuzzyMatches: { [p: string]: string[]; } = {};\n    const invalidInputs: string[] = inputValues.filter(inputValue =>\n        !validValues.some(\n            (validValue) => validValue === inputValue\n        )\n    );\n\n    if (invalidInputs.length > 0) {\n        invalidInputs.forEach(invalidInput =>\n            fuzzyMatches[invalidInput] = fuzzySuggestions(invalidInput, allSuggestions)\n        );\n    }\n\n    return fuzzyMatches;\n}\n\n/**\n *\n * @param {String} inputValue The value to be compared against a list of strings\n * @param allSuggestions The list of strings to be compared against\n * @param hideIrrelevant By default, fuzzy suggestions will just sort the allSuggestions list, set this to true\n *        to filter out the irrelevant values\n * @param weighted Set this to true, to make letters matched in the order they were typed have priority in the results.\n */\nexport function fuzzySuggestions(\n    inputValue: string,\n    allSuggestions: string[],\n    hideIrrelevant?: boolean,\n    weighted?: boolean\n): string[] {\n    const search = weighted ? string_weighted_distances : string_distances;\n    let thisSuggestions: { value: string, relevance: number; }[] = allSuggestions.map((text) => ({\n        value: text,\n        relevance: search(inputValue.toLowerCase(), text.toLocaleLowerCase())\n    }));\n\n    thisSuggestions.sort((a, b) => b.relevance - a.relevance);\n\n    if (hideIrrelevant) {\n        thisSuggestions = thisSuggestions.filter(suggestion => suggestion.relevance !== 0);\n    }\n\n    return thisSuggestions.map(suggestion => suggestion.value);\n}\n\n/**\n * Algorithm to do fuzzy search\n * from https://stackoverflow.com/questions/23305000/javascript-fuzzy-search-that-makes-sense\n * @param {string} from\n * @return {[]}\n */\nexport function get_bigrams(from: string) {\n    const s = from.toLowerCase();\n    const v = new Array(s.length - 1);\n    let i;\n    let j;\n    let ref;\n\n    for (i = j = 0, ref = v.length; j <= ref; i = j += 1) {\n        v[i] = s.slice(i, i + 2);\n\n    }\n\n    return v;\n}\n\nexport function string_distances(str1: string, str2: string): number {\n    if (str1.length === 0 && str2.length === 0) { return 0; }\n\n    const pairs1 = get_bigrams(str1);\n    const pairs2 = get_bigrams(str2);\n    const union = pairs1.length + pairs2.length;\n    let hit_count = 0;\n    let j;\n    let len;\n\n    for (j = 0, len = pairs1.length; j < len; j++) {\n        const x = pairs1[j];\n        let k;\n        let len1;\n\n        for (k = 0, len1 = pairs2.length; k < len1; k++) {\n            const y = pairs2[k];\n            if (x === y) {\n                hit_count++;\n            }\n        }\n    }\n\n    return hit_count > 0 ? (2 * hit_count) / union : 0;\n}\n\nexport function string_weighted_distances(str1: string, str2: string): number {\n    const a = str1.replace(/\\s/g, '');\n    const b = str2.replace(/\\s/g, '');\n\n    let weight = 0;\n    let lastIndex = 0;\n\n    for (let i = 0; i < a.length; i++) {\n        const idx = b.indexOf(a[i], lastIndex);\n        if (idx === -1) { continue; }\n\n        lastIndex = idx;\n        weight += (100 - (lastIndex * 100 / 10000) * 100);\n    }\n\n    return weight;\n}"]}