{"version":3,"sources":["../../src/ts/utils/aria.ts"],"names":[],"mappings":"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","file":"aria.js","sourcesContent":["import { Column } from '../entities/column';\n\nexport type ColumnSortState = 'ascending' | 'descending' | 'none';\n\n// ARIA HELPER FUNCTIONS\nfunction setAriaAttribute(element: HTMLElement, attribute: string, value: number | boolean | string): void {\n    element.setAttribute(ariaAttributeName(attribute), value.toString());\n}\n\nfunction removeAriaAttribute(element: HTMLElement, attribute: string): void {\n    element.removeAttribute(ariaAttributeName(attribute));\n}\n\nfunction ariaAttributeName(attribute: string) {\n    return `aria-${attribute}`;\n}\n\nexport function setAriaRole(element: HTMLElement, role?: string | null) {\n    if (role) {\n        element.setAttribute('role', role);\n    } else {\n        element.removeAttribute('role');\n    }\n}\n\nexport function getAriaSortState(column: Column): ColumnSortState {\n    let sort: ColumnSortState;\n\n    if (column.isSortAscending()) {\n        sort = 'ascending';\n    } else if (column.isSortDescending()) {\n        sort = 'descending';\n    } else {\n        sort = 'none';\n    }\n\n    return sort;\n}\n\n// ARIA ATTRIBUTE GETTERS\nexport function getAriaLevel(element: HTMLElement): number {\n    return parseInt(element.getAttribute('aria-level')!, 10);\n}\n\nexport function getAriaPosInSet(element: HTMLElement): number {\n    return parseInt(element.getAttribute('aria-posinset')!, 10);\n}\n\nexport function getAriaDescribedBy(element: HTMLElement): string {\n    return element.getAttribute('aria-describedby') || '';\n}\n\n// ARIA ATTRIBUTE SETTERS\nexport function setAriaLabel(element: HTMLElement, label: string): void {\n    const key = 'label';\n    if (label) {\n        setAriaAttribute(element, key, label);\n    } else {\n        removeAriaAttribute(element, key);\n    }\n}\n\nexport function setAriaLabelledBy(element: HTMLElement, labelledBy: string): void {\n    const key = 'labelledby';\n    if (labelledBy) {\n        setAriaAttribute(element, key, labelledBy);\n    } else {\n        removeAriaAttribute(element, key);\n    }\n}\n\nexport function setAriaDescribedBy(element: HTMLElement, describedby: string | undefined): void {\n    const key = 'describedby';\n    if (describedby) {\n        setAriaAttribute(element, key, describedby);\n    } else {\n        removeAriaAttribute(element, key);\n    }\n}\n\nexport function setAriaLevel(element: HTMLElement, level: number): void {\n    setAriaAttribute(element, 'level', level);\n}\n\nexport function setAriaDisabled(element: HTMLElement, disabled: boolean): void {\n    setAriaAttribute(element, 'disabled', disabled);\n}\n\nexport function setAriaExpanded(element: HTMLElement, expanded: boolean): void {\n    setAriaAttribute(element, 'expanded', expanded);\n}\n\nexport function removeAriaExpanded(element: HTMLElement): void {\n    removeAriaAttribute(element, 'expanded');\n}\n\nexport function setAriaSetSize(element: HTMLElement, setsize: number): void {\n    setAriaAttribute(element, 'setsize', setsize);\n}\n\nexport function setAriaPosInSet(element: HTMLElement, position: number): void {\n    setAriaAttribute(element, 'posinset', position);\n}\n\nexport function setAriaMultiSelectable(element: HTMLElement, multiSelectable: boolean): void {\n    setAriaAttribute(element, 'multiselectable', multiSelectable);\n}\n\nexport function setAriaRowCount(element: HTMLElement, rowCount: number): void {\n    setAriaAttribute(element, 'rowcount', rowCount);\n}\n\nexport function setAriaRowIndex(element: HTMLElement, rowIndex: number): void {\n    setAriaAttribute(element, 'rowindex', rowIndex);\n}\n\nexport function setAriaColCount(element: HTMLElement, colCount: number): void {\n    setAriaAttribute(element, 'colcount', colCount);\n}\n\nexport function setAriaColIndex(element: HTMLElement, colIndex: number): void {\n    setAriaAttribute(element, 'colindex', colIndex);\n}\n\nexport function setAriaColSpan(element: HTMLElement, colSpan: number): void {\n    setAriaAttribute(element, 'colspan', colSpan);\n}\n\nexport function setAriaSort(element: HTMLElement, sort: ColumnSortState): void {\n    setAriaAttribute(element, 'sort', sort);\n}\n\nexport function removeAriaSort(element: HTMLElement): void {\n    removeAriaAttribute(element, 'sort');\n}\n\nexport function setAriaSelected(element: HTMLElement, selected: boolean | undefined): void {\n    const attributeName = 'selected';\n\n    if (selected) {\n        setAriaAttribute(element, attributeName, selected);\n    } else {\n        removeAriaAttribute(element, attributeName);\n    }\n}\n\nexport function setAriaChecked(element: HTMLElement, checked?: boolean) {\n    setAriaAttribute(element, 'checked', checked === undefined ? 'mixed' : checked);\n}"]}