{"version":3,"sources":["../../src/ts/utils/mouse.ts"],"names":[],"mappings":"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","file":"mouse.js","sourcesContent":["/**\n * @deprecated\n * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is\n * complicated, thus this doc is long and (hopefully) detailed enough to answer\n * your questions.\n *\n * If you need to react to the mouse wheel in a predictable way, this code is\n * like your bestest friend. * hugs *\n *\n * As of today, there are 4 DOM event types you can listen to:\n *\n *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)\n *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari\n *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!\n *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003\n *\n * So what to do?  The is the best:\n *\n *   normalizeWheel.getEventType();\n *\n * In your event callback, use this code to get sane interpretation of the\n * deltas.  This code will return an object with properties:\n *\n *   spinX   -- normalized spin speed (use for zoom) - x plane\n *   spinY   -- \" - y plane\n *   pixelX  -- normalized distance (to pixels) - x plane\n *   pixelY  -- \" - y plane\n *\n * Wheel values are provided by the browser assuming you are using the wheel to\n * scroll a web page by a number of lines or pixels (or pages).  Values can vary\n * significantly on different platforms and browsers, forgetting that you can\n * scroll at different speeds.  Some devices (like trackpads) emit more events\n * at smaller increments with fine granularity, and some emit massive jumps with\n * linear speed or acceleration.\n *\n * This code does its best to normalize the deltas for you:\n *\n *   - spin is trying to normalize how far the wheel was spun (or trackpad\n *     dragged).  This is super useful for zoom support where you want to\n *     throw away the chunky scroll steps on the PC and make those equal to\n *     the slow and smooth tiny steps on the Mac. Key data: This code tries to\n *     resolve a single slow step on a wheel to 1.\n *\n *   - pixel is normalizing the desired scroll delta in pixel units.  You'll\n *     get the crazy differences between browsers, but at least it'll be in\n *     pixels!\n *\n *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This\n *     should translate to positive value zooming IN, negative zooming OUT.\n *     This matches the newer 'wheel' event.\n *\n * Why are there spinX, spinY (or pixels)?\n *\n *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn\n *     with a mouse.  It results in side-scrolling in the browser by default.\n *\n *   - spinY is what you expect -- it's the classic axis of a mouse wheel.\n *\n *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and\n *     probably is by browsers in conjunction with fancy 3D controllers .. but\n *     you know.\n *\n * Implementation info:\n *\n * Examples of 'wheel' event if you scroll slowly (down) by one step with an\n * average mouse:\n *\n *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)\n *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)\n *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)\n *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)\n *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)\n *\n * On the trackpad:\n *\n *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)\n *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)\n *\n * On other/older browsers.. it's more complicated as there can be multiple and\n * also missing delta values.\n *\n * The 'wheel' event is more standard:\n *\n * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents\n *\n * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and\n * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain\n * backward compatibility with older events.  Those other values help us\n * better normalize spin speed.  Example of what the browsers provide:\n *\n *                          | event.wheelDelta | event.detail\n *        ------------------+------------------+--------------\n *          Safari v5/OS X  |       -120       |       0\n *          Safari v5/Win7  |       -120       |       0\n *         Chrome v17/OS X  |       -120       |       0\n *         Chrome v17/Win7  |       -120       |       0\n *                IE9/Win7  |       -120       |   undefined\n *         Firefox v4/OS X  |     undefined    |       1\n *         Firefox v4/Win7  |     undefined    |       3\n *\n * from: https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js\n * @param {any} event\n * @return {any}\n */\nexport function normalizeWheel(event: any): any {\n    const PIXEL_STEP = 10;\n    const LINE_HEIGHT = 40;\n    const PAGE_HEIGHT = 800;\n\n    // spinX, spinY\n    let sX = 0;\n    let sY = 0;\n\n    // pixelX, pixelY\n    let pX = 0;\n    let pY = 0;\n\n    // Legacy\n    if ('detail' in event) {\n        sY = event.detail;\n    }\n\n    if ('wheelDelta' in event) {\n        sY = -event.wheelDelta / 120;\n    }\n\n    if ('wheelDeltaY' in event) {\n        sY = -event.wheelDeltaY / 120;\n    }\n\n    if ('wheelDeltaX' in event) {\n        sX = -event.wheelDeltaX / 120;\n    }\n\n    // side scrolling on FF with DOMMouseScroll\n    if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {\n        sX = sY;\n        sY = 0;\n    }\n\n    pX = sX * PIXEL_STEP;\n    pY = sY * PIXEL_STEP;\n\n    if ('deltaY' in event) {\n        pY = event.deltaY;\n    }\n\n    if ('deltaX' in event) {\n        pX = event.deltaX;\n    }\n\n    if ((pX || pY) && event.deltaMode) {\n        if (event.deltaMode == 1) {          // delta in LINE units\n            pX *= LINE_HEIGHT;\n            pY *= LINE_HEIGHT;\n        } else {                             // delta in PAGE units\n            pX *= PAGE_HEIGHT;\n            pY *= PAGE_HEIGHT;\n        }\n    }\n\n    // Fall-back if spin cannot be determined\n    if (pX && !sX) {\n        sX = (pX < 1) ? -1 : 1;\n    }\n    if (pY && !sY) {\n        sY = (pY < 1) ? -1 : 1;\n    }\n\n    return {\n        spinX: sX,\n        spinY: sY,\n        pixelX: pX,\n        pixelY: pY\n    };\n}\n\n/**\n * @deprecated\n * Checks if event was issued by a left click\n * from https://stackoverflow.com/questions/3944122/detect-left-mouse-button-press\n * @param {MouseEvent} mouseEvent\n * @returns {boolean}\n */\nexport function isLeftClick(mouseEvent: MouseEvent): boolean {\n    if ('buttons' in mouseEvent) { return mouseEvent.buttons == 1; }\n\n    const button = (mouseEvent as any).which || (mouseEvent as any).button;\n\n    return button == 1;\n}\n\n/**\n * `True` if the event is close to the original event by X pixels either vertically or horizontally.\n * we only start dragging after X pixels so this allows us to know if we should start dragging yet.\n * @param {MouseEvent | TouchEvent} e1\n * @param {MouseEvent | TouchEvent} e2\n * @param {number} pixelCount\n * @returns {boolean}\n */\nexport function areEventsNear(e1: MouseEvent | Touch, e2: MouseEvent | Touch, pixelCount: number): boolean {\n    // by default, we wait 4 pixels before starting the drag\n    if (pixelCount === 0) { return false; }\n\n    const diffX = Math.abs(e1.clientX - e2.clientX);\n    const diffY = Math.abs(e1.clientY - e2.clientY);\n\n    return Math.max(diffX, diffY) <= pixelCount;\n}\n"]}