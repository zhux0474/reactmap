{"version":3,"sources":["../../src/ts/utils/event.ts"],"names":[],"mappings":";;;;;;;;AAEA,iCAAmC;AAEnC,IAAM,wBAAwB,GAAG,4BAA4B,CAAC;AAC9D,IAAM,cAAc,GAAG,CAAC,YAAY,EAAE,UAAU,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;AAC9E,IAAM,QAAQ,GAAgC,EAAE,CAAC;AAEjD;;;;;;;;GAQG;AACH,SAAgB,wBAAwB,CAAC,KAAY;IAChD,KAAa,CAAC,wBAAwB,CAAC,GAAG,IAAI,CAAC;AACpD,CAAC;AAFD,4DAEC;AAED,SAAgB,0BAA0B,CAAC,KAAY;IACnD,OAAQ,KAAa,CAAC,wBAAwB,CAAC,KAAK,IAAI,CAAC;AAC7D,CAAC;AAFD,gEAEC;AAEY,QAAA,gBAAgB,GAAG,CAAC;IAC7B,IAAM,IAAI,GAAG;QACT,MAAM,EAAE,OAAO;QACf,MAAM,EAAE,OAAO;QACf,MAAM,EAAE,MAAM;QACd,KAAK,EAAE,MAAM;QACb,KAAK,EAAE,KAAK;QACZ,IAAI,EAAE,KAAK;QACX,KAAK,EAAE,KAAK;KACR,CAAC;IAET,IAAM,YAAY,GAAG,UAAC,SAAc;QAChC,IAAI,OAAO,QAAQ,CAAC,SAAS,CAAC,KAAK,SAAS,EAAE;YAC1C,OAAO,QAAQ,CAAC,SAAS,CAAC,CAAC;SAC9B;QAED,IAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,CAAC;QAC5D,SAAS,GAAG,IAAI,GAAG,SAAS,CAAC;QAE7B,IAAI,WAAW,GAAG,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC;QAEpC,IAAI,CAAC,WAAW,EAAE;YACd,EAAE,CAAC,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;YACtC,WAAW,GAAG,OAAO,EAAE,CAAC,SAAS,CAAC,IAAI,UAAU,CAAC;SACpD;QAED,OAAO,QAAQ,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;IAC7C,CAAC,CAAC;IAEF,OAAO,YAAY,CAAC;AACxB,CAAC,CAAC,EAAE,CAAC;AAEL,SAAgB,eAAe,CAAI,kBAAsC,EAAE,KAAY,EAAE,IAAY;IACjG,IAAI,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IAErC,OAAO,aAAa,EAAE;QAClB,IAAM,YAAY,GAAG,kBAAkB,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QAExE,IAAI,YAAY,EAAE;YACd,OAAO,YAAiB,CAAC;SAC5B;QAED,aAAa,GAAG,aAAa,CAAC,aAAc,CAAC;KAChD;IAED,OAAO,IAAI,CAAC;AAChB,CAAC;AAdD,0CAcC;AAED;;;;;GAKG;AACH,SAAgB,iBAAiB,CAAC,OAAoB,EAAE,QAAuB;IAC3E,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC9C,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC5C,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC5C,8EAA8E;IAC9E,+BAA+B;IAC/B,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC9C,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAChD,CAAC;AARD,8CAQC;AAED;;;;;GAKG;AACH,SAAgB,SAAS,CAAC,KAAY;IAClC,IAAM,WAAW,GAAG,KAAY,CAAC;IAEjC,OAAO,WAAW,CAAC,MAAM,IAAI,WAAW,CAAC,UAAU,CAAC;AACxD,CAAC;AAJD,8BAIC;AAED,SAAgB,oBAAoB,CAAC,OAAoB,EAAE,KAAY;IACnE,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE;QACpB,OAAO,KAAK,CAAC;KAChB;IAED,OAAO,YAAY,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACrD,CAAC;AAND,oDAMC;AAED,SAAgB,eAAe,CAAC,KAAY;IACxC,IAAM,GAAG,GAAkB,EAAE,CAAC;IAC9B,IAAI,OAAO,GAAQ,SAAS,CAAC,KAAK,CAAC,CAAC;IAEpC,OAAO,OAAO,EAAE;QACZ,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAClB,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC;KACnC;IAED,OAAO,GAAG,CAAC;AACf,CAAC;AAVD,0CAUC;AAED;;;;;;GAMG;AACH,SAAgB,kBAAkB,CAAC,KAAY;IAC1C,KAAa,CAAC,iBAAiB,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;AAC3D,CAAC;AAFD,gDAEC;AAED;;;;;;GAMG;AACH,SAAgB,YAAY,CAAC,KAAY;IACrC,IAAM,WAAW,GAAG,KAAY,CAAC;IAEjC,IAAI,WAAW,CAAC,QAAQ,EAAE;QACtB,wBAAwB;QACxB,OAAO,WAAW,CAAC,QAAQ,EAAE,CAAC;KACjC;IAED,IAAI,WAAW,CAAC,IAAI,EAAE;QAClB,uBAAuB;QACvB,OAAO,WAAW,CAAC,IAAI,CAAC;KAC3B;IAED,IAAI,WAAW,CAAC,YAAY,EAAE;QAC1B,+BAA+B;QAC/B,OAAO,WAAW,CAAC,YAAY,EAAE,CAAC;KACrC;IAED,IAAI,WAAW,CAAC,iBAAiB,EAAE;QAC/B,+BAA+B;QAC/B,OAAO,WAAW,CAAC,iBAAiB,CAAC;KACxC;IAED,4CAA4C;IAC5C,+BAA+B;IAC/B,OAAO,eAAe,CAAC,KAAK,CAAC,CAAC;AAClC,CAAC;AA1BD,oCA0BC;AAED,SAAgB,2BAA2B,CACvC,kBAAuC,EACvC,QAAqB,EACrB,KAAa,EAAE,QAA+B;IAE9C,IAAM,SAAS,GAAG,gBAAQ,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAClD,IAAM,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAExD,uFAAuF;IACvF,oDAAoD;IACpD,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,gBAAgB,EAAE;QAC3D,kBAAkB,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;KAC3E;AACL,CAAC;AAbD,kEAaC","file":"event.js","sourcesContent":["import { GridOptionsWrapper } from '../gridOptionsWrapper';\nimport { IFrameworkOverrides } from '../interfaces/iFrameworkOverrides';\nimport { includes } from './array';\n\nconst AG_GRID_STOP_PROPAGATION = '__ag_Grid_Stop_Propagation';\nconst PASSIVE_EVENTS = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];\nconst supports: { [key: string]: boolean; } = {};\n\n/**\n * a user once raised an issue - they said that when you opened a popup (eg context menu)\n * and then clicked on a selection checkbox, the popup wasn't closed. this is because the\n * popup listens for clicks on the body, however ag-grid WAS stopping propagation on the\n * checkbox clicks (so the rows didn't pick them up as row selection selection clicks).\n * to get around this, we have a pattern to stop propagation for the purposes of AG Grid,\n * but we still let the event pass back to the body.\n * @param {Event} event\n */\nexport function stopPropagationForAgGrid(event: Event): void {\n    (event as any)[AG_GRID_STOP_PROPAGATION] = true;\n}\n\nexport function isStopPropagationForAgGrid(event: Event): boolean {\n    return (event as any)[AG_GRID_STOP_PROPAGATION] === true;\n}\n\nexport const isEventSupported = (() => {\n    const tags = {\n        select: 'input',\n        change: 'input',\n        submit: 'form',\n        reset: 'form',\n        error: 'img',\n        load: 'img',\n        abort: 'img'\n    } as any;\n\n    const eventChecker = (eventName: any) => {\n        if (typeof supports[eventName] === 'boolean') {\n            return supports[eventName];\n        }\n\n        const el = document.createElement(tags[eventName] || 'div');\n        eventName = 'on' + eventName;\n\n        let isSupported = (eventName in el);\n\n        if (!isSupported) {\n            el.setAttribute(eventName, 'return;');\n            isSupported = typeof el[eventName] == 'function';\n        }\n\n        return supports[eventName] = isSupported;\n    };\n\n    return eventChecker;\n})();\n\nexport function getCtrlForEvent<T>(gridOptionsWrapper: GridOptionsWrapper, event: Event, type: string): T | null {\n    let sourceElement = getTarget(event);\n\n    while (sourceElement) {\n        const renderedComp = gridOptionsWrapper.getDomData(sourceElement, type);\n\n        if (renderedComp) {\n            return renderedComp as T;\n        }\n\n        sourceElement = sourceElement.parentElement!;\n    }\n\n    return null;\n}\n\n/**\n * @deprecated\n * Adds all type of change listeners to an element, intended to be a text field\n * @param {HTMLElement} element\n * @param {EventListener} listener\n */\nexport function addChangeListener(element: HTMLElement, listener: EventListener) {\n    element.addEventListener('changed', listener);\n    element.addEventListener('paste', listener);\n    element.addEventListener('input', listener);\n    // IE doesn't fire changed for special keys (eg delete, backspace), so need to\n    // listen for this further ones\n    element.addEventListener('keydown', listener);\n    element.addEventListener('keyup', listener);\n}\n\n/**\n * srcElement is only available in IE. In all other browsers it is target\n * http://stackoverflow.com/questions/5301643/how-can-i-make-event-srcelement-work-in-firefox-and-what-does-it-mean\n * @param {Event} event\n * @returns {Element}\n */\nexport function getTarget(event: Event): Element {\n    const eventNoType = event as any;\n\n    return eventNoType.target || eventNoType.srcElement;\n}\n\nexport function isElementInEventPath(element: HTMLElement, event: Event): boolean {\n    if (!event || !element) {\n        return false;\n    }\n\n    return getEventPath(event).indexOf(element) >= 0;\n}\n\nexport function createEventPath(event: Event): EventTarget[] {\n    const res: EventTarget[] = [];\n    let pointer: any = getTarget(event);\n\n    while (pointer) {\n        res.push(pointer);\n        pointer = pointer.parentElement;\n    }\n\n    return res;\n}\n\n/**\n * firefox doesn't have event.path set, or any alternative to it, so we hack\n * it in. this is needed as it's to late to work out the path when the item is\n * removed from the dom. used by MouseEventService, where it works out if a click\n * was from the current grid, or a detail grid (master / detail).\n * @param {Event} event\n */\nexport function addAgGridEventPath(event: Event): void {\n    (event as any).__agGridEventPath = getEventPath(event);\n}\n\n/**\n * Gets the path for an Event.\n * https://stackoverflow.com/questions/39245488/event-path-undefined-with-firefox-and-vue-js\n * https://developer.mozilla.org/en-US/docs/Web/API/Event\n * @param {Event} event\n * @returns {EventTarget[]}\n */\nexport function getEventPath(event: Event): EventTarget[] {\n    const eventNoType = event as any;\n\n    if (eventNoType.deepPath) {\n        // IE supports deep path\n        return eventNoType.deepPath();\n    }\n\n    if (eventNoType.path) {\n        // Chrome supports path\n        return eventNoType.path;\n    }\n\n    if (eventNoType.composedPath) {\n        // Firefox supports composePath\n        return eventNoType.composedPath();\n    }\n\n    if (eventNoType.__agGridEventPath) {\n        // Firefox supports composePath\n        return eventNoType.__agGridEventPath;\n    }\n\n    // and finally, if none of the above worked,\n    // we create the path ourselves\n    return createEventPath(event);\n}\n\nexport function addSafePassiveEventListener(\n    frameworkOverrides: IFrameworkOverrides,\n    eElement: HTMLElement,\n    event: string, listener: (event?: any) => void\n) {\n    const isPassive = includes(PASSIVE_EVENTS, event);\n    const options = isPassive ? {passive: true} : undefined;\n\n    // this check is here for certain scenarios where I believe the user must be destroying\n    // the grid somehow but continuing for it to be used\n    if (frameworkOverrides && frameworkOverrides.addEventListener) {\n        frameworkOverrides.addEventListener(eElement, event, listener, options);\n    }\n}\n"]}