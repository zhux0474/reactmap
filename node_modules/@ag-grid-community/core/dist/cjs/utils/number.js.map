{"version":3,"sources":["../../src/ts/utils/number.ts"],"names":[],"mappings":";;;;;;;;AAAA,mCAAoC;AAEpC,SAAgB,kBAAkB,CAAC,KAAa,EAAE,eAAuB;IACrE,OAAO,iBAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;AAC5D,CAAC;AAFD,gDAEC;AAED,SAAgB,oBAAoB,CAAC,KAAa,EAAE,IAAY;IAC5D,IAAM,MAAM,GAAa,EAAE,CAAC;IAE5B,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,EAAE;QAChC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KAClB;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AARD,oDAQC;AAED;;;;;GAKG;AACH,SAAgB,SAAS,CAAC,KAAU;IAChC,OAAO,KAAK,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;AACxE,CAAC;AAFD,8BAEC;AAED,SAAgB,iBAAiB;IAC7B,aAAa;IACb,OAAO,MAAM,CAAC,gBAAgB,IAAI,gBAAgB,CAAC;AACvD,CAAC;AAHD,8CAGC;AAED,SAAgB,WAAW,CAAC,KAAU;IAClC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;KAC/B;IAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KAC5B;IAED,OAAO,IAAI,CAAC;AAChB,CAAC;AAVD,kCAUC;AAED,SAAgB,QAAQ,CAAC,MAAc,EAAE,KAAa;IAClD,IAAI,GAAG,GAAG,EAAE,CAAC;IAEb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;QAC5B,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;QAC1C,MAAM,MAAM,CAAC,CAAC;KACjB;IAED,OAAO,GAAG,CAAC;AACf,CAAC;AATD,4BASC;AAED,SAAgB,qCAAqC,CAAC,KAAa;IAC/D,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAAE,OAAO,EAAE,CAAC;KAAE;IAE7C,OAAO,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAC7D,CAAC;AAJD,sFAIC;AAED;;;;;;GAMG;AACH,SAAgB,kBAAkB,CAAC,KAAa;IAC5C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAAE,OAAO,EAAE,CAAC;KAAE;IAE7C,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;AACtE,CAAC;AAJD,gDAIC;AAED,SAAgB,GAAG,CAAC,MAAuB;IACvC,OAAO,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,KAAK,IAAK,OAAA,KAAK,GAAG,KAAK,EAAb,CAAa,EAAE,CAAC,CAAC,CAAC;AACrF,CAAC;AAFD,kBAEC","file":"number.js","sourcesContent":["import { padStart } from \"./string\";\n\nexport function padStartWidthZeros(value: number, totalStringSize: number): string {\n    return padStart(value.toString(), totalStringSize, '0');\n}\n\nexport function createArrayOfNumbers(first: number, last: number): number[] {\n    const result: number[] = [];\n\n    for (let i = first; i <= last; i++) {\n        result.push(i);\n    }\n\n    return result;\n}\n\n/**\n * Check if a value is numeric\n * from http://stackoverflow.com/questions/9716468/is-there-any-function-like-isnumeric-in-javascript-to-validate-numbers\n * @param {any} value\n * @return {boolean}\n */\nexport function isNumeric(value: any): boolean {\n    return value !== '' && !isNaN(parseFloat(value)) && isFinite(value);\n}\n\nexport function getMaxSafeInteger(): number {\n    // @ts-ignore\n    return Number.MAX_SAFE_INTEGER || 9007199254740991;\n}\n\nexport function cleanNumber(value: any): number | null {\n    if (typeof value === 'string') {\n        value = parseInt(value, 10);\n    }\n\n    if (typeof value === 'number') {\n        return Math.floor(value);\n    }\n\n    return null;\n}\n\nexport function decToHex(number: number, bytes: number): string {\n    let hex = '';\n\n    for (let i = 0; i < bytes; i++) {\n        hex += String.fromCharCode(number & 0xff);\n        number >>>= 8;\n    }\n\n    return hex;\n}\n\nexport function formatNumberTwoDecimalPlacesAndCommas(value: number): string {\n    if (typeof value !== 'number') { return ''; }\n\n    return formatNumberCommas(Math.round(value * 100) / 100);\n}\n\n/**\n * the native method number.toLocaleString(undefined, {minimumFractionDigits: 0})\n * puts in decimal places in IE, so we use this method instead\n * from: http://blog.tompawlak.org/number-currency-formatting-javascript\n * @param {number} value\n * @returns {string}\n */\nexport function formatNumberCommas(value: number): string {\n    if (typeof value !== 'number') { return ''; }\n\n    return value.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n}\n\nexport function sum(values: number[] | null) {\n    return values == null ? null : values.reduce((total, value) => total + value, 0);\n}\n"]}